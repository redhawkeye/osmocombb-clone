   1              		.file	"init.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.board_init,"ax",%progbits
  12              		.align	2
  13              		.global	board_init
  15              	board_init:
  16              	.LFB41:
  17              		.file 1 "board/se_j100/init.c"
   1:board/se_j100/init.c **** /* Initialization for the Sony Ericsson J100 */
   2:board/se_j100/init.c **** 
   3:board/se_j100/init.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:board/se_j100/init.c ****  * (C) 2010-11 by Steve Markgraf <steve@steve-m.de>
   5:board/se_j100/init.c ****  *
   6:board/se_j100/init.c ****  * All Rights Reserved
   7:board/se_j100/init.c ****  *
   8:board/se_j100/init.c ****  * This program is free software; you can redistribute it and/or modify
   9:board/se_j100/init.c ****  * it under the terms of the GNU General Public License as published by
  10:board/se_j100/init.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:board/se_j100/init.c ****  * (at your option) any later version.
  12:board/se_j100/init.c ****  *
  13:board/se_j100/init.c ****  * This program is distributed in the hope that it will be useful,
  14:board/se_j100/init.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:board/se_j100/init.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:board/se_j100/init.c ****  * GNU General Public License for more details.
  17:board/se_j100/init.c ****  *
  18:board/se_j100/init.c ****  * You should have received a copy of the GNU General Public License along
  19:board/se_j100/init.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:board/se_j100/init.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:board/se_j100/init.c ****  *
  22:board/se_j100/init.c ****  */
  23:board/se_j100/init.c **** 
  24:board/se_j100/init.c **** #include <stdint.h>
  25:board/se_j100/init.c **** #include <stdio.h>
  26:board/se_j100/init.c **** 
  27:board/se_j100/init.c **** #include <debug.h>
  28:board/se_j100/init.c **** #include <ctors.h>
  29:board/se_j100/init.c **** #include <memory.h>
  30:board/se_j100/init.c **** #include <board.h>
  31:board/se_j100/init.c **** #include <keypad.h>
  32:board/se_j100/init.c **** #include <console.h>
  33:board/se_j100/init.c **** #include <flash/cfi_flash.h>
  34:board/se_j100/init.c **** 
  35:board/se_j100/init.c **** #include <calypso/irq.h>
  36:board/se_j100/init.c **** #include <calypso/clock.h>
  37:board/se_j100/init.c **** #include <calypso/dma.h>
  38:board/se_j100/init.c **** #include <calypso/rtc.h>
  39:board/se_j100/init.c **** #include <calypso/timer.h>
  40:board/se_j100/init.c **** #include <uart.h>
  41:board/se_j100/init.c **** #include <calypso/backlight.h>
  42:board/se_j100/init.c **** 
  43:board/se_j100/init.c **** #include <comm/sercomm.h>
  44:board/se_j100/init.c **** 
  45:board/se_j100/init.c **** #include <abb/twl3025.h>
  46:board/se_j100/init.c **** #include <rf/trf6151.h>
  47:board/se_j100/init.c **** #include <display.h>
  48:board/se_j100/init.c **** 
  49:board/se_j100/init.c **** #define ARMIO_LATCH_OUT 0xfffe4802
  50:board/se_j100/init.c **** #define IO_CNTL_REG	0xfffe4804
  51:board/se_j100/init.c **** #define ASIC_CONF_REG	0xfffef008
  52:board/se_j100/init.c **** 
  53:board/se_j100/init.c **** static void board_io_init(void)
  54:board/se_j100/init.c **** {
  55:board/se_j100/init.c **** 	uint16_t reg;
  56:board/se_j100/init.c **** 
  57:board/se_j100/init.c **** 	reg = readw(ASIC_CONF_REG);
  58:board/se_j100/init.c **** 	/* LCD Set I/O(3) / SA0 to I/O(3) mode */
  59:board/se_j100/init.c **** 	reg &= ~( (1 << 12) | (1 << 10) | (1 << 7) | (1 << 1)) ;
  60:board/se_j100/init.c **** 	/* don't set function pins to I2C Mode, J100 uses UWire */
  61:board/se_j100/init.c **** 	/* TWL3025: Set SPI+RIF RX clock to rising edge */
  62:board/se_j100/init.c **** 	reg |= (1 << 13) | (1 << 14);
  63:board/se_j100/init.c **** 	writew(reg, ASIC_CONF_REG);
  64:board/se_j100/init.c **** 
  65:board/se_j100/init.c **** 	/* LCD Set I/O(3) to output mode and enable C155 backlight (IO1) */
  66:board/se_j100/init.c **** 	/* FIXME: Put the display backlight control to backlight.c */
  67:board/se_j100/init.c **** 	reg = readw(IO_CNTL_REG);
  68:board/se_j100/init.c **** 	reg &= ~( (1 << 3) | (1 << 1));
  69:board/se_j100/init.c **** 	writew(reg, IO_CNTL_REG);
  70:board/se_j100/init.c **** 
  71:board/se_j100/init.c **** 	/* LCD Set I/O(3) output low */
  72:board/se_j100/init.c **** 	reg = readw(ARMIO_LATCH_OUT);
  73:board/se_j100/init.c **** 	reg &= ~(1 << 3);
  74:board/se_j100/init.c **** 	reg |= (1 << 1);
  75:board/se_j100/init.c **** 	writew(reg, ARMIO_LATCH_OUT);
  76:board/se_j100/init.c **** }
  77:board/se_j100/init.c **** 
  78:board/se_j100/init.c **** void board_init(void)
  79:board/se_j100/init.c **** {
  18              		.loc 1 79 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22 0000 37402DE9 		stmfd	sp!, {r0, r1, r2, r4, r5, lr}
  23              	.LCFI0:
  24              		.cfi_def_cfa_offset 24
  80:board/se_j100/init.c **** 	/* Disable watchdog (compal loader leaves it enabled) */
  81:board/se_j100/init.c **** 	wdog_enable(0);
  25              		.loc 1 81 0
  26 0004 0000A0E3 		mov	r0, #0
  27              		.cfi_offset 14, -4
  28              		.cfi_offset 5, -8
  29              		.cfi_offset 4, -12
  30              		.cfi_offset 2, -16
  31              		.cfi_offset 1, -20
  32              		.cfi_offset 0, -24
  33 0008 FEFFFFEB 		bl	wdog_enable
  82:board/se_j100/init.c **** 
  83:board/se_j100/init.c **** 	/* Configure memory interface */
  84:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS0, 3, CALYPSO_MEM_16bit, 1);
  34              		.loc 1 84 0
  35 000c 0120A0E3 		mov	r2, #1
  36 0010 0230A0E1 		mov	r3, r2
  37 0014 0000A0E3 		mov	r0, #0
  38 0018 0310A0E3 		mov	r1, #3
  39 001c FEFFFFEB 		bl	calypso_mem_cfg
  85:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS1, 3, CALYPSO_MEM_16bit, 1);
  40              		.loc 1 85 0
  41 0020 0120A0E3 		mov	r2, #1
  42 0024 0230A0E1 		mov	r3, r2
  43 0028 0200A0E3 		mov	r0, #2
  44 002c 0310A0E3 		mov	r1, #3
  45 0030 FEFFFFEB 		bl	calypso_mem_cfg
  86:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS2, 5, CALYPSO_MEM_16bit, 1);
  46              		.loc 1 86 0
  47 0034 0120A0E3 		mov	r2, #1
  48 0038 0230A0E1 		mov	r3, r2
  49 003c 0400A0E3 		mov	r0, #4
  50 0040 0510A0E3 		mov	r1, #5
  51 0044 FEFFFFEB 		bl	calypso_mem_cfg
  87:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS3, 5, CALYPSO_MEM_16bit, 1);
  52              		.loc 1 87 0
  53 0048 0120A0E3 		mov	r2, #1
  54 004c 0230A0E1 		mov	r3, r2
  55 0050 0600A0E3 		mov	r0, #6
  56 0054 0510A0E3 		mov	r1, #5
  57 0058 FEFFFFEB 		bl	calypso_mem_cfg
  88:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_CS4, 0, CALYPSO_MEM_8bit, 1);
  58              		.loc 1 88 0
  59 005c 0010A0E3 		mov	r1, #0
  60 0060 0120A0E1 		mov	r2, r1
  61 0064 0A00A0E3 		mov	r0, #10
  62 0068 0130A0E3 		mov	r3, #1
  63 006c FEFFFFEB 		bl	calypso_mem_cfg
  89:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS6, 0, CALYPSO_MEM_32bit, 1);
  64              		.loc 1 89 0
  65 0070 0C00A0E3 		mov	r0, #12
  66 0074 0010A0E3 		mov	r1, #0
  67 0078 0220A0E3 		mov	r2, #2
  68 007c 0130A0E3 		mov	r3, #1
  69 0080 FEFFFFEB 		bl	calypso_mem_cfg
  90:board/se_j100/init.c **** 	calypso_mem_cfg(CALYPSO_nCS7, 0, CALYPSO_MEM_32bit, 0);
  70              		.loc 1 90 0
  71 0084 0010A0E3 		mov	r1, #0
  72 0088 0130A0E1 		mov	r3, r1
  73 008c 0800A0E3 		mov	r0, #8
  74 0090 0220A0E3 		mov	r2, #2
  75 0094 FEFFFFEB 		bl	calypso_mem_cfg
  91:board/se_j100/init.c **** 
  92:board/se_j100/init.c **** 	/* Set VTCXO_DIV2 = 1, configure PLL for 104 MHz and give ARM half of that */
  93:board/se_j100/init.c **** 	calypso_clock_set(2, CALYPSO_PLL13_104_MHZ, ARM_MCLK_DIV_2);
  76              		.loc 1 93 0
  77 0098 0200A0E3 		mov	r0, #2
  94:board/se_j100/init.c **** 
  95:board/se_j100/init.c **** 	/* Configure the RHEA bridge with some sane default values */
  96:board/se_j100/init.c **** 	calypso_rhea_cfg(0, 0, 0xff, 0, 1, 0, 0);
  78              		.loc 1 96 0
  79 009c 0050A0E3 		mov	r5, #0
  93:board/se_j100/init.c **** 	calypso_clock_set(2, CALYPSO_PLL13_104_MHZ, ARM_MCLK_DIV_2);
  80              		.loc 1 93 0
  81 00a0 0020A0E1 		mov	r2, r0
  82 00a4 021BA0E3 		mov	r1, #2048
  83 00a8 FEFFFFEB 		bl	calypso_clock_set
  84              		.loc 1 96 0
  85 00ac 0140A0E3 		mov	r4, #1
  86 00b0 0500A0E1 		mov	r0, r5
  87 00b4 0510A0E1 		mov	r1, r5
  88 00b8 0530A0E1 		mov	r3, r5
  89 00bc FF20A0E3 		mov	r2, #255
  90 00c0 30008DE8 		stmia	sp, {r4, r5}	@ phole stm
  91 00c4 08508DE5 		str	r5, [sp, #8]
  92 00c8 FEFFFFEB 		bl	calypso_rhea_cfg
  93              	.LBB6:
  94              	.LBB7:
  57:board/se_j100/init.c **** 	reg = readw(ASIC_CONF_REG);
  95              		.loc 1 57 0
  96 00cc C0209FE5 		ldr	r2, .L2
  59:board/se_j100/init.c **** 	reg &= ~( (1 << 12) | (1 << 10) | (1 << 7) | (1 << 1)) ;
  97              		.loc 1 59 0
  98 00d0 C0309FE5 		ldr	r3, .L2+4
  57:board/se_j100/init.c **** 	reg = readw(ASIC_CONF_REG);
  99              		.loc 1 57 0
 100 00d4 B71F52E1 		ldrh	r1, [r2, #-247]
 101              	.LVL0:
  59:board/se_j100/init.c **** 	reg &= ~( (1 << 12) | (1 << 10) | (1 << 7) | (1 << 1)) ;
 102              		.loc 1 59 0
 103 00d8 033001E0 		and	r3, r1, r3
 104              	.LVL1:
  62:board/se_j100/init.c **** 	reg |= (1 << 13) | (1 << 14);
 105              		.loc 1 62 0
 106 00dc 063A83E3 		orr	r3, r3, #24576
 107              	.LVL2:
  63:board/se_j100/init.c **** 	writew(reg, ASIC_CONF_REG);
 108              		.loc 1 63 0
 109 00e0 B73F42E1 		strh	r3, [r2, #-247]	@ movhi
  67:board/se_j100/init.c **** 	reg = readw(IO_CNTL_REG);
 110              		.loc 1 67 0
 111 00e4 B0309FE5 		ldr	r3, .L2+8
 112              	.LVL3:
  68:board/se_j100/init.c **** 	reg &= ~( (1 << 3) | (1 << 1));
 113              		.loc 1 68 0
 114 00e8 B0209FE5 		ldr	r2, .L2+12
  67:board/se_j100/init.c **** 	reg = readw(IO_CNTL_REG);
 115              		.loc 1 67 0
 116 00ec BB1F53E1 		ldrh	r1, [r3, #-251]
 117              	.LVL4:
  68:board/se_j100/init.c **** 	reg &= ~( (1 << 3) | (1 << 1));
 118              		.loc 1 68 0
 119 00f0 022001E0 		and	r2, r1, r2
 120              	.LVL5:
  69:board/se_j100/init.c **** 	writew(reg, IO_CNTL_REG);
 121              		.loc 1 69 0
 122 00f4 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
  73:board/se_j100/init.c **** 	reg &= ~(1 << 3);
 123              		.loc 1 73 0
 124 00f8 A4209FE5 		ldr	r2, .L2+16
 125              	.LVL6:
  72:board/se_j100/init.c **** 	reg = readw(ARMIO_LATCH_OUT);
 126              		.loc 1 72 0
 127 00fc BD1F53E1 		ldrh	r1, [r3, #-253]
 128              	.LVL7:
  73:board/se_j100/init.c **** 	reg &= ~(1 << 3);
 129              		.loc 1 73 0
 130 0100 022001E0 		and	r2, r1, r2
 131              	.LVL8:
  74:board/se_j100/init.c **** 	reg |= (1 << 1);
 132              		.loc 1 74 0
 133 0104 022082E3 		orr	r2, r2, #2
 134              	.LVL9:
  75:board/se_j100/init.c **** 	writew(reg, ARMIO_LATCH_OUT);
 135              		.loc 1 75 0
 136 0108 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
 137              	.LBE7:
 138              	.LBE6:
  97:board/se_j100/init.c **** 
  98:board/se_j100/init.c **** 	/* Initialize board-specific GPIO */
  99:board/se_j100/init.c **** 	board_io_init();
 100:board/se_j100/init.c **** 
 101:board/se_j100/init.c **** 	/* Enable bootrom mapping to route exception vectors to RAM */
 102:board/se_j100/init.c **** 	calypso_bootrom(1);
 139              		.loc 1 102 0
 140 010c 0400A0E1 		mov	r0, r4
 141 0110 FEFFFFEB 		bl	calypso_bootrom
 142              	.LVL10:
 103:board/se_j100/init.c **** 	calypso_exceptions_install();
 143              		.loc 1 103 0
 144 0114 FEFFFFEB 		bl	calypso_exceptions_install
 104:board/se_j100/init.c **** 
 105:board/se_j100/init.c **** 	/* Initialize interrupt controller */
 106:board/se_j100/init.c **** 	irq_init();
 145              		.loc 1 106 0
 146 0118 FEFFFFEB 		bl	irq_init
 107:board/se_j100/init.c **** 
 108:board/se_j100/init.c **** 	/* initialize MODEM UART to be used for sercomm*/
 109:board/se_j100/init.c **** 	uart_init(SERCOMM_UART_NR, 1);
 147              		.loc 1 109 0
 148 011c 0400A0E1 		mov	r0, r4
 149 0120 0410A0E1 		mov	r1, r4
 150 0124 FEFFFFEB 		bl	uart_init
 110:board/se_j100/init.c **** 	uart_baudrate(SERCOMM_UART_NR, UART_115200);
 151              		.loc 1 110 0
 152 0128 0400A0E1 		mov	r0, r4
 153 012c 0210A0E3 		mov	r1, #2
 154 0130 FEFFFFEB 		bl	uart_baudrate
 111:board/se_j100/init.c **** 
 112:board/se_j100/init.c **** 	/* initialize IRDA UART to be used for old-school console code.
 113:board/se_j100/init.c **** 	 * note: IRDA uart only accessible on C115 and C117 PCB */
 114:board/se_j100/init.c **** 	uart_init(CONS_UART_NR, 1);
 155              		.loc 1 114 0
 156 0134 0500A0E1 		mov	r0, r5
 157 0138 0410A0E1 		mov	r1, r4
 158 013c FEFFFFEB 		bl	uart_init
 115:board/se_j100/init.c **** 	uart_baudrate(CONS_UART_NR, UART_115200);
 159              		.loc 1 115 0
 160 0140 0210A0E3 		mov	r1, #2
 161 0144 0500A0E1 		mov	r0, r5
 162 0148 FEFFFFEB 		bl	uart_baudrate
 116:board/se_j100/init.c **** 
 117:board/se_j100/init.c **** 	/* Initialize hardware timers */
 118:board/se_j100/init.c **** 	hwtimer_init();
 163              		.loc 1 118 0
 164 014c FEFFFFEB 		bl	hwtimer_init
 119:board/se_j100/init.c **** 
 120:board/se_j100/init.c **** 	/* Initialize DMA controller */
 121:board/se_j100/init.c **** 	dma_init();
 165              		.loc 1 121 0
 166 0150 FEFFFFEB 		bl	dma_init
 122:board/se_j100/init.c **** 
 123:board/se_j100/init.c **** 	/* Initialize real time clock */
 124:board/se_j100/init.c **** 	rtc_init();
 167              		.loc 1 124 0
 168 0154 FEFFFFEB 		bl	rtc_init
 125:board/se_j100/init.c **** 
 126:board/se_j100/init.c **** 	/* Initialize system timers (uses hwtimer 2) */
 127:board/se_j100/init.c **** 	timer_init();
 169              		.loc 1 127 0
 170 0158 FEFFFFEB 		bl	timer_init
 128:board/se_j100/init.c **** 
 129:board/se_j100/init.c **** 	/* Initialize LCD driver (uses UWire) and backlight */
 130:board/se_j100/init.c **** 	display = &ssd1963_display;
 171              		.loc 1 130 0
 172 015c 44309FE5 		ldr	r3, .L2+20
 173 0160 44209FE5 		ldr	r2, .L2+24
 174 0164 003082E5 		str	r3, [r2, #0]
 175              	.LBB8:
 176              	.LBB9:
 177              		.file 2 "include/display.h"
   1:include/display.h **** #ifndef _DISPLAY_DRIVER_H
   2:include/display.h **** #define _DISPLAY_DRIVER_H
   3:include/display.h **** 
   4:include/display.h **** enum display_attr {
   5:include/display.h **** 	DISP_ATTR_INVERT	= 0x0001,
   6:include/display.h **** };
   7:include/display.h **** 
   8:include/display.h **** struct display_driver {
   9:include/display.h **** 	char *name;
  10:include/display.h **** 	void (*init)(void);
  11:include/display.h **** 	void (*set_attr)(unsigned long attr);
  12:include/display.h **** 	void (*unset_attr)(unsigned long attr);
  13:include/display.h **** 	void (*clrscr)(void);
  14:include/display.h **** 	void (*goto_xy)(int xpos, int ypos);
  15:include/display.h **** 	void (*set_color)(int fgcolor, int bgcolor);
  16:include/display.h **** 	int (*putc)(unsigned char c);
  17:include/display.h **** 	int (*puts)(const char *str);
  18:include/display.h **** };
  19:include/display.h **** 
  20:include/display.h **** extern struct display_driver *display;
  21:include/display.h **** 
  22:include/display.h **** static inline void display_init(void)
  23:include/display.h **** {
  24:include/display.h **** 	display->init();
 178              		.loc 2 24 0
 179 0168 0FE0A0E1 		mov	lr, pc
 180 016c 04F093E5 		ldr	pc, [r3, #4]
 181              	.LBE9:
 182              	.LBE8:
 131:board/se_j100/init.c **** 	display_init();
 132:board/se_j100/init.c **** 	bl_mode_pwl(1);
 183              		.loc 1 132 0
 184 0170 0400A0E1 		mov	r0, r4
 185 0174 FEFFFFEB 		bl	bl_mode_pwl
 133:board/se_j100/init.c **** 	bl_level(50);
 186              		.loc 1 133 0
 187 0178 3200A0E3 		mov	r0, #50
 188 017c FEFFFFEB 		bl	bl_level
 134:board/se_j100/init.c **** 
 135:board/se_j100/init.c **** 	/* Initialize keypad driver */
 136:board/se_j100/init.c **** 	keypad_init(1);
 189              		.loc 1 136 0
 190 0180 0400A0E1 		mov	r0, r4
 191 0184 FEFFFFEB 		bl	keypad_init
 137:board/se_j100/init.c **** 
 138:board/se_j100/init.c **** 	/* Initialize ABB driver (uses SPI) */
 139:board/se_j100/init.c **** 	twl3025_init();
 140:board/se_j100/init.c **** }
 192              		.loc 1 140 0
 193 0188 0CD08DE2 		add	sp, sp, #12
 194 018c 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 139:board/se_j100/init.c **** 	twl3025_init();
 195              		.loc 1 139 0
 196 0190 FEFFFFEA 		b	twl3025_init
 197              	.L3:
 198              		.align	2
 199              	.L2:
 200 0194 FFF0FEFF 		.word	-69377
 201 0198 7DEB0000 		.word	60285
 202 019c FF48FEFF 		.word	-112385
 203 01a0 F5FF0000 		.word	65525
 204 01a4 F7FF0000 		.word	65527
 205 01a8 00000000 		.word	ssd1963_display
 206 01ac 00000000 		.word	display
 207              		.cfi_endproc
 208              	.LFE41:
 210              		.text
 211              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 init.c
     /tmp/ccgqfcgp.s:12     .text.board_init:0000000000000000 $a
     /tmp/ccgqfcgp.s:15     .text.board_init:0000000000000000 board_init
     /tmp/ccgqfcgp.s:200    .text.board_init:0000000000000194 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
wdog_enable
calypso_mem_cfg
calypso_clock_set
calypso_rhea_cfg
calypso_bootrom
calypso_exceptions_install
irq_init
uart_init
uart_baudrate
hwtimer_init
dma_init
rtc_init
timer_init
bl_mode_pwl
bl_level
keypad_init
twl3025_init
ssd1963_display
display
