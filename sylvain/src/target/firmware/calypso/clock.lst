   1              		.file	"clock.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.dump_reg16,"ax",%progbits
  12              		.align	2
  14              	dump_reg16:
  15              	.LFB0:
  16              		.file 1 "calypso/clock.c"
   1:calypso/clock.c **** /* Driver for Calypso clock management */
   2:calypso/clock.c **** 
   3:calypso/clock.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/clock.c ****  *
   5:calypso/clock.c ****  * All Rights Reserved
   6:calypso/clock.c ****  *
   7:calypso/clock.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/clock.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/clock.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/clock.c ****  * (at your option) any later version.
  11:calypso/clock.c ****  *
  12:calypso/clock.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/clock.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/clock.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/clock.c ****  * GNU General Public License for more details.
  16:calypso/clock.c ****  *
  17:calypso/clock.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/clock.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/clock.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/clock.c ****  *
  21:calypso/clock.c ****  */
  22:calypso/clock.c **** 
  23:calypso/clock.c **** #include <stdint.h>
  24:calypso/clock.c **** #include <stdio.h>
  25:calypso/clock.c **** 
  26:calypso/clock.c **** //#define DEBUG
  27:calypso/clock.c **** #include <debug.h>
  28:calypso/clock.c **** 
  29:calypso/clock.c **** #include <memory.h>
  30:calypso/clock.c **** #include <calypso/clock.h>
  31:calypso/clock.c **** 
  32:calypso/clock.c **** #define REG_DPLL		0xffff9800
  33:calypso/clock.c **** #define DPLL_LOCK		(1 << 0)
  34:calypso/clock.c **** #define DPLL_BREAKLN		(1 << 1)
  35:calypso/clock.c **** #define DPLL_BYPASS_DIV_SHIFT	2		/* 2 bits */
  36:calypso/clock.c **** #define DPLL_PLL_ENABLE		(1 << 4)
  37:calypso/clock.c **** #define DPLL_PLL_DIV_SHIFT	5		/* 2 bits */
  38:calypso/clock.c **** #define DPLL_PLL_MULT_SHIFT	7		/* 5 bits */
  39:calypso/clock.c **** #define DPLL_TEST		(1 << 12)
  40:calypso/clock.c **** #define DPLL_IOB		(1 << 13)	/* Initialize on break */
  41:calypso/clock.c **** #define DPLL_IAI		(1 << 14)	/* Initialize after Idle */
  42:calypso/clock.c **** 
  43:calypso/clock.c **** #define BASE_ADDR_CLKM	0xfffffd00
  44:calypso/clock.c **** #define CLKM_REG(m)	(BASE_ADDR_CLKM+(m))
  45:calypso/clock.c **** 
  46:calypso/clock.c **** enum clkm_reg {
  47:calypso/clock.c **** 	CNTL_ARM_CLK	= 0,
  48:calypso/clock.c **** 	CNTL_CLK	= 2,
  49:calypso/clock.c **** 	CNTL_RST	= 4,
  50:calypso/clock.c **** 	CNTL_ARM_DIV	= 8,
  51:calypso/clock.c **** };
  52:calypso/clock.c **** 
  53:calypso/clock.c **** /* CNTL_ARM_CLK */
  54:calypso/clock.c **** #define ARM_CLK_BIG_SLEEP	(1 << 0)	/* MCU Master Clock enabled? */
  55:calypso/clock.c **** #define ARM_CLK_CLKIN_SEL0	(1 << 1)	/* MCU source clock (0 = DPLL output, 1 = VTCXO or CLKIN */
  56:calypso/clock.c **** #define ARM_CLK_CLKIN_SEL	(1 << 2)	/* 0 = VTCXO or 1 = CLKIN */
  57:calypso/clock.c **** #define ARM_CLK_MCLK_DIV5	(1 << 3)	/* enable 1.5 or 2.5 division factor */
  58:calypso/clock.c **** #define ARM_CLK_MCLK_DIV_SHIFT	4		/* 3 bits */
  59:calypso/clock.c **** #define ARM_CLK_DEEP_POWER_SHIFT	8
  60:calypso/clock.c **** #define ARM_CLK_DEEP_SLEEP	12
  61:calypso/clock.c **** 
  62:calypso/clock.c **** /* CNTL_CLK */
  63:calypso/clock.c **** #define CLK_IRQ_CLK_DIS		(1 << 0)	/* IRQ clock control (0 always, 1 according ARM_MCLK_EN) */
  64:calypso/clock.c **** #define CLK_BRIDGE_CLK_DIS	(1 << 1)
  65:calypso/clock.c **** #define CLK_TIMER_CLK_DIS	(1 << 2)
  66:calypso/clock.c **** #define CLK_DPLL_DIS		(1 << 3)	/* 0: DPLL is not stopped during SLEEP */
  67:calypso/clock.c **** #define CLK_CLKOUT_EN		(1 << 4)	/* Enable CLKOUT output pins */
  68:calypso/clock.c **** #define CLK_EN_IDLE3_FLG	(1 << 5)	/* DSP idle flag control (1 =
  69:calypso/clock.c **** 						 * SAM/HOM register forced to HOM when DSP IDLE3) */
  70:calypso/clock.c **** #define CLK_VCLKOUT_DIV2	(1 << 6)	/* 1: VCLKOUT-FR is divided by 2 */
  71:calypso/clock.c **** #define CLK_VTCXO_DIV2		(1 << 7)	/* 1: VTCXO is dividied by 2 */
  72:calypso/clock.c **** 
  73:calypso/clock.c **** #define BASE_ADDR_MEMIF		0xfffffb00
  74:calypso/clock.c **** #define MEMIF_REG(x)		(BASE_ADDR_MEMIF+(x))
  75:calypso/clock.c **** 
  76:calypso/clock.c **** enum memif_reg {
  77:calypso/clock.c **** 	API_RHEA_CTL	= 0x0e,
  78:calypso/clock.c **** 	EXTRA_CONF	= 0x10,
  79:calypso/clock.c **** };
  80:calypso/clock.c **** 
  81:calypso/clock.c **** static void dump_reg16(uint32_t addr, char *name)
  82:calypso/clock.c **** {
  17              		.loc 1 82 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
  83:calypso/clock.c **** 	printf("%s=0x%04x\n", name, readw(addr));
  23              		.loc 1 83 0
  24 0000 B020D0E1 		ldrh	r2, [r0, #0]
  25 0004 00009FE5 		ldr	r0, .L2
  26              	.LVL1:
  84:calypso/clock.c **** }
  27              		.loc 1 84 0
  83:calypso/clock.c **** 	printf("%s=0x%04x\n", name, readw(addr));
  28              		.loc 1 83 0
  29 0008 FEFFFFEA 		b	printf
  30              	.LVL2:
  31              	.L3:
  32              		.align	2
  33              	.L2:
  34 000c 00000000 		.word	.LC0
  35              		.cfi_endproc
  36              	.LFE0:
  38              		.section	.text.calypso_clk_dump,"ax",%progbits
  39              		.align	2
  40              		.global	calypso_clk_dump
  42              	calypso_clk_dump:
  43              	.LFB1:
  85:calypso/clock.c **** 
  86:calypso/clock.c **** void calypso_clk_dump(void)
  87:calypso/clock.c **** {
  44              		.loc 1 87 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48 0000 04E02DE5 		str	lr, [sp, #-4]!
  49              	.LCFI0:
  50              		.cfi_def_cfa_offset 4
  88:calypso/clock.c **** 	dump_reg16(REG_DPLL, "REG_DPLL");
  51              		.loc 1 88 0
  52 0004 38009FE5 		ldr	r0, .L5
  53 0008 38109FE5 		ldr	r1, .L5+4
  54              		.cfi_offset 14, -4
  55 000c FEFFFFEB 		bl	dump_reg16
  89:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_ARM_CLK), "CNTL_ARM_CLK");
  56              		.loc 1 89 0
  57 0010 34009FE5 		ldr	r0, .L5+8
  58 0014 34109FE5 		ldr	r1, .L5+12
  59 0018 FEFFFFEB 		bl	dump_reg16
  90:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_CLK), "CNTL_CLK");
  60              		.loc 1 90 0
  61 001c 30009FE5 		ldr	r0, .L5+16
  62 0020 30109FE5 		ldr	r1, .L5+20
  63 0024 FEFFFFEB 		bl	dump_reg16
  91:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_RST), "CNTL_RST");
  64              		.loc 1 91 0
  65 0028 2C009FE5 		ldr	r0, .L5+24
  66 002c 2C109FE5 		ldr	r1, .L5+28
  67 0030 FEFFFFEB 		bl	dump_reg16
  92:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_ARM_DIV), "CNTL_ARM_DIV");
  68              		.loc 1 92 0
  69 0034 28009FE5 		ldr	r0, .L5+32
  70 0038 28109FE5 		ldr	r1, .L5+36
  93:calypso/clock.c **** }
  71              		.loc 1 93 0
  72 003c 04E09DE4 		ldr	lr, [sp], #4
  92:calypso/clock.c **** 	dump_reg16(CLKM_REG(CNTL_ARM_DIV), "CNTL_ARM_DIV");
  73              		.loc 1 92 0
  74 0040 FEFFFFEA 		b	dump_reg16
  75              	.L6:
  76              		.align	2
  77              	.L5:
  78 0044 0098FFFF 		.word	-26624
  79 0048 0B000000 		.word	.LC1
  80 004c 00FDFFFF 		.word	-768
  81 0050 14000000 		.word	.LC2
  82 0054 02FDFFFF 		.word	-766
  83 0058 21000000 		.word	.LC3
  84 005c 04FDFFFF 		.word	-764
  85 0060 2A000000 		.word	.LC4
  86 0064 08FDFFFF 		.word	-760
  87 0068 33000000 		.word	.LC5
  88              		.cfi_endproc
  89              	.LFE1:
  91              		.section	.text.calypso_pll_set,"ax",%progbits
  92              		.align	2
  93              		.global	calypso_pll_set
  95              	calypso_pll_set:
  96              	.LFB2:
  94:calypso/clock.c **** 
  95:calypso/clock.c **** void calypso_pll_set(uint16_t inp)
  96:calypso/clock.c **** {
  97              		.loc 1 96 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.LVL3:
  97:calypso/clock.c **** 	uint8_t mult = inp >> 8;
  98:calypso/clock.c **** 	uint8_t div = inp & 0xff;
  99:calypso/clock.c **** 	uint16_t reg = readw(REG_DPLL);
 103              		.loc 1 99 0
 104 0000 673CE0E3 		mvn	r3, #26368
 105 0004 BF2F53E1 		ldrh	r2, [r3, #-255]
 100:calypso/clock.c **** 
 101:calypso/clock.c **** 	reg &= ~0x0fe0;
 102:calypso/clock.c **** 	reg |= (div & 0x3) << DPLL_PLL_DIV_SHIFT;
 106              		.loc 1 102 0
 107 0008 031000E2 		and	r1, r0, #3
 101:calypso/clock.c **** 	reg &= ~0x0fe0;
 108              		.loc 1 101 0
 109 000c FE2EC2E3 		bic	r2, r2, #4064
 103:calypso/clock.c **** 	reg |= (mult & 0x1f) << DPLL_PLL_MULT_SHIFT;
 110              		.loc 1 103 0
 111 0010 A000A0E1 		mov	r0, r0, lsr #1
 112              	.LVL4:
 102:calypso/clock.c **** 	reg |= (div & 0x3) << DPLL_PLL_DIV_SHIFT;
 113              		.loc 1 102 0
 114 0014 812282E1 		orr	r2, r2, r1, asl #5
 115              		.loc 1 103 0
 116 0018 3E0D00E2 		and	r0, r0, #3968
 117 001c 002082E1 		orr	r2, r2, r0
 118 0020 0228A0E1 		mov	r2, r2, asl #16
 119              	.LVL5:
 104:calypso/clock.c **** 	reg |= DPLL_PLL_ENABLE;
 120              		.loc 1 104 0
 121 0024 012682E3 		orr	r2, r2, #1048576
 122              	.LVL6:
 123 0028 2228A0E1 		mov	r2, r2, lsr #16
 124              	.LVL7:
 105:calypso/clock.c **** 
 106:calypso/clock.c **** 	writew(reg, REG_DPLL);
 125              		.loc 1 106 0
 126 002c BF2F43E1 		strh	r2, [r3, #-255]	@ movhi
 107:calypso/clock.c **** }
 127              		.loc 1 107 0
 128 0030 1EFF2FE1 		bx	lr
 129              		.cfi_endproc
 130              	.LFE2:
 132              		.section	.text.calypso_reset_set,"ax",%progbits
 133              		.align	2
 134              		.global	calypso_reset_set
 136              	calypso_reset_set:
 137              	.LFB3:
 108:calypso/clock.c **** 
 109:calypso/clock.c **** void calypso_reset_set(enum calypso_rst calypso_rst, int active)
 110:calypso/clock.c **** {
 138              		.loc 1 110 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143              	.LVL8:
 111:calypso/clock.c **** 	uint8_t reg = readb(CLKM_REG(CNTL_RST));
 144              		.loc 1 111 0
 145 0000 023CE0E3 		mvn	r3, #512
 146 0004 FB3053E5 		ldrb	r3, [r3, #-251]	@ zero_extendqisi2
 112:calypso/clock.c **** 
 113:calypso/clock.c **** 	if (active)
 147              		.loc 1 113 0
 148 0008 000051E3 		cmp	r1, #0
 111:calypso/clock.c **** 	uint8_t reg = readb(CLKM_REG(CNTL_RST));
 149              		.loc 1 111 0
 150 000c FF3003E2 		and	r3, r3, #255
 151              	.LVL9:
 114:calypso/clock.c **** 		reg |= calypso_rst;
 152              		.loc 1 114 0
 153 0010 00308311 		orrne	r3, r3, r0
 154              	.LVL10:
 155 0014 FF300312 		andne	r3, r3, #255
 156              	.LVL11:
 115:calypso/clock.c **** 	else
 116:calypso/clock.c **** 		reg &= ~calypso_rst;
 157              		.loc 1 116 0
 158 0018 0030C301 		biceq	r3, r3, r0
 159              	.LVL12:
 117:calypso/clock.c **** 
 118:calypso/clock.c **** 	writeb(reg, CLKM_REG(CNTL_RST));
 160              		.loc 1 118 0
 161 001c 022CE0E3 		mvn	r2, #512
 162 0020 FB3042E5 		strb	r3, [r2, #-251]
 119:calypso/clock.c **** }
 163              		.loc 1 119 0
 164 0024 1EFF2FE1 		bx	lr
 165              		.cfi_endproc
 166              	.LFE3:
 168              		.section	.text.calypso_reset_get,"ax",%progbits
 169              		.align	2
 170              		.global	calypso_reset_get
 172              	calypso_reset_get:
 173              	.LFB4:
 120:calypso/clock.c **** 
 121:calypso/clock.c **** int calypso_reset_get(enum calypso_rst calypso_rst)
 122:calypso/clock.c **** {
 174              		.loc 1 122 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 0
 177              		@ frame_needed = 0, uses_anonymous_args = 0
 178              		@ link register save eliminated.
 179              	.LVL13:
 123:calypso/clock.c **** 	uint8_t reg = readb(CLKM_REG(CNTL_RST));
 180              		.loc 1 123 0
 181 0000 023CE0E3 		mvn	r3, #512
 182 0004 FB3053E5 		ldrb	r3, [r3, #-251]	@ zero_extendqisi2
 183              	.LVL14:
 124:calypso/clock.c **** 
 125:calypso/clock.c **** 	if (reg & calypso_rst)
 126:calypso/clock.c **** 		return 1;
 184              		.loc 1 126 0
 185 0008 030010E1 		tst	r0, r3
 127:calypso/clock.c **** 	else
 128:calypso/clock.c **** 		return 0;
 129:calypso/clock.c **** }
 186              		.loc 1 129 0
 187 000c 0000A003 		moveq	r0, #0
 188 0010 0100A013 		movne	r0, #1
 189              	.LVL15:
 190 0014 1EFF2FE1 		bx	lr
 191              		.cfi_endproc
 192              	.LFE4:
 194              		.section	.text.calypso_clock_set,"ax",%progbits
 195              		.align	2
 196              		.global	calypso_clock_set
 198              	calypso_clock_set:
 199              	.LFB5:
 130:calypso/clock.c **** 
 131:calypso/clock.c **** void calypso_clock_set(uint8_t vtcxo_div2, uint16_t inp, enum mclk_div mclk_div)
 132:calypso/clock.c **** {
 200              		.loc 1 132 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL16:
 133:calypso/clock.c **** 	uint16_t cntl_clock = readw(CLKM_REG(CNTL_CLK));
 205              		.loc 1 133 0
 206 0000 023CE0E3 		mvn	r3, #512
 132:calypso/clock.c **** {
 207              		.loc 1 132 0
 208 0004 10402DE9 		stmfd	sp!, {r4, lr}
 209              	.LCFI1:
 210              		.cfi_def_cfa_offset 8
 211              		.loc 1 133 0
 212 0008 BD4F53E1 		ldrh	r4, [r3, #-253]
 213              		.cfi_offset 14, -4
 214              		.cfi_offset 4, -8
 215              	.LVL17:
 134:calypso/clock.c **** 	uint16_t cntl_arm_clk = readw(CLKM_REG(CNTL_ARM_CLK));
 216              		.loc 1 134 0
 217 000c BFCF53E1 		ldrh	ip, [r3, #-255]
 218              	.LVL18:
 135:calypso/clock.c **** 
 136:calypso/clock.c **** 	/* First set the vtcxo_div2 */
 137:calypso/clock.c **** 	cntl_clock &= ~CLK_VCLKOUT_DIV2;
 219              		.loc 1 137 0
 220 0010 54309FE5 		ldr	r3, .L17
 138:calypso/clock.c **** 	if (vtcxo_div2)
 221              		.loc 1 138 0
 222 0014 FF0010E3 		tst	r0, #255
 137:calypso/clock.c **** 	cntl_clock &= ~CLK_VCLKOUT_DIV2;
 223              		.loc 1 137 0
 224 0018 033004E0 		and	r3, r4, r3
 225              	.LVL19:
 139:calypso/clock.c **** 		cntl_clock |= CLK_VTCXO_DIV2;
 226              		.loc 1 139 0
 227 001c 80308313 		orrne	r3, r3, #128
 228              	.LVL20:
 140:calypso/clock.c **** 	else
 141:calypso/clock.c **** 		cntl_clock &= ~CLK_VTCXO_DIV2;
 229              		.loc 1 141 0
 230 0020 8030C303 		biceq	r3, r3, #128
 231              	.LVL21:
 142:calypso/clock.c **** 	writew(cntl_clock, CLKM_REG(CNTL_CLK));
 143:calypso/clock.c **** 
 144:calypso/clock.c **** 	/* Then configure the MCLK divider */
 145:calypso/clock.c **** 	cntl_arm_clk &= ~ARM_CLK_CLKIN_SEL0;
 232              		.loc 1 145 0
 233 0024 02C0CCE3 		bic	ip, ip, #2
 234              	.LVL22:
 146:calypso/clock.c **** 	if (mclk_div & 0x80) {
 235              		.loc 1 146 0
 236 0028 800012E3 		tst	r2, #128
 147:calypso/clock.c **** 		mclk_div &= ~0x80;
 148:calypso/clock.c **** 		cntl_arm_clk |= ARM_CLK_MCLK_DIV5;
 237              		.loc 1 148 0
 238 002c 08C08C13 		orrne	ip, ip, #8
 239              	.LVL23:
 149:calypso/clock.c **** 	} else
 150:calypso/clock.c **** 		cntl_arm_clk &= ~ARM_CLK_MCLK_DIV5;
 240              		.loc 1 150 0
 241 0030 08C0CC03 		biceq	ip, ip, #8
 147:calypso/clock.c **** 		mclk_div &= ~0x80;
 242              		.loc 1 147 0
 243 0034 8020C213 		bicne	r2, r2, #128
 244              	.LVL24:
 151:calypso/clock.c **** 	cntl_arm_clk &= ~(0x7 << ARM_CLK_MCLK_DIV_SHIFT);
 245              		.loc 1 151 0
 246 0038 70C0CCE3 		bic	ip, ip, #112
 247              	.LVL25:
 152:calypso/clock.c **** 	cntl_arm_clk |= (mclk_div << ARM_CLK_MCLK_DIV_SHIFT);
 248              		.loc 1 152 0
 249 003c 02228CE1 		orr	r2, ip, r2, asl #4
 250              	.LVL26:
 132:calypso/clock.c **** {
 251              		.loc 1 132 0
 252 0040 0118A0E1 		mov	r1, r1, asl #16
 253              	.LVL27:
 254 0044 2118A0E1 		mov	r1, r1, lsr #16
 142:calypso/clock.c **** 	writew(cntl_clock, CLKM_REG(CNTL_CLK));
 255              		.loc 1 142 0
 256 0048 020CE0E3 		mvn	r0, #512
 257              	.LVL28:
 258              		.loc 1 152 0
 259 004c 0228A0E1 		mov	r2, r2, asl #16
 142:calypso/clock.c **** 	writew(cntl_clock, CLKM_REG(CNTL_CLK));
 260              		.loc 1 142 0
 261 0050 BD3F40E1 		strh	r3, [r0, #-253]	@ movhi
 262              		.loc 1 152 0
 263 0054 2228A0E1 		mov	r2, r2, lsr #16
 264              	.LVL29:
 153:calypso/clock.c **** 	writew(cntl_arm_clk, CLKM_REG(CNTL_ARM_CLK));
 265              		.loc 1 153 0
 266 0058 023CE0E3 		mvn	r3, #512
 267              	.LVL30:
 154:calypso/clock.c **** 
 155:calypso/clock.c **** 	/* Then finally set the PLL */
 156:calypso/clock.c **** 	calypso_pll_set(inp);
 268              		.loc 1 156 0
 269 005c 0100A0E1 		mov	r0, r1
 153:calypso/clock.c **** 	writew(cntl_arm_clk, CLKM_REG(CNTL_ARM_CLK));
 270              		.loc 1 153 0
 271 0060 BF2F43E1 		strh	r2, [r3, #-255]	@ movhi
 157:calypso/clock.c **** }
 272              		.loc 1 157 0
 273 0064 1040BDE8 		ldmfd	sp!, {r4, lr}
 156:calypso/clock.c **** 	calypso_pll_set(inp);
 274              		.loc 1 156 0
 275 0068 FEFFFFEA 		b	calypso_pll_set
 276              	.LVL31:
 277              	.L18:
 278              		.align	2
 279              	.L17:
 280 006c BFFF0000 		.word	65471
 281              		.cfi_endproc
 282              	.LFE5:
 284              		.section	.text.calypso_mem_cfg,"ax",%progbits
 285              		.align	2
 286              		.global	calypso_mem_cfg
 288              	calypso_mem_cfg:
 289              	.LFB6:
 158:calypso/clock.c **** 
 159:calypso/clock.c **** void calypso_mem_cfg(enum calypso_bank bank, uint8_t ws,
 160:calypso/clock.c **** 		     enum calypso_mem_width width, int we)
 161:calypso/clock.c **** {
 290              		.loc 1 161 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 0
 293              		@ frame_needed = 0, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295              	.LVL32:
 162:calypso/clock.c **** 	writew((ws & 0x1f) | ((width & 3) << 5) | ((we & 1) << 7),
 296              		.loc 1 162 0
 297 0000 032002E2 		and	r2, r2, #3
 298              	.LVL33:
 299 0004 1F1001E2 		and	r1, r1, #31
 300              	.LVL34:
 301 0008 8333A0E1 		mov	r3, r3, asl #7
 302              	.LVL35:
 303 000c 822281E1 		orr	r2, r1, r2, asl #5
 304 0010 FF3003E2 		and	r3, r3, #255
 305 0014 050C40E2 		sub	r0, r0, #1280
 306              	.LVL36:
 307 0018 032082E1 		orr	r2, r2, r3
 308 001c B020C0E1 		strh	r2, [r0, #0]	@ movhi
 163:calypso/clock.c **** 	       BASE_ADDR_MEMIF + bank);
 164:calypso/clock.c **** }
 309              		.loc 1 164 0
 310 0020 1EFF2FE1 		bx	lr
 311              		.cfi_endproc
 312              	.LFE6:
 314              		.section	.text.calypso_bootrom,"ax",%progbits
 315              		.align	2
 316              		.global	calypso_bootrom
 318              	calypso_bootrom:
 319              	.LFB7:
 165:calypso/clock.c **** 
 166:calypso/clock.c **** void calypso_bootrom(int enable)
 167:calypso/clock.c **** {
 320              		.loc 1 167 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 325              	.LVL37:
 168:calypso/clock.c **** 	uint16_t conf = readw(MEMIF_REG(EXTRA_CONF));
 326              		.loc 1 168 0
 327 0000 013BE0E3 		mvn	r3, #1024
 328 0004 BF3E53E1 		ldrh	r3, [r3, #-239]
 329              	.LVL38:
 169:calypso/clock.c **** 
 170:calypso/clock.c **** 	conf |= (3 << 8);
 171:calypso/clock.c **** 
 172:calypso/clock.c **** 	if (enable)
 330              		.loc 1 172 0
 331 0008 000050E3 		cmp	r0, #0
 170:calypso/clock.c **** 	conf |= (3 << 8);
 332              		.loc 1 170 0
 333 000c 033C83E3 		orr	r3, r3, #768
 334              	.LVL39:
 173:calypso/clock.c **** 		conf &= ~(1 << 9);
 335              		.loc 1 173 0
 336 0010 023CC313 		bicne	r3, r3, #512
 337              	.LVL40:
 174:calypso/clock.c **** 
 175:calypso/clock.c **** 	writew(conf, MEMIF_REG(EXTRA_CONF));
 338              		.loc 1 175 0
 339 0014 012BE0E3 		mvn	r2, #1024
 340 0018 BF3E42E1 		strh	r3, [r2, #-239]	@ movhi
 176:calypso/clock.c **** }
 341              		.loc 1 176 0
 342 001c 1EFF2FE1 		bx	lr
 343              		.cfi_endproc
 344              	.LFE7:
 346              		.section	.text.calypso_debugunit,"ax",%progbits
 347              		.align	2
 348              		.global	calypso_debugunit
 350              	calypso_debugunit:
 351              	.LFB8:
 177:calypso/clock.c **** 
 178:calypso/clock.c **** void calypso_debugunit(int enable)
 179:calypso/clock.c **** {
 352              		.loc 1 179 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357              	.LVL41:
 180:calypso/clock.c **** 	uint16_t conf = readw(MEMIF_REG(EXTRA_CONF));
 358              		.loc 1 180 0
 359 0000 013BE0E3 		mvn	r3, #1024
 360 0004 BF3E53E1 		ldrh	r3, [r3, #-239]
 361              	.LVL42:
 181:calypso/clock.c **** 
 182:calypso/clock.c **** 	if (enable)
 362              		.loc 1 182 0
 363 0008 000050E3 		cmp	r0, #0
 183:calypso/clock.c **** 		conf &= ~(1 << 11);
 364              		.loc 1 183 0
 365 000c 023BC313 		bicne	r3, r3, #2048
 366              	.LVL43:
 184:calypso/clock.c **** 	else
 185:calypso/clock.c **** 		conf |= (1 << 11);
 367              		.loc 1 185 0
 368 0010 023B8303 		orreq	r3, r3, #2048
 369              	.LVL44:
 186:calypso/clock.c **** 
 187:calypso/clock.c **** 	writew(conf, MEMIF_REG(EXTRA_CONF));
 370              		.loc 1 187 0
 371 0014 012BE0E3 		mvn	r2, #1024
 372 0018 BF3E42E1 		strh	r3, [r2, #-239]	@ movhi
 188:calypso/clock.c **** }
 373              		.loc 1 188 0
 374 001c 1EFF2FE1 		bx	lr
 375              		.cfi_endproc
 376              	.LFE8:
 378              		.section	.text.calypso_rhea_cfg,"ax",%progbits
 379              		.align	2
 380              		.global	calypso_rhea_cfg
 382              	calypso_rhea_cfg:
 383              	.LFB9:
 189:calypso/clock.c **** 
 190:calypso/clock.c **** #define REG_RHEA_CNTL	0xfffff900
 191:calypso/clock.c **** #define REG_API_CNTL	0xfffff902
 192:calypso/clock.c **** #define REG_ARM_RHEA	0xfffff904
 193:calypso/clock.c **** 
 194:calypso/clock.c **** void calypso_rhea_cfg(uint8_t fac0, uint8_t fac1, uint8_t timeout,
 195:calypso/clock.c **** 		      uint8_t ws_h, uint8_t ws_l, uint8_t w_en0, uint8_t w_en1)
 196:calypso/clock.c **** {
 384              		.loc 1 196 0
 385              		.cfi_startproc
 386              		@ args = 12, pretend = 0, frame = 0
 387              		@ frame_needed = 0, uses_anonymous_args = 0
 388              	.LVL45:
 389 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 390              	.LCFI2:
 391              		.cfi_def_cfa_offset 12
 392              		.loc 1 196 0
 393 0004 0112A0E1 		mov	r1, r1, asl #4
 394              	.LVL46:
 395 0008 FF0000E2 		and	r0, r0, #255
 396              	.LVL47:
 197:calypso/clock.c **** 	writew(fac0 | (fac1 << 4) | (timeout << 8), REG_RHEA_CNTL);
 397              		.loc 1 197 0
 398 000c FF1E01E2 		and	r1, r1, #4080
 399 0010 000081E1 		orr	r0, r1, r0
 196:calypso/clock.c **** {
 400              		.loc 1 196 0
 401 0014 0C50DDE5 		ldrb	r5, [sp, #12]	@ zero_extendqisi2
 402              		.cfi_offset 14, -4
 403              		.cfi_offset 5, -8
 404              		.cfi_offset 4, -12
 405 0018 10C0DDE5 		ldrb	ip, [sp, #16]	@ zero_extendqisi2
 406 001c 1440DDE5 		ldrb	r4, [sp, #20]	@ zero_extendqisi2
 407              		.loc 1 197 0
 408 0020 020480E1 		orr	r0, r0, r2, asl #8
 196:calypso/clock.c **** {
 409              		.loc 1 196 0
 410 0024 FF3003E2 		and	r3, r3, #255
 411              	.LVL48:
 412              		.loc 1 197 0
 413 0028 0008A0E1 		mov	r0, r0, asl #16
 414 002c 062CE0E3 		mvn	r2, #1536
 415              	.LVL49:
 416 0030 2008A0E1 		mov	r0, r0, lsr #16
 198:calypso/clock.c **** 	writew(ws_h | (ws_l << 5), REG_API_CNTL);
 417              		.loc 1 198 0
 418 0034 853283E1 		orr	r3, r3, r5, asl #5
 199:calypso/clock.c **** 	writew(w_en0 | (w_en1 << 1), REG_ARM_RHEA);
 419              		.loc 1 199 0
 420 0038 84C08CE1 		orr	ip, ip, r4, asl #1
 197:calypso/clock.c **** 	writew(fac0 | (fac1 << 4) | (timeout << 8), REG_RHEA_CNTL);
 421              		.loc 1 197 0
 422 003c BF0F42E1 		strh	r0, [r2, #-255]	@ movhi
 198:calypso/clock.c **** 	writew(ws_h | (ws_l << 5), REG_API_CNTL);
 423              		.loc 1 198 0
 424 0040 BD3F42E1 		strh	r3, [r2, #-253]	@ movhi
 425              		.loc 1 199 0
 426 0044 BBCF42E1 		strh	ip, [r2, #-251]	@ movhi
 200:calypso/clock.c **** }
 427              		.loc 1 200 0
 428 0048 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 429              		.cfi_endproc
 430              	.LFE9:
 432              		.section	.rodata.str1.1,"aMS",%progbits,1
 433              	.LC0:
 434 0000 25733D30 		.ascii	"%s=0x%04x\012\000"
 434      78253034 
 434      780A00
 435              	.LC1:
 436 000b 5245475F 		.ascii	"REG_DPLL\000"
 436      44504C4C 
 436      00
 437              	.LC2:
 438 0014 434E544C 		.ascii	"CNTL_ARM_CLK\000"
 438      5F41524D 
 438      5F434C4B 
 438      00
 439              	.LC3:
 440 0021 434E544C 		.ascii	"CNTL_CLK\000"
 440      5F434C4B 
 440      00
 441              	.LC4:
 442 002a 434E544C 		.ascii	"CNTL_RST\000"
 442      5F525354 
 442      00
 443              	.LC5:
 444 0033 434E544C 		.ascii	"CNTL_ARM_DIV\000"
 444      5F41524D 
 444      5F444956 
 444      00
 445              		.text
 446              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 clock.c
     /tmp/ccfaWwXC.s:12     .text.dump_reg16:0000000000000000 $a
     /tmp/ccfaWwXC.s:14     .text.dump_reg16:0000000000000000 dump_reg16
     /tmp/ccfaWwXC.s:34     .text.dump_reg16:000000000000000c $d
     /tmp/ccfaWwXC.s:39     .text.calypso_clk_dump:0000000000000000 $a
     /tmp/ccfaWwXC.s:42     .text.calypso_clk_dump:0000000000000000 calypso_clk_dump
     /tmp/ccfaWwXC.s:78     .text.calypso_clk_dump:0000000000000044 $d
     /tmp/ccfaWwXC.s:92     .text.calypso_pll_set:0000000000000000 $a
     /tmp/ccfaWwXC.s:95     .text.calypso_pll_set:0000000000000000 calypso_pll_set
     /tmp/ccfaWwXC.s:133    .text.calypso_reset_set:0000000000000000 $a
     /tmp/ccfaWwXC.s:136    .text.calypso_reset_set:0000000000000000 calypso_reset_set
     /tmp/ccfaWwXC.s:169    .text.calypso_reset_get:0000000000000000 $a
     /tmp/ccfaWwXC.s:172    .text.calypso_reset_get:0000000000000000 calypso_reset_get
     /tmp/ccfaWwXC.s:195    .text.calypso_clock_set:0000000000000000 $a
     /tmp/ccfaWwXC.s:198    .text.calypso_clock_set:0000000000000000 calypso_clock_set
     /tmp/ccfaWwXC.s:280    .text.calypso_clock_set:000000000000006c $d
     /tmp/ccfaWwXC.s:285    .text.calypso_mem_cfg:0000000000000000 $a
     /tmp/ccfaWwXC.s:288    .text.calypso_mem_cfg:0000000000000000 calypso_mem_cfg
     /tmp/ccfaWwXC.s:315    .text.calypso_bootrom:0000000000000000 $a
     /tmp/ccfaWwXC.s:318    .text.calypso_bootrom:0000000000000000 calypso_bootrom
     /tmp/ccfaWwXC.s:347    .text.calypso_debugunit:0000000000000000 $a
     /tmp/ccfaWwXC.s:350    .text.calypso_debugunit:0000000000000000 calypso_debugunit
     /tmp/ccfaWwXC.s:379    .text.calypso_rhea_cfg:0000000000000000 $a
     /tmp/ccfaWwXC.s:382    .text.calypso_rhea_cfg:0000000000000000 calypso_rhea_cfg
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
printf
