   1              		.file	"tsp.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.tpu_enq_move,"ax",%progbits
  12              		.align	2
  14              	tpu_enq_move:
  15              	.LFB2:
  16              		.file 1 "include/calypso/tpu.h"
   1:include/calypso/tpu.h **** #ifndef _CALYPSO_TPU_H
   2:include/calypso/tpu.h **** #define _CALYPSO_TPU_H
   3:include/calypso/tpu.h **** 
   4:include/calypso/tpu.h **** #define BITS_PER_TDMA		1250
   5:include/calypso/tpu.h **** #define QBITS_PER_TDMA		(BITS_PER_TDMA * 4)	/* 5000 */
   6:include/calypso/tpu.h **** #define TPU_RANGE		QBITS_PER_TDMA
   7:include/calypso/tpu.h **** #define	SWITCH_TIME		(TPU_RANGE-10)
   8:include/calypso/tpu.h **** 
   9:include/calypso/tpu.h **** /* Assert or de-assert TPU reset */
  10:include/calypso/tpu.h **** void tpu_reset(int active);
  11:include/calypso/tpu.h **** /* Enable or Disable a new scenario loaded into the TPU */
  12:include/calypso/tpu.h **** void tpu_enable(int active);
  13:include/calypso/tpu.h **** /* Enable or Disable the clock of the TPU Module */
  14:include/calypso/tpu.h **** void tpu_clk_enable(int active);
  15:include/calypso/tpu.h **** /* Enable Frame Interrupt generation on next frame.  DSP will reset it */
  16:include/calypso/tpu.h **** void tpu_dsp_frameirq_enable(void);
  17:include/calypso/tpu.h **** /* Is a Frame interrupt still pending for the DSP ? */
  18:include/calypso/tpu.h **** int tpu_dsp_fameirq_pending(void);
  19:include/calypso/tpu.h **** /* Rewind the TPU, i.e. restart enqueueing instructions at the base addr */
  20:include/calypso/tpu.h **** void tpu_rewind(void);
  21:include/calypso/tpu.h **** /* Enqueue a raw TPU instruction */
  22:include/calypso/tpu.h **** void tpu_enqueue(uint16_t instr);
  23:include/calypso/tpu.h **** /* Initialize TPU and TPU driver */
  24:include/calypso/tpu.h **** void tpu_init(void);
  25:include/calypso/tpu.h **** /* (Busy)Wait until TPU is idle */
  26:include/calypso/tpu.h **** void tpu_wait_idle(void);
  27:include/calypso/tpu.h **** /* Enable FRAME interrupt generation */
  28:include/calypso/tpu.h **** void tpu_frame_irq_en(int mcu, int dsp);
  29:include/calypso/tpu.h **** /* Force the generation of a DSP interrupt */
  30:include/calypso/tpu.h **** void tpu_force_dsp_frame_irq(void);
  31:include/calypso/tpu.h **** 
  32:include/calypso/tpu.h **** /* Get the current TPU SYNCHRO register */
  33:include/calypso/tpu.h **** uint16_t tpu_get_synchro(void);
  34:include/calypso/tpu.h **** /* Get the current TPU OFFSET register */
  35:include/calypso/tpu.h **** uint16_t tpu_get_offset(void);
  36:include/calypso/tpu.h **** 
  37:include/calypso/tpu.h **** enum tpu_instr {
  38:include/calypso/tpu.h **** 	TPU_INSTR_AT		= (1 << 13),
  39:include/calypso/tpu.h **** 	TPU_INSTR_OFFSET	= (2 << 13),
  40:include/calypso/tpu.h **** 	TPU_INSTR_SYNCHRO	= (3 << 13),	/* Loading delta synchro value in TPU synchro register */
  41:include/calypso/tpu.h **** 	TPU_INSTR_WAIT		= (5 << 13),	/* Wait a certain period (in GSM qbits) */
  42:include/calypso/tpu.h **** 	TPU_INSTR_SLEEP		= (0 << 13),	/* Stop the sequencer by disabling TPU ENABLE bit in ctrl reg */
  43:include/calypso/tpu.h **** 	/* data processing */
  44:include/calypso/tpu.h **** 	TPU_INSTR_MOVE		= (4 << 13),
  45:include/calypso/tpu.h **** };
  46:include/calypso/tpu.h **** 
  47:include/calypso/tpu.h **** /* Addresses internal to the TPU, only accessible via MOVE */
  48:include/calypso/tpu.h **** enum tpu_reg_int {
  49:include/calypso/tpu.h **** 	TPUI_TSP_CTRL1	= 0x00,
  50:include/calypso/tpu.h **** 	TPUI_TSP_CTRL2	= 0x01,
  51:include/calypso/tpu.h **** 	TPUI_TX_1	= 0x04,
  52:include/calypso/tpu.h **** 	TPUI_TX_2	= 0x03,
  53:include/calypso/tpu.h **** 	TPUI_TX_3	= 0x02,
  54:include/calypso/tpu.h **** 	TPUI_TX_4	= 0x05,
  55:include/calypso/tpu.h **** 	TPUI_TSP_ACT_L	= 0x06,
  56:include/calypso/tpu.h **** 	TPUI_TSP_ACT_U	= 0x07,
  57:include/calypso/tpu.h **** 	TPUI_TSP_SET1	= 0x09,
  58:include/calypso/tpu.h **** 	TPUI_TSP_SET2	= 0x0a,
  59:include/calypso/tpu.h **** 	TPUI_TSP_SET3	= 0x0b,
  60:include/calypso/tpu.h **** 	TPUI_DSP_INT_PG	= 0x10,
  61:include/calypso/tpu.h **** 	TPUI_GAUGING_EN = 0x11,
  62:include/calypso/tpu.h **** };
  63:include/calypso/tpu.h **** 
  64:include/calypso/tpu.h **** enum tpui_ctrl2_bits {
  65:include/calypso/tpu.h **** 	TPUI_CTRL2_RD		= (1 << 0),
  66:include/calypso/tpu.h **** 	TPUI_CTRL2_WR		= (1 << 1),
  67:include/calypso/tpu.h **** };
  68:include/calypso/tpu.h **** 
  69:include/calypso/tpu.h **** static inline uint16_t tpu_mod5000(int16_t time)
  70:include/calypso/tpu.h **** {
  71:include/calypso/tpu.h **** 	if (time < 0)
  72:include/calypso/tpu.h **** 		return time + 5000;
  73:include/calypso/tpu.h **** 	if (time >= 5000)
  74:include/calypso/tpu.h **** 		return time - 5000;
  75:include/calypso/tpu.h **** 	return time;
  76:include/calypso/tpu.h **** }
  77:include/calypso/tpu.h **** 
  78:include/calypso/tpu.h **** /* Enqueue a SLEEP operation (stop sequencer by disabling TPU ENABLE bit) */
  79:include/calypso/tpu.h **** static inline void tpu_enq_sleep(void)
  80:include/calypso/tpu.h **** {
  81:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_SLEEP);
  82:include/calypso/tpu.h **** }
  83:include/calypso/tpu.h **** 
  84:include/calypso/tpu.h **** /* Enqueue a MOVE operation */
  85:include/calypso/tpu.h **** static inline void tpu_enq_move(uint8_t addr, uint8_t data)
  86:include/calypso/tpu.h **** {
  17              		.loc 1 86 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
  87:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_MOVE | (data << 5) | (addr & 0x1f));
  23              		.loc 1 87 0
  24 0000 1F0000E2 		and	r0, r0, #31
  25              	.LVL1:
  26 0004 8008E0E1 		mvn	r0, r0, asl #17
  27 0008 A008E0E1 		mvn	r0, r0, lsr #17
  28 000c 810280E1 		orr	r0, r0, r1, asl #5
  29 0010 0008A0E1 		mov	r0, r0, asl #16
  30 0014 2008A0E1 		mov	r0, r0, lsr #16
  88:include/calypso/tpu.h **** }
  31              		.loc 1 88 0
  87:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_MOVE | (data << 5) | (addr & 0x1f));
  32              		.loc 1 87 0
  33 0018 FEFFFFEA 		b	tpu_enqueue
  34              		.cfi_endproc
  35              	.LFE2:
  37              		.section	.text.tsp_write,"ax",%progbits
  38              		.align	2
  39              		.global	tsp_write
  41              	tsp_write:
  42              	.LFB8:
  43              		.file 2 "calypso/tsp.c"
   1:calypso/tsp.c **** /* Calypso DBB internal TSP (Time Serial Port) Driver */
   2:calypso/tsp.c **** 
   3:calypso/tsp.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/tsp.c ****  *
   5:calypso/tsp.c ****  * All Rights Reserved
   6:calypso/tsp.c ****  *
   7:calypso/tsp.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/tsp.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/tsp.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/tsp.c ****  * (at your option) any later version.
  11:calypso/tsp.c ****  *
  12:calypso/tsp.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/tsp.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/tsp.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/tsp.c ****  * GNU General Public License for more details.
  16:calypso/tsp.c ****  *
  17:calypso/tsp.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/tsp.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/tsp.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/tsp.c ****  *
  21:calypso/tsp.c ****  */
  22:calypso/tsp.c **** 
  23:calypso/tsp.c **** #include <stdint.h>
  24:calypso/tsp.c **** #include <stdio.h>
  25:calypso/tsp.c **** 
  26:calypso/tsp.c **** #include <debug.h>
  27:calypso/tsp.c **** #include <memory.h>
  28:calypso/tsp.c **** #include <calypso/tpu.h>
  29:calypso/tsp.c **** #include <calypso/tsp.h>
  30:calypso/tsp.c **** 
  31:calypso/tsp.c **** static uint16_t tspact_state;
  32:calypso/tsp.c **** 
  33:calypso/tsp.c **** /* initiate a TSP write through the TPU */
  34:calypso/tsp.c **** void tsp_write(uint8_t dev_idx, uint8_t bitlen, uint32_t dout)
  35:calypso/tsp.c **** {
  44              		.loc 2 35 0
  45              		.cfi_startproc
  46              		@ args = 0, pretend = 0, frame = 0
  47              		@ frame_needed = 0, uses_anonymous_args = 0
  48              	.LVL2:
  49 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
  50              	.LCFI0:
  51              		.cfi_def_cfa_offset 28
  52              		.loc 2 35 0
  53 0004 FF5001E2 		and	r5, r1, #255
  54              		.cfi_offset 14, -4
  55              		.cfi_offset 10, -8
  56              		.cfi_offset 8, -12
  57              		.cfi_offset 7, -16
  58              		.cfi_offset 6, -20
  59              		.cfi_offset 5, -24
  60              		.cfi_offset 4, -28
  36:calypso/tsp.c **** 	if (bitlen <= 8) {
  61              		.loc 2 36 0
  62 0008 080055E3 		cmp	r5, #8
  35:calypso/tsp.c **** {
  63              		.loc 2 35 0
  64 000c FFA000E2 		and	sl, r0, #255
  65 0010 0240A0E1 		mov	r4, r2
  37:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, dout & 0xff);
  66              		.loc 2 37 0
  67 0014 FF100292 		andls	r1, r2, #255
  68              	.LVL3:
  69 0018 0400A093 		movls	r0, #4
  70              	.LVL4:
  36:calypso/tsp.c **** 	if (bitlen <= 8) {
  71              		.loc 2 36 0
  72 001c 2000009A 		bls	.L7
  38:calypso/tsp.c **** 	} else if (bitlen <= 16) {
  73              		.loc 2 38 0
  74 0020 100055E3 		cmp	r5, #16
  75 0024 0600008A 		bhi	.L5
  39:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 8) & 0xff);
  76              		.loc 2 39 0
  77 0028 2214A0E1 		mov	r1, r2, lsr #8
  78 002c 0400A0E3 		mov	r0, #4
  79 0030 FF1001E2 		and	r1, r1, #255
  80 0034 FEFFFFEB 		bl	tpu_enq_move
  81              	.LVL5:
  40:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, dout & 0xff);
  82              		.loc 2 40 0
  83 0038 FF1004E2 		and	r1, r4, #255
  84 003c 0300A0E3 		mov	r0, #3
  85 0040 170000EA 		b	.L7
  86              	.L5:
  41:calypso/tsp.c **** 	} else if (bitlen <= 24) {
  87              		.loc 2 41 0
  88 0044 180055E3 		cmp	r5, #24
  89 0048 FF6002E2 		and	r6, r2, #255
  90 004c 2274A0E1 		mov	r7, r2, lsr #8
  91 0050 2288A0E1 		mov	r8, r2, lsr #16
  92 0054 0700008A 		bhi	.L6
  42:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 16) & 0xff);
  93              		.loc 2 42 0
  94 0058 FF1008E2 		and	r1, r8, #255
  95 005c 0400A0E3 		mov	r0, #4
  96 0060 FEFFFFEB 		bl	tpu_enq_move
  43:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, (dout >> 8) & 0xff);
  97              		.loc 2 43 0
  98 0064 0300A0E3 		mov	r0, #3
  99 0068 FF1007E2 		and	r1, r7, #255
 100 006c FEFFFFEB 		bl	tpu_enq_move
  44:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_3, dout & 0xff);
 101              		.loc 2 44 0
 102 0070 0200A0E3 		mov	r0, #2
 103 0074 090000EA 		b	.L8
 104              	.L6:
  45:calypso/tsp.c **** 	} else {
  46:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_1, (dout >> 24) & 0xff);
 105              		.loc 2 46 0
 106 0078 221CA0E1 		mov	r1, r2, lsr #24
 107 007c 0400A0E3 		mov	r0, #4
 108 0080 FEFFFFEB 		bl	tpu_enq_move
  47:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_2, (dout >> 16) & 0xff);
 109              		.loc 2 47 0
 110 0084 FF1008E2 		and	r1, r8, #255
 111 0088 0300A0E3 		mov	r0, #3
 112 008c FEFFFFEB 		bl	tpu_enq_move
  48:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_3, (dout >> 8) & 0xff);
 113              		.loc 2 48 0
 114 0090 0200A0E3 		mov	r0, #2
 115 0094 FF1007E2 		and	r1, r7, #255
 116 0098 FEFFFFEB 		bl	tpu_enq_move
  49:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_4, dout & 0xff);
 117              		.loc 2 49 0
 118 009c 0500A0E3 		mov	r0, #5
 119              	.L8:
 120 00a0 0610A0E1 		mov	r1, r6
 121              	.L7:
  50:calypso/tsp.c **** 	}
  51:calypso/tsp.c **** 	tpu_enq_move(TPUI_TSP_CTRL1, (dev_idx << 5) | (bitlen - 1));
 122              		.loc 2 51 0
 123 00a4 015045E2 		sub	r5, r5, #1
 124 00a8 8AA285E1 		orr	sl, r5, sl, asl #5
  49:calypso/tsp.c **** 		tpu_enq_move(TPUI_TX_4, dout & 0xff);
 125              		.loc 2 49 0
 126 00ac FEFFFFEB 		bl	tpu_enq_move
 127              		.loc 2 51 0
 128 00b0 FF100AE2 		and	r1, sl, #255
 129 00b4 0000A0E3 		mov	r0, #0
 130 00b8 FEFFFFEB 		bl	tpu_enq_move
  52:calypso/tsp.c **** 	tpu_enq_move(TPUI_TSP_CTRL2, TPUI_CTRL2_WR);
 131              		.loc 2 52 0
 132 00bc 0100A0E3 		mov	r0, #1
 133 00c0 0210A0E3 		mov	r1, #2
  53:calypso/tsp.c **** }
 134              		.loc 2 53 0
 135 00c4 F045BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
  52:calypso/tsp.c **** 	tpu_enq_move(TPUI_TSP_CTRL2, TPUI_CTRL2_WR);
 136              		.loc 2 52 0
 137 00c8 FEFFFFEA 		b	tpu_enq_move
 138              		.cfi_endproc
 139              	.LFE8:
 141              		.section	.text.tsp_setup,"ax",%progbits
 142              		.align	2
 143              		.global	tsp_setup
 145              	tsp_setup:
 146              	.LFB9:
  54:calypso/tsp.c **** 
  55:calypso/tsp.c **** /* Configure clock edge and chip enable polarity for a device */
  56:calypso/tsp.c **** void tsp_setup(uint8_t dev_idx, int clk_rising, int en_positive, int en_edge)
  57:calypso/tsp.c **** {
 147              		.loc 2 57 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL6:
 153              		.loc 2 57 0
 154 0000 00C0A0E1 		mov	ip, r0
  58:calypso/tsp.c **** 	uint8_t reg = TPUI_TSP_SET1 + (dev_idx / 2);
  59:calypso/tsp.c **** 	uint8_t val = 0;
  60:calypso/tsp.c **** 	uint8_t shift;
  61:calypso/tsp.c **** 
  62:calypso/tsp.c **** 	if (dev_idx & 1)
 155              		.loc 2 62 0
 156 0004 01C01CE2 		ands	ip, ip, #1
  63:calypso/tsp.c **** 		shift = 4;
 157              		.loc 2 63 0
 158 0008 04C0A013 		movne	ip, #4
  59:calypso/tsp.c **** 	uint8_t val = 0;
 159              		.loc 2 59 0
 160 000c 001051E2 		subs	r1, r1, #0
 161 0010 0110A013 		movne	r1, #1
 162              	.LVL7:
  64:calypso/tsp.c **** 	else
  65:calypso/tsp.c **** 		shift = 0;
  66:calypso/tsp.c **** 
  67:calypso/tsp.c **** 	if (clk_rising)
  68:calypso/tsp.c **** 		val |= 1;
  69:calypso/tsp.c **** 	if (en_positive)
 163              		.loc 2 69 0
 164 0014 000052E3 		cmp	r2, #0
  70:calypso/tsp.c **** 		val |= 2;
 165              		.loc 2 70 0
 166 0018 02108113 		orrne	r1, r1, #2
 167 001c FF100112 		andne	r1, r1, #255
  71:calypso/tsp.c **** 	if (en_edge)
 168              		.loc 2 71 0
 169 0020 000053E3 		cmp	r3, #0
  72:calypso/tsp.c **** 		val |= 4;
 170              		.loc 2 72 0
 171 0024 04108113 		orrne	r1, r1, #4
  73:calypso/tsp.c **** 
  74:calypso/tsp.c **** 	tpu_enq_move(reg, (val << shift));
 172              		.loc 2 74 0
 173 0028 111CA0E1 		mov	r1, r1, asl ip
  57:calypso/tsp.c **** {
 174              		.loc 2 57 0
 175 002c FF0000E2 		and	r0, r0, #255
 176              	.LVL8:
  58:calypso/tsp.c **** 	uint8_t reg = TPUI_TSP_SET1 + (dev_idx / 2);
 177              		.loc 2 58 0
 178 0030 A000A0E1 		mov	r0, r0, lsr #1
 179 0034 090080E2 		add	r0, r0, #9
 180              	.LVL9:
 181              		.loc 2 74 0
 182 0038 FF1001E2 		and	r1, r1, #255
  75:calypso/tsp.c **** }
 183              		.loc 2 75 0
  74:calypso/tsp.c **** 	tpu_enq_move(reg, (val << shift));
 184              		.loc 2 74 0
 185 003c FEFFFFEA 		b	tpu_enq_move
 186              		.cfi_endproc
 187              	.LFE9:
 189              		.section	.text.tsp_act_update,"ax",%progbits
 190              		.align	2
 191              		.global	tsp_act_update
 193              	tsp_act_update:
 194              	.LFB10:
  76:calypso/tsp.c **** 
  77:calypso/tsp.c **** /* Update the TSPACT state, including enable and disable */
  78:calypso/tsp.c **** void tsp_act_update(uint16_t new_act)
  79:calypso/tsp.c **** {
 195              		.loc 2 79 0
 196              		.cfi_startproc
 197              		@ args = 0, pretend = 0, frame = 0
 198              		@ frame_needed = 0, uses_anonymous_args = 0
 199              	.LVL10:
  80:calypso/tsp.c **** 	uint8_t low = new_act & 0xff;
  81:calypso/tsp.c **** 	uint8_t high = new_act >> 8;
  82:calypso/tsp.c **** 
  83:calypso/tsp.c **** 	if (low != (tspact_state & 0xff))
 200              		.loc 2 83 0
 201 0000 44309FE5 		ldr	r3, .L17
  79:calypso/tsp.c **** {
 202              		.loc 2 79 0
 203 0004 0008A0E1 		mov	r0, r0, asl #16
 204              	.LVL11:
 205 0008 30402DE9 		stmfd	sp!, {r4, r5, lr}
 206              	.LCFI1:
 207              		.cfi_def_cfa_offset 12
 208              		.loc 2 83 0
 209 000c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  79:calypso/tsp.c **** {
 210              		.loc 2 79 0
 211 0010 2048A0E1 		mov	r4, r0, lsr #16
 212              		.cfi_offset 14, -4
 213              		.cfi_offset 5, -8
 214              		.cfi_offset 4, -12
 215              	.LVL12:
 216              		.loc 2 83 0
 217 0014 FF1004E2 		and	r1, r4, #255
 218 0018 030051E1 		cmp	r1, r3
  81:calypso/tsp.c **** 	uint8_t high = new_act >> 8;
 219              		.loc 2 81 0
 220 001c 205CA0E1 		mov	r5, r0, lsr #24
 221              	.LVL13:
 222              		.loc 2 83 0
  84:calypso/tsp.c **** 		tpu_enq_move(TPUI_TSP_ACT_L, low);
 223              		.loc 2 84 0
 224 0020 0600A013 		movne	r0, #6
 225 0024 FEFFFF1B 		blne	tpu_enq_move
 226              	.L15:
  85:calypso/tsp.c **** 	if (high != (tspact_state >> 8))
 227              		.loc 2 85 0
 228 0028 1C309FE5 		ldr	r3, .L17
 229 002c B030D3E1 		ldrh	r3, [r3, #0]
 230 0030 230455E1 		cmp	r5, r3, lsr #8
  86:calypso/tsp.c **** 		tpu_enq_move(TPUI_TSP_ACT_U, high);
 231              		.loc 2 86 0
 232 0034 0700A013 		movne	r0, #7
 233 0038 0510A011 		movne	r1, r5
 234 003c FEFFFF1B 		blne	tpu_enq_move
 235              	.L16:
  87:calypso/tsp.c **** 
  88:calypso/tsp.c **** 	tspact_state = new_act;
 236              		.loc 2 88 0
 237 0040 04309FE5 		ldr	r3, .L17
 238 0044 B040C3E1 		strh	r4, [r3, #0]	@ movhi
  89:calypso/tsp.c **** }
 239              		.loc 2 89 0
 240 0048 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 241              	.L18:
 242              		.align	2
 243              	.L17:
 244 004c 00000000 		.word	.LANCHOR0
 245              		.cfi_endproc
 246              	.LFE10:
 248              		.section	.text.tsp_act_enable,"ax",%progbits
 249              		.align	2
 250              		.global	tsp_act_enable
 252              	tsp_act_enable:
 253              	.LFB11:
  90:calypso/tsp.c **** 
  91:calypso/tsp.c **** /* Enable one or multiple TSPACT signals */
  92:calypso/tsp.c **** void tsp_act_enable(uint16_t bitmask)
  93:calypso/tsp.c **** {
 254              		.loc 2 93 0
 255              		.cfi_startproc
 256              		@ args = 0, pretend = 0, frame = 0
 257              		@ frame_needed = 0, uses_anonymous_args = 0
 258              		@ link register save eliminated.
 259              	.LVL14:
  94:calypso/tsp.c **** 	uint16_t new_act = tspact_state | bitmask;
 260              		.loc 2 94 0
 261 0000 10309FE5 		ldr	r3, .L20
 262 0004 B030D3E1 		ldrh	r3, [r3, #0]
 263 0008 030080E1 		orr	r0, r0, r3
 264              	.LVL15:
  95:calypso/tsp.c **** 	tsp_act_update(new_act);
 265              		.loc 2 95 0
 266 000c 0008A0E1 		mov	r0, r0, asl #16
 267 0010 2008A0E1 		mov	r0, r0, lsr #16
  96:calypso/tsp.c **** }
 268              		.loc 2 96 0
  95:calypso/tsp.c **** 	tsp_act_update(new_act);
 269              		.loc 2 95 0
 270 0014 FEFFFFEA 		b	tsp_act_update
 271              	.L21:
 272              		.align	2
 273              	.L20:
 274 0018 00000000 		.word	.LANCHOR0
 275              		.cfi_endproc
 276              	.LFE11:
 278              		.section	.text.tsp_act_disable,"ax",%progbits
 279              		.align	2
 280              		.global	tsp_act_disable
 282              	tsp_act_disable:
 283              	.LFB12:
  97:calypso/tsp.c **** 
  98:calypso/tsp.c **** /* Disable one or multiple TSPACT signals */
  99:calypso/tsp.c **** void tsp_act_disable(uint16_t bitmask)
 100:calypso/tsp.c **** {
 284              		.loc 2 100 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289              	.LVL16:
 101:calypso/tsp.c **** 	uint16_t new_act = tspact_state & ~bitmask;
 290              		.loc 2 101 0
 291 0000 08309FE5 		ldr	r3, .L23
 292 0004 B030D3E1 		ldrh	r3, [r3, #0]
 102:calypso/tsp.c **** 	tsp_act_update(new_act);
 293              		.loc 2 102 0
 294 0008 0000C3E1 		bic	r0, r3, r0
 295              	.LVL17:
 103:calypso/tsp.c **** }
 296              		.loc 2 103 0
 102:calypso/tsp.c **** 	tsp_act_update(new_act);
 297              		.loc 2 102 0
 298 000c FEFFFFEA 		b	tsp_act_update
 299              	.L24:
 300              		.align	2
 301              	.L23:
 302 0010 00000000 		.word	.LANCHOR0
 303              		.cfi_endproc
 304              	.LFE12:
 306              		.section	.text.tsp_act_state,"ax",%progbits
 307              		.align	2
 308              		.global	tsp_act_state
 310              	tsp_act_state:
 311              	.LFB13:
 104:calypso/tsp.c **** 
 105:calypso/tsp.c **** /* Obtain the current tspact state */
 106:calypso/tsp.c **** uint16_t tsp_act_state(void)
 107:calypso/tsp.c **** {
 312              		.loc 2 107 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 108:calypso/tsp.c **** 	return tspact_state;
 109:calypso/tsp.c **** }
 317              		.loc 2 109 0
 318 0000 04309FE5 		ldr	r3, .L26
 319 0004 B000D3E1 		ldrh	r0, [r3, #0]
 320 0008 1EFF2FE1 		bx	lr
 321              	.L27:
 322              		.align	2
 323              	.L26:
 324 000c 00000000 		.word	.LANCHOR0
 325              		.cfi_endproc
 326              	.LFE13:
 328              		.section	.text.tsp_act_toggle,"ax",%progbits
 329              		.align	2
 330              		.global	tsp_act_toggle
 332              	tsp_act_toggle:
 333              	.LFB14:
 110:calypso/tsp.c **** 
 111:calypso/tsp.c **** /* Toggle one or multiple TSPACT signals */
 112:calypso/tsp.c **** void tsp_act_toggle(uint16_t bitmask)
 113:calypso/tsp.c **** {
 334              		.loc 2 113 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339              	.LVL18:
 114:calypso/tsp.c **** 	uint16_t new_act = tspact_state ^ bitmask;
 340              		.loc 2 114 0
 341 0000 10309FE5 		ldr	r3, .L29
 342 0004 B030D3E1 		ldrh	r3, [r3, #0]
 343 0008 030020E0 		eor	r0, r0, r3
 344              	.LVL19:
 115:calypso/tsp.c **** 	tsp_act_update(new_act);
 345              		.loc 2 115 0
 346 000c 0008A0E1 		mov	r0, r0, asl #16
 347 0010 2008A0E1 		mov	r0, r0, lsr #16
 116:calypso/tsp.c **** }
 348              		.loc 2 116 0
 115:calypso/tsp.c **** 	tsp_act_update(new_act);
 349              		.loc 2 115 0
 350 0014 FEFFFFEA 		b	tsp_act_update
 351              	.L30:
 352              		.align	2
 353              	.L29:
 354 0018 00000000 		.word	.LANCHOR0
 355              		.cfi_endproc
 356              	.LFE14:
 358              		.section	.text.tsp_init,"ax",%progbits
 359              		.align	2
 360              		.global	tsp_init
 362              	tsp_init:
 363              	.LFB15:
 117:calypso/tsp.c **** 
 118:calypso/tsp.c **** void tsp_init(void)
 119:calypso/tsp.c **** {
 364              		.loc 2 119 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 120:calypso/tsp.c **** 	tsp_act_update(0);
 369              		.loc 2 120 0
 370 0000 0000A0E3 		mov	r0, #0
 121:calypso/tsp.c **** }
 371              		.loc 2 121 0
 120:calypso/tsp.c **** 	tsp_act_update(0);
 372              		.loc 2 120 0
 373 0004 FEFFFFEA 		b	tsp_act_update
 374              		.cfi_endproc
 375              	.LFE15:
 377              		.bss
 378              		.align	1
 379              		.set	.LANCHOR0,. + 0
 382              	tspact_state:
 383 0000 0000     		.space	2
 384              		.text
 385              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 tsp.c
     /tmp/cc9ipDta.s:12     .text.tpu_enq_move:0000000000000000 $a
     /tmp/cc9ipDta.s:14     .text.tpu_enq_move:0000000000000000 tpu_enq_move
     /tmp/cc9ipDta.s:38     .text.tsp_write:0000000000000000 $a
     /tmp/cc9ipDta.s:41     .text.tsp_write:0000000000000000 tsp_write
     /tmp/cc9ipDta.s:142    .text.tsp_setup:0000000000000000 $a
     /tmp/cc9ipDta.s:145    .text.tsp_setup:0000000000000000 tsp_setup
     /tmp/cc9ipDta.s:190    .text.tsp_act_update:0000000000000000 $a
     /tmp/cc9ipDta.s:193    .text.tsp_act_update:0000000000000000 tsp_act_update
     /tmp/cc9ipDta.s:244    .text.tsp_act_update:000000000000004c $d
     /tmp/cc9ipDta.s:249    .text.tsp_act_enable:0000000000000000 $a
     /tmp/cc9ipDta.s:252    .text.tsp_act_enable:0000000000000000 tsp_act_enable
     /tmp/cc9ipDta.s:274    .text.tsp_act_enable:0000000000000018 $d
     /tmp/cc9ipDta.s:279    .text.tsp_act_disable:0000000000000000 $a
     /tmp/cc9ipDta.s:282    .text.tsp_act_disable:0000000000000000 tsp_act_disable
     /tmp/cc9ipDta.s:302    .text.tsp_act_disable:0000000000000010 $d
     /tmp/cc9ipDta.s:307    .text.tsp_act_state:0000000000000000 $a
     /tmp/cc9ipDta.s:310    .text.tsp_act_state:0000000000000000 tsp_act_state
     /tmp/cc9ipDta.s:324    .text.tsp_act_state:000000000000000c $d
     /tmp/cc9ipDta.s:329    .text.tsp_act_toggle:0000000000000000 $a
     /tmp/cc9ipDta.s:332    .text.tsp_act_toggle:0000000000000000 tsp_act_toggle
     /tmp/cc9ipDta.s:354    .text.tsp_act_toggle:0000000000000018 $d
     /tmp/cc9ipDta.s:359    .text.tsp_init:0000000000000000 $a
     /tmp/cc9ipDta.s:362    .text.tsp_init:0000000000000000 tsp_init
     /tmp/cc9ipDta.s:378    .bss:0000000000000000 $d
     /tmp/cc9ipDta.s:382    .bss:0000000000000000 tspact_state
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
tpu_enqueue
