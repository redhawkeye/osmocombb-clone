   1              		.file	"timer.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.wdog_irq,"ax",%progbits
  12              		.align	2
  14              	wdog_irq:
  15              	.LFB5:
  16              		.file 1 "calypso/timer.c"
   1:calypso/timer.c **** /* Calypso DBB internal Timer Driver */
   2:calypso/timer.c **** 
   3:calypso/timer.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:calypso/timer.c ****  *
   5:calypso/timer.c ****  * All Rights Reserved
   6:calypso/timer.c ****  *
   7:calypso/timer.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/timer.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/timer.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/timer.c ****  * (at your option) any later version.
  11:calypso/timer.c ****  *
  12:calypso/timer.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/timer.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/timer.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/timer.c ****  * GNU General Public License for more details.
  16:calypso/timer.c ****  *
  17:calypso/timer.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/timer.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/timer.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/timer.c ****  *
  21:calypso/timer.c ****  */
  22:calypso/timer.c **** 
  23:calypso/timer.c **** #include <stdio.h>
  24:calypso/timer.c **** #include <memory.h>
  25:calypso/timer.c **** #include <stdint.h>
  26:calypso/timer.c **** 
  27:calypso/timer.c **** #include <defines.h>
  28:calypso/timer.c **** 
  29:calypso/timer.c **** #include <calypso/timer.h>
  30:calypso/timer.c **** #include <calypso/irq.h>
  31:calypso/timer.c **** 
  32:calypso/timer.c **** #define BASE_ADDR_TIMER		0xfffe3800
  33:calypso/timer.c **** #define TIMER2_OFFSET		0x3000
  34:calypso/timer.c **** 
  35:calypso/timer.c **** #define TIMER_REG(n, m)		(((n)-1) ? (BASE_ADDR_TIMER + TIMER2_OFFSET + (m)) : (BASE_ADDR_TIMER + (m
  36:calypso/timer.c **** 
  37:calypso/timer.c **** enum timer_reg {
  38:calypso/timer.c **** 	CNTL_TIMER	= 0x00,
  39:calypso/timer.c **** 	LOAD_TIMER	= 0x02,
  40:calypso/timer.c **** 	READ_TIMER	= 0x04,
  41:calypso/timer.c **** };
  42:calypso/timer.c **** 
  43:calypso/timer.c **** enum timer_ctl {
  44:calypso/timer.c **** 	CNTL_START		= (1 << 0),
  45:calypso/timer.c **** 	CNTL_AUTO_RELOAD	= (1 << 1),
  46:calypso/timer.c **** 	CNTL_CLOCK_ENABLE	= (1 << 5),
  47:calypso/timer.c **** };
  48:calypso/timer.c **** 
  49:calypso/timer.c **** /* Regular Timers (1 and 2) */
  50:calypso/timer.c **** 
  51:calypso/timer.c **** void hwtimer_enable(int num, int on)
  52:calypso/timer.c **** {
  53:calypso/timer.c **** 	uint8_t ctl;
  54:calypso/timer.c **** 
  55:calypso/timer.c **** 	if (num < 1 || num > 2) {
  56:calypso/timer.c **** 		printf("Unknown timer %u\n", num);
  57:calypso/timer.c **** 		return;
  58:calypso/timer.c **** 	}
  59:calypso/timer.c **** 
  60:calypso/timer.c **** 	ctl = readb(TIMER_REG(num, CNTL_TIMER));
  61:calypso/timer.c **** 	if (on)
  62:calypso/timer.c **** 		ctl |= CNTL_START|CNTL_CLOCK_ENABLE;
  63:calypso/timer.c **** 	else
  64:calypso/timer.c **** 		ctl &= ~CNTL_START;
  65:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
  66:calypso/timer.c **** }
  67:calypso/timer.c **** 
  68:calypso/timer.c **** void hwtimer_config(int num, uint8_t pre_scale, int auto_reload)
  69:calypso/timer.c **** {
  70:calypso/timer.c **** 	uint8_t ctl;
  71:calypso/timer.c **** 
  72:calypso/timer.c **** 	ctl = (pre_scale & 0x7) << 2;
  73:calypso/timer.c **** 	if (auto_reload)
  74:calypso/timer.c **** 		ctl |= CNTL_AUTO_RELOAD;
  75:calypso/timer.c **** 
  76:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
  77:calypso/timer.c **** }
  78:calypso/timer.c **** 
  79:calypso/timer.c **** void hwtimer_load(int num, uint16_t val)
  80:calypso/timer.c **** {
  81:calypso/timer.c **** 	writew(val, TIMER_REG(num, LOAD_TIMER));
  82:calypso/timer.c **** }
  83:calypso/timer.c **** 
  84:calypso/timer.c **** uint16_t hwtimer_read(int num)
  85:calypso/timer.c **** {
  86:calypso/timer.c **** 	uint8_t ctl = readb(TIMER_REG(num, CNTL_TIMER));
  87:calypso/timer.c **** 
  88:calypso/timer.c **** 	/* somehow a read results in an abort */
  89:calypso/timer.c **** 	if ((ctl & (CNTL_START|CNTL_CLOCK_ENABLE)) != (CNTL_START|CNTL_CLOCK_ENABLE))
  90:calypso/timer.c **** 		return 0xFFFF;
  91:calypso/timer.c **** 	return readw(TIMER_REG(num, READ_TIMER));
  92:calypso/timer.c **** }
  93:calypso/timer.c **** 
  94:calypso/timer.c **** void hwtimer_init(void)
  95:calypso/timer.c **** {
  96:calypso/timer.c **** 	writeb(CNTL_CLOCK_ENABLE, TIMER_REG(1, CNTL_TIMER));
  97:calypso/timer.c **** 	writeb(CNTL_CLOCK_ENABLE, TIMER_REG(2, CNTL_TIMER));
  98:calypso/timer.c **** }
  99:calypso/timer.c **** 
 100:calypso/timer.c **** /* Watchdog Timer */
 101:calypso/timer.c **** 
 102:calypso/timer.c **** #define BASE_ADDR_WDOG		0xfffff800
 103:calypso/timer.c **** #define WDOG_REG(m)		(BASE_ADDR_WDOG + m)
 104:calypso/timer.c **** 
 105:calypso/timer.c **** enum wdog_reg {
 106:calypso/timer.c **** 	WD_CNTL_TIMER	= CNTL_TIMER,
 107:calypso/timer.c **** 	WD_LOAD_TIMER	= LOAD_TIMER,
 108:calypso/timer.c **** 	WD_READ_TIMER	= 0x02,
 109:calypso/timer.c **** 	WD_MODE		= 0x04,
 110:calypso/timer.c **** };
 111:calypso/timer.c **** 
 112:calypso/timer.c **** enum wdog_ctl {
 113:calypso/timer.c **** 	WD_CTL_START = (1 << 7),
 114:calypso/timer.c **** 	WD_CTL_AUTO_RELOAD = (1 << 8)
 115:calypso/timer.c **** };
 116:calypso/timer.c **** 
 117:calypso/timer.c **** enum wdog_mode {
 118:calypso/timer.c **** 	WD_MODE_DIS_ARM = 0xF5,
 119:calypso/timer.c **** 	WD_MODE_DIS_CONFIRM = 0xA0,
 120:calypso/timer.c **** 	WD_MODE_ENABLE = (1 << 15)
 121:calypso/timer.c **** };
 122:calypso/timer.c **** 
 123:calypso/timer.c **** #define WD_CTL_PRESCALE(value) (((value)&0x07) << 9)
 124:calypso/timer.c **** 
 125:calypso/timer.c **** static void wdog_irq(__unused enum irq_nr nr)
 126:calypso/timer.c **** {
  17              		.loc 1 126 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
 127:calypso/timer.c **** 	puts("=> WATCHDOG\n");
  23              		.loc 1 127 0
  24 0000 00009FE5 		ldr	r0, .L2
  25              	.LVL1:
 128:calypso/timer.c **** }
  26              		.loc 1 128 0
 127:calypso/timer.c **** 	puts("=> WATCHDOG\n");
  27              		.loc 1 127 0
  28 0004 FEFFFFEA 		b	puts
  29              	.L3:
  30              		.align	2
  31              	.L2:
  32 0008 00000000 		.word	.LC0
  33              		.cfi_endproc
  34              	.LFE5:
  36              		.section	.text.hwtimer_enable,"ax",%progbits
  37              		.align	2
  38              		.global	hwtimer_enable
  40              	hwtimer_enable:
  41              	.LFB0:
  52:calypso/timer.c **** {
  42              		.loc 1 52 0
  43              		.cfi_startproc
  44              		@ args = 0, pretend = 0, frame = 0
  45              		@ frame_needed = 0, uses_anonymous_args = 0
  46              		@ link register save eliminated.
  47              	.LVL2:
  55:calypso/timer.c **** 	if (num < 1 || num > 2) {
  48              		.loc 1 55 0
  49 0000 012040E2 		sub	r2, r0, #1
  50 0004 010052E3 		cmp	r2, #1
  52:calypso/timer.c **** {
  51              		.loc 1 52 0
  52 0008 0030A0E1 		mov	r3, r0
  55:calypso/timer.c **** 	if (num < 1 || num > 2) {
  53              		.loc 1 55 0
  54 000c 0200009A 		bls	.L5
  56:calypso/timer.c **** 		printf("Unknown timer %u\n", num);
  55              		.loc 1 56 0
  56 0010 44009FE5 		ldr	r0, .L12
  57              	.LVL3:
  58 0014 0310A0E1 		mov	r1, r3
  59              	.LVL4:
  66:calypso/timer.c **** }
  60              		.loc 1 66 0
  56:calypso/timer.c **** 		printf("Unknown timer %u\n", num);
  61              		.loc 1 56 0
  62 0018 FEFFFFEA 		b	printf
  63              	.LVL5:
  64              	.L5:
  60:calypso/timer.c **** 	ctl = readb(TIMER_REG(num, CNTL_TIMER));
  65              		.loc 1 60 0
  66 001c 3C009FE5 		ldr	r0, .L12+4
  67              	.LVL6:
  68 0020 010053E3 		cmp	r3, #1
  69 0024 38209FE5 		ldr	r2, .L12+8
  70 0028 0020A001 		moveq	r2, r0
  71 002c 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
  61:calypso/timer.c **** 	if (on)
  72              		.loc 1 61 0
  73 0030 000051E3 		cmp	r1, #0
  60:calypso/timer.c **** 	ctl = readb(TIMER_REG(num, CNTL_TIMER));
  74              		.loc 1 60 0
  75 0034 FF0002E2 		and	r0, r2, #255
  76              	.LVL7:
  62:calypso/timer.c **** 		ctl |= CNTL_START|CNTL_CLOCK_ENABLE;
  77              		.loc 1 62 0
  78 0038 21208013 		orrne	r2, r0, #33
  79              	.LVL8:
  65:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
  80              		.loc 1 65 0
  81 003c 20109FE5 		ldr	r1, .L12+8
  82              	.LVL9:
  83 0040 18009FE5 		ldr	r0, .L12+4
  64:calypso/timer.c **** 		ctl &= ~CNTL_START;
  84              		.loc 1 64 0
  85 0044 FE200202 		andeq	r2, r2, #254
  86              	.LVL10:
  65:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
  87              		.loc 1 65 0
  88 0048 010053E3 		cmp	r3, #1
  89 004c 0030A001 		moveq	r3, r0
  90              	.LVL11:
  91 0050 0130A011 		movne	r3, r1
  92 0054 0020C3E5 		strb	r2, [r3, #0]
  66:calypso/timer.c **** }
  93              		.loc 1 66 0
  94 0058 1EFF2FE1 		bx	lr
  95              	.L13:
  96              		.align	2
  97              	.L12:
  98 005c 0D000000 		.word	.LC1
  99 0060 0038FEFF 		.word	-116736
 100 0064 0068FEFF 		.word	-104448
 101              		.cfi_endproc
 102              	.LFE0:
 104              		.section	.text.hwtimer_config,"ax",%progbits
 105              		.align	2
 106              		.global	hwtimer_config
 108              	hwtimer_config:
 109              	.LFB1:
  69:calypso/timer.c **** {
 110              		.loc 1 69 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.LVL12:
  72:calypso/timer.c **** 	ctl = (pre_scale & 0x7) << 2;
 116              		.loc 1 72 0
 117 0000 071001E2 		and	r1, r1, #7
 118              	.LVL13:
  73:calypso/timer.c **** 	if (auto_reload)
 119              		.loc 1 73 0
 120 0004 000052E3 		cmp	r2, #0
  72:calypso/timer.c **** 	ctl = (pre_scale & 0x7) << 2;
 121              		.loc 1 72 0
 122 0008 0111A0E1 		mov	r1, r1, asl #2
 123              	.LVL14:
  76:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
 124              		.loc 1 76 0
 125 000c 18309FE5 		ldr	r3, .L18
 126 0010 18209FE5 		ldr	r2, .L18+4
 127              	.LVL15:
  74:calypso/timer.c **** 		ctl |= CNTL_AUTO_RELOAD;
 128              		.loc 1 74 0
 129 0014 02108113 		orrne	r1, r1, #2
 130              	.LVL16:
  76:calypso/timer.c **** 	writeb(ctl, TIMER_REG(num, CNTL_TIMER));
 131              		.loc 1 76 0
 132 0018 010050E3 		cmp	r0, #1
 133 001c 0200A001 		moveq	r0, r2
 134              	.LVL17:
 135 0020 0300A011 		movne	r0, r3
 136 0024 0010C0E5 		strb	r1, [r0, #0]
  77:calypso/timer.c **** }
 137              		.loc 1 77 0
 138 0028 1EFF2FE1 		bx	lr
 139              	.L19:
 140              		.align	2
 141              	.L18:
 142 002c 0068FEFF 		.word	-104448
 143 0030 0038FEFF 		.word	-116736
 144              		.cfi_endproc
 145              	.LFE1:
 147              		.section	.text.hwtimer_load,"ax",%progbits
 148              		.align	2
 149              		.global	hwtimer_load
 151              	hwtimer_load:
 152              	.LFB2:
  80:calypso/timer.c **** {
 153              		.loc 1 80 0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
 157              		@ link register save eliminated.
 158              	.LVL18:
  81:calypso/timer.c **** 	writew(val, TIMER_REG(num, LOAD_TIMER));
 159              		.loc 1 81 0
 160 0000 18209FE5 		ldr	r2, .L23
 161 0004 18309FE5 		ldr	r3, .L23+4
  80:calypso/timer.c **** {
 162              		.loc 1 80 0
 163 0008 0118A0E1 		mov	r1, r1, asl #16
 164              	.LVL19:
  81:calypso/timer.c **** 	writew(val, TIMER_REG(num, LOAD_TIMER));
 165              		.loc 1 81 0
 166 000c 010050E3 		cmp	r0, #1
  80:calypso/timer.c **** {
 167              		.loc 1 80 0
 168 0010 2118A0E1 		mov	r1, r1, lsr #16
  81:calypso/timer.c **** 	writew(val, TIMER_REG(num, LOAD_TIMER));
 169              		.loc 1 81 0
 170 0014 0230A001 		moveq	r3, r2
 171 0018 B010C3E1 		strh	r1, [r3, #0]	@ movhi
  82:calypso/timer.c **** }
 172              		.loc 1 82 0
 173 001c 1EFF2FE1 		bx	lr
 174              	.L24:
 175              		.align	2
 176              	.L23:
 177 0020 0238FEFF 		.word	-116734
 178 0024 0268FEFF 		.word	-104446
 179              		.cfi_endproc
 180              	.LFE2:
 182              		.section	.text.hwtimer_read,"ax",%progbits
 183              		.align	2
 184              		.global	hwtimer_read
 186              	hwtimer_read:
 187              	.LFB3:
  85:calypso/timer.c **** {
 188              		.loc 1 85 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              	.LVL20:
  86:calypso/timer.c **** 	uint8_t ctl = readb(TIMER_REG(num, CNTL_TIMER));
 194              		.loc 1 86 0
 195 0000 3C209FE5 		ldr	r2, .L32
 196 0004 3C309FE5 		ldr	r3, .L32+4
 197 0008 010050E3 		cmp	r0, #1
 198 000c 0230A001 		moveq	r3, r2
 199 0010 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
  89:calypso/timer.c **** 	if ((ctl & (CNTL_START|CNTL_CLOCK_ENABLE)) != (CNTL_START|CNTL_CLOCK_ENABLE))
 200              		.loc 1 89 0
 201 0014 213003E2 		and	r3, r3, #33
 202 0018 210053E3 		cmp	r3, #33
 203 001c 0600001A 		bne	.L30
  91:calypso/timer.c **** 	return readw(TIMER_REG(num, READ_TIMER));
 204              		.loc 1 91 0
 205 0020 24309FE5 		ldr	r3, .L32+8
 206 0024 010050E3 		cmp	r0, #1
 207 0028 042082E2 		add	r2, r2, #4
 208 002c 0200A001 		moveq	r0, r2
 209              	.LVL21:
 210 0030 0300A011 		movne	r0, r3
 211 0034 B000D0E1 		ldrh	r0, [r0, #0]
 212 0038 1EFF2FE1 		bx	lr
 213              	.LVL22:
 214              	.L30:
  90:calypso/timer.c **** 		return 0xFFFF;
 215              		.loc 1 90 0
 216 003c 0C009FE5 		ldr	r0, .L32+12
 217              	.LVL23:
  92:calypso/timer.c **** }
 218              		.loc 1 92 0
 219 0040 1EFF2FE1 		bx	lr
 220              	.L33:
 221              		.align	2
 222              	.L32:
 223 0044 0038FEFF 		.word	-116736
 224 0048 0068FEFF 		.word	-104448
 225 004c 0468FEFF 		.word	-104444
 226 0050 FFFF0000 		.word	65535
 227              		.cfi_endproc
 228              	.LFE3:
 230              		.section	.text.hwtimer_init,"ax",%progbits
 231              		.align	2
 232              		.global	hwtimer_init
 234              	hwtimer_init:
 235              	.LFB4:
  95:calypso/timer.c **** {
 236              		.loc 1 95 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 0, uses_anonymous_args = 0
 240              		@ link register save eliminated.
  96:calypso/timer.c **** 	writeb(CNTL_CLOCK_ENABLE, TIMER_REG(1, CNTL_TIMER));
 241              		.loc 1 96 0
 242 0000 10209FE5 		ldr	r2, .L35
 243 0004 2030A0E3 		mov	r3, #32
 244 0008 FF3042E5 		strb	r3, [r2, #-255]
  97:calypso/timer.c **** 	writeb(CNTL_CLOCK_ENABLE, TIMER_REG(2, CNTL_TIMER));
 245              		.loc 1 97 0
 246 000c 032A82E2 		add	r2, r2, #12288
 247 0010 FF3042E5 		strb	r3, [r2, #-255]
  98:calypso/timer.c **** }
 248              		.loc 1 98 0
 249 0014 1EFF2FE1 		bx	lr
 250              	.L36:
 251              		.align	2
 252              	.L35:
 253 0018 FF38FEFF 		.word	-116481
 254              		.cfi_endproc
 255              	.LFE4:
 257              		.section	.text.wdog_enable,"ax",%progbits
 258              		.align	2
 259              		.global	wdog_enable
 261              	wdog_enable:
 262              	.LFB6:
 129:calypso/timer.c **** 
 130:calypso/timer.c **** void wdog_enable(int on)
 131:calypso/timer.c **** {
 263              		.loc 1 131 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 0
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267              	.LVL24:
 132:calypso/timer.c **** 	if (on) {
 268              		.loc 1 132 0
 269 0000 000050E3 		cmp	r0, #0
 131:calypso/timer.c **** {
 270              		.loc 1 131 0
 271 0004 04E02DE5 		str	lr, [sp, #-4]!
 272              	.LCFI0:
 273              		.cfi_def_cfa_offset 4
 274              		.loc 1 132 0
 275 0008 0C00000A 		beq	.L38
 276              		.cfi_offset 14, -4
 133:calypso/timer.c **** 		irq_config(IRQ_WATCHDOG, 0, 0, 0);
 277              		.loc 1 133 0
 278 000c 0000A0E3 		mov	r0, #0
 279              	.LVL25:
 280 0010 0020A0E1 		mov	r2, r0
 281 0014 0030A0E1 		mov	r3, r0
 282 0018 0010A0E1 		mov	r1, r0
 283 001c FEFFFFEB 		bl	irq_config
 134:calypso/timer.c **** 		irq_register_handler(IRQ_WATCHDOG, &wdog_irq);
 284              		.loc 1 134 0
 285 0020 0000A0E3 		mov	r0, #0
 286 0024 2C109FE5 		ldr	r1, .L41
 287 0028 FEFFFFEB 		bl	irq_register_handler
 135:calypso/timer.c **** 		irq_enable(IRQ_WATCHDOG);
 288              		.loc 1 135 0
 289 002c 0000A0E3 		mov	r0, #0
 290 0030 FEFFFFEB 		bl	irq_enable
 136:calypso/timer.c **** 		writew(WD_MODE_ENABLE, WDOG_REG(WD_MODE));
 291              		.loc 1 136 0
 292 0034 0229A0E3 		mov	r2, #32768
 293 0038 073CE0E3 		mvn	r3, #1792
 294 003c 030000EA 		b	.L40
 295              	.LVL26:
 296              	.L38:
 137:calypso/timer.c **** 	} else {
 138:calypso/timer.c **** 		writew(WD_MODE_DIS_ARM, WDOG_REG(WD_MODE));
 297              		.loc 1 138 0
 298 0040 F520A0E3 		mov	r2, #245	@ movhi
 299 0044 073CE0E3 		mvn	r3, #1792
 300 0048 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
 139:calypso/timer.c **** 		writew(WD_MODE_DIS_CONFIRM, WDOG_REG(WD_MODE));
 301              		.loc 1 139 0
 302 004c A020A0E3 		mov	r2, #160	@ movhi
 303              	.LVL27:
 304              	.L40:
 305 0050 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
 306 0054 04F09DE4 		ldr	pc, [sp], #4
 307              	.L42:
 308              		.align	2
 309              	.L41:
 310 0058 00000000 		.word	wdog_irq
 311              		.cfi_endproc
 312              	.LFE6:
 314              		.section	.text.wdog_reset,"ax",%progbits
 315              		.align	2
 316              		.global	wdog_reset
 318              	wdog_reset:
 319              	.LFB7:
 140:calypso/timer.c **** 	}
 141:calypso/timer.c **** }
 142:calypso/timer.c **** 
 143:calypso/timer.c **** void wdog_reset(void)
 144:calypso/timer.c **** {
 320              		.loc 1 144 0
 321              		.cfi_startproc
 322              		@ args = 0, pretend = 0, frame = 0
 323              		@ frame_needed = 0, uses_anonymous_args = 0
 324              		@ link register save eliminated.
 145:calypso/timer.c **** #if 0
 146:calypso/timer.c **** 	// XXX: this is supposed to reset immediately but does not seem to
 147:calypso/timer.c **** 	writew(0xF5, WDOG_REG(WD_MODE));
 148:calypso/timer.c **** 	writew(0xFF, WDOG_REG(WD_MODE));
 149:calypso/timer.c **** #else
 150:calypso/timer.c **** 	// enable watchdog
 151:calypso/timer.c **** 	writew(WD_MODE_ENABLE, WDOG_REG(WD_MODE));
 325              		.loc 1 151 0
 326 0000 073CE0E3 		mvn	r3, #1792
 327 0004 0229A0E3 		mov	r2, #32768
 328 0008 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
 152:calypso/timer.c **** 	// force expiration
 153:calypso/timer.c **** 	writew(0x0000, WDOG_REG(WD_LOAD_TIMER));
 329              		.loc 1 153 0
 330 000c 022942E2 		sub	r2, r2, #32768
 331 0010 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
 154:calypso/timer.c **** 	writew(0x0000, WDOG_REG(WD_LOAD_TIMER));
 332              		.loc 1 154 0
 333 0014 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
 155:calypso/timer.c **** #endif
 156:calypso/timer.c **** }
 334              		.loc 1 156 0
 335 0018 1EFF2FE1 		bx	lr
 336              		.cfi_endproc
 337              	.LFE7:
 339              		.section	.rodata.str1.1,"aMS",%progbits,1
 340              	.LC0:
 341 0000 3D3E2057 		.ascii	"=> WATCHDOG\012\000"
 341      41544348 
 341      444F470A 
 341      00
 342              	.LC1:
 343 000d 556E6B6E 		.ascii	"Unknown timer %u\012\000"
 343      6F776E20 
 343      74696D65 
 343      72202575 
 343      0A00
 344              		.text
 345              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccQL2q2y.s:12     .text.wdog_irq:0000000000000000 $a
     /tmp/ccQL2q2y.s:14     .text.wdog_irq:0000000000000000 wdog_irq
     /tmp/ccQL2q2y.s:32     .text.wdog_irq:0000000000000008 $d
     /tmp/ccQL2q2y.s:37     .text.hwtimer_enable:0000000000000000 $a
     /tmp/ccQL2q2y.s:40     .text.hwtimer_enable:0000000000000000 hwtimer_enable
     /tmp/ccQL2q2y.s:98     .text.hwtimer_enable:000000000000005c $d
     /tmp/ccQL2q2y.s:105    .text.hwtimer_config:0000000000000000 $a
     /tmp/ccQL2q2y.s:108    .text.hwtimer_config:0000000000000000 hwtimer_config
     /tmp/ccQL2q2y.s:142    .text.hwtimer_config:000000000000002c $d
     /tmp/ccQL2q2y.s:148    .text.hwtimer_load:0000000000000000 $a
     /tmp/ccQL2q2y.s:151    .text.hwtimer_load:0000000000000000 hwtimer_load
     /tmp/ccQL2q2y.s:177    .text.hwtimer_load:0000000000000020 $d
     /tmp/ccQL2q2y.s:183    .text.hwtimer_read:0000000000000000 $a
     /tmp/ccQL2q2y.s:186    .text.hwtimer_read:0000000000000000 hwtimer_read
     /tmp/ccQL2q2y.s:223    .text.hwtimer_read:0000000000000044 $d
     /tmp/ccQL2q2y.s:231    .text.hwtimer_init:0000000000000000 $a
     /tmp/ccQL2q2y.s:234    .text.hwtimer_init:0000000000000000 hwtimer_init
     /tmp/ccQL2q2y.s:253    .text.hwtimer_init:0000000000000018 $d
     /tmp/ccQL2q2y.s:258    .text.wdog_enable:0000000000000000 $a
     /tmp/ccQL2q2y.s:261    .text.wdog_enable:0000000000000000 wdog_enable
     /tmp/ccQL2q2y.s:310    .text.wdog_enable:0000000000000058 $d
     /tmp/ccQL2q2y.s:315    .text.wdog_reset:0000000000000000 $a
     /tmp/ccQL2q2y.s:318    .text.wdog_reset:0000000000000000 wdog_reset
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
puts
printf
irq_config
irq_register_handler
irq_enable
