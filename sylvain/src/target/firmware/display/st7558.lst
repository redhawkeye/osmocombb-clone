   1              		.file	"st7558.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.st7558_write,"ax",%progbits
  12              		.align	2
  14              	st7558_write:
  15              	.LFB5:
  16              		.file 1 "display/st7558.c"
   1:display/st7558.c **** /* Sitronix ST7558 LCD Driver */
   2:display/st7558.c **** 
   3:display/st7558.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:display/st7558.c ****  *
   5:display/st7558.c ****  * All Rights Reserved
   6:display/st7558.c ****  *
   7:display/st7558.c ****  * This program is free software; you can redistribute it and/or modify
   8:display/st7558.c ****  * it under the terms of the GNU General Public License as published by
   9:display/st7558.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:display/st7558.c ****  * (at your option) any later version.
  11:display/st7558.c ****  *
  12:display/st7558.c ****  * This program is distributed in the hope that it will be useful,
  13:display/st7558.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:display/st7558.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:display/st7558.c ****  * GNU General Public License for more details.
  16:display/st7558.c ****  *
  17:display/st7558.c ****  * You should have received a copy of the GNU General Public License along
  18:display/st7558.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:display/st7558.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:display/st7558.c ****  *
  21:display/st7558.c ****  */
  22:display/st7558.c **** 
  23:display/st7558.c **** #include <stdint.h>
  24:display/st7558.c **** #include <stdio.h>
  25:display/st7558.c **** 
  26:display/st7558.c **** #include <debug.h>
  27:display/st7558.c **** #include <delay.h>
  28:display/st7558.c **** #include <memory.h>
  29:display/st7558.c **** #include <i2c.h>
  30:display/st7558.c **** #include <display.h>
  31:display/st7558.c **** #include <calypso/clock.h>
  32:display/st7558.c **** 
  33:display/st7558.c **** #define MORE_CONTROL	0x80
  34:display/st7558.c **** #define CONTROL_RS_RAM	0x40
  35:display/st7558.c **** #define CONTROL_RS_CMD	0x00
  36:display/st7558.c **** #define Y_ADDR(n)	(0x40|((n)&0xf))
  37:display/st7558.c **** #define X_ADDR(n)	(0x80|((n)&0x3f))
  38:display/st7558.c **** 
  39:display/st7558.c **** static const uint8_t setup[] = { CONTROL_RS_CMD, 0x2e, 0x21, 0x12, 0xc0, 0x0b,
  40:display/st7558.c **** 						 0x20, 0x11, 0x00, 0x40, 0x80 };
  41:display/st7558.c **** static const uint8_t home[] = { CONTROL_RS_CMD, Y_ADDR(0), X_ADDR(0) };
  42:display/st7558.c **** 
  43:display/st7558.c **** /* video modes */
  44:display/st7558.c **** static const uint8_t invert[] = { CONTROL_RS_CMD, 0x20, 0x0d };
  45:display/st7558.c **** static const uint8_t normal[] = { CONTROL_RS_CMD, 0x20, 0x0c };
  46:display/st7558.c **** static const uint8_t off[] = { CONTROL_RS_CMD, 0x20, 0x08 };
  47:display/st7558.c **** 
  48:display/st7558.c **** #define ST7558_SLAVE_ADDR	0x3c
  49:display/st7558.c **** static int st7558_write(const uint8_t *data, int len)
  50:display/st7558.c **** {
  17              		.loc 1 50 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  22 0000 01402DE9 		stmfd	sp!, {r0, lr}
  23              	.LCFI0:
  24              		.cfi_def_cfa_offset 8
  51:display/st7558.c **** 	int rc = i2c_write(ST7558_SLAVE_ADDR, data[0], 1, data+1, len-1);
  25              		.loc 1 51 0
  26 0004 0030A0E1 		mov	r3, r0
  27 0008 0120D3E4 		ldrb	r2, [r3], #1	@ zero_extendqisi2
  28 000c 011041E2 		sub	r1, r1, #1
  29              	.LVL1:
  30 0010 00108DE5 		str	r1, [sp, #0]
  31 0014 3C00A0E3 		mov	r0, #60
  32              		.cfi_offset 14, -4
  33              		.cfi_offset 0, -8
  34              	.LVL2:
  35 0018 0210A0E1 		mov	r1, r2
  36              	.LVL3:
  37 001c 0120A0E3 		mov	r2, #1
  38 0020 FEFFFFEB 		bl	i2c_write
  39              	.LVL4:
  52:display/st7558.c **** 	return rc;
  53:display/st7558.c **** }
  40              		.loc 1 53 0
  41 0024 0880BDE8 		ldmfd	sp!, {r3, pc}
  42              		.cfi_endproc
  43              	.LFE5:
  45              		.section	.text.st7558_putc,"ax",%progbits
  46              		.align	2
  48              	st7558_putc:
  49              	.LFB11:
  54:display/st7558.c **** 
  55:display/st7558.c **** static const uint8_t zero16[] = { CONTROL_RS_RAM,
  56:display/st7558.c **** 			0, 0, 0, 0, 0, 0, 0, 0,
  57:display/st7558.c **** 			0, 0, 0, 0, 0, 0, 0, 0 };
  58:display/st7558.c **** static void st7558_clrscr(void)
  59:display/st7558.c **** {
  60:display/st7558.c **** 	int i;
  61:display/st7558.c **** 
  62:display/st7558.c **** 	st7558_write(home, sizeof(home));
  63:display/st7558.c **** 
  64:display/st7558.c **** 	for (i = 0; i < 102*9; i += 16)
  65:display/st7558.c **** 		st7558_write(zero16, sizeof(zero16));
  66:display/st7558.c **** 
  67:display/st7558.c **** 	st7558_write(home, sizeof(home));
  68:display/st7558.c **** }
  69:display/st7558.c **** 
  70:display/st7558.c **** static void st7558_init(void)
  71:display/st7558.c **** {
  72:display/st7558.c **** 	/* Release nRESET */
  73:display/st7558.c **** 	calypso_reset_set(RESET_EXT, 0);
  74:display/st7558.c **** 
  75:display/st7558.c **** 	i2c_init(0,0);
  76:display/st7558.c **** 
  77:display/st7558.c **** 	st7558_write(setup, sizeof(setup));
  78:display/st7558.c **** 	st7558_clrscr();
  79:display/st7558.c **** }
  80:display/st7558.c **** 
  81:display/st7558.c **** static void st7558_set_attr(unsigned long attr)
  82:display/st7558.c **** {
  83:display/st7558.c **** 	if (attr & DISP_ATTR_INVERT)
  84:display/st7558.c **** 		st7558_write(invert, sizeof(invert));
  85:display/st7558.c **** }
  86:display/st7558.c **** 
  87:display/st7558.c **** static void st7558_unset_attr(unsigned long attr)
  88:display/st7558.c **** {
  89:display/st7558.c **** 	if (attr & DISP_ATTR_INVERT)
  90:display/st7558.c **** 		st7558_write(normal, sizeof(normal));
  91:display/st7558.c **** }
  92:display/st7558.c **** 
  93:display/st7558.c **** /* FIXME: we need a mini-libc */
  94:display/st7558.c **** static void *mcpy(uint8_t *dst, const uint8_t *src, int len)
  95:display/st7558.c **** {
  96:display/st7558.c **** 	while (len--)
  97:display/st7558.c **** 		*dst++ = *src++;
  98:display/st7558.c **** 
  99:display/st7558.c **** 	return dst;
 100:display/st7558.c **** }
 101:display/st7558.c **** 
 102:display/st7558.c **** extern const unsigned char fontdata_r8x8[];
 103:display/st7558.c **** 
 104:display/st7558.c **** static void st7558_putc(unsigned char c)
 105:display/st7558.c **** {
  50              		.loc 1 105 0
  51              		.cfi_startproc
  52              		@ args = 0, pretend = 0, frame = 16
  53              		@ frame_needed = 0, uses_anonymous_args = 0
  54              	.LVL5:
  55 0000 0F402DE9 		stmfd	sp!, {r0, r1, r2, r3, lr}
  56              	.LCFI1:
  57              		.cfi_def_cfa_offset 20
 106:display/st7558.c **** 	uint8_t putc_buf[16];
 107:display/st7558.c **** 	uint8_t bytes_per_char = 8;
 108:display/st7558.c **** 
 109:display/st7558.c **** 	putc_buf[0] = CONTROL_RS_RAM;
  58              		.loc 1 109 0
  59 0004 4030A0E3 		mov	r3, #64
  60              		.cfi_offset 14, -4
  61              		.cfi_offset 3, -8
  62              		.cfi_offset 2, -12
  63              		.cfi_offset 1, -16
  64              		.cfi_offset 0, -20
  65 0008 10208DE2 		add	r2, sp, #16
  66 000c 103062E5 		strb	r3, [r2, #-16]!
 110:display/st7558.c **** 	mcpy(putc_buf+1, fontdata_r8x8+(c*bytes_per_char), bytes_per_char);
  67              		.loc 1 110 0
  68 0010 2C309FE5 		ldr	r3, .L5
 105:display/st7558.c **** {
  69              		.loc 1 105 0
  70 0014 FF0000E2 		and	r0, r0, #255
  71              	.LVL6:
  72              		.loc 1 110 0
  73 0018 800183E0 		add	r0, r3, r0, asl #3
  74 001c 0030A0E3 		mov	r3, #0
  75              	.L3:
  76              	.LBB4:
  77              	.LBB5:
  97:display/st7558.c **** 		*dst++ = *src++;
  78              		.loc 1 97 0
  79 0020 0310D0E7 		ldrb	r1, [r0, r3]	@ zero_extendqisi2
  80 0024 013083E2 		add	r3, r3, #1
  96:display/st7558.c **** 	while (len--)
  81              		.loc 1 96 0
  82 0028 080053E3 		cmp	r3, #8
  97:display/st7558.c **** 		*dst++ = *src++;
  83              		.loc 1 97 0
  84 002c 0110E2E5 		strb	r1, [r2, #1]!
  96:display/st7558.c **** 	while (len--)
  85              		.loc 1 96 0
  86 0030 FAFFFF1A 		bne	.L3
  87              	.LBE5:
  88              	.LBE4:
 111:display/st7558.c **** 	st7558_write(putc_buf, 1+bytes_per_char);
  89              		.loc 1 111 0
  90 0034 0D00A0E1 		mov	r0, sp
  91 0038 0910A0E3 		mov	r1, #9
  92 003c FEFFFFEB 		bl	st7558_write
 112:display/st7558.c **** }
  93              		.loc 1 112 0
  94 0040 0F80BDE8 		ldmfd	sp!, {r0, r1, r2, r3, pc}
  95              	.L6:
  96              		.align	2
  97              	.L5:
  98 0044 00000000 		.word	fontdata_r8x8
  99              		.cfi_endproc
 100              	.LFE11:
 102              		.section	.text.st7558_clrscr,"ax",%progbits
 103              		.align	2
 105              	st7558_clrscr:
 106              	.LFB6:
  59:display/st7558.c **** {
 107              		.loc 1 59 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 0
 110              		@ frame_needed = 0, uses_anonymous_args = 0
 111 0000 10402DE9 		stmfd	sp!, {r4, lr}
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 8
  62:display/st7558.c **** 	st7558_write(home, sizeof(home));
 114              		.loc 1 62 0
 115 0004 2C009FE5 		ldr	r0, .L10
 116 0008 0310A0E3 		mov	r1, #3
 117              		.cfi_offset 14, -4
 118              		.cfi_offset 4, -8
 119 000c FEFFFFEB 		bl	st7558_write
 120              	.LVL7:
 121 0010 3A40A0E3 		mov	r4, #58
 122              	.LVL8:
 123              	.L8:
  65:display/st7558.c **** 		st7558_write(zero16, sizeof(zero16));
 124              		.loc 1 65 0 discriminator 2
 125 0014 20009FE5 		ldr	r0, .L10+4
 126 0018 1110A0E3 		mov	r1, #17
 127 001c FEFFFFEB 		bl	st7558_write
  64:display/st7558.c **** 	for (i = 0; i < 102*9; i += 16)
 128              		.loc 1 64 0 discriminator 2
 129 0020 014054E2 		subs	r4, r4, #1
 130 0024 FAFFFF1A 		bne	.L8
  67:display/st7558.c **** 	st7558_write(home, sizeof(home));
 131              		.loc 1 67 0
 132 0028 08009FE5 		ldr	r0, .L10
 133 002c 0310A0E3 		mov	r1, #3
  68:display/st7558.c **** }
 134              		.loc 1 68 0
 135 0030 1040BDE8 		ldmfd	sp!, {r4, lr}
  67:display/st7558.c **** 	st7558_write(home, sizeof(home));
 136              		.loc 1 67 0
 137 0034 FEFFFFEA 		b	st7558_write
 138              	.L11:
 139              		.align	2
 140              	.L10:
 141 0038 00000000 		.word	.LANCHOR0
 142 003c 04000000 		.word	.LANCHOR0+4
 143              		.cfi_endproc
 144              	.LFE6:
 146              		.section	.text.st7558_unset_attr,"ax",%progbits
 147              		.align	2
 149              	st7558_unset_attr:
 150              	.LFB9:
  88:display/st7558.c **** {
 151              		.loc 1 88 0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 0
 154              		@ frame_needed = 0, uses_anonymous_args = 0
 155              		@ link register save eliminated.
 156              	.LVL9:
  89:display/st7558.c **** 	if (attr & DISP_ATTR_INVERT)
 157              		.loc 1 89 0
 158 0000 010010E3 		tst	r0, #1
 159 0004 1EFF2F01 		bxeq	lr
  90:display/st7558.c **** 		st7558_write(normal, sizeof(normal));
 160              		.loc 1 90 0
 161 0008 04009FE5 		ldr	r0, .L14
 162              	.LVL10:
 163 000c 0310A0E3 		mov	r1, #3
  91:display/st7558.c **** }
 164              		.loc 1 91 0
  90:display/st7558.c **** 		st7558_write(normal, sizeof(normal));
 165              		.loc 1 90 0
 166 0010 FEFFFFEA 		b	st7558_write
 167              	.L15:
 168              		.align	2
 169              	.L14:
 170 0014 18000000 		.word	.LANCHOR0+24
 171              		.cfi_endproc
 172              	.LFE9:
 174              		.section	.text.st7558_set_attr,"ax",%progbits
 175              		.align	2
 177              	st7558_set_attr:
 178              	.LFB8:
  82:display/st7558.c **** {
 179              		.loc 1 82 0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
 184              	.LVL11:
  83:display/st7558.c **** 	if (attr & DISP_ATTR_INVERT)
 185              		.loc 1 83 0
 186 0000 010010E3 		tst	r0, #1
 187 0004 1EFF2F01 		bxeq	lr
  84:display/st7558.c **** 		st7558_write(invert, sizeof(invert));
 188              		.loc 1 84 0
 189 0008 04009FE5 		ldr	r0, .L18
 190              	.LVL12:
 191 000c 0310A0E3 		mov	r1, #3
  85:display/st7558.c **** }
 192              		.loc 1 85 0
  84:display/st7558.c **** 		st7558_write(invert, sizeof(invert));
 193              		.loc 1 84 0
 194 0010 FEFFFFEA 		b	st7558_write
 195              	.L19:
 196              		.align	2
 197              	.L18:
 198 0014 1C000000 		.word	.LANCHOR0+28
 199              		.cfi_endproc
 200              	.LFE8:
 202              		.section	.text.st7558_init,"ax",%progbits
 203              		.align	2
 205              	st7558_init:
 206              	.LFB7:
  71:display/st7558.c **** {
 207              		.loc 1 71 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 0000 04E02DE5 		str	lr, [sp, #-4]!
 212              	.LCFI3:
 213              		.cfi_def_cfa_offset 4
  73:display/st7558.c **** 	calypso_reset_set(RESET_EXT, 0);
 214              		.loc 1 73 0
 215 0004 0400A0E3 		mov	r0, #4
 216 0008 0010A0E3 		mov	r1, #0
 217              		.cfi_offset 14, -4
 218 000c FEFFFFEB 		bl	calypso_reset_set
  75:display/st7558.c **** 	i2c_init(0,0);
 219              		.loc 1 75 0
 220 0010 0000A0E3 		mov	r0, #0
 221 0014 0010A0E1 		mov	r1, r0
 222 0018 FEFFFFEB 		bl	i2c_init
  77:display/st7558.c **** 	st7558_write(setup, sizeof(setup));
 223              		.loc 1 77 0
 224 001c 0B10A0E3 		mov	r1, #11
 225 0020 08009FE5 		ldr	r0, .L21
 226 0024 FEFFFFEB 		bl	st7558_write
  79:display/st7558.c **** }
 227              		.loc 1 79 0
 228 0028 04E09DE4 		ldr	lr, [sp], #4
  78:display/st7558.c **** 	st7558_clrscr();
 229              		.loc 1 78 0
 230 002c FEFFFFEA 		b	st7558_clrscr
 231              	.L22:
 232              		.align	2
 233              	.L21:
 234 0030 20000000 		.word	.LANCHOR0+32
 235              		.cfi_endproc
 236              	.LFE7:
 238              		.global	st7558_display
 239              		.section	.rodata
 240              		.align	2
 241              		.set	.LANCHOR0,. + 0
 244              	home:
 245 0000 00       		.byte	0
 246 0001 40       		.byte	64
 247 0002 80       		.byte	-128
 248 0003 00       		.space	1
 251              	zero16:
 252 0004 40       		.byte	64
 253 0005 00       		.byte	0
 254 0006 00       		.byte	0
 255 0007 00       		.byte	0
 256 0008 00       		.byte	0
 257 0009 00       		.byte	0
 258 000a 00       		.byte	0
 259 000b 00       		.byte	0
 260 000c 00       		.byte	0
 261 000d 00       		.byte	0
 262 000e 00       		.byte	0
 263 000f 00       		.byte	0
 264 0010 00       		.byte	0
 265 0011 00       		.byte	0
 266 0012 00       		.byte	0
 267 0013 00       		.byte	0
 268 0014 00       		.byte	0
 269 0015 000000   		.space	3
 272              	normal:
 273 0018 00       		.byte	0
 274 0019 20       		.byte	32
 275 001a 0C       		.byte	12
 276 001b 00       		.space	1
 279              	invert:
 280 001c 00       		.byte	0
 281 001d 20       		.byte	32
 282 001e 0D       		.byte	13
 283 001f 00       		.space	1
 286              	setup:
 287 0020 00       		.byte	0
 288 0021 2E       		.byte	46
 289 0022 21       		.byte	33
 290 0023 12       		.byte	18
 291 0024 C0       		.byte	-64
 292 0025 0B       		.byte	11
 293 0026 20       		.byte	32
 294 0027 11       		.byte	17
 295 0028 00       		.byte	0
 296 0029 40       		.byte	64
 297 002a 80       		.byte	-128
 298 002b 00       		.space	1
 301              	st7558_display:
 302 002c 00000000 		.word	.LC0
 303 0030 00000000 		.word	st7558_init
 304 0034 00000000 		.word	st7558_set_attr
 305 0038 00000000 		.word	st7558_unset_attr
 306 003c 00000000 		.word	st7558_clrscr
 307 0040 00000000 		.space	8
 307      00000000 
 308 0048 00000000 		.word	st7558_putc
 309 004c 00000000 		.space	4
 310              		.section	.rodata.str1.1,"aMS",%progbits,1
 311              	.LC0:
 312 0000 73743735 		.ascii	"st7558\000"
 312      353800
 313              		.text
 314              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 st7558.c
     /tmp/ccSlagPi.s:12     .text.st7558_write:0000000000000000 $a
     /tmp/ccSlagPi.s:14     .text.st7558_write:0000000000000000 st7558_write
     /tmp/ccSlagPi.s:46     .text.st7558_putc:0000000000000000 $a
     /tmp/ccSlagPi.s:48     .text.st7558_putc:0000000000000000 st7558_putc
     /tmp/ccSlagPi.s:98     .text.st7558_putc:0000000000000044 $d
     /tmp/ccSlagPi.s:103    .text.st7558_clrscr:0000000000000000 $a
     /tmp/ccSlagPi.s:105    .text.st7558_clrscr:0000000000000000 st7558_clrscr
     /tmp/ccSlagPi.s:141    .text.st7558_clrscr:0000000000000038 $d
     /tmp/ccSlagPi.s:147    .text.st7558_unset_attr:0000000000000000 $a
     /tmp/ccSlagPi.s:149    .text.st7558_unset_attr:0000000000000000 st7558_unset_attr
     /tmp/ccSlagPi.s:170    .text.st7558_unset_attr:0000000000000014 $d
     /tmp/ccSlagPi.s:175    .text.st7558_set_attr:0000000000000000 $a
     /tmp/ccSlagPi.s:177    .text.st7558_set_attr:0000000000000000 st7558_set_attr
     /tmp/ccSlagPi.s:198    .text.st7558_set_attr:0000000000000014 $d
     /tmp/ccSlagPi.s:203    .text.st7558_init:0000000000000000 $a
     /tmp/ccSlagPi.s:205    .text.st7558_init:0000000000000000 st7558_init
     /tmp/ccSlagPi.s:234    .text.st7558_init:0000000000000030 $d
     /tmp/ccSlagPi.s:301    .rodata:000000000000002c st7558_display
     /tmp/ccSlagPi.s:240    .rodata:0000000000000000 $d
     /tmp/ccSlagPi.s:244    .rodata:0000000000000000 home
     /tmp/ccSlagPi.s:251    .rodata:0000000000000004 zero16
     /tmp/ccSlagPi.s:272    .rodata:0000000000000018 normal
     /tmp/ccSlagPi.s:279    .rodata:000000000000001c invert
     /tmp/ccSlagPi.s:286    .rodata:0000000000000020 setup
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
i2c_write
fontdata_r8x8
calypso_reset_set
i2c_init
