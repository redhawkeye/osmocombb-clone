   1              		.file	"ssd1963.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.ssd1963_set_attr,"ax",%progbits
  12              		.align	2
  14              	ssd1963_set_attr:
  15              	.LFB12:
  16              		.file 1 "display/ssd1963.c"
   1:display/ssd1963.c **** /* Solomon SSD1963 LCD Driver (probably not exactly the SSD1963)
   2:display/ssd1963.c ****  * as used in the Sony Ericsson J100i */
   3:display/ssd1963.c **** 
   4:display/ssd1963.c **** /* (C) 2010-11 by Steve Markgraf <steve@steve-m.de>
   5:display/ssd1963.c ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   6:display/ssd1963.c ****  *
   7:display/ssd1963.c ****  * All Rights Reserved
   8:display/ssd1963.c ****  *
   9:display/ssd1963.c ****  * This program is free software; you can redistribute it and/or modify
  10:display/ssd1963.c ****  * it under the terms of the GNU General Public License as published by
  11:display/ssd1963.c ****  * the Free Software Foundation; either version 2 of the License, or
  12:display/ssd1963.c ****  * (at your option) any later version.
  13:display/ssd1963.c ****  *
  14:display/ssd1963.c ****  * This program is distributed in the hope that it will be useful,
  15:display/ssd1963.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:display/ssd1963.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:display/ssd1963.c ****  * GNU General Public License for more details.
  18:display/ssd1963.c ****  *
  19:display/ssd1963.c ****  * You should have received a copy of the GNU General Public License along
  20:display/ssd1963.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  21:display/ssd1963.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  22:display/ssd1963.c ****  *
  23:display/ssd1963.c ****  */
  24:display/ssd1963.c **** 
  25:display/ssd1963.c **** #include <stdint.h>
  26:display/ssd1963.c **** #include <stdio.h>
  27:display/ssd1963.c **** #include <debug.h>
  28:display/ssd1963.c **** #include <delay.h>
  29:display/ssd1963.c **** #include <uwire.h>
  30:display/ssd1963.c **** #include <display.h>
  31:display/ssd1963.c **** #include <calypso/clock.h>
  32:display/ssd1963.c **** 
  33:display/ssd1963.c **** #define LCD_COLUMNS		96
  34:display/ssd1963.c **** #define LCD_ROWS		64
  35:display/ssd1963.c **** #define LCD_TOP_FREE_ROWS	3
  36:display/ssd1963.c **** #define LCD_LEFT_FREE_COLS	0
  37:display/ssd1963.c **** #define	PIXEL_BYTES		3
  38:display/ssd1963.c **** #define SSD1963_UWIRE_BITLEN	9
  39:display/ssd1963.c **** #define SSD1963_DEV_ID		0
  40:display/ssd1963.c **** #define FONT_HEIGHT		8
  41:display/ssd1963.c **** #define FONT_WIDTH		8
  42:display/ssd1963.c **** 
  43:display/ssd1963.c **** #define BLACK		0x0000
  44:display/ssd1963.c **** #define WHITE		0x0fff
  45:display/ssd1963.c **** 
  46:display/ssd1963.c **** static void ssd1963_cmd_write(const uint8_t cmd)
  47:display/ssd1963.c **** {
  48:display/ssd1963.c **** 	uint16_t cmd_out = cmd;
  49:display/ssd1963.c **** 	uwire_xfer(SSD1963_DEV_ID, SSD1963_UWIRE_BITLEN, &cmd_out, NULL);
  50:display/ssd1963.c **** }
  51:display/ssd1963.c **** 
  52:display/ssd1963.c **** static void ssd1963_data_write(const uint8_t data)
  53:display/ssd1963.c **** {
  54:display/ssd1963.c **** 	uint16_t data_out = ((0x01 << 8) + data);
  55:display/ssd1963.c **** 	uwire_xfer(SSD1963_DEV_ID, SSD1963_UWIRE_BITLEN, &data_out, NULL);
  56:display/ssd1963.c **** }
  57:display/ssd1963.c **** 
  58:display/ssd1963.c **** static void ssd1963_clrscr(void)
  59:display/ssd1963.c **** {
  60:display/ssd1963.c **** 	uint16_t i;
  61:display/ssd1963.c **** 
  62:display/ssd1963.c **** 	/* Select the whole display area for clearing */
  63:display/ssd1963.c **** 	ssd1963_cmd_write(0x2b);
  64:display/ssd1963.c **** 	ssd1963_data_write(0x00);
  65:display/ssd1963.c **** 	ssd1963_data_write(LCD_ROWS-1);
  66:display/ssd1963.c **** 
  67:display/ssd1963.c **** 	ssd1963_cmd_write(0x2a);
  68:display/ssd1963.c **** 	ssd1963_data_write(0x00);
  69:display/ssd1963.c **** 	ssd1963_data_write(LCD_COLUMNS-1);
  70:display/ssd1963.c **** 
  71:display/ssd1963.c **** 	ssd1963_cmd_write(0x2c);
  72:display/ssd1963.c **** 
  73:display/ssd1963.c **** 	/* Fill the display with white */
  74:display/ssd1963.c **** 	for(i=0; i < (LCD_ROWS * (LCD_COLUMNS/2) * PIXEL_BYTES); i++){
  75:display/ssd1963.c **** 		ssd1963_data_write(0xff);
  76:display/ssd1963.c **** 	}
  77:display/ssd1963.c **** }
  78:display/ssd1963.c **** 
  79:display/ssd1963.c **** static void ssd1963_init(void)
  80:display/ssd1963.c **** {
  81:display/ssd1963.c **** 	unsigned int i;
  82:display/ssd1963.c **** 
  83:display/ssd1963.c **** 	calypso_reset_set(RESET_EXT, 0);
  84:display/ssd1963.c **** 	uwire_init();
  85:display/ssd1963.c **** 	delay_ms(3);
  86:display/ssd1963.c **** 
  87:display/ssd1963.c **** 	/* Begin SSD1963 initialization sequence */
  88:display/ssd1963.c **** 	ssd1963_cmd_write(0xb6);	/* Set vertical period */
  89:display/ssd1963.c **** 	ssd1963_data_write(0x4b);
  90:display/ssd1963.c **** 	ssd1963_data_write(0xf1);
  91:display/ssd1963.c **** 	ssd1963_data_write(0x40);
  92:display/ssd1963.c **** 	ssd1963_data_write(0x40);
  93:display/ssd1963.c **** 	ssd1963_data_write(0x00);
  94:display/ssd1963.c **** 	ssd1963_data_write(0x8c);
  95:display/ssd1963.c **** 	ssd1963_data_write(0x00);
  96:display/ssd1963.c **** 	
  97:display/ssd1963.c **** 	ssd1963_cmd_write(0x3a);	/* Set pixel format */
  98:display/ssd1963.c **** 	ssd1963_data_write(0x03);	/* 0x03: 12 bit, 0x05: 16 Bit / pixel */
  99:display/ssd1963.c **** 	ssd1963_cmd_write(0x11);
 100:display/ssd1963.c **** 
 101:display/ssd1963.c **** 	/* Contrast/Electronic Volume Control */
 102:display/ssd1963.c **** 	ssd1963_cmd_write(0xba);
 103:display/ssd1963.c **** 	ssd1963_data_write(0x5b);
 104:display/ssd1963.c **** 	ssd1963_data_write(0x84);
 105:display/ssd1963.c **** 
 106:display/ssd1963.c **** 	ssd1963_cmd_write(0x36);
 107:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 108:display/ssd1963.c **** 
 109:display/ssd1963.c **** 	ssd1963_cmd_write(0x13);	/* Enter normal mode */
 110:display/ssd1963.c **** 	ssd1963_clrscr();
 111:display/ssd1963.c **** 
 112:display/ssd1963.c **** 	ssd1963_cmd_write(0x29);	/* Display ON */
 113:display/ssd1963.c **** }
 114:display/ssd1963.c **** 
 115:display/ssd1963.c **** extern const unsigned char fontdata_r8x8_horiz[];
 116:display/ssd1963.c **** 
 117:display/ssd1963.c **** /*
 118:display/ssd1963.c ****  * Pixel format for 8-bit mode, 12-bit color, 2 Pixel per 3 byte
 119:display/ssd1963.c ****  * D7, D6, D5, D4, D3, D2, D1, D0: RRRRGGGG (8 bits) 1st write
 120:display/ssd1963.c ****  * D7, D6, D5, D4, D3, D2, D1, D0: BBBBRRRR (8 bits) 2nd write
 121:display/ssd1963.c ****  * D7, D6, D5, D4, D3, D2, D1, D0: GGGGBBBB (8 bits) 3rd write
 122:display/ssd1963.c **** */
 123:display/ssd1963.c **** 
 124:display/ssd1963.c **** static void ssd1963_goto_xy(int xpos, int ypos)
 125:display/ssd1963.c **** {
 126:display/ssd1963.c **** 	ssd1963_cmd_write(0x2b);
 127:display/ssd1963.c **** 	ssd1963_data_write(xpos);
 128:display/ssd1963.c **** 	ssd1963_data_write(xpos + FONT_HEIGHT-1);
 129:display/ssd1963.c **** 
 130:display/ssd1963.c **** 	ssd1963_cmd_write(0x2a);
 131:display/ssd1963.c **** 	ssd1963_data_write(ypos);
 132:display/ssd1963.c **** 	ssd1963_data_write(ypos + FONT_WIDTH-1);
 133:display/ssd1963.c **** }
 134:display/ssd1963.c **** 
 135:display/ssd1963.c **** static int ssd1963_putc_col(unsigned char c, int fColor, int bColor)
 136:display/ssd1963.c **** {
 137:display/ssd1963.c **** 	int i, j;
 138:display/ssd1963.c **** 	uint8_t cols = FONT_WIDTH;
 139:display/ssd1963.c **** 	uint8_t rows = FONT_HEIGHT;
 140:display/ssd1963.c **** 	uint8_t row_slice;
 141:display/ssd1963.c **** 	uint8_t rowmask;
 142:display/ssd1963.c **** 	uint16_t pixel0;	/* left pixel */
 143:display/ssd1963.c **** 	uint16_t pixel1;	/* right pixel */
 144:display/ssd1963.c **** 
 145:display/ssd1963.c **** 	ssd1963_cmd_write(0x2c);
 146:display/ssd1963.c **** 
 147:display/ssd1963.c **** 	for (i = 0; i < rows; i++) {
 148:display/ssd1963.c **** 		row_slice = fontdata_r8x8_horiz[(FONT_WIDTH * c)+i];
 149:display/ssd1963.c **** 		rowmask = 0x80;
 150:display/ssd1963.c **** 		for (j = 0; j < cols; j += 2) {
 151:display/ssd1963.c **** 			if (!(row_slice & rowmask))
 152:display/ssd1963.c **** 				pixel0 = bColor;
 153:display/ssd1963.c **** 			else
 154:display/ssd1963.c **** 				pixel0 = fColor;
 155:display/ssd1963.c **** 			rowmask = rowmask >> 1;
 156:display/ssd1963.c **** 			if (!(row_slice & rowmask))
 157:display/ssd1963.c **** 				pixel1 = bColor;
 158:display/ssd1963.c **** 			else
 159:display/ssd1963.c **** 				pixel1 = fColor;
 160:display/ssd1963.c **** 			rowmask = rowmask >> 1;
 161:display/ssd1963.c **** 			/* Write the RGB-RGB pixel data */
 162:display/ssd1963.c **** 			ssd1963_data_write((pixel0 >> 4) & 0xff);
 163:display/ssd1963.c **** 			ssd1963_data_write(((pixel0 & 0x00f) << 4) | ((pixel1 >> 8) & 0x00f));
 164:display/ssd1963.c **** 			ssd1963_data_write(pixel1 & 0xff);
 165:display/ssd1963.c **** 		}
 166:display/ssd1963.c **** 	}
 167:display/ssd1963.c **** 	ssd1963_cmd_write(0x00);
 168:display/ssd1963.c **** 
 169:display/ssd1963.c **** 	return c;
 170:display/ssd1963.c **** }
 171:display/ssd1963.c **** 
 172:display/ssd1963.c **** static int ssd1963_puts_col(const char *str, int txtline, int fColor, int bColor)
 173:display/ssd1963.c **** {
 174:display/ssd1963.c **** 	int i;
 175:display/ssd1963.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 176:display/ssd1963.c **** 		ssd1963_goto_xy(((txtline*FONT_HEIGHT)+LCD_TOP_FREE_ROWS),
 177:display/ssd1963.c **** 				(i + LCD_LEFT_FREE_COLS));
 178:display/ssd1963.c **** 		ssd1963_putc_col(*str++, fColor, bColor);
 179:display/ssd1963.c **** 	}
 180:display/ssd1963.c **** 
 181:display/ssd1963.c **** 	return 0;
 182:display/ssd1963.c **** }
 183:display/ssd1963.c **** 
 184:display/ssd1963.c **** /* interface to display driver core */
 185:display/ssd1963.c **** 
 186:display/ssd1963.c **** static void ssd1963_set_attr(unsigned long attr)
 187:display/ssd1963.c **** {
  17              		.loc 1 187 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
 188:display/ssd1963.c **** 	/* FIXME */
 189:display/ssd1963.c **** }
  23              		.loc 1 189 0
  24 0000 1EFF2FE1 		bx	lr
  25              		.cfi_endproc
  26              	.LFE12:
  28              		.section	.text.ssd1963_data_write,"ax",%progbits
  29              		.align	2
  31              	ssd1963_data_write:
  32              	.LFB6:
  53:display/ssd1963.c **** {
  33              		.loc 1 53 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 4
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              	.LVL1:
  38 0000 01402DE9 		stmfd	sp!, {r0, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  54:display/ssd1963.c **** 	uint16_t data_out = ((0x01 << 8) + data);
  41              		.loc 1 54 0
  42 0004 010C80E2 		add	r0, r0, #256
  43              		.cfi_offset 14, -4
  44              		.cfi_offset 0, -8
  45              	.LVL2:
  46 0008 04208DE2 		add	r2, sp, #4
  47 000c B20062E1 		strh	r0, [r2, #-2]!	@ movhi
  48              	.LVL3:
  55:display/ssd1963.c **** 	uwire_xfer(SSD1963_DEV_ID, SSD1963_UWIRE_BITLEN, &data_out, NULL);
  49              		.loc 1 55 0
  50 0010 0000A0E3 		mov	r0, #0
  51 0014 0910A0E3 		mov	r1, #9
  52 0018 0030A0E1 		mov	r3, r0
  53 001c FEFFFFEB 		bl	uwire_xfer
  56:display/ssd1963.c **** }
  54              		.loc 1 56 0
  55 0020 0880BDE8 		ldmfd	sp!, {r3, pc}
  56              		.cfi_endproc
  57              	.LFE6:
  59              		.section	.text.ssd1963_cmd_write,"ax",%progbits
  60              		.align	2
  62              	ssd1963_cmd_write:
  63              	.LFB5:
  47:display/ssd1963.c **** {
  64              		.loc 1 47 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 4
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL4:
  69 0000 01402DE9 		stmfd	sp!, {r0, lr}
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 8
  48:display/ssd1963.c **** 	uint16_t cmd_out = cmd;
  72              		.loc 1 48 0
  73 0004 04208DE2 		add	r2, sp, #4
  74 0008 B20062E1 		strh	r0, [r2, #-2]!	@ movhi
  75              	.LVL5:
  49:display/ssd1963.c **** 	uwire_xfer(SSD1963_DEV_ID, SSD1963_UWIRE_BITLEN, &cmd_out, NULL);
  76              		.loc 1 49 0
  77 000c 0000A0E3 		mov	r0, #0
  78              		.cfi_offset 14, -4
  79              		.cfi_offset 0, -8
  80              	.LVL6:
  81 0010 0910A0E3 		mov	r1, #9
  82 0014 0030A0E1 		mov	r3, r0
  83 0018 FEFFFFEB 		bl	uwire_xfer
  50:display/ssd1963.c **** }
  84              		.loc 1 50 0
  85 001c 0880BDE8 		ldmfd	sp!, {r3, pc}
  86              		.cfi_endproc
  87              	.LFE5:
  89              		.section	.text.ssd1963_goto_xy,"ax",%progbits
  90              		.align	2
  92              	ssd1963_goto_xy:
  93              	.LFB9:
 125:display/ssd1963.c **** {
  94              		.loc 1 125 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL7:
  99 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 12
 125:display/ssd1963.c **** {
 102              		.loc 1 125 0
 103 0004 0040A0E1 		mov	r4, r0
 104              		.cfi_offset 14, -4
 105              		.cfi_offset 5, -8
 106              		.cfi_offset 4, -12
 127:display/ssd1963.c **** 	ssd1963_data_write(xpos);
 107              		.loc 1 127 0
 108 0008 FF4004E2 		and	r4, r4, #255
 126:display/ssd1963.c **** 	ssd1963_cmd_write(0x2b);
 109              		.loc 1 126 0
 110 000c 2B00A0E3 		mov	r0, #43
 111              	.LVL8:
 125:display/ssd1963.c **** {
 112              		.loc 1 125 0
 113 0010 0150A0E1 		mov	r5, r1
 126:display/ssd1963.c **** 	ssd1963_cmd_write(0x2b);
 114              		.loc 1 126 0
 115 0014 FEFFFFEB 		bl	ssd1963_cmd_write
 116              	.LVL9:
 127:display/ssd1963.c **** 	ssd1963_data_write(xpos);
 117              		.loc 1 127 0
 118 0018 0400A0E1 		mov	r0, r4
 128:display/ssd1963.c **** 	ssd1963_data_write(xpos + FONT_HEIGHT-1);
 119              		.loc 1 128 0
 120 001c 074084E2 		add	r4, r4, #7
 127:display/ssd1963.c **** 	ssd1963_data_write(xpos);
 121              		.loc 1 127 0
 122 0020 FEFFFFEB 		bl	ssd1963_data_write
 128:display/ssd1963.c **** 	ssd1963_data_write(xpos + FONT_HEIGHT-1);
 123              		.loc 1 128 0
 124 0024 FF0004E2 		and	r0, r4, #255
 125 0028 FEFFFFEB 		bl	ssd1963_data_write
 131:display/ssd1963.c **** 	ssd1963_data_write(ypos);
 126              		.loc 1 131 0
 127 002c FF4005E2 		and	r4, r5, #255
 130:display/ssd1963.c **** 	ssd1963_cmd_write(0x2a);
 128              		.loc 1 130 0
 129 0030 2A00A0E3 		mov	r0, #42
 130 0034 FEFFFFEB 		bl	ssd1963_cmd_write
 131:display/ssd1963.c **** 	ssd1963_data_write(ypos);
 131              		.loc 1 131 0
 132 0038 0400A0E1 		mov	r0, r4
 133 003c FEFFFFEB 		bl	ssd1963_data_write
 132:display/ssd1963.c **** 	ssd1963_data_write(ypos + FONT_WIDTH-1);
 134              		.loc 1 132 0
 135 0040 070084E2 		add	r0, r4, #7
 136 0044 FF0000E2 		and	r0, r0, #255
 133:display/ssd1963.c **** }
 137              		.loc 1 133 0
 138 0048 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 132:display/ssd1963.c **** 	ssd1963_data_write(ypos + FONT_WIDTH-1);
 139              		.loc 1 132 0
 140 004c FEFFFFEA 		b	ssd1963_data_write
 141              		.cfi_endproc
 142              	.LFE9:
 144              		.section	.text.ssd1963_clrscr,"ax",%progbits
 145              		.align	2
 147              	ssd1963_clrscr:
 148              	.LFB7:
  59:display/ssd1963.c **** {
 149              		.loc 1 59 0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153 0000 10402DE9 		stmfd	sp!, {r4, lr}
 154              	.LCFI3:
 155              		.cfi_def_cfa_offset 8
  63:display/ssd1963.c **** 	ssd1963_cmd_write(0x2b);
 156              		.loc 1 63 0
 157 0004 2B00A0E3 		mov	r0, #43
 158              		.cfi_offset 14, -4
 159              		.cfi_offset 4, -8
 160 0008 FEFFFFEB 		bl	ssd1963_cmd_write
  64:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 161              		.loc 1 64 0
 162 000c 0000A0E3 		mov	r0, #0
 163 0010 FEFFFFEB 		bl	ssd1963_data_write
  65:display/ssd1963.c **** 	ssd1963_data_write(LCD_ROWS-1);
 164              		.loc 1 65 0
 165 0014 3F00A0E3 		mov	r0, #63
 166 0018 FEFFFFEB 		bl	ssd1963_data_write
  67:display/ssd1963.c **** 	ssd1963_cmd_write(0x2a);
 167              		.loc 1 67 0
 168 001c 2A00A0E3 		mov	r0, #42
 169 0020 FEFFFFEB 		bl	ssd1963_cmd_write
  68:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 170              		.loc 1 68 0
 171 0024 0000A0E3 		mov	r0, #0
 172 0028 FEFFFFEB 		bl	ssd1963_data_write
  69:display/ssd1963.c **** 	ssd1963_data_write(LCD_COLUMNS-1);
 173              		.loc 1 69 0
 174 002c 5F00A0E3 		mov	r0, #95
 175 0030 FEFFFFEB 		bl	ssd1963_data_write
  71:display/ssd1963.c **** 	ssd1963_cmd_write(0x2c);
 176              		.loc 1 71 0
 177 0034 2C00A0E3 		mov	r0, #44
 178 0038 FEFFFFEB 		bl	ssd1963_cmd_write
 179              	.LVL10:
 180 003c 094BA0E3 		mov	r4, #9216
 181              	.LVL11:
 182              	.L6:
  75:display/ssd1963.c **** 		ssd1963_data_write(0xff);
 183              		.loc 1 75 0 discriminator 2
 184 0040 014044E2 		sub	r4, r4, #1
 185 0044 FF00A0E3 		mov	r0, #255
 186 0048 0448A0E1 		mov	r4, r4, asl #16
 187 004c FEFFFFEB 		bl	ssd1963_data_write
  74:display/ssd1963.c **** 	for(i=0; i < (LCD_ROWS * (LCD_COLUMNS/2) * PIXEL_BYTES); i++){
 188              		.loc 1 74 0 discriminator 2
 189 0050 2448B0E1 		movs	r4, r4, lsr #16
 190 0054 F9FFFF1A 		bne	.L6
  77:display/ssd1963.c **** }
 191              		.loc 1 77 0
 192 0058 1080BDE8 		ldmfd	sp!, {r4, pc}
 193              		.cfi_endproc
 194              	.LFE7:
 196              		.section	.text.ssd1963_init,"ax",%progbits
 197              		.align	2
 199              	ssd1963_init:
 200              	.LFB8:
  80:display/ssd1963.c **** {
 201              		.loc 1 80 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205 0000 04E02DE5 		str	lr, [sp, #-4]!
 206              	.LCFI4:
 207              		.cfi_def_cfa_offset 4
  83:display/ssd1963.c **** 	calypso_reset_set(RESET_EXT, 0);
 208              		.loc 1 83 0
 209 0004 0010A0E3 		mov	r1, #0
 210 0008 0400A0E3 		mov	r0, #4
 211              		.cfi_offset 14, -4
 212 000c FEFFFFEB 		bl	calypso_reset_set
  84:display/ssd1963.c **** 	uwire_init();
 213              		.loc 1 84 0
 214 0010 FEFFFFEB 		bl	uwire_init
  85:display/ssd1963.c **** 	delay_ms(3);
 215              		.loc 1 85 0
 216 0014 0300A0E3 		mov	r0, #3
 217 0018 FEFFFFEB 		bl	delay_ms
  88:display/ssd1963.c **** 	ssd1963_cmd_write(0xb6);	/* Set vertical period */
 218              		.loc 1 88 0
 219 001c B600A0E3 		mov	r0, #182
 220 0020 FEFFFFEB 		bl	ssd1963_cmd_write
  89:display/ssd1963.c **** 	ssd1963_data_write(0x4b);
 221              		.loc 1 89 0
 222 0024 4B00A0E3 		mov	r0, #75
 223 0028 FEFFFFEB 		bl	ssd1963_data_write
  90:display/ssd1963.c **** 	ssd1963_data_write(0xf1);
 224              		.loc 1 90 0
 225 002c F100A0E3 		mov	r0, #241
 226 0030 FEFFFFEB 		bl	ssd1963_data_write
  91:display/ssd1963.c **** 	ssd1963_data_write(0x40);
 227              		.loc 1 91 0
 228 0034 4000A0E3 		mov	r0, #64
 229 0038 FEFFFFEB 		bl	ssd1963_data_write
  92:display/ssd1963.c **** 	ssd1963_data_write(0x40);
 230              		.loc 1 92 0
 231 003c 4000A0E3 		mov	r0, #64
 232 0040 FEFFFFEB 		bl	ssd1963_data_write
  93:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 233              		.loc 1 93 0
 234 0044 0000A0E3 		mov	r0, #0
 235 0048 FEFFFFEB 		bl	ssd1963_data_write
  94:display/ssd1963.c **** 	ssd1963_data_write(0x8c);
 236              		.loc 1 94 0
 237 004c 8C00A0E3 		mov	r0, #140
 238 0050 FEFFFFEB 		bl	ssd1963_data_write
  95:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 239              		.loc 1 95 0
 240 0054 0000A0E3 		mov	r0, #0
 241 0058 FEFFFFEB 		bl	ssd1963_data_write
  97:display/ssd1963.c **** 	ssd1963_cmd_write(0x3a);	/* Set pixel format */
 242              		.loc 1 97 0
 243 005c 3A00A0E3 		mov	r0, #58
 244 0060 FEFFFFEB 		bl	ssd1963_cmd_write
  98:display/ssd1963.c **** 	ssd1963_data_write(0x03);	/* 0x03: 12 bit, 0x05: 16 Bit / pixel */
 245              		.loc 1 98 0
 246 0064 0300A0E3 		mov	r0, #3
 247 0068 FEFFFFEB 		bl	ssd1963_data_write
  99:display/ssd1963.c **** 	ssd1963_cmd_write(0x11);
 248              		.loc 1 99 0
 249 006c 1100A0E3 		mov	r0, #17
 250 0070 FEFFFFEB 		bl	ssd1963_cmd_write
 102:display/ssd1963.c **** 	ssd1963_cmd_write(0xba);
 251              		.loc 1 102 0
 252 0074 BA00A0E3 		mov	r0, #186
 253 0078 FEFFFFEB 		bl	ssd1963_cmd_write
 103:display/ssd1963.c **** 	ssd1963_data_write(0x5b);
 254              		.loc 1 103 0
 255 007c 5B00A0E3 		mov	r0, #91
 256 0080 FEFFFFEB 		bl	ssd1963_data_write
 104:display/ssd1963.c **** 	ssd1963_data_write(0x84);
 257              		.loc 1 104 0
 258 0084 8400A0E3 		mov	r0, #132
 259 0088 FEFFFFEB 		bl	ssd1963_data_write
 106:display/ssd1963.c **** 	ssd1963_cmd_write(0x36);
 260              		.loc 1 106 0
 261 008c 3600A0E3 		mov	r0, #54
 262 0090 FEFFFFEB 		bl	ssd1963_cmd_write
 107:display/ssd1963.c **** 	ssd1963_data_write(0x00);
 263              		.loc 1 107 0
 264 0094 0000A0E3 		mov	r0, #0
 265 0098 FEFFFFEB 		bl	ssd1963_data_write
 109:display/ssd1963.c **** 	ssd1963_cmd_write(0x13);	/* Enter normal mode */
 266              		.loc 1 109 0
 267 009c 1300A0E3 		mov	r0, #19
 268 00a0 FEFFFFEB 		bl	ssd1963_cmd_write
 110:display/ssd1963.c **** 	ssd1963_clrscr();
 269              		.loc 1 110 0
 270 00a4 FEFFFFEB 		bl	ssd1963_clrscr
 112:display/ssd1963.c **** 	ssd1963_cmd_write(0x29);	/* Display ON */
 271              		.loc 1 112 0
 272 00a8 2900A0E3 		mov	r0, #41
 113:display/ssd1963.c **** }
 273              		.loc 1 113 0
 274 00ac 04E09DE4 		ldr	lr, [sp], #4
 112:display/ssd1963.c **** 	ssd1963_cmd_write(0x29);	/* Display ON */
 275              		.loc 1 112 0
 276 00b0 FEFFFFEA 		b	ssd1963_cmd_write
 277              		.cfi_endproc
 278              	.LFE8:
 280              		.section	.text.ssd1963_putc_col.clone.0,"ax",%progbits
 281              		.align	2
 283              	ssd1963_putc_col.clone.0:
 284              	.LFB15:
 135:display/ssd1963.c **** static int ssd1963_putc_col(unsigned char c, int fColor, int bColor)
 285              		.loc 1 135 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 4
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              	.LVL12:
 290 0000 F14F2DE9 		stmfd	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 291              	.LCFI5:
 292              		.cfi_def_cfa_offset 40
 135:display/ssd1963.c **** static int ssd1963_putc_col(unsigned char c, int fColor, int bColor)
 293              		.loc 1 135 0
 294 0004 0060A0E1 		mov	r6, r0
 295              		.cfi_offset 14, -4
 296              		.cfi_offset 11, -8
 297              		.cfi_offset 10, -12
 298              		.cfi_offset 9, -16
 299              		.cfi_offset 8, -20
 300              		.cfi_offset 7, -24
 301              		.cfi_offset 6, -28
 302              		.cfi_offset 5, -32
 303              		.cfi_offset 4, -36
 304              		.cfi_offset 0, -40
 145:display/ssd1963.c **** 	ssd1963_cmd_write(0x2c);
 305              		.loc 1 145 0
 306 0008 2C00A0E3 		mov	r0, #44
 307              	.LVL13:
 308 000c FEFFFFEB 		bl	ssd1963_cmd_write
 309              	.LVL14:
 135:display/ssd1963.c **** static int ssd1963_putc_col(unsigned char c, int fColor, int bColor)
 310              		.loc 1 135 0
 311 0010 88809FE5 		ldr	r8, .L18
 154:display/ssd1963.c **** 				pixel0 = fColor;
 312              		.loc 1 154 0
 313 0014 88709FE5 		ldr	r7, .L18+4
 135:display/ssd1963.c **** static int ssd1963_putc_col(unsigned char c, int fColor, int bColor)
 314              		.loc 1 135 0
 315 0018 868188E0 		add	r8, r8, r6, asl #3
 316 001c 018048E2 		sub	r8, r8, #1
 147:display/ssd1963.c **** 	for (i = 0; i < rows; i++) {
 317              		.loc 1 147 0
 318 0020 0040A0E3 		mov	r4, #0
 319              	.LVL15:
 320              	.L14:
 148:display/ssd1963.c **** 		row_slice = fontdata_r8x8_horiz[(FONT_WIDTH * c)+i];
 321              		.loc 1 148 0
 322 0024 01A0F8E5 		ldrb	sl, [r8, #1]!	@ zero_extendqisi2
 323              	.LVL16:
 150:display/ssd1963.c **** 		for (j = 0; j < cols; j += 2) {
 324              		.loc 1 150 0
 325 0028 0050A0E3 		mov	r5, #0
 149:display/ssd1963.c **** 		rowmask = 0x80;
 326              		.loc 1 149 0
 327 002c 8090A0E3 		mov	r9, #128
 328              	.LVL17:
 329              	.L13:
 154:display/ssd1963.c **** 				pixel0 = fColor;
 330              		.loc 1 154 0
 331 0030 0A0019E1 		tst	r9, sl
 332 0034 0730A001 		moveq	r3, r7
 333 0038 0030A013 		movne	r3, #0
 334              	.LVL18:
 155:display/ssd1963.c **** 			rowmask = rowmask >> 1;
 335              		.loc 1 155 0
 336 003c A990A0E1 		mov	r9, r9, lsr #1
 337              	.LVL19:
 159:display/ssd1963.c **** 				pixel1 = fColor;
 338              		.loc 1 159 0
 339 0040 0A0019E1 		tst	r9, sl
 162:display/ssd1963.c **** 			ssd1963_data_write((pixel0 >> 4) & 0xff);
 340              		.loc 1 162 0
 341 0044 2302A0E1 		mov	r0, r3, lsr #4
 159:display/ssd1963.c **** 				pixel1 = fColor;
 342              		.loc 1 159 0
 343 0048 07B0A001 		moveq	fp, r7
 344 004c 00B0A013 		movne	fp, #0
 345              	.LVL20:
 162:display/ssd1963.c **** 			ssd1963_data_write((pixel0 >> 4) & 0xff);
 346              		.loc 1 162 0
 347 0050 00308DE5 		str	r3, [sp, #0]
 348 0054 FEFFFFEB 		bl	ssd1963_data_write
 349              	.LVL21:
 163:display/ssd1963.c **** 			ssd1963_data_write(((pixel0 & 0x00f) << 4) | ((pixel1 >> 8) & 0x00f));
 350              		.loc 1 163 0
 351 0058 00309DE5 		ldr	r3, [sp, #0]
 352 005c 0302A0E1 		mov	r0, r3, asl #4
 353 0060 2B0480E1 		orr	r0, r0, fp, lsr #8
 354 0064 FF0000E2 		and	r0, r0, #255
 355 0068 FEFFFFEB 		bl	ssd1963_data_write
 150:display/ssd1963.c **** 		for (j = 0; j < cols; j += 2) {
 356              		.loc 1 150 0
 357 006c 025085E2 		add	r5, r5, #2
 164:display/ssd1963.c **** 			ssd1963_data_write(pixel1 & 0xff);
 358              		.loc 1 164 0
 359 0070 FF000BE2 		and	r0, fp, #255
 360 0074 FEFFFFEB 		bl	ssd1963_data_write
 361              	.LVL22:
 150:display/ssd1963.c **** 		for (j = 0; j < cols; j += 2) {
 362              		.loc 1 150 0
 363 0078 080055E3 		cmp	r5, #8
 160:display/ssd1963.c **** 			rowmask = rowmask >> 1;
 364              		.loc 1 160 0
 365 007c A990A011 		movne	r9, r9, lsr #1
 366              	.LVL23:
 367 0080 EAFFFF1A 		bne	.L13
 368              	.LVL24:
 369              	.L12:
 147:display/ssd1963.c **** 	for (i = 0; i < rows; i++) {
 370              		.loc 1 147 0
 371 0084 014084E2 		add	r4, r4, #1
 372              	.LVL25:
 373 0088 080054E3 		cmp	r4, #8
 374 008c E4FFFF1A 		bne	.L14
 167:display/ssd1963.c **** 	ssd1963_cmd_write(0x00);
 375              		.loc 1 167 0
 376 0090 0000A0E3 		mov	r0, #0
 377 0094 FEFFFFEB 		bl	ssd1963_cmd_write
 170:display/ssd1963.c **** }
 378              		.loc 1 170 0
 379 0098 0600A0E1 		mov	r0, r6
 380 009c F88FBDE8 		ldmfd	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 381              	.L19:
 382              		.align	2
 383              	.L18:
 384 00a0 00000000 		.word	fontdata_r8x8_horiz
 385 00a4 FF0F0000 		.word	4095
 386              		.cfi_endproc
 387              	.LFE15:
 389              		.section	.text.ssd1963_puts,"ax",%progbits
 390              		.align	2
 392              	ssd1963_puts:
 393              	.LFB14:
 190:display/ssd1963.c **** 
 191:display/ssd1963.c **** static int ssd1963_putc(unsigned int c)
 192:display/ssd1963.c **** {
 193:display/ssd1963.c **** 	return ssd1963_putc_col(c, BLACK, WHITE);
 194:display/ssd1963.c **** }
 195:display/ssd1963.c **** 
 196:display/ssd1963.c **** static int ssd1963_puts(const char *str)
 197:display/ssd1963.c **** {
 394              		.loc 1 197 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 0
 397              		@ frame_needed = 0, uses_anonymous_args = 0
 398              	.LVL26:
 399 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 400              	.LCFI6:
 401              		.cfi_def_cfa_offset 12
 402              		.loc 1 197 0
 403 0004 0050A0E1 		mov	r5, r0
 404              		.cfi_offset 14, -4
 405              		.cfi_offset 5, -8
 406              		.cfi_offset 4, -12
 175:display/ssd1963.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 407              		.loc 1 175 0
 408 0008 0040A0E3 		mov	r4, #0
 409 000c 050000EA 		b	.L21
 410              	.LVL27:
 411              	.L22:
 412              	.LBB4:
 413              	.LBB5:
 176:display/ssd1963.c **** 		ssd1963_goto_xy(((txtline*FONT_HEIGHT)+LCD_TOP_FREE_ROWS),
 414              		.loc 1 176 0
 415 0010 0410A0E1 		mov	r1, r4
 416 0014 0300A0E3 		mov	r0, #3
 417 0018 FEFFFFEB 		bl	ssd1963_goto_xy
 178:display/ssd1963.c **** 		ssd1963_putc_col(*str++, fColor, bColor);
 418              		.loc 1 178 0
 419 001c 010055E5 		ldrb	r0, [r5, #-1]	@ zero_extendqisi2
 420 0020 FEFFFFEB 		bl	ssd1963_putc_col.clone.0
 175:display/ssd1963.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 421              		.loc 1 175 0
 422 0024 084084E2 		add	r4, r4, #8
 423              	.LVL28:
 424              	.L21:
 425 0028 0100D5E4 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 426 002c 000050E3 		cmp	r0, #0
 427 0030 F6FFFF1A 		bne	.L22
 428              	.LBE5:
 429              	.LBE4:
 198:display/ssd1963.c **** 	return ssd1963_puts_col(str, 0, BLACK, WHITE);
 199:display/ssd1963.c **** }
 430              		.loc 1 199 0
 431 0034 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 432              		.cfi_endproc
 433              	.LFE14:
 435              		.section	.text.ssd1963_putc,"ax",%progbits
 436              		.align	2
 438              	ssd1963_putc:
 439              	.LFB13:
 192:display/ssd1963.c **** {
 440              		.loc 1 192 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 0
 443              		@ frame_needed = 0, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445              	.LVL29:
 193:display/ssd1963.c **** 	return ssd1963_putc_col(c, BLACK, WHITE);
 446              		.loc 1 193 0
 447 0000 FF0000E2 		and	r0, r0, #255
 448              	.LVL30:
 194:display/ssd1963.c **** }
 449              		.loc 1 194 0
 193:display/ssd1963.c **** 	return ssd1963_putc_col(c, BLACK, WHITE);
 450              		.loc 1 193 0
 451 0004 FEFFFFEA 		b	ssd1963_putc_col.clone.0
 452              		.cfi_endproc
 453              	.LFE13:
 455              		.global	ssd1963_display
 456              		.section	.rodata
 457              		.align	2
 460              	ssd1963_display:
 461 0000 00000000 		.word	.LC0
 462 0004 00000000 		.word	ssd1963_init
 463 0008 00000000 		.word	ssd1963_set_attr
 464 000c 00000000 		.word	ssd1963_set_attr
 465 0010 00000000 		.word	ssd1963_clrscr
 466 0014 00000000 		.word	ssd1963_goto_xy
 467 0018 00000000 		.space	4
 468 001c 00000000 		.word	ssd1963_putc
 469 0020 00000000 		.word	ssd1963_puts
 470              		.section	.rodata.str1.1,"aMS",%progbits,1
 471              	.LC0:
 472 0000 73736431 		.ascii	"ssd1963\000"
 472      39363300 
 473              		.text
 474              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 ssd1963.c
     /tmp/ccUdpmEC.s:12     .text.ssd1963_set_attr:0000000000000000 $a
     /tmp/ccUdpmEC.s:14     .text.ssd1963_set_attr:0000000000000000 ssd1963_set_attr
     /tmp/ccUdpmEC.s:29     .text.ssd1963_data_write:0000000000000000 $a
     /tmp/ccUdpmEC.s:31     .text.ssd1963_data_write:0000000000000000 ssd1963_data_write
     /tmp/ccUdpmEC.s:60     .text.ssd1963_cmd_write:0000000000000000 $a
     /tmp/ccUdpmEC.s:62     .text.ssd1963_cmd_write:0000000000000000 ssd1963_cmd_write
     /tmp/ccUdpmEC.s:90     .text.ssd1963_goto_xy:0000000000000000 $a
     /tmp/ccUdpmEC.s:92     .text.ssd1963_goto_xy:0000000000000000 ssd1963_goto_xy
     /tmp/ccUdpmEC.s:145    .text.ssd1963_clrscr:0000000000000000 $a
     /tmp/ccUdpmEC.s:147    .text.ssd1963_clrscr:0000000000000000 ssd1963_clrscr
     /tmp/ccUdpmEC.s:197    .text.ssd1963_init:0000000000000000 $a
     /tmp/ccUdpmEC.s:199    .text.ssd1963_init:0000000000000000 ssd1963_init
     /tmp/ccUdpmEC.s:281    .text.ssd1963_putc_col.clone.0:0000000000000000 $a
     /tmp/ccUdpmEC.s:283    .text.ssd1963_putc_col.clone.0:0000000000000000 ssd1963_putc_col.clone.0
     /tmp/ccUdpmEC.s:384    .text.ssd1963_putc_col.clone.0:00000000000000a0 $d
     /tmp/ccUdpmEC.s:390    .text.ssd1963_puts:0000000000000000 $a
     /tmp/ccUdpmEC.s:392    .text.ssd1963_puts:0000000000000000 ssd1963_puts
     /tmp/ccUdpmEC.s:436    .text.ssd1963_putc:0000000000000000 $a
     /tmp/ccUdpmEC.s:438    .text.ssd1963_putc:0000000000000000 ssd1963_putc
     /tmp/ccUdpmEC.s:460    .rodata:0000000000000000 ssd1963_display
     /tmp/ccUdpmEC.s:457    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
uwire_xfer
calypso_reset_set
uwire_init
delay_ms
fontdata_r8x8_horiz
