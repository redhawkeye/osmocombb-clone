   1              		.file	"td014.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.td014_set_attr,"ax",%progbits
  12              		.align	2
  14              	td014_set_attr:
  15              	.LFB12:
  16              		.file 1 "display/td014.c"
   1:display/td014.c **** /* Toppoly TD014 LCD Driver, as used in the Motorola C139/C140 */
   2:display/td014.c **** 
   3:display/td014.c **** /* (C) 2010 by Steve Markgraf <steve@steve-m.de>
   4:display/td014.c ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   5:display/td014.c ****  *
   6:display/td014.c ****  * All Rights Reserved
   7:display/td014.c ****  *
   8:display/td014.c ****  * This program is free software; you can redistribute it and/or modify
   9:display/td014.c ****  * it under the terms of the GNU General Public License as published by
  10:display/td014.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:display/td014.c ****  * (at your option) any later version.
  12:display/td014.c ****  *
  13:display/td014.c ****  * This program is distributed in the hope that it will be useful,
  14:display/td014.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:display/td014.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:display/td014.c ****  * GNU General Public License for more details.
  17:display/td014.c ****  *
  18:display/td014.c ****  * You should have received a copy of the GNU General Public License along
  19:display/td014.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:display/td014.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:display/td014.c ****  *
  22:display/td014.c ****  */
  23:display/td014.c **** 
  24:display/td014.c **** #include <stdint.h>
  25:display/td014.c **** #include <stdio.h>
  26:display/td014.c **** 
  27:display/td014.c **** #include <debug.h>
  28:display/td014.c **** #include <delay.h>
  29:display/td014.c **** #include <uwire.h>
  30:display/td014.c **** #include <display.h>
  31:display/td014.c **** #include <calypso/clock.h>
  32:display/td014.c **** 
  33:display/td014.c **** #define LCD_COLUMNS		96
  34:display/td014.c **** #define LCD_ROWS		64
  35:display/td014.c **** #define LCD_TOP_FREE_ROWS	3
  36:display/td014.c **** #define LCD_LEFT_FREE_COLS	0
  37:display/td014.c **** #define	PIXEL_BYTES		2
  38:display/td014.c **** #define TD014_UWIRE_BITLEN 	9
  39:display/td014.c **** #define TD014_DEV_ID		0
  40:display/td014.c **** #define FONT_HEIGHT		8
  41:display/td014.c **** #define FONT_WIDTH		8
  42:display/td014.c **** 
  43:display/td014.c **** #define BLACK		0x0000
  44:display/td014.c **** #define WHITE		0xffff
  45:display/td014.c **** 
  46:display/td014.c **** static void td014_cmd_write(const uint8_t cmd)
  47:display/td014.c **** {
  48:display/td014.c **** 	uint16_t cmd_out = cmd;
  49:display/td014.c **** 	uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN, &cmd_out, NULL);
  50:display/td014.c **** }
  51:display/td014.c **** 
  52:display/td014.c **** static void td014_data_write(const uint8_t data)
  53:display/td014.c **** {
  54:display/td014.c **** 	uint16_t data_out = ((0x01 << 8) + data);
  55:display/td014.c **** 	uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN, &data_out, NULL);
  56:display/td014.c **** }
  57:display/td014.c **** 
  58:display/td014.c **** static void td014_clrscr(void)
  59:display/td014.c **** {
  60:display/td014.c **** 	uint16_t i;
  61:display/td014.c **** 
  62:display/td014.c **** 	/* Select the whole display area for clearing */
  63:display/td014.c **** 	td014_cmd_write(0x10);
  64:display/td014.c **** 	td014_data_write(0x00);
  65:display/td014.c **** 	td014_cmd_write(0x11);
  66:display/td014.c **** 	td014_data_write(0x00);
  67:display/td014.c **** 	td014_cmd_write(0x12);
  68:display/td014.c **** 	td014_data_write(LCD_COLUMNS-1);
  69:display/td014.c **** 	td014_cmd_write(0x13);
  70:display/td014.c **** 	td014_data_write(LCD_ROWS-1);
  71:display/td014.c **** 	td014_cmd_write(0x14);
  72:display/td014.c **** 	td014_data_write(0x00);
  73:display/td014.c **** 	td014_cmd_write(0x15);
  74:display/td014.c **** 	td014_data_write(0x00);
  75:display/td014.c **** 
  76:display/td014.c **** 	/* Fill the display with white */
  77:display/td014.c **** 	for(i=0; i < (LCD_ROWS * LCD_COLUMNS * PIXEL_BYTES); i++) {
  78:display/td014.c **** 		td014_data_write(0xff);
  79:display/td014.c **** 	}
  80:display/td014.c **** }
  81:display/td014.c **** 
  82:display/td014.c **** static void td014_init(void)
  83:display/td014.c **** {
  84:display/td014.c **** 	calypso_reset_set(RESET_EXT, 0);
  85:display/td014.c **** 	uwire_init();
  86:display/td014.c **** 	delay_ms(3);
  87:display/td014.c **** 
  88:display/td014.c **** 	td014_cmd_write(0x3f);
  89:display/td014.c **** 	td014_data_write(0x01);
  90:display/td014.c **** 	td014_cmd_write(0x20);
  91:display/td014.c **** 	td014_data_write(0x03);
  92:display/td014.c **** 	td014_cmd_write(0x31);
  93:display/td014.c **** 	td014_data_write(0x03);
  94:display/td014.c **** 
  95:display/td014.c **** 	td014_clrscr();
  96:display/td014.c **** 
  97:display/td014.c **** }
  98:display/td014.c **** 
  99:display/td014.c **** extern const unsigned char fontdata_r8x8_horiz[];
 100:display/td014.c **** 
 101:display/td014.c **** static void td014_goto_xy(int xpos, int ypos)
 102:display/td014.c **** {
 103:display/td014.c **** 	td014_cmd_write(0x10);
 104:display/td014.c **** 	td014_data_write(ypos);
 105:display/td014.c **** 	td014_cmd_write(0x11);
 106:display/td014.c **** 	td014_data_write(xpos);
 107:display/td014.c **** 	td014_cmd_write(0x12);
 108:display/td014.c **** 	td014_data_write(ypos + FONT_HEIGHT-1);
 109:display/td014.c **** 	td014_cmd_write(0x13);
 110:display/td014.c **** 	td014_data_write(xpos + FONT_WIDTH-1);
 111:display/td014.c **** 	td014_cmd_write(0x14);
 112:display/td014.c **** 	td014_data_write(ypos);
 113:display/td014.c **** 	td014_cmd_write(0x15);
 114:display/td014.c **** 	td014_data_write(xpos);
 115:display/td014.c **** 
 116:display/td014.c **** }
 117:display/td014.c **** 
 118:display/td014.c **** 	/* RGB 556	  Byte 1 | Byte 2  *
 119:display/td014.c **** 	 * Pixel format: RRRRRGGG|GGBBBBBB */
 120:display/td014.c **** 
 121:display/td014.c **** static int td014_putc_col(unsigned char c, int fColor, int bColor)
 122:display/td014.c **** {
 123:display/td014.c **** 	int i, j;
 124:display/td014.c **** 	uint8_t cols = FONT_WIDTH;
 125:display/td014.c **** 	uint8_t rows = FONT_HEIGHT;
 126:display/td014.c **** 	uint8_t row_slice;
 127:display/td014.c **** 	uint8_t rowmask;
 128:display/td014.c **** 	uint16_t pixel;
 129:display/td014.c **** 
 130:display/td014.c **** 	for (i = 0; i < rows; i++) {
 131:display/td014.c **** 		row_slice = fontdata_r8x8_horiz[(FONT_WIDTH * c)+i];
 132:display/td014.c **** 		rowmask = 0x80;
 133:display/td014.c **** 		for (j = 0; j < cols; j++) {
 134:display/td014.c **** 			if (!(row_slice & rowmask))
 135:display/td014.c **** 				pixel = bColor;
 136:display/td014.c **** 			else
 137:display/td014.c **** 				pixel = fColor;
 138:display/td014.c **** 			rowmask = rowmask >> 1;
 139:display/td014.c **** 			/* Write the pixel data */
 140:display/td014.c **** 			td014_data_write((pixel >> 8) & 0xff);
 141:display/td014.c **** 			td014_data_write(pixel & 0xff);
 142:display/td014.c **** 		}
 143:display/td014.c **** 	}
 144:display/td014.c **** 	return c;
 145:display/td014.c **** }
 146:display/td014.c **** 
 147:display/td014.c **** static int td014_puts_col(const char *str, int txtline, int fColor, int bColor)
 148:display/td014.c **** {
 149:display/td014.c **** 	int i;
 150:display/td014.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 151:display/td014.c **** 		td014_goto_xy(((txtline*FONT_HEIGHT)+LCD_TOP_FREE_ROWS),
 152:display/td014.c **** 				(i + LCD_LEFT_FREE_COLS));
 153:display/td014.c **** 		td014_putc_col(*str++, fColor, bColor);
 154:display/td014.c **** 	}
 155:display/td014.c **** 
 156:display/td014.c **** 	return 0;
 157:display/td014.c **** }
 158:display/td014.c **** 
 159:display/td014.c **** /* interface to display driver core */
 160:display/td014.c **** 
 161:display/td014.c **** static void td014_set_attr(unsigned long attr)
 162:display/td014.c **** {
  17              		.loc 1 162 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
 163:display/td014.c **** 	/* FIXME */
 164:display/td014.c **** }
  23              		.loc 1 164 0
  24 0000 1EFF2FE1 		bx	lr
  25              		.cfi_endproc
  26              	.LFE12:
  28              		.section	.text.td014_data_write,"ax",%progbits
  29              		.align	2
  31              	td014_data_write:
  32              	.LFB6:
  53:display/td014.c **** {
  33              		.loc 1 53 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 4
  36              		@ frame_needed = 0, uses_anonymous_args = 0
  37              	.LVL1:
  38 0000 01402DE9 		stmfd	sp!, {r0, lr}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 8
  54:display/td014.c **** 	uint16_t data_out = ((0x01 << 8) + data);
  41              		.loc 1 54 0
  42 0004 010C80E2 		add	r0, r0, #256
  43              		.cfi_offset 14, -4
  44              		.cfi_offset 0, -8
  45              	.LVL2:
  46 0008 04208DE2 		add	r2, sp, #4
  47 000c B20062E1 		strh	r0, [r2, #-2]!	@ movhi
  48              	.LVL3:
  55:display/td014.c **** 	uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN, &data_out, NULL);
  49              		.loc 1 55 0
  50 0010 0000A0E3 		mov	r0, #0
  51 0014 0910A0E3 		mov	r1, #9
  52 0018 0030A0E1 		mov	r3, r0
  53 001c FEFFFFEB 		bl	uwire_xfer
  56:display/td014.c **** }
  54              		.loc 1 56 0
  55 0020 0880BDE8 		ldmfd	sp!, {r3, pc}
  56              		.cfi_endproc
  57              	.LFE6:
  59              		.section	.text.td014_cmd_write,"ax",%progbits
  60              		.align	2
  62              	td014_cmd_write:
  63              	.LFB5:
  47:display/td014.c **** {
  64              		.loc 1 47 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 4
  67              		@ frame_needed = 0, uses_anonymous_args = 0
  68              	.LVL4:
  69 0000 01402DE9 		stmfd	sp!, {r0, lr}
  70              	.LCFI1:
  71              		.cfi_def_cfa_offset 8
  48:display/td014.c **** 	uint16_t cmd_out = cmd;
  72              		.loc 1 48 0
  73 0004 04208DE2 		add	r2, sp, #4
  74 0008 B20062E1 		strh	r0, [r2, #-2]!	@ movhi
  75              	.LVL5:
  49:display/td014.c **** 	uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN, &cmd_out, NULL);
  76              		.loc 1 49 0
  77 000c 0000A0E3 		mov	r0, #0
  78              		.cfi_offset 14, -4
  79              		.cfi_offset 0, -8
  80              	.LVL6:
  81 0010 0910A0E3 		mov	r1, #9
  82 0014 0030A0E1 		mov	r3, r0
  83 0018 FEFFFFEB 		bl	uwire_xfer
  50:display/td014.c **** }
  84              		.loc 1 50 0
  85 001c 0880BDE8 		ldmfd	sp!, {r3, pc}
  86              		.cfi_endproc
  87              	.LFE5:
  89              		.section	.text.td014_goto_xy,"ax",%progbits
  90              		.align	2
  92              	td014_goto_xy:
  93              	.LFB9:
 102:display/td014.c **** {
  94              		.loc 1 102 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              	.LVL7:
  99 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 100              	.LCFI2:
 101              		.cfi_def_cfa_offset 12
 102:display/td014.c **** {
 102              		.loc 1 102 0
 103 0004 0150A0E1 		mov	r5, r1
 104              		.cfi_offset 14, -4
 105              		.cfi_offset 5, -8
 106              		.cfi_offset 4, -12
 104:display/td014.c **** 	td014_data_write(ypos);
 107              		.loc 1 104 0
 108 0008 FF5005E2 		and	r5, r5, #255
 102:display/td014.c **** {
 109              		.loc 1 102 0
 110 000c 0040A0E1 		mov	r4, r0
 103:display/td014.c **** 	td014_cmd_write(0x10);
 111              		.loc 1 103 0
 112 0010 1000A0E3 		mov	r0, #16
 113              	.LVL8:
 114 0014 FEFFFFEB 		bl	td014_cmd_write
 115              	.LVL9:
 104:display/td014.c **** 	td014_data_write(ypos);
 116              		.loc 1 104 0
 117 0018 0500A0E1 		mov	r0, r5
 106:display/td014.c **** 	td014_data_write(xpos);
 118              		.loc 1 106 0
 119 001c FF4004E2 		and	r4, r4, #255
 120              	.LVL10:
 104:display/td014.c **** 	td014_data_write(ypos);
 121              		.loc 1 104 0
 122 0020 FEFFFFEB 		bl	td014_data_write
 105:display/td014.c **** 	td014_cmd_write(0x11);
 123              		.loc 1 105 0
 124 0024 1100A0E3 		mov	r0, #17
 125 0028 FEFFFFEB 		bl	td014_cmd_write
 106:display/td014.c **** 	td014_data_write(xpos);
 126              		.loc 1 106 0
 127 002c 0400A0E1 		mov	r0, r4
 128 0030 FEFFFFEB 		bl	td014_data_write
 107:display/td014.c **** 	td014_cmd_write(0x12);
 129              		.loc 1 107 0
 130 0034 1200A0E3 		mov	r0, #18
 131 0038 FEFFFFEB 		bl	td014_cmd_write
 108:display/td014.c **** 	td014_data_write(ypos + FONT_HEIGHT-1);
 132              		.loc 1 108 0
 133 003c 070085E2 		add	r0, r5, #7
 134 0040 FF0000E2 		and	r0, r0, #255
 135 0044 FEFFFFEB 		bl	td014_data_write
 109:display/td014.c **** 	td014_cmd_write(0x13);
 136              		.loc 1 109 0
 137 0048 1300A0E3 		mov	r0, #19
 138 004c FEFFFFEB 		bl	td014_cmd_write
 110:display/td014.c **** 	td014_data_write(xpos + FONT_WIDTH-1);
 139              		.loc 1 110 0
 140 0050 070084E2 		add	r0, r4, #7
 141 0054 FF0000E2 		and	r0, r0, #255
 142 0058 FEFFFFEB 		bl	td014_data_write
 111:display/td014.c **** 	td014_cmd_write(0x14);
 143              		.loc 1 111 0
 144 005c 1400A0E3 		mov	r0, #20
 145 0060 FEFFFFEB 		bl	td014_cmd_write
 112:display/td014.c **** 	td014_data_write(ypos);
 146              		.loc 1 112 0
 147 0064 0500A0E1 		mov	r0, r5
 148 0068 FEFFFFEB 		bl	td014_data_write
 113:display/td014.c **** 	td014_cmd_write(0x15);
 149              		.loc 1 113 0
 150 006c 1500A0E3 		mov	r0, #21
 151 0070 FEFFFFEB 		bl	td014_cmd_write
 114:display/td014.c **** 	td014_data_write(xpos);
 152              		.loc 1 114 0
 153 0074 0400A0E1 		mov	r0, r4
 116:display/td014.c **** }
 154              		.loc 1 116 0
 155 0078 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 114:display/td014.c **** 	td014_data_write(xpos);
 156              		.loc 1 114 0
 157 007c FEFFFFEA 		b	td014_data_write
 158              		.cfi_endproc
 159              	.LFE9:
 161              		.section	.text.td014_clrscr,"ax",%progbits
 162              		.align	2
 164              	td014_clrscr:
 165              	.LFB7:
  59:display/td014.c **** {
 166              		.loc 1 59 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170 0000 10402DE9 		stmfd	sp!, {r4, lr}
 171              	.LCFI3:
 172              		.cfi_def_cfa_offset 8
  63:display/td014.c **** 	td014_cmd_write(0x10);
 173              		.loc 1 63 0
 174 0004 1000A0E3 		mov	r0, #16
 175              		.cfi_offset 14, -4
 176              		.cfi_offset 4, -8
 177 0008 FEFFFFEB 		bl	td014_cmd_write
  64:display/td014.c **** 	td014_data_write(0x00);
 178              		.loc 1 64 0
 179 000c 0000A0E3 		mov	r0, #0
 180 0010 FEFFFFEB 		bl	td014_data_write
  65:display/td014.c **** 	td014_cmd_write(0x11);
 181              		.loc 1 65 0
 182 0014 1100A0E3 		mov	r0, #17
 183 0018 FEFFFFEB 		bl	td014_cmd_write
  66:display/td014.c **** 	td014_data_write(0x00);
 184              		.loc 1 66 0
 185 001c 0000A0E3 		mov	r0, #0
 186 0020 FEFFFFEB 		bl	td014_data_write
  67:display/td014.c **** 	td014_cmd_write(0x12);
 187              		.loc 1 67 0
 188 0024 1200A0E3 		mov	r0, #18
 189 0028 FEFFFFEB 		bl	td014_cmd_write
  68:display/td014.c **** 	td014_data_write(LCD_COLUMNS-1);
 190              		.loc 1 68 0
 191 002c 5F00A0E3 		mov	r0, #95
 192 0030 FEFFFFEB 		bl	td014_data_write
  69:display/td014.c **** 	td014_cmd_write(0x13);
 193              		.loc 1 69 0
 194 0034 1300A0E3 		mov	r0, #19
 195 0038 FEFFFFEB 		bl	td014_cmd_write
  70:display/td014.c **** 	td014_data_write(LCD_ROWS-1);
 196              		.loc 1 70 0
 197 003c 3F00A0E3 		mov	r0, #63
 198 0040 FEFFFFEB 		bl	td014_data_write
  71:display/td014.c **** 	td014_cmd_write(0x14);
 199              		.loc 1 71 0
 200 0044 1400A0E3 		mov	r0, #20
 201 0048 FEFFFFEB 		bl	td014_cmd_write
  72:display/td014.c **** 	td014_data_write(0x00);
 202              		.loc 1 72 0
 203 004c 0000A0E3 		mov	r0, #0
 204 0050 FEFFFFEB 		bl	td014_data_write
  73:display/td014.c **** 	td014_cmd_write(0x15);
 205              		.loc 1 73 0
 206 0054 1500A0E3 		mov	r0, #21
 207 0058 FEFFFFEB 		bl	td014_cmd_write
  74:display/td014.c **** 	td014_data_write(0x00);
 208              		.loc 1 74 0
 209 005c 0000A0E3 		mov	r0, #0
 210 0060 FEFFFFEB 		bl	td014_data_write
 211              	.LVL11:
 212 0064 034AA0E3 		mov	r4, #12288
 213              	.LVL12:
 214              	.L6:
  78:display/td014.c **** 		td014_data_write(0xff);
 215              		.loc 1 78 0 discriminator 2
 216 0068 014044E2 		sub	r4, r4, #1
 217 006c FF00A0E3 		mov	r0, #255
 218 0070 0448A0E1 		mov	r4, r4, asl #16
 219 0074 FEFFFFEB 		bl	td014_data_write
  77:display/td014.c **** 	for(i=0; i < (LCD_ROWS * LCD_COLUMNS * PIXEL_BYTES); i++) {
 220              		.loc 1 77 0 discriminator 2
 221 0078 2448B0E1 		movs	r4, r4, lsr #16
 222 007c F9FFFF1A 		bne	.L6
  80:display/td014.c **** }
 223              		.loc 1 80 0
 224 0080 1080BDE8 		ldmfd	sp!, {r4, pc}
 225              		.cfi_endproc
 226              	.LFE7:
 228              		.section	.text.td014_init,"ax",%progbits
 229              		.align	2
 231              	td014_init:
 232              	.LFB8:
  83:display/td014.c **** {
 233              		.loc 1 83 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237 0000 04E02DE5 		str	lr, [sp, #-4]!
 238              	.LCFI4:
 239              		.cfi_def_cfa_offset 4
  84:display/td014.c **** 	calypso_reset_set(RESET_EXT, 0);
 240              		.loc 1 84 0
 241 0004 0010A0E3 		mov	r1, #0
 242 0008 0400A0E3 		mov	r0, #4
 243              		.cfi_offset 14, -4
 244 000c FEFFFFEB 		bl	calypso_reset_set
  85:display/td014.c **** 	uwire_init();
 245              		.loc 1 85 0
 246 0010 FEFFFFEB 		bl	uwire_init
  86:display/td014.c **** 	delay_ms(3);
 247              		.loc 1 86 0
 248 0014 0300A0E3 		mov	r0, #3
 249 0018 FEFFFFEB 		bl	delay_ms
  88:display/td014.c **** 	td014_cmd_write(0x3f);
 250              		.loc 1 88 0
 251 001c 3F00A0E3 		mov	r0, #63
 252 0020 FEFFFFEB 		bl	td014_cmd_write
  89:display/td014.c **** 	td014_data_write(0x01);
 253              		.loc 1 89 0
 254 0024 0100A0E3 		mov	r0, #1
 255 0028 FEFFFFEB 		bl	td014_data_write
  90:display/td014.c **** 	td014_cmd_write(0x20);
 256              		.loc 1 90 0
 257 002c 2000A0E3 		mov	r0, #32
 258 0030 FEFFFFEB 		bl	td014_cmd_write
  91:display/td014.c **** 	td014_data_write(0x03);
 259              		.loc 1 91 0
 260 0034 0300A0E3 		mov	r0, #3
 261 0038 FEFFFFEB 		bl	td014_data_write
  92:display/td014.c **** 	td014_cmd_write(0x31);
 262              		.loc 1 92 0
 263 003c 3100A0E3 		mov	r0, #49
 264 0040 FEFFFFEB 		bl	td014_cmd_write
  93:display/td014.c **** 	td014_data_write(0x03);
 265              		.loc 1 93 0
 266 0044 0300A0E3 		mov	r0, #3
 267 0048 FEFFFFEB 		bl	td014_data_write
  97:display/td014.c **** }
 268              		.loc 1 97 0
 269 004c 04E09DE4 		ldr	lr, [sp], #4
  95:display/td014.c **** 	td014_clrscr();
 270              		.loc 1 95 0
 271 0050 FEFFFFEA 		b	td014_clrscr
 272              		.cfi_endproc
 273              	.LFE8:
 275              		.section	.text.td014_putc_col.clone.0,"ax",%progbits
 276              		.align	2
 278              	td014_putc_col.clone.0:
 279              	.LFB15:
 121:display/td014.c **** static int td014_putc_col(unsigned char c, int fColor, int bColor)
 280              		.loc 1 121 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL13:
 285 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 286              	.LCFI5:
 287              		.cfi_def_cfa_offset 36
 121:display/td014.c **** static int td014_putc_col(unsigned char c, int fColor, int bColor)
 288              		.loc 1 121 0
 289 0004 58809FE5 		ldr	r8, .L16
 290              		.cfi_offset 14, -4
 291              		.cfi_offset 11, -8
 292              		.cfi_offset 10, -12
 293              		.cfi_offset 9, -16
 294              		.cfi_offset 8, -20
 295              		.cfi_offset 7, -24
 296              		.cfi_offset 6, -28
 297              		.cfi_offset 5, -32
 298              		.cfi_offset 4, -36
 137:display/td014.c **** 				pixel = fColor;
 299              		.loc 1 137 0
 300 0008 58909FE5 		ldr	r9, .L16+4
 121:display/td014.c **** static int td014_putc_col(unsigned char c, int fColor, int bColor)
 301              		.loc 1 121 0
 302 000c 808188E0 		add	r8, r8, r0, asl #3
 303 0010 0070A0E1 		mov	r7, r0
 304 0014 018048E2 		sub	r8, r8, #1
 130:display/td014.c **** 	for (i = 0; i < rows; i++) {
 305              		.loc 1 130 0
 306 0018 0040A0E3 		mov	r4, #0
 307              	.LVL14:
 308              	.L13:
 131:display/td014.c **** 		row_slice = fontdata_r8x8_horiz[(FONT_WIDTH * c)+i];
 309              		.loc 1 131 0
 310 001c 01B0F8E5 		ldrb	fp, [r8, #1]!	@ zero_extendqisi2
 311              	.LVL15:
 312 0020 0860A0E3 		mov	r6, #8
 132:display/td014.c **** 		rowmask = 0x80;
 313              		.loc 1 132 0
 314 0024 8050A0E3 		mov	r5, #128
 315              	.LVL16:
 316              	.L12:
 137:display/td014.c **** 				pixel = fColor;
 317              		.loc 1 137 0
 318 0028 0B0015E1 		tst	r5, fp
 319 002c 09A0A001 		moveq	sl, r9
 320 0030 00A0A013 		movne	sl, #0
 321              	.LVL17:
 140:display/td014.c **** 			td014_data_write((pixel >> 8) & 0xff);
 322              		.loc 1 140 0
 323 0034 2A04A0E1 		mov	r0, sl, lsr #8
 324 0038 FEFFFFEB 		bl	td014_data_write
 141:display/td014.c **** 			td014_data_write(pixel & 0xff);
 325              		.loc 1 141 0
 326 003c FF000AE2 		and	r0, sl, #255
 327 0040 FEFFFFEB 		bl	td014_data_write
 133:display/td014.c **** 		for (j = 0; j < cols; j++) {
 328              		.loc 1 133 0
 329 0044 016056E2 		subs	r6, r6, #1
 138:display/td014.c **** 			rowmask = rowmask >> 1;
 330              		.loc 1 138 0
 331 0048 A550A011 		movne	r5, r5, lsr #1
 332              	.LVL18:
 333 004c F5FFFF1A 		bne	.L12
 334              	.LVL19:
 335              	.L11:
 130:display/td014.c **** 	for (i = 0; i < rows; i++) {
 336              		.loc 1 130 0
 337 0050 014084E2 		add	r4, r4, #1
 338              	.LVL20:
 339 0054 080054E3 		cmp	r4, #8
 340 0058 EFFFFF1A 		bne	.L13
 145:display/td014.c **** }
 341              		.loc 1 145 0
 342 005c 0700A0E1 		mov	r0, r7
 343 0060 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 344              	.L17:
 345              		.align	2
 346              	.L16:
 347 0064 00000000 		.word	fontdata_r8x8_horiz
 348 0068 FFFF0000 		.word	65535
 349              		.cfi_endproc
 350              	.LFE15:
 352              		.section	.text.td014_puts,"ax",%progbits
 353              		.align	2
 355              	td014_puts:
 356              	.LFB14:
 165:display/td014.c **** 
 166:display/td014.c **** static int td014_putc(unsigned int c)
 167:display/td014.c **** {
 168:display/td014.c **** 	return td014_putc_col(c, BLACK, WHITE);
 169:display/td014.c **** }
 170:display/td014.c **** 
 171:display/td014.c **** static int td014_puts(const char *str)
 172:display/td014.c **** {
 357              		.loc 1 172 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              	.LVL21:
 362 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 363              	.LCFI6:
 364              		.cfi_def_cfa_offset 12
 365              		.loc 1 172 0
 366 0004 0050A0E1 		mov	r5, r0
 367              		.cfi_offset 14, -4
 368              		.cfi_offset 5, -8
 369              		.cfi_offset 4, -12
 150:display/td014.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 370              		.loc 1 150 0
 371 0008 0040A0E3 		mov	r4, #0
 372 000c 050000EA 		b	.L19
 373              	.LVL22:
 374              	.L20:
 375              	.LBB4:
 376              	.LBB5:
 151:display/td014.c **** 		td014_goto_xy(((txtline*FONT_HEIGHT)+LCD_TOP_FREE_ROWS),
 377              		.loc 1 151 0
 378 0010 0410A0E1 		mov	r1, r4
 379 0014 0300A0E3 		mov	r0, #3
 380 0018 FEFFFFEB 		bl	td014_goto_xy
 153:display/td014.c **** 		td014_putc_col(*str++, fColor, bColor);
 381              		.loc 1 153 0
 382 001c 010055E5 		ldrb	r0, [r5, #-1]	@ zero_extendqisi2
 383 0020 FEFFFFEB 		bl	td014_putc_col.clone.0
 150:display/td014.c **** 	for (i = 0; *str != 0x00; i += FONT_WIDTH) {
 384              		.loc 1 150 0
 385 0024 084084E2 		add	r4, r4, #8
 386              	.LVL23:
 387              	.L19:
 388 0028 0100D5E4 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 389 002c 000050E3 		cmp	r0, #0
 390 0030 F6FFFF1A 		bne	.L20
 391              	.LBE5:
 392              	.LBE4:
 173:display/td014.c **** 	return td014_puts_col(str, 0, BLACK, WHITE);
 174:display/td014.c **** }
 393              		.loc 1 174 0
 394 0034 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 395              		.cfi_endproc
 396              	.LFE14:
 398              		.section	.text.td014_putc,"ax",%progbits
 399              		.align	2
 401              	td014_putc:
 402              	.LFB13:
 167:display/td014.c **** {
 403              		.loc 1 167 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408              	.LVL24:
 168:display/td014.c **** 	return td014_putc_col(c, BLACK, WHITE);
 409              		.loc 1 168 0
 410 0000 FF0000E2 		and	r0, r0, #255
 411              	.LVL25:
 169:display/td014.c **** }
 412              		.loc 1 169 0
 168:display/td014.c **** 	return td014_putc_col(c, BLACK, WHITE);
 413              		.loc 1 168 0
 414 0004 FEFFFFEA 		b	td014_putc_col.clone.0
 415              		.cfi_endproc
 416              	.LFE13:
 418              		.global	td014_display
 419              		.section	.rodata
 420              		.align	2
 423              	td014_display:
 424 0000 00000000 		.word	.LC0
 425 0004 00000000 		.word	td014_init
 426 0008 00000000 		.word	td014_set_attr
 427 000c 00000000 		.word	td014_set_attr
 428 0010 00000000 		.word	td014_clrscr
 429 0014 00000000 		.word	td014_goto_xy
 430 0018 00000000 		.space	4
 431 001c 00000000 		.word	td014_putc
 432 0020 00000000 		.word	td014_puts
 433              		.section	.rodata.str1.1,"aMS",%progbits,1
 434              	.LC0:
 435 0000 74643031 		.ascii	"td014\000"
 435      3400
 436              		.text
 437              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 td014.c
     /tmp/cc9rYO2q.s:12     .text.td014_set_attr:0000000000000000 $a
     /tmp/cc9rYO2q.s:14     .text.td014_set_attr:0000000000000000 td014_set_attr
     /tmp/cc9rYO2q.s:29     .text.td014_data_write:0000000000000000 $a
     /tmp/cc9rYO2q.s:31     .text.td014_data_write:0000000000000000 td014_data_write
     /tmp/cc9rYO2q.s:60     .text.td014_cmd_write:0000000000000000 $a
     /tmp/cc9rYO2q.s:62     .text.td014_cmd_write:0000000000000000 td014_cmd_write
     /tmp/cc9rYO2q.s:90     .text.td014_goto_xy:0000000000000000 $a
     /tmp/cc9rYO2q.s:92     .text.td014_goto_xy:0000000000000000 td014_goto_xy
     /tmp/cc9rYO2q.s:162    .text.td014_clrscr:0000000000000000 $a
     /tmp/cc9rYO2q.s:164    .text.td014_clrscr:0000000000000000 td014_clrscr
     /tmp/cc9rYO2q.s:229    .text.td014_init:0000000000000000 $a
     /tmp/cc9rYO2q.s:231    .text.td014_init:0000000000000000 td014_init
     /tmp/cc9rYO2q.s:276    .text.td014_putc_col.clone.0:0000000000000000 $a
     /tmp/cc9rYO2q.s:278    .text.td014_putc_col.clone.0:0000000000000000 td014_putc_col.clone.0
     /tmp/cc9rYO2q.s:347    .text.td014_putc_col.clone.0:0000000000000064 $d
     /tmp/cc9rYO2q.s:353    .text.td014_puts:0000000000000000 $a
     /tmp/cc9rYO2q.s:355    .text.td014_puts:0000000000000000 td014_puts
     /tmp/cc9rYO2q.s:399    .text.td014_putc:0000000000000000 $a
     /tmp/cc9rYO2q.s:401    .text.td014_putc:0000000000000000 td014_putc
     /tmp/cc9rYO2q.s:423    .rodata:0000000000000000 td014_display
     /tmp/cc9rYO2q.s:420    .rodata:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
uwire_xfer
calypso_reset_set
uwire_init
delay_ms
fontdata_r8x8_horiz
