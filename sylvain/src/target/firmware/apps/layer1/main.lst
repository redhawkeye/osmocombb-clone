   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.tspact_toggle,"ax",%progbits
  12              		.align	2
  14              	tspact_toggle:
  15              	.LFB49:
  16              		.file 1 "apps/layer1/main.c"
   1:apps/layer1/main.c **** /* main program of Free Software for Calypso Phone */
   2:apps/layer1/main.c **** 
   3:apps/layer1/main.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:apps/layer1/main.c ****  *
   5:apps/layer1/main.c ****  * All Rights Reserved
   6:apps/layer1/main.c ****  *
   7:apps/layer1/main.c ****  * This program is free software; you can redistribute it and/or modify
   8:apps/layer1/main.c ****  * it under the terms of the GNU General Public License as published by
   9:apps/layer1/main.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:apps/layer1/main.c ****  * (at your option) any later version.
  11:apps/layer1/main.c ****  *
  12:apps/layer1/main.c ****  * This program is distributed in the hope that it will be useful,
  13:apps/layer1/main.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:apps/layer1/main.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:apps/layer1/main.c ****  * GNU General Public License for more details.
  16:apps/layer1/main.c ****  *
  17:apps/layer1/main.c ****  * You should have received a copy of the GNU General Public License along
  18:apps/layer1/main.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:apps/layer1/main.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:apps/layer1/main.c ****  *
  21:apps/layer1/main.c ****  */
  22:apps/layer1/main.c **** 
  23:apps/layer1/main.c **** #include <stdint.h>
  24:apps/layer1/main.c **** #include <stdio.h>
  25:apps/layer1/main.c **** 
  26:apps/layer1/main.c **** #include <debug.h>
  27:apps/layer1/main.c **** #include <memory.h>
  28:apps/layer1/main.c **** #include <string.h>
  29:apps/layer1/main.c **** #include <delay.h>
  30:apps/layer1/main.c **** #include <rffe.h>
  31:apps/layer1/main.c **** #include <keypad.h>
  32:apps/layer1/main.c **** #include <board.h>
  33:apps/layer1/main.c **** 
  34:apps/layer1/main.c **** #include <abb/twl3025.h>
  35:apps/layer1/main.c **** #include <display.h>
  36:apps/layer1/main.c **** #include <rf/trf6151.h>
  37:apps/layer1/main.c **** 
  38:apps/layer1/main.c **** #include <comm/sercomm.h>
  39:apps/layer1/main.c **** #include <comm/timer.h>
  40:apps/layer1/main.c **** 
  41:apps/layer1/main.c **** #include <calypso/clock.h>
  42:apps/layer1/main.c **** #include <calypso/tpu.h>
  43:apps/layer1/main.c **** #include <calypso/tsp.h>
  44:apps/layer1/main.c **** #include <calypso/irq.h>
  45:apps/layer1/main.c **** #include <calypso/misc.h>
  46:apps/layer1/main.c **** #include <calypso/sim.h>
  47:apps/layer1/main.c **** 
  48:apps/layer1/main.c **** #include <layer1/sync.h>
  49:apps/layer1/main.c **** #include <layer1/async.h>
  50:apps/layer1/main.c **** #include <layer1/tpu_window.h>
  51:apps/layer1/main.c **** 
  52:apps/layer1/main.c **** const char *hr = "======================================================================\n";
  53:apps/layer1/main.c **** 
  54:apps/layer1/main.c **** /* MAIN program **************************************************************/
  55:apps/layer1/main.c **** 
  56:apps/layer1/main.c **** static void key_handler(enum key_codes code, enum key_states state);
  57:apps/layer1/main.c **** 
  58:apps/layer1/main.c **** int main(void)
  59:apps/layer1/main.c **** {
  60:apps/layer1/main.c **** 	uint8_t atr[20];
  61:apps/layer1/main.c **** 	uint8_t atrLength = 0;
  62:apps/layer1/main.c **** 
  63:apps/layer1/main.c **** 	board_init();
  64:apps/layer1/main.c **** 
  65:apps/layer1/main.c **** 	puts("\n\nOSMOCOM Layer 1 (revision " GIT_REVISION ")\n");
  66:apps/layer1/main.c **** 	puts(hr);
  67:apps/layer1/main.c **** 
  68:apps/layer1/main.c **** 	/* Dump device identification */
  69:apps/layer1/main.c **** 	dump_dev_id();
  70:apps/layer1/main.c **** 	puts(hr);
  71:apps/layer1/main.c **** 
  72:apps/layer1/main.c **** 	keypad_set_handler(&key_handler);
  73:apps/layer1/main.c **** 
  74:apps/layer1/main.c **** 	/* Dump clock config after PLL set */
  75:apps/layer1/main.c **** 	calypso_clk_dump();
  76:apps/layer1/main.c **** 	puts(hr);
  77:apps/layer1/main.c **** 
  78:apps/layer1/main.c **** 	display_puts("layer1.bin");
  79:apps/layer1/main.c **** 
  80:apps/layer1/main.c **** 	/* initialize SIM */
  81:apps/layer1/main.c ****         calypso_sim_init();
  82:apps/layer1/main.c **** 
  83:apps/layer1/main.c ****         puts("Power up simcard:\n");
  84:apps/layer1/main.c ****         memset(atr,0,sizeof(atr));
  85:apps/layer1/main.c ****         atrLength = calypso_sim_powerup(atr);
  86:apps/layer1/main.c **** 
  87:apps/layer1/main.c **** 
  88:apps/layer1/main.c **** 	layer1_init();
  89:apps/layer1/main.c **** 
  90:apps/layer1/main.c **** 	display_unset_attr(DISP_ATTR_INVERT);
  91:apps/layer1/main.c **** 
  92:apps/layer1/main.c **** 	tpu_frame_irq_en(1, 1);
  93:apps/layer1/main.c **** 
  94:apps/layer1/main.c **** 	while (1) {
  95:apps/layer1/main.c **** 		l1a_compl_execute();
  96:apps/layer1/main.c **** 		update_timers();
  97:apps/layer1/main.c **** 		sim_handler();
  98:apps/layer1/main.c **** 	}
  99:apps/layer1/main.c **** 
 100:apps/layer1/main.c **** 	/* NOT REACHED */
 101:apps/layer1/main.c **** 
 102:apps/layer1/main.c **** 	twl3025_power_off();
 103:apps/layer1/main.c **** }
 104:apps/layer1/main.c **** 
 105:apps/layer1/main.c **** static int afcout = 0;
 106:apps/layer1/main.c **** 
 107:apps/layer1/main.c **** static void tspact_toggle(uint8_t num)
 108:apps/layer1/main.c **** {
  17              		.loc 1 108 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  22 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  23              	.LCFI0:
  24              		.cfi_def_cfa_offset 12
  25              		.loc 1 108 0
  26 0004 0040A0E1 		mov	r4, r0
  27              		.cfi_offset 14, -4
  28              		.cfi_offset 5, -8
  29              		.cfi_offset 4, -12
 109:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
 110:apps/layer1/main.c **** 	tsp_act_toggle((1 << num));
  30              		.loc 1 110 0
  31 0008 0150A0E3 		mov	r5, #1
 109:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
  32              		.loc 1 109 0
  33 000c 0410A0E1 		mov	r1, r4
  34              		.loc 1 110 0
  35 0010 1544A0E1 		mov	r4, r5, asl r4
 109:apps/layer1/main.c **** 	printf("TSPACT%u toggle\n", num);
  36              		.loc 1 109 0
  37 0014 24009FE5 		ldr	r0, .L2
  38              	.LVL1:
  39 0018 FEFFFFEB 		bl	printf
  40              		.loc 1 110 0
  41 001c 0408A0E1 		mov	r0, r4, asl #16
  42 0020 2008A0E1 		mov	r0, r0, lsr #16
  43 0024 FEFFFFEB 		bl	tsp_act_toggle
  44              	.LBB6:
  45              	.LBB7:
  46              		.file 2 "include/calypso/tpu.h"
   1:include/calypso/tpu.h **** #ifndef _CALYPSO_TPU_H
   2:include/calypso/tpu.h **** #define _CALYPSO_TPU_H
   3:include/calypso/tpu.h **** 
   4:include/calypso/tpu.h **** #define BITS_PER_TDMA		1250
   5:include/calypso/tpu.h **** #define QBITS_PER_TDMA		(BITS_PER_TDMA * 4)	/* 5000 */
   6:include/calypso/tpu.h **** #define TPU_RANGE		QBITS_PER_TDMA
   7:include/calypso/tpu.h **** #define	SWITCH_TIME		(TPU_RANGE-10)
   8:include/calypso/tpu.h **** 
   9:include/calypso/tpu.h **** /* Assert or de-assert TPU reset */
  10:include/calypso/tpu.h **** void tpu_reset(int active);
  11:include/calypso/tpu.h **** /* Enable or Disable a new scenario loaded into the TPU */
  12:include/calypso/tpu.h **** void tpu_enable(int active);
  13:include/calypso/tpu.h **** /* Enable or Disable the clock of the TPU Module */
  14:include/calypso/tpu.h **** void tpu_clk_enable(int active);
  15:include/calypso/tpu.h **** /* Enable Frame Interrupt generation on next frame.  DSP will reset it */
  16:include/calypso/tpu.h **** void tpu_dsp_frameirq_enable(void);
  17:include/calypso/tpu.h **** /* Is a Frame interrupt still pending for the DSP ? */
  18:include/calypso/tpu.h **** int tpu_dsp_fameirq_pending(void);
  19:include/calypso/tpu.h **** /* Rewind the TPU, i.e. restart enqueueing instructions at the base addr */
  20:include/calypso/tpu.h **** void tpu_rewind(void);
  21:include/calypso/tpu.h **** /* Enqueue a raw TPU instruction */
  22:include/calypso/tpu.h **** void tpu_enqueue(uint16_t instr);
  23:include/calypso/tpu.h **** /* Initialize TPU and TPU driver */
  24:include/calypso/tpu.h **** void tpu_init(void);
  25:include/calypso/tpu.h **** /* (Busy)Wait until TPU is idle */
  26:include/calypso/tpu.h **** void tpu_wait_idle(void);
  27:include/calypso/tpu.h **** /* Enable FRAME interrupt generation */
  28:include/calypso/tpu.h **** void tpu_frame_irq_en(int mcu, int dsp);
  29:include/calypso/tpu.h **** /* Force the generation of a DSP interrupt */
  30:include/calypso/tpu.h **** void tpu_force_dsp_frame_irq(void);
  31:include/calypso/tpu.h **** 
  32:include/calypso/tpu.h **** /* Get the current TPU SYNCHRO register */
  33:include/calypso/tpu.h **** uint16_t tpu_get_synchro(void);
  34:include/calypso/tpu.h **** /* Get the current TPU OFFSET register */
  35:include/calypso/tpu.h **** uint16_t tpu_get_offset(void);
  36:include/calypso/tpu.h **** 
  37:include/calypso/tpu.h **** enum tpu_instr {
  38:include/calypso/tpu.h **** 	TPU_INSTR_AT		= (1 << 13),
  39:include/calypso/tpu.h **** 	TPU_INSTR_OFFSET	= (2 << 13),
  40:include/calypso/tpu.h **** 	TPU_INSTR_SYNCHRO	= (3 << 13),	/* Loading delta synchro value in TPU synchro register */
  41:include/calypso/tpu.h **** 	TPU_INSTR_WAIT		= (5 << 13),	/* Wait a certain period (in GSM qbits) */
  42:include/calypso/tpu.h **** 	TPU_INSTR_SLEEP		= (0 << 13),	/* Stop the sequencer by disabling TPU ENABLE bit in ctrl reg */
  43:include/calypso/tpu.h **** 	/* data processing */
  44:include/calypso/tpu.h **** 	TPU_INSTR_MOVE		= (4 << 13),
  45:include/calypso/tpu.h **** };
  46:include/calypso/tpu.h **** 
  47:include/calypso/tpu.h **** /* Addresses internal to the TPU, only accessible via MOVE */
  48:include/calypso/tpu.h **** enum tpu_reg_int {
  49:include/calypso/tpu.h **** 	TPUI_TSP_CTRL1	= 0x00,
  50:include/calypso/tpu.h **** 	TPUI_TSP_CTRL2	= 0x01,
  51:include/calypso/tpu.h **** 	TPUI_TX_1	= 0x04,
  52:include/calypso/tpu.h **** 	TPUI_TX_2	= 0x03,
  53:include/calypso/tpu.h **** 	TPUI_TX_3	= 0x02,
  54:include/calypso/tpu.h **** 	TPUI_TX_4	= 0x05,
  55:include/calypso/tpu.h **** 	TPUI_TSP_ACT_L	= 0x06,
  56:include/calypso/tpu.h **** 	TPUI_TSP_ACT_U	= 0x07,
  57:include/calypso/tpu.h **** 	TPUI_TSP_SET1	= 0x09,
  58:include/calypso/tpu.h **** 	TPUI_TSP_SET2	= 0x0a,
  59:include/calypso/tpu.h **** 	TPUI_TSP_SET3	= 0x0b,
  60:include/calypso/tpu.h **** 	TPUI_DSP_INT_PG	= 0x10,
  61:include/calypso/tpu.h **** 	TPUI_GAUGING_EN = 0x11,
  62:include/calypso/tpu.h **** };
  63:include/calypso/tpu.h **** 
  64:include/calypso/tpu.h **** enum tpui_ctrl2_bits {
  65:include/calypso/tpu.h **** 	TPUI_CTRL2_RD		= (1 << 0),
  66:include/calypso/tpu.h **** 	TPUI_CTRL2_WR		= (1 << 1),
  67:include/calypso/tpu.h **** };
  68:include/calypso/tpu.h **** 
  69:include/calypso/tpu.h **** static inline uint16_t tpu_mod5000(int16_t time)
  70:include/calypso/tpu.h **** {
  71:include/calypso/tpu.h **** 	if (time < 0)
  72:include/calypso/tpu.h **** 		return time + 5000;
  73:include/calypso/tpu.h **** 	if (time >= 5000)
  74:include/calypso/tpu.h **** 		return time - 5000;
  75:include/calypso/tpu.h **** 	return time;
  76:include/calypso/tpu.h **** }
  77:include/calypso/tpu.h **** 
  78:include/calypso/tpu.h **** /* Enqueue a SLEEP operation (stop sequencer by disabling TPU ENABLE bit) */
  79:include/calypso/tpu.h **** static inline void tpu_enq_sleep(void)
  80:include/calypso/tpu.h **** {
  81:include/calypso/tpu.h **** 	tpu_enqueue(TPU_INSTR_SLEEP);
  47              		.loc 2 81 0
  48 0028 0000A0E3 		mov	r0, #0
  49 002c FEFFFFEB 		bl	tpu_enqueue
  50              	.LBE7:
  51              	.LBE6:
 111:apps/layer1/main.c **** 	tpu_enq_sleep();
 112:apps/layer1/main.c **** 	tpu_enable(1);
  52              		.loc 1 112 0
  53 0030 0500A0E1 		mov	r0, r5
  54 0034 FEFFFFEB 		bl	tpu_enable
 113:apps/layer1/main.c **** 	tpu_wait_idle();
 114:apps/layer1/main.c **** }
  55              		.loc 1 114 0
  56 0038 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 113:apps/layer1/main.c **** 	tpu_wait_idle();
  57              		.loc 1 113 0
  58 003c FEFFFFEA 		b	tpu_wait_idle
  59              	.L3:
  60              		.align	2
  61              	.L2:
  62 0040 00000000 		.word	.LC0
  63              		.cfi_endproc
  64              	.LFE49:
  66              		.section	.text.key_handler,"ax",%progbits
  67              		.align	2
  69              	key_handler:
  70              	.LFB50:
 115:apps/layer1/main.c **** 
 116:apps/layer1/main.c **** static void key_handler(enum key_codes code, enum key_states state)
 117:apps/layer1/main.c **** {
  71              		.loc 1 117 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              	.LVL2:
 118:apps/layer1/main.c **** 	if (state != PRESSED)
  76              		.loc 1 118 0
  77 0000 000051E3 		cmp	r1, #0
 117:apps/layer1/main.c **** {
  78              		.loc 1 117 0
  79 0004 04E02DE5 		str	lr, [sp, #-4]!
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 4
  82              		.loc 1 118 0
  83 0008 04F09D14 		ldrne	pc, [sp], #4
  84              		.cfi_offset 14, -4
 119:apps/layer1/main.c **** 		return;
 120:apps/layer1/main.c **** 
 121:apps/layer1/main.c **** 	switch (code) {
  85              		.loc 1 121 0
  86 000c 040040E2 		sub	r0, r0, #4
  87              	.LVL3:
  88 0010 050050E3 		cmp	r0, #5
  89 0014 00F19F97 		ldrls	pc, [pc, r0, asl #2]
  90 0018 230000EA 		b	.L6
  91              	.L12:
  92 001c 34000000 		.word	.L7
  93 0020 3C000000 		.word	.L8
  94 0024 48000000 		.word	.L9
  95 0028 50000000 		.word	.L10
  96 002c AC000000 		.word	.L6
  97 0030 70000000 		.word	.L11
  98              	.L7:
 122:apps/layer1/main.c **** 	case KEY_4:
 123:apps/layer1/main.c **** 		tspact_toggle(6);	/* TRENA (RFFE) */
  99              		.loc 1 123 0
 100 0034 0600A0E3 		mov	r0, #6
 101              	.LVL4:
 102 0038 000000EA 		b	.L15
 103              	.LVL5:
 104              	.L8:
 124:apps/layer1/main.c **** 		break;
 125:apps/layer1/main.c **** 	case KEY_5:
 126:apps/layer1/main.c **** 		tspact_toggle(8);	/* GSM_TXEN (RFFE) */
 105              		.loc 1 126 0
 106 003c 0800A0E3 		mov	r0, #8
 107              	.LVL6:
 108              	.L15:
 109 0040 FEFFFFEB 		bl	tspact_toggle
 110              	.LVL7:
 127:apps/layer1/main.c **** 		break;
 111              		.loc 1 127 0
 112 0044 180000EA 		b	.L6
 113              	.LVL8:
 114              	.L9:
 128:apps/layer1/main.c **** 	case KEY_6:
 129:apps/layer1/main.c **** 		tspact_toggle(1);	/* PAENA (RFFE) */
 115              		.loc 1 129 0
 116 0048 0100A0E3 		mov	r0, #1
 117              	.LVL9:
 118 004c FBFFFFEA 		b	.L15
 119              	.LVL10:
 120              	.L10:
 130:apps/layer1/main.c **** 		break;
 131:apps/layer1/main.c **** 	case KEY_7:			/* decrement AFC OUT */
 132:apps/layer1/main.c **** 		afcout -= 100;
 121              		.loc 1 132 0
 122 0050 5C309FE5 		ldr	r3, .L17
 123 0054 002093E5 		ldr	r2, [r3, #0]
 124 0058 642042E2 		sub	r2, r2, #100
 133:apps/layer1/main.c **** 		if (afcout < -4096)
 125              		.loc 1 133 0
 126 005c 010A72E3 		cmn	r2, #4096
 132:apps/layer1/main.c **** 		afcout -= 100;
 127              		.loc 1 132 0
 128 0060 002083E5 		str	r2, [r3, #0]
 134:apps/layer1/main.c **** 			afcout = -4096;
 129              		.loc 1 134 0
 130 0064 4C209FB5 		ldrlt	r2, .L17+4
 133:apps/layer1/main.c **** 		if (afcout < -4096)
 131              		.loc 1 133 0
 132 0068 070000BA 		blt	.L16
 133 006c 070000EA 		b	.L14
 134              	.L11:
 135:apps/layer1/main.c **** 		twl3025_afc_set(afcout);
 136:apps/layer1/main.c **** 		printf("AFC OUT: %u\n", twl3025_afcout_get());
 137:apps/layer1/main.c **** 		break;
 138:apps/layer1/main.c **** 	case KEY_9:			/* increase AFC OUT */
 139:apps/layer1/main.c **** 		afcout += 100;
 135              		.loc 1 139 0
 136 0070 3C309FE5 		ldr	r3, .L17
 137 0074 001093E5 		ldr	r1, [r3, #0]
 138              	.LVL11:
 140:apps/layer1/main.c **** 		if (afcout > 4095)
 139              		.loc 1 140 0
 140 0078 3C209FE5 		ldr	r2, .L17+8
 139:apps/layer1/main.c **** 		afcout += 100;
 141              		.loc 1 139 0
 142 007c 641081E2 		add	r1, r1, #100
 143              		.loc 1 140 0
 144 0080 020051E1 		cmp	r1, r2
 139:apps/layer1/main.c **** 		afcout += 100;
 145              		.loc 1 139 0
 146 0084 001083E5 		str	r1, [r3, #0]
 147              		.loc 1 140 0
 148 0088 000000DA 		ble	.L14
 149              	.L16:
 141:apps/layer1/main.c **** 			afcout = 4095;
 150              		.loc 1 141 0
 151 008c 002083E5 		str	r2, [r3, #0]
 152              	.L14:
 142:apps/layer1/main.c **** 		twl3025_afc_set(afcout);
 153              		.loc 1 142 0
 154 0090 1C309FE5 		ldr	r3, .L17
 155 0094 F000D3E1 		ldrsh	r0, [r3, #0]
 156              	.LVL12:
 157 0098 FEFFFFEB 		bl	twl3025_afc_set
 143:apps/layer1/main.c **** 		printf("AFC OUT: %u\n", twl3025_afcout_get());
 158              		.loc 1 143 0
 159 009c FEFFFFEB 		bl	twl3025_afcout_get
 160 00a0 0010A0E1 		mov	r1, r0
 161 00a4 14009FE5 		ldr	r0, .L17+12
 162 00a8 FEFFFFEB 		bl	printf
 163              	.L6:
 144:apps/layer1/main.c **** 		break;
 145:apps/layer1/main.c **** 	default:
 146:apps/layer1/main.c **** 		break;
 147:apps/layer1/main.c **** 	}
 148:apps/layer1/main.c **** 	/* power down SIM, TODO:  this will happen with every key pressed,
 149:apps/layer1/main.c ****        put it somewhere else ! */
 150:apps/layer1/main.c **** 	calypso_sim_powerdown();
 151:apps/layer1/main.c **** }
 164              		.loc 1 151 0
 165 00ac 04E09DE4 		ldr	lr, [sp], #4
 150:apps/layer1/main.c **** 	calypso_sim_powerdown();
 166              		.loc 1 150 0
 167 00b0 FEFFFFEA 		b	calypso_sim_powerdown
 168              	.L18:
 169              		.align	2
 170              	.L17:
 171 00b4 00000000 		.word	.LANCHOR0
 172 00b8 00F0FFFF 		.word	-4096
 173 00bc FF0F0000 		.word	4095
 174 00c0 11000000 		.word	.LC1
 175              		.cfi_endproc
 176              	.LFE50:
 178              		.section	.text.main,"ax",%progbits
 179              		.align	2
 180              		.global	main
 182              	main:
 183              	.LFB48:
  59:apps/layer1/main.c **** {
 184              		.loc 1 59 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 20
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              	.LVL13:
 189 0000 10402DE9 		stmfd	sp!, {r4, lr}
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 8
  66:apps/layer1/main.c **** 	puts(hr);
 192              		.loc 1 66 0
 193 0004 94409FE5 		ldr	r4, .L21
 194              		.cfi_offset 14, -4
 195              		.cfi_offset 4, -8
  59:apps/layer1/main.c **** {
 196              		.loc 1 59 0
 197 0008 14D04DE2 		sub	sp, sp, #20
 198              	.LCFI3:
 199              		.cfi_def_cfa_offset 28
  63:apps/layer1/main.c **** 	board_init();
 200              		.loc 1 63 0
 201 000c FEFFFFEB 		bl	board_init
  65:apps/layer1/main.c **** 	puts("\n\nOSMOCOM Layer 1 (revision " GIT_REVISION ")\n");
 202              		.loc 1 65 0
 203 0010 8C009FE5 		ldr	r0, .L21+4
 204 0014 FEFFFFEB 		bl	puts
  66:apps/layer1/main.c **** 	puts(hr);
 205              		.loc 1 66 0
 206 0018 000094E5 		ldr	r0, [r4, #0]
 207 001c FEFFFFEB 		bl	puts
  69:apps/layer1/main.c **** 	dump_dev_id();
 208              		.loc 1 69 0
 209 0020 FEFFFFEB 		bl	dump_dev_id
  70:apps/layer1/main.c **** 	puts(hr);
 210              		.loc 1 70 0
 211 0024 000094E5 		ldr	r0, [r4, #0]
 212 0028 FEFFFFEB 		bl	puts
  72:apps/layer1/main.c **** 	keypad_set_handler(&key_handler);
 213              		.loc 1 72 0
 214 002c 74009FE5 		ldr	r0, .L21+8
 215 0030 FEFFFFEB 		bl	keypad_set_handler
  75:apps/layer1/main.c **** 	calypso_clk_dump();
 216              		.loc 1 75 0
 217 0034 FEFFFFEB 		bl	calypso_clk_dump
  76:apps/layer1/main.c **** 	puts(hr);
 218              		.loc 1 76 0
 219 0038 000094E5 		ldr	r0, [r4, #0]
 220 003c FEFFFFEB 		bl	puts
  78:apps/layer1/main.c **** 	display_puts("layer1.bin");
 221              		.loc 1 78 0
 222 0040 64009FE5 		ldr	r0, .L21+12
 223 0044 FEFFFFEB 		bl	display_puts
  81:apps/layer1/main.c ****         calypso_sim_init();
 224              		.loc 1 81 0
 225 0048 FEFFFFEB 		bl	calypso_sim_init
  83:apps/layer1/main.c ****         puts("Power up simcard:\n");
 226              		.loc 1 83 0
 227 004c 5C009FE5 		ldr	r0, .L21+16
 228 0050 FEFFFFEB 		bl	puts
  84:apps/layer1/main.c ****         memset(atr,0,sizeof(atr));
 229              		.loc 1 84 0
 230 0054 0010A0E3 		mov	r1, #0
 231 0058 1420A0E3 		mov	r2, #20
 232 005c 0D00A0E1 		mov	r0, sp
 233 0060 FEFFFFEB 		bl	memset
  85:apps/layer1/main.c ****         atrLength = calypso_sim_powerup(atr);
 234              		.loc 1 85 0
 235 0064 0D00A0E1 		mov	r0, sp
 236 0068 FEFFFFEB 		bl	calypso_sim_powerup
 237              	.LVL14:
  88:apps/layer1/main.c **** 	layer1_init();
 238              		.loc 1 88 0
 239 006c FEFFFFEB 		bl	layer1_init
 240              	.LVL15:
 241              	.LBB8:
 242              	.LBB9:
 243              		.file 3 "include/display.h"
   1:include/display.h **** #ifndef _DISPLAY_DRIVER_H
   2:include/display.h **** #define _DISPLAY_DRIVER_H
   3:include/display.h **** 
   4:include/display.h **** enum display_attr {
   5:include/display.h **** 	DISP_ATTR_INVERT	= 0x0001,
   6:include/display.h **** };
   7:include/display.h **** 
   8:include/display.h **** struct display_driver {
   9:include/display.h **** 	char *name;
  10:include/display.h **** 	void (*init)(void);
  11:include/display.h **** 	void (*set_attr)(unsigned long attr);
  12:include/display.h **** 	void (*unset_attr)(unsigned long attr);
  13:include/display.h **** 	void (*clrscr)(void);
  14:include/display.h **** 	void (*goto_xy)(int xpos, int ypos);
  15:include/display.h **** 	void (*set_color)(int fgcolor, int bgcolor);
  16:include/display.h **** 	int (*putc)(unsigned char c);
  17:include/display.h **** 	int (*puts)(const char *str);
  18:include/display.h **** };
  19:include/display.h **** 
  20:include/display.h **** extern struct display_driver *display;
  21:include/display.h **** 
  22:include/display.h **** static inline void display_init(void)
  23:include/display.h **** {
  24:include/display.h **** 	display->init();
  25:include/display.h **** }
  26:include/display.h **** static inline void display_set_attr(unsigned long attr)
  27:include/display.h **** {
  28:include/display.h **** 	display->set_attr(attr);
  29:include/display.h **** }
  30:include/display.h **** static inline void display_unset_attr(unsigned long attr)
  31:include/display.h **** {
  32:include/display.h **** 	display->unset_attr(attr);
 244              		.loc 3 32 0
 245 0070 3C309FE5 		ldr	r3, .L21+20
 246 0074 0100A0E3 		mov	r0, #1
 247 0078 003093E5 		ldr	r3, [r3, #0]
 248 007c 0FE0A0E1 		mov	lr, pc
 249 0080 0CF093E5 		ldr	pc, [r3, #12]
 250              	.LBE9:
 251              	.LBE8:
  92:apps/layer1/main.c **** 	tpu_frame_irq_en(1, 1);
 252              		.loc 1 92 0
 253 0084 0100A0E3 		mov	r0, #1
 254 0088 0010A0E1 		mov	r1, r0
 255 008c FEFFFFEB 		bl	tpu_frame_irq_en
 256              	.L20:
  95:apps/layer1/main.c **** 		l1a_compl_execute();
 257              		.loc 1 95 0 discriminator 1
 258 0090 FEFFFFEB 		bl	l1a_compl_execute
  96:apps/layer1/main.c **** 		update_timers();
 259              		.loc 1 96 0 discriminator 1
 260 0094 FEFFFFEB 		bl	update_timers
  97:apps/layer1/main.c **** 		sim_handler();
 261              		.loc 1 97 0 discriminator 1
 262 0098 FEFFFFEB 		bl	sim_handler
 263 009c FBFFFFEA 		b	.L20
 264              	.L22:
 265              		.align	2
 266              	.L21:
 267 00a0 00000000 		.word	.LANCHOR1
 268 00a4 1E000000 		.word	.LC2
 269 00a8 00000000 		.word	key_handler
 270 00ac 59000000 		.word	.LC3
 271 00b0 64000000 		.word	.LC4
 272 00b4 00000000 		.word	display
 273              		.cfi_endproc
 274              	.LFE48:
 276              		.global	hr
 277              		.section	.rodata.str1.1,"aMS",%progbits,1
 278              	.LC0:
 279 0000 54535041 		.ascii	"TSPACT%u toggle\012\000"
 279      43542575 
 279      20746F67 
 279      676C650A 
 279      00
 280              	.LC1:
 281 0011 41464320 		.ascii	"AFC OUT: %u\012\000"
 281      4F55543A 
 281      2025750A 
 281      00
 282              	.LC2:
 283 001e 0A0A4F53 		.ascii	"\012\012OSMOCOM Layer 1 (revision osmocon_v0.0.0-12"
 283      4D4F434F 
 283      4D204C61 
 283      79657220 
 283      31202872 
 284 004b 30352D67 		.ascii	"05-g07ce6fa)\012\000"
 284      30376365 
 284      36666129 
 284      0A00
 285              	.LC3:
 286 0059 6C617965 		.ascii	"layer1.bin\000"
 286      72312E62 
 286      696E00
 287              	.LC4:
 288 0064 506F7765 		.ascii	"Power up simcard:\012\000"
 288      72207570 
 288      2073696D 
 288      63617264 
 288      3A0A00
 289              	.LC5:
 290 0077 3D3D3D3D 		.ascii	"==================================================="
 290      3D3D3D3D 
 290      3D3D3D3D 
 290      3D3D3D3D 
 290      3D3D3D3D 
 291 00aa 3D3D3D3D 		.ascii	"===================\012\000"
 291      3D3D3D3D 
 291      3D3D3D3D 
 291      3D3D3D3D 
 291      3D3D3D0A 
 292              		.data
 293              		.align	2
 294              		.set	.LANCHOR1,. + 0
 297              	hr:
 298 0000 77000000 		.word	.LC5
 299              		.bss
 300              		.align	2
 301              		.set	.LANCHOR0,. + 0
 304              	afcout:
 305 0000 00000000 		.space	4
 306              		.text
 307              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccdbJFb9.s:12     .text.tspact_toggle:0000000000000000 $a
     /tmp/ccdbJFb9.s:14     .text.tspact_toggle:0000000000000000 tspact_toggle
     /tmp/ccdbJFb9.s:62     .text.tspact_toggle:0000000000000040 $d
     /tmp/ccdbJFb9.s:67     .text.key_handler:0000000000000000 $a
     /tmp/ccdbJFb9.s:69     .text.key_handler:0000000000000000 key_handler
     /tmp/ccdbJFb9.s:92     .text.key_handler:000000000000001c $d
     /tmp/ccdbJFb9.s:100    .text.key_handler:0000000000000034 $a
     /tmp/ccdbJFb9.s:171    .text.key_handler:00000000000000b4 $d
     /tmp/ccdbJFb9.s:179    .text.main:0000000000000000 $a
     /tmp/ccdbJFb9.s:182    .text.main:0000000000000000 main
     /tmp/ccdbJFb9.s:267    .text.main:00000000000000a0 $d
     /tmp/ccdbJFb9.s:297    .data:0000000000000000 hr
     /tmp/ccdbJFb9.s:293    .data:0000000000000000 $d
     /tmp/ccdbJFb9.s:300    .bss:0000000000000000 $d
     /tmp/ccdbJFb9.s:304    .bss:0000000000000000 afcout
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
printf
tsp_act_toggle
tpu_enqueue
tpu_enable
tpu_wait_idle
twl3025_afc_set
twl3025_afcout_get
calypso_sim_powerdown
board_init
puts
dump_dev_id
keypad_set_handler
calypso_clk_dump
display_puts
calypso_sim_init
memset
calypso_sim_powerup
layer1_init
tpu_frame_irq_en
l1a_compl_execute
update_timers
sim_handler
display
