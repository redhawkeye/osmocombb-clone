   1              		.file	"sched_gsmtime.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.sched_gsmtime,"ax",%progbits
  12              		.align	2
  13              		.global	sched_gsmtime
  15              	sched_gsmtime:
  16              	.LFB13:
  17              		.file 1 "layer1/sched_gsmtime.c"
   1:layer1/sched_gsmtime.c **** /* GSM-Time One-shot Event Scheduler Implementation (on top of TDMA sched) */
   2:layer1/sched_gsmtime.c **** 
   3:layer1/sched_gsmtime.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/sched_gsmtime.c ****  *
   5:layer1/sched_gsmtime.c ****  * All Rights Reserved
   6:layer1/sched_gsmtime.c ****  *
   7:layer1/sched_gsmtime.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/sched_gsmtime.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/sched_gsmtime.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/sched_gsmtime.c ****  * (at your option) any later version.
  11:layer1/sched_gsmtime.c ****  *
  12:layer1/sched_gsmtime.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/sched_gsmtime.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/sched_gsmtime.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/sched_gsmtime.c ****  * GNU General Public License for more details.
  16:layer1/sched_gsmtime.c ****  *
  17:layer1/sched_gsmtime.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/sched_gsmtime.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/sched_gsmtime.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/sched_gsmtime.c ****  *
  21:layer1/sched_gsmtime.c ****  */
  22:layer1/sched_gsmtime.c **** 
  23:layer1/sched_gsmtime.c **** #include <stdint.h>
  24:layer1/sched_gsmtime.c **** #include <errno.h>
  25:layer1/sched_gsmtime.c **** 
  26:layer1/sched_gsmtime.c **** #include <debug.h>
  27:layer1/sched_gsmtime.c **** #include <osmocom/core/linuxlist.h>
  28:layer1/sched_gsmtime.c **** 
  29:layer1/sched_gsmtime.c **** #include <layer1/tdma_sched.h>
  30:layer1/sched_gsmtime.c **** #include <layer1/sched_gsmtime.h>
  31:layer1/sched_gsmtime.c **** 
  32:layer1/sched_gsmtime.c **** static struct sched_gsmtime_event sched_gsmtime_events[16];
  33:layer1/sched_gsmtime.c **** static LLIST_HEAD(active_evts);
  34:layer1/sched_gsmtime.c **** static LLIST_HEAD(inactive_evts);
  35:layer1/sched_gsmtime.c **** 
  36:layer1/sched_gsmtime.c **** /* Scheduling of a tdma_sched_item list one-shot at a given GSM time */
  37:layer1/sched_gsmtime.c **** int sched_gsmtime(const struct tdma_sched_item *si, uint32_t fn, uint16_t p3)
  38:layer1/sched_gsmtime.c **** {
  18              		.loc 1 38 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22              	.LVL0:
  23              	.LBB55:
  24              	.LBB56:
  25              		.file 2 "../../shared/libosmocore/include/osmocom/core/linuxlist.h"
   1:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef _LINUX_LLIST_H
   2:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define _LINUX_LLIST_H
   3:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   4:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #include <stddef.h>
   5:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
   6:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #ifndef inline
   7:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define inline __inline__
   8:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #endif
   9:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  10:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void prefetch(__attribute__((unused)) const void *x) {;}
  11:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  12:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  13:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * container_of - cast a member of a structure out to the containing structure
  14:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  15:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @ptr:	the pointer to the member.
  16:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @type:	the type of the container struct this is embedded in.
  17:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @member:	the name of the member within the struct.
  18:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  19:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  20:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define container_of(ptr, type, member) ({			\
  21:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         const typeof( ((type *)0)->member ) *__mptr = (typeof( ((type *)0)->member ) *)(ptr);	\
  22:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         (type *)( (char *)__mptr - offsetof(type, member) );})
  23:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  24:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  25:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  26:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * These are non-NULL pointers that will result in page faults
  27:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * under normal circumstances, used to verify that nobody uses
  28:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * non-initialized llist entries.
  29:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON1  ((void *) 0x00100100)
  31:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_POISON2  ((void *) 0x00200200)
  32:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  33:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  34:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Simple doubly linked llist implementation.
  35:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  36:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Some of the internal functions ("__xxx") are useful when
  37:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * manipulating whole llists rather than single entries, as
  38:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * sometimes we already know the next/prev entries and we can
  39:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * generate better code by using them directly rather than
  40:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * using the generic single-entry routines.
  41:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  42:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  43:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** struct llist_head {
  44:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head *next, *prev;
  45:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** };
  46:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  47:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD_INIT(name) { &(name), &(name) }
  48:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  49:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define LLIST_HEAD(name) \
  50:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	struct llist_head name = LLIST_HEAD_INIT(name)
  51:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  52:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** #define INIT_LLIST_HEAD(ptr) do { \
  53:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	(ptr)->next = (ptr); (ptr)->prev = (ptr); \
  54:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** } while (0)
  55:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  56:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  57:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry between two known consecutive entries. 
  58:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  59:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
  60:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
  61:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  62:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_add(struct llist_head *_new,
  63:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *prev,
  64:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 			      struct llist_head *next)
  65:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
  68:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->prev = prev;
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
  70:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  71:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  72:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  73:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add - add a new entry
  74:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  75:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it after
  76:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  77:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry after the specified head.
  78:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is good for implementing stacks.
  79:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  80:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add(struct llist_head *_new, struct llist_head *head)
  81:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
  83:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  84:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  85:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
  86:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_add_tail - add a new entry
  87:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @new: new entry to be added
  88:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: llist head to add it before
  89:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
  90:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Insert a new entry before the specified head.
  91:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is useful for implementing queues.
  92:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
  93:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_add_tail(struct llist_head *_new, struct llist_head *head)
  94:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
  95:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head->prev, head);
  96:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
  97:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
  98:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /*
  99:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Delete a llist entry by making the prev/next entries
 100:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * point to each other.
 101:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  *
 102:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * This is only for internal llist manipulation where we know
 103:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * the prev/next entries already!
 104:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 105:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void __llist_del(struct llist_head * prev, struct llist_head * next)
 106:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
 109:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 110:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 111:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 112:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_del - deletes entry from llist.
 113:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @entry: the element to delete from the llist.
 114:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * Note: llist_empty on entry does not return true after this, the entry is
 115:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * in an undefined state.
 116:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 117:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_del(struct llist_head *entry)
 118:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
 120:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->next = (struct llist_head *)LLIST_POISON1;
 121:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->prev = (struct llist_head *)LLIST_POISON2;
 122:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 123:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 124:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 125:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_del_init - deletes entry from llist and reinitialize it.
 126:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @entry: the element to delete from the llist.
 127:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 128:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_del_init(struct llist_head *entry)
 129:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 130:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
 131:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	INIT_LLIST_HEAD(entry); 
 132:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 133:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 134:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 135:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_move - delete from one llist and add as another's head
 136:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @llist: the entry to move
 137:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the head that will precede our entry
 138:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 139:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_move(struct llist_head *llist, struct llist_head *head)
 140:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 141:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         __llist_del(llist->prev, llist->next);
 142:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         llist_add(llist, head);
 143:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 144:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 145:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 146:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_move_tail - delete from one llist and add as another's tail
 147:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @llist: the entry to move
 148:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the head that will follow our entry
 149:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 150:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline void llist_move_tail(struct llist_head *llist,
 151:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 				  struct llist_head *head)
 152:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 153:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         __llist_del(llist->prev, llist->next);
 154:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****         llist_add_tail(llist, head);
 155:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** }
 156:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 
 157:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** /**
 158:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * llist_empty - tests whether a llist is empty
 159:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  * @head: the llist to test.
 160:../../shared/libosmocore/include/osmocom/core/linuxlist.h ****  */
 161:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** static inline int llist_empty(const struct llist_head *head)
 162:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** {
 163:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	return head->next == head;
  26              		.loc 2 163 0
  27 0000 94C09FE5 		ldr	ip, .L8
  28 0004 00309CE5 		ldr	r3, [ip, #0]
  29              	.LBE56:
  30              	.LBE55:
  31              		.loc 1 38 0
  32 0008 0228A0E1 		mov	r2, r2, asl #16
  33              	.LVL1:
  39:layer1/sched_gsmtime.c **** 	struct llist_head *lh;
  40:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *cur;
  41:layer1/sched_gsmtime.c **** 
  42:layer1/sched_gsmtime.c **** 	printd("sched_gsmtime(si=%p, fn=%u)\n", si, fn);
  43:layer1/sched_gsmtime.c **** 
  44:layer1/sched_gsmtime.c **** 	/* obtain a free/inactive event structure */
  45:layer1/sched_gsmtime.c **** 	if (llist_empty(&inactive_evts))
  34              		.loc 1 45 0
  35 000c 0C0053E1 		cmp	r3, ip
  38:layer1/sched_gsmtime.c **** {
  36              		.loc 1 38 0
  37 0010 30402DE9 		stmfd	sp!, {r4, r5, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 12
  38:layer1/sched_gsmtime.c **** {
  40              		.loc 1 38 0
  41 0014 2258A0E1 		mov	r5, r2, lsr #16
  42              		.cfi_offset 14, -4
  43              		.cfi_offset 5, -8
  44              		.cfi_offset 4, -12
  45              		.loc 1 45 0
  46 0018 1D00000A 		beq	.L6
  47              	.LVL2:
  48              	.LBB57:
  49              	.LBB58:
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
  50              		.loc 2 119 0
  51 001c 042093E5 		ldr	r2, [r3, #4]
  52 0020 004093E5 		ldr	r4, [r3, #0]
  53              	.LVL3:
  54              	.LBB59:
  55              	.LBB60:
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
  56              		.loc 2 108 0
  57 0024 004082E5 		str	r4, [r2, #0]
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
  58              		.loc 2 107 0
  59 0028 042084E5 		str	r2, [r4, #4]
  60              	.LBE60:
  61              	.LBE59:
 120:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->next = (struct llist_head *)LLIST_POISON1;
  62              		.loc 2 120 0
  63 002c 6C209FE5 		ldr	r2, .L8+4
  64 0030 002083E5 		str	r2, [r3, #0]
 121:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->prev = (struct llist_head *)LLIST_POISON2;
  65              		.loc 2 121 0
  66 0034 68209FE5 		ldr	r2, .L8+8
  67              	.LBE58:
  68              	.LBE57:
  46:layer1/sched_gsmtime.c **** 		return -EBUSY;
  47:layer1/sched_gsmtime.c **** 	lh = inactive_evts.next;
  48:layer1/sched_gsmtime.c **** 	llist_del(lh);
  49:layer1/sched_gsmtime.c **** 	evt = llist_entry(lh, struct sched_gsmtime_event, list);
  50:layer1/sched_gsmtime.c **** 
  51:layer1/sched_gsmtime.c **** 	evt->fn = fn;
  52:layer1/sched_gsmtime.c **** 	evt->si = si;
  69              		.loc 1 52 0
  70 0038 080083E5 		str	r0, [r3, #8]
  71              	.LBB62:
  53:layer1/sched_gsmtime.c **** 	evt->p3 = p3;
  54:layer1/sched_gsmtime.c **** 
  55:layer1/sched_gsmtime.c **** 	/* do a sorted insert into the list, i.e. insert the new
  56:layer1/sched_gsmtime.c **** 	 * event _before_ the first entry that has a higher fn */
  57:layer1/sched_gsmtime.c **** 	llist_for_each_entry(cur, &active_evts, list) {
  72              		.loc 1 57 0
  73 003c 0C00A0E1 		mov	r0, ip
  74              	.LVL4:
  75              	.LBE62:
  76              	.LBB63:
  77              	.LBB61:
 121:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	entry->prev = (struct llist_head *)LLIST_POISON2;
  78              		.loc 2 121 0
  79 0040 042083E5 		str	r2, [r3, #4]
  80              	.LVL5:
  81              	.LBE61:
  82              	.LBE63:
  51:layer1/sched_gsmtime.c **** 	evt->fn = fn;
  83              		.loc 1 51 0
  84 0044 0C1083E5 		str	r1, [r3, #12]
  53:layer1/sched_gsmtime.c **** 	evt->p3 = p3;
  85              		.loc 1 53 0
  86 0048 B051C3E1 		strh	r5, [r3, #16]	@ movhi
  87              	.LVL6:
  88              	.LBB64:
  89              		.loc 1 57 0
  90 004c 0820B0E5 		ldr	r2, [r0, #8]!
  91              	.LVL7:
  92 0050 050000EA 		b	.L3
  93              	.LVL8:
  94              	.L5:
  95              	.LBE64:
  58:layer1/sched_gsmtime.c **** 		if (cur->fn > evt->fn) {
  96              		.loc 1 58 0
  97 0054 0CC092E5 		ldr	ip, [r2, #12]
  98 0058 01005CE1 		cmp	ip, r1
  99              	.LVL9:
 100              	.LBB65:
 101              	.LBB66:
  95:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head->prev, head);
 102              		.loc 2 95 0
 103 005c 04109285 		ldrhi	r1, [r2, #4]
 104              	.LVL10:
 105              	.LBB67:
 106              	.LBB68:
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
 107              		.loc 2 66 0
 108 0060 04308285 		strhi	r3, [r2, #4]
 109 0064 0500008A 		bhi	.L7
 110              	.LVL11:
 111              	.L4:
 112              	.LBE68:
 113              	.LBE67:
 114              	.LBE66:
 115              	.LBE65:
 116              	.LBB69:
  57:layer1/sched_gsmtime.c **** 	llist_for_each_entry(cur, &active_evts, list) {
 117              		.loc 1 57 0
 118 0068 002092E5 		ldr	r2, [r2, #0]
 119              	.LVL12:
 120              	.L3:
 121              	.LBE69:
  57:layer1/sched_gsmtime.c **** 	llist_for_each_entry(cur, &active_evts, list) {
 122              		.loc 1 57 0 is_stmt 0 discriminator 1
 123 006c 000052E1 		cmp	r2, r0
 124 0070 24C09FE5 		ldr	ip, .L8
 125 0074 F6FFFF1A 		bne	.L5
 126              	.LVL13:
 127              	.LBB70:
 128              	.LBB71:
  95:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head->prev, head);
 129              		.loc 2 95 0 is_stmt 1
 130 0078 0C109CE5 		ldr	r1, [ip, #12]
 131              	.LVL14:
 132              	.LBB72:
 133              	.LBB73:
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
 134              		.loc 2 66 0
 135 007c 0C308CE5 		str	r3, [ip, #12]
 136              	.LVL15:
 137              	.L7:
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
 138              		.loc 2 67 0
 139 0080 002083E5 		str	r2, [r3, #0]
  68:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->prev = prev;
 140              		.loc 2 68 0
 141 0084 041083E5 		str	r1, [r3, #4]
 142              	.LBE73:
 143              	.LBE72:
 144              	.LBE71:
 145              	.LBE70:
  59:layer1/sched_gsmtime.c **** 			llist_add_tail(lh, &cur->list);
  60:layer1/sched_gsmtime.c **** 			return 0;
  61:layer1/sched_gsmtime.c **** 		}
  62:layer1/sched_gsmtime.c **** 	}
  63:layer1/sched_gsmtime.c **** 
  64:layer1/sched_gsmtime.c **** 	/* if we reach here, active_evts is empty _OR_ new event
  65:layer1/sched_gsmtime.c **** 	 * is after all the other events: append at end of list */
  66:layer1/sched_gsmtime.c **** 	llist_add_tail(lh, &active_evts);
  67:layer1/sched_gsmtime.c **** 
  68:layer1/sched_gsmtime.c **** 	return 0;
 146              		.loc 1 68 0
 147 0088 0000A0E3 		mov	r0, #0
 148              	.LBB77:
 149              	.LBB76:
 150              	.LBB75:
 151              	.LBB74:
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
 152              		.loc 2 69 0
 153 008c 003081E5 		str	r3, [r1, #0]
 154              	.LBE74:
 155              	.LBE75:
 156              	.LBE76:
 157              	.LBE77:
 158              		.loc 1 68 0
 159 0090 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 160              	.LVL16:
 161              	.L6:
  46:layer1/sched_gsmtime.c **** 		return -EBUSY;
 162              		.loc 1 46 0
 163 0094 0F00E0E3 		mvn	r0, #15
 164              	.LVL17:
  69:layer1/sched_gsmtime.c **** }
 165              		.loc 1 69 0
 166 0098 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 167              	.L9:
 168              		.align	2
 169              	.L8:
 170 009c 00000000 		.word	.LANCHOR0
 171 00a0 00011000 		.word	1048832
 172 00a4 00022000 		.word	2097664
 173              		.cfi_endproc
 174              	.LFE13:
 176              		.section	.text.sched_gsmtime_execute,"ax",%progbits
 177              		.align	2
 178              		.global	sched_gsmtime_execute
 180              	sched_gsmtime_execute:
 181              	.LFB14:
  70:layer1/sched_gsmtime.c **** 
  71:layer1/sched_gsmtime.c **** /* how many TDMA frame ticks should we schedule events ahead? */
  72:layer1/sched_gsmtime.c **** #define SCHEDULE_AHEAD	2
  73:layer1/sched_gsmtime.c **** 
  74:layer1/sched_gsmtime.c **** /* how long do we need to tell the DSP in advance what we want to do? */
  75:layer1/sched_gsmtime.c **** #define SCHEDULE_LATENCY	1
  76:layer1/sched_gsmtime.c **** 
  77:layer1/sched_gsmtime.c **** /* execute all GSMTIME one-shot events pending for 'fn' */
  78:layer1/sched_gsmtime.c **** int sched_gsmtime_execute(uint32_t fn)
  79:layer1/sched_gsmtime.c **** {
 182              		.loc 1 79 0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL18:
 187 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 188              	.LCFI1:
 189              		.cfi_def_cfa_offset 28
 190              	.LBB78:
  80:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *evt2;
  81:layer1/sched_gsmtime.c **** 	int num = 0;
  82:layer1/sched_gsmtime.c **** 
  83:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 191              		.loc 1 83 0
 192 0004 74509FE5 		ldr	r5, .L15
 193              		.cfi_offset 14, -4
 194              		.cfi_offset 10, -8
 195              		.cfi_offset 8, -12
 196              		.cfi_offset 7, -16
 197              		.cfi_offset 6, -20
 198              		.cfi_offset 5, -24
 199              		.cfi_offset 4, -28
 200 0008 084095E5 		ldr	r4, [r5, #8]
 201              	.LVL19:
 202              	.LBE78:
  81:layer1/sched_gsmtime.c **** 	int num = 0;
 203              		.loc 1 81 0
 204 000c 0060A0E3 		mov	r6, #0
 205              	.LBB79:
 206              		.loc 1 83 0
 207 0010 007094E5 		ldr	r7, [r4, #0]
 208              	.LVL20:
 209              	.LBE79:
 210 0014 08A085E2 		add	sl, r5, #8
  84:layer1/sched_gsmtime.c **** 		if (evt->fn == fn + SCHEDULE_AHEAD) {
 211              		.loc 1 84 0
 212 0018 028080E2 		add	r8, r0, #2
  83:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 213              		.loc 1 83 0
 214 001c 130000EA 		b	.L11
 215              	.LVL21:
 216              	.L14:
 217              		.loc 1 84 0
 218 0020 0C3094E5 		ldr	r3, [r4, #12]
 219 0024 080053E1 		cmp	r3, r8
 220 0028 0B00001A 		bne	.L12
  85:layer1/sched_gsmtime.c **** 			printd("sched_gsmtime_execute(time=%u): fn=%u si=%p\n", fn, evt->fn, evt->si);
  86:layer1/sched_gsmtime.c **** 			tdma_schedule_set(SCHEDULE_AHEAD-SCHEDULE_LATENCY,
 221              		.loc 1 86 0
 222 002c B021D4E1 		ldrh	r2, [r4, #16]
 223 0030 0100A0E3 		mov	r0, #1
 224 0034 081094E5 		ldr	r1, [r4, #8]
 225 0038 FEFFFFEB 		bl	tdma_schedule_set
 226              	.LVL22:
 227              	.LBB80:
 228              	.LBB81:
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
 229              		.loc 2 119 0
 230 003c 0C0094E8 		ldmia	r4, {r2, r3}	@ phole ldm
 231              	.LVL23:
 232              	.LBB82:
 233              	.LBB83:
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
 234              		.loc 2 108 0
 235 0040 002083E5 		str	r2, [r3, #0]
 236              	.LVL24:
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
 237              		.loc 2 107 0
 238 0044 043082E5 		str	r3, [r2, #4]
 239              	.LBE83:
 240              	.LBE82:
 241              	.LBE81:
 242              	.LBE80:
 243              	.LBB84:
 244              	.LBB85:
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
 245              		.loc 2 82 0
 246 0048 003095E5 		ldr	r3, [r5, #0]
 247              	.LVL25:
 248              	.LBB86:
 249              	.LBB87:
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
 250              		.loc 2 66 0
 251 004c 044083E5 		str	r4, [r3, #4]
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
 252              		.loc 2 67 0
 253 0050 280084E8 		stmia	r4, {r3, r5}	@ phole stm
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
 254              		.loc 2 69 0
 255 0054 004085E5 		str	r4, [r5, #0]
 256              	.LBE87:
 257              	.LBE86:
 258              	.LBE85:
 259              	.LBE84:
  87:layer1/sched_gsmtime.c **** 					  evt->si, evt->p3);
  88:layer1/sched_gsmtime.c **** 			llist_del(&evt->list);
  89:layer1/sched_gsmtime.c **** 			/* put event back in list of inactive (free) events */
  90:layer1/sched_gsmtime.c **** 			llist_add(&evt->list, &inactive_evts);
  91:layer1/sched_gsmtime.c **** 			num++;
 260              		.loc 1 91 0
 261 0058 016086E2 		add	r6, r6, #1
 262              	.LVL26:
 263              	.L12:
  92:layer1/sched_gsmtime.c **** 		} if (evt->fn > fn + SCHEDULE_AHEAD) {
 264              		.loc 1 92 0
 265 005c 0C3094E5 		ldr	r3, [r4, #12]
 266 0060 080053E1 		cmp	r3, r8
 267 0064 0300008A 		bhi	.L13
 268              	.LVL27:
 269              	.LBB88:
  83:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 270              		.loc 1 83 0
 271 0068 0740A0E1 		mov	r4, r7
 272 006c 007097E5 		ldr	r7, [r7, #0]
 273              	.LVL28:
 274              	.L11:
 275              	.LBE88:
  83:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 276              		.loc 1 83 0 is_stmt 0 discriminator 1
 277 0070 0A0054E1 		cmp	r4, sl
 278 0074 E9FFFF1A 		bne	.L14
 279              	.L13:
  93:layer1/sched_gsmtime.c **** 			/* break the loop as our list is ordered */
  94:layer1/sched_gsmtime.c **** 			break;
  95:layer1/sched_gsmtime.c **** 		}
  96:layer1/sched_gsmtime.c **** 	}
  97:layer1/sched_gsmtime.c **** 	return num;
  98:layer1/sched_gsmtime.c **** }
 280              		.loc 1 98 0 is_stmt 1
 281 0078 0600A0E1 		mov	r0, r6
 282 007c F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 283              	.L16:
 284              		.align	2
 285              	.L15:
 286 0080 00000000 		.word	.LANCHOR0
 287              		.cfi_endproc
 288              	.LFE14:
 290              		.section	.text.sched_gsmtime_init,"ax",%progbits
 291              		.align	2
 292              		.global	sched_gsmtime_init
 294              	sched_gsmtime_init:
 295              	.LFB15:
  99:layer1/sched_gsmtime.c **** 
 100:layer1/sched_gsmtime.c **** void sched_gsmtime_init(void)
 101:layer1/sched_gsmtime.c **** {
 296              		.loc 1 101 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 0, uses_anonymous_args = 0
 300              	.LVL29:
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
 301              		.loc 2 82 0
 302 0000 40C09FE5 		ldr	ip, .L20
 102:layer1/sched_gsmtime.c **** 	unsigned int i;
 103:layer1/sched_gsmtime.c **** 
 104:layer1/sched_gsmtime.c **** 	printd("sched_gsmtime_init()\n");
 105:layer1/sched_gsmtime.c **** 
 106:layer1/sched_gsmtime.c **** 	for (i = 0; i < ARRAY_SIZE(sched_gsmtime_events); i++)
 303              		.loc 1 106 0
 304 0004 40309FE5 		ldr	r3, .L20+4
 101:layer1/sched_gsmtime.c **** {
 305              		.loc 1 101 0
 306 0008 30402DE9 		stmfd	sp!, {r4, r5, lr}
 307              	.LCFI2:
 308              		.cfi_def_cfa_offset 12
 309              		.loc 1 106 0
 310 000c 00009CE5 		ldr	r0, [ip, #0]
 311 0010 0020A0E3 		mov	r2, #0
 107:layer1/sched_gsmtime.c **** 		llist_add(&sched_gsmtime_events[i].list, &inactive_evts);
 312              		.loc 1 107 0
 313 0014 0350A0E1 		mov	r5, r3
 314              		.cfi_offset 14, -4
 315              		.cfi_offset 5, -8
 316              		.cfi_offset 4, -12
 317 0018 1440A0E3 		mov	r4, #20
 318 001c 000000EA 		b	.L18
 319              	.LVL30:
 320              	.L19:
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
 321              		.loc 2 69 0
 322 0020 0100A0E1 		mov	r0, r1
 323              	.LVL31:
 324              	.L18:
 325              		.loc 1 107 0 discriminator 2
 326 0024 945221E0 		mla	r1, r4, r2, r5
 327              	.LVL32:
 106:layer1/sched_gsmtime.c **** 	for (i = 0; i < ARRAY_SIZE(sched_gsmtime_events); i++)
 328              		.loc 1 106 0 discriminator 2
 329 0028 012082E2 		add	r2, r2, #1
 330              	.LVL33:
 331 002c 100052E3 		cmp	r2, #16
 332              	.LBB89:
 333              	.LBB90:
 334              	.LBB91:
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
 335              		.loc 2 66 0 discriminator 2
 336 0030 041080E5 		str	r1, [r0, #4]
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
 337              		.loc 2 67 0 discriminator 2
 338 0034 011083E8 		stmia	r3, {r0, ip}	@ phole stm
 339              	.LBE91:
 340              	.LBE90:
 341              	.LBE89:
 106:layer1/sched_gsmtime.c **** 	for (i = 0; i < ARRAY_SIZE(sched_gsmtime_events); i++)
 342              		.loc 1 106 0 discriminator 2
 343 0038 143083E2 		add	r3, r3, #20
 344 003c F7FFFF1A 		bne	.L19
 106:layer1/sched_gsmtime.c **** 	for (i = 0; i < ARRAY_SIZE(sched_gsmtime_events); i++)
 345              		.loc 1 106 0 is_stmt 0
 346 0040 00108CE5 		str	r1, [ip, #0]
 108:layer1/sched_gsmtime.c **** }
 347              		.loc 1 108 0 is_stmt 1
 348 0044 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 349              	.L21:
 350              		.align	2
 351              	.L20:
 352 0048 00000000 		.word	.LANCHOR0
 353 004c 00000000 		.word	.LANCHOR1
 354              		.cfi_endproc
 355              	.LFE15:
 357              		.section	.text.sched_gsmtime_reset,"ax",%progbits
 358              		.align	2
 359              		.global	sched_gsmtime_reset
 361              	sched_gsmtime_reset:
 362              	.LFB16:
 109:layer1/sched_gsmtime.c **** 
 110:layer1/sched_gsmtime.c **** void sched_gsmtime_reset(void)
 111:layer1/sched_gsmtime.c **** {
 363              		.loc 1 111 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              	.LVL34:
 368              	.LBB92:
 112:layer1/sched_gsmtime.c **** 	struct sched_gsmtime_event *evt, *evt2;
 113:layer1/sched_gsmtime.c **** 
 114:layer1/sched_gsmtime.c **** 	llist_for_each_entry_safe(evt, evt2, &active_evts, list) {
 369              		.loc 1 114 0
 370 0000 48209FE5 		ldr	r2, .L25
 371 0004 083092E5 		ldr	r3, [r2, #8]
 372              	.LVL35:
 373              	.LBE92:
 111:layer1/sched_gsmtime.c **** {
 374              		.loc 1 111 0
 375 0008 10402DE9 		stmfd	sp!, {r4, lr}
 376              	.LCFI3:
 377              		.cfi_def_cfa_offset 8
 378              	.LBB93:
 379              		.loc 1 114 0
 380 000c 001093E5 		ldr	r1, [r3, #0]
 381              	.LVL36:
 382              	.LBE93:
 383 0010 084082E2 		add	r4, r2, #8
 384              		.cfi_offset 14, -4
 385              		.cfi_offset 4, -8
 386 0014 0A0000EA 		b	.L23
 387              	.LVL37:
 388              	.L24:
 389              	.LBB94:
 390              	.LBB95:
 119:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_del(entry->prev, entry->next);
 391              		.loc 2 119 0 discriminator 2
 392 0018 040093E5 		ldr	r0, [r3, #4]
 393 001c 00C093E5 		ldr	ip, [r3, #0]
 394              	.LVL38:
 395              	.LBB96:
 396              	.LBB97:
 108:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = next;
 397              		.loc 2 108 0 discriminator 2
 398 0020 00C080E5 		str	ip, [r0, #0]
 399              	.LVL39:
 107:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = prev;
 400              		.loc 2 107 0 discriminator 2
 401 0024 04008CE5 		str	r0, [ip, #4]
 402              	.LBE97:
 403              	.LBE96:
 404              	.LBE95:
 405              	.LBE94:
 406              	.LBB98:
 407              	.LBB99:
  82:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	__llist_add(_new, head, head->next);
 408              		.loc 2 82 0 discriminator 2
 409 0028 000092E5 		ldr	r0, [r2, #0]
 410              	.LVL40:
 411              	.LBB100:
 412              	.LBB101:
  67:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->next = next;
 413              		.loc 2 67 0 discriminator 2
 414 002c 000083E5 		str	r0, [r3, #0]
  66:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	next->prev = _new;
 415              		.loc 2 66 0 discriminator 2
 416 0030 043080E5 		str	r3, [r0, #4]
  69:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	prev->next = _new;
 417              		.loc 2 69 0 discriminator 2
 418 0034 003082E5 		str	r3, [r2, #0]
 419              	.LVL41:
  68:../../shared/libosmocore/include/osmocom/core/linuxlist.h **** 	_new->prev = prev;
 420              		.loc 2 68 0 discriminator 2
 421 0038 042083E5 		str	r2, [r3, #4]
 422              	.LBE101:
 423              	.LBE100:
 424              	.LBE99:
 425              	.LBE98:
 426              	.LBB102:
 427              		.loc 1 114 0 discriminator 2
 428 003c 0130A0E1 		mov	r3, r1
 429              	.LVL42:
 430 0040 001091E5 		ldr	r1, [r1, #0]
 431              	.LVL43:
 432              	.L23:
 433              	.LBE102:
 434              		.loc 1 114 0 is_stmt 0 discriminator 1
 435 0044 040053E1 		cmp	r3, r4
 436 0048 F2FFFF1A 		bne	.L24
 115:layer1/sched_gsmtime.c **** 		llist_del(&evt->list);
 116:layer1/sched_gsmtime.c **** 		/* put event back in list of inactive (free) events */
 117:layer1/sched_gsmtime.c **** 		llist_add(&evt->list, &inactive_evts);
 118:layer1/sched_gsmtime.c **** 	}
 119:layer1/sched_gsmtime.c **** }
 437              		.loc 1 119 0 is_stmt 1
 438 004c 1080BDE8 		ldmfd	sp!, {r4, pc}
 439              	.L26:
 440              		.align	2
 441              	.L25:
 442 0050 00000000 		.word	.LANCHOR0
 443              		.cfi_endproc
 444              	.LFE16:
 446              		.data
 447              		.align	2
 448              		.set	.LANCHOR0,. + 0
 451              	inactive_evts:
 452 0000 00000000 		.word	inactive_evts
 453 0004 00000000 		.word	inactive_evts
 456              	active_evts:
 457 0008 08000000 		.word	active_evts
 458 000c 08000000 		.word	active_evts
 459              		.bss
 460              		.align	2
 461              		.set	.LANCHOR1,. + 0
 464              	sched_gsmtime_events:
 465 0000 00000000 		.space	320
 465      00000000 
 465      00000000 
 465      00000000 
 465      00000000 
 466              		.text
 467              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 sched_gsmtime.c
     /tmp/ccxy0kAL.s:12     .text.sched_gsmtime:0000000000000000 $a
     /tmp/ccxy0kAL.s:15     .text.sched_gsmtime:0000000000000000 sched_gsmtime
     /tmp/ccxy0kAL.s:170    .text.sched_gsmtime:000000000000009c $d
     /tmp/ccxy0kAL.s:177    .text.sched_gsmtime_execute:0000000000000000 $a
     /tmp/ccxy0kAL.s:180    .text.sched_gsmtime_execute:0000000000000000 sched_gsmtime_execute
     /tmp/ccxy0kAL.s:286    .text.sched_gsmtime_execute:0000000000000080 $d
     /tmp/ccxy0kAL.s:291    .text.sched_gsmtime_init:0000000000000000 $a
     /tmp/ccxy0kAL.s:294    .text.sched_gsmtime_init:0000000000000000 sched_gsmtime_init
     /tmp/ccxy0kAL.s:352    .text.sched_gsmtime_init:0000000000000048 $d
     /tmp/ccxy0kAL.s:358    .text.sched_gsmtime_reset:0000000000000000 $a
     /tmp/ccxy0kAL.s:361    .text.sched_gsmtime_reset:0000000000000000 sched_gsmtime_reset
     /tmp/ccxy0kAL.s:442    .text.sched_gsmtime_reset:0000000000000050 $d
     /tmp/ccxy0kAL.s:447    .data:0000000000000000 $d
     /tmp/ccxy0kAL.s:451    .data:0000000000000000 inactive_evts
     /tmp/ccxy0kAL.s:456    .data:0000000000000008 active_evts
     /tmp/ccxy0kAL.s:460    .bss:0000000000000000 $d
     /tmp/ccxy0kAL.s:464    .bss:0000000000000000 sched_gsmtime_events
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
tdma_schedule_set
