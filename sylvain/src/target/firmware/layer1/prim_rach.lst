   1              		.file	"prim_rach.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.l1s_tx_rach_resp,"ax",%progbits
  12              		.align	2
  14              	l1s_tx_rach_resp:
  15              	.LFB60:
  16              		.file 1 "layer1/prim_rach.c"
   1:layer1/prim_rach.c **** /* Layer 1 Random Access Channel Burst */
   2:layer1/prim_rach.c **** 
   3:layer1/prim_rach.c **** /* (C) 2010 by Dieter Spaar <spaar@mirider.augusta.de>
   4:layer1/prim_rach.c ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   5:layer1/prim_rach.c ****  *
   6:layer1/prim_rach.c ****  * All Rights Reserved
   7:layer1/prim_rach.c ****  *
   8:layer1/prim_rach.c ****  * This program is free software; you can redistribute it and/or modify
   9:layer1/prim_rach.c ****  * it under the terms of the GNU General Public License as published by
  10:layer1/prim_rach.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:layer1/prim_rach.c ****  * (at your option) any later version.
  12:layer1/prim_rach.c ****  *
  13:layer1/prim_rach.c ****  * This program is distributed in the hope that it will be useful,
  14:layer1/prim_rach.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:layer1/prim_rach.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:layer1/prim_rach.c ****  * GNU General Public License for more details.
  17:layer1/prim_rach.c ****  *
  18:layer1/prim_rach.c ****  * You should have received a copy of the GNU General Public License along
  19:layer1/prim_rach.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:layer1/prim_rach.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:layer1/prim_rach.c ****  *
  22:layer1/prim_rach.c ****  */
  23:layer1/prim_rach.c **** 
  24:layer1/prim_rach.c **** #include <stdint.h>
  25:layer1/prim_rach.c **** #include <stdio.h>
  26:layer1/prim_rach.c **** #include <string.h>
  27:layer1/prim_rach.c **** #include <stdlib.h>
  28:layer1/prim_rach.c **** 
  29:layer1/prim_rach.c **** #include <defines.h>
  30:layer1/prim_rach.c **** #include <debug.h>
  31:layer1/prim_rach.c **** #include <memory.h>
  32:layer1/prim_rach.c **** #include <byteorder.h>
  33:layer1/prim_rach.c **** #include <osmocom/gsm/gsm_utils.h>
  34:layer1/prim_rach.c **** #include <osmocom/core/msgb.h>
  35:layer1/prim_rach.c **** #include <calypso/dsp_api.h>
  36:layer1/prim_rach.c **** #include <calypso/irq.h>
  37:layer1/prim_rach.c **** #include <calypso/tpu.h>
  38:layer1/prim_rach.c **** #include <calypso/tsp.h>
  39:layer1/prim_rach.c **** #include <calypso/dsp.h>
  40:layer1/prim_rach.c **** #include <calypso/timer.h>
  41:layer1/prim_rach.c **** #include <comm/sercomm.h>
  42:layer1/prim_rach.c **** #include <asm/system.h>
  43:layer1/prim_rach.c **** 
  44:layer1/prim_rach.c **** #include <layer1/sync.h>
  45:layer1/prim_rach.c **** #include <layer1/async.h>
  46:layer1/prim_rach.c **** #include <layer1/tdma_sched.h>
  47:layer1/prim_rach.c **** #include <layer1/tpu_window.h>
  48:layer1/prim_rach.c **** #include <layer1/l23_api.h>
  49:layer1/prim_rach.c **** 
  50:layer1/prim_rach.c **** #include <l1ctl_proto.h>
  51:layer1/prim_rach.c **** 
  52:layer1/prim_rach.c **** struct {
  53:layer1/prim_rach.c **** 	uint32_t fn;
  54:layer1/prim_rach.c **** 	uint16_t band_arfcn;
  55:layer1/prim_rach.c **** } last_rach;
  56:layer1/prim_rach.c **** 
  57:layer1/prim_rach.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB */
  58:layer1/prim_rach.c **** static int l1s_tx_rach_cmd(__unused uint8_t p1, __unused uint8_t p2, __unused uint16_t p3)
  59:layer1/prim_rach.c **** {
  60:layer1/prim_rach.c **** 	int i;
  61:layer1/prim_rach.c **** 	uint16_t  *info_ptr;
  62:layer1/prim_rach.c **** 	uint8_t data[2];
  63:layer1/prim_rach.c **** 
  64:layer1/prim_rach.c **** 	putchart('T');
  65:layer1/prim_rach.c **** 
  66:layer1/prim_rach.c **** 	l1s_tx_apc_helper(l1s.serving_cell.arfcn);
  67:layer1/prim_rach.c **** 
  68:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  69:layer1/prim_rach.c **** 	data[1] = l1s.rach.ra;
  70:layer1/prim_rach.c **** 
  71:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  72:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  73:layer1/prim_rach.c **** 
  74:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = RACH_DSP_TASK;
  75:layer1/prim_rach.c **** 
  76:layer1/prim_rach.c **** 	l1s_tx_win_ctrl(l1s.serving_cell.arfcn | ARFCN_UPLINK, L1_TXWIN_AB, 0, 3);
  77:layer1/prim_rach.c **** 
  78:layer1/prim_rach.c **** 	return 0;
  79:layer1/prim_rach.c **** }
  80:layer1/prim_rach.c **** 
  81:layer1/prim_rach.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB */
  82:layer1/prim_rach.c **** static int l1s_tx_rach_resp(__unused uint8_t p1, __unused uint8_t burst_id,
  83:layer1/prim_rach.c **** 			    __unused uint16_t p3)
  84:layer1/prim_rach.c **** {
  17              		.loc 1 84 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  85:layer1/prim_rach.c **** 	putchart('t');
  86:layer1/prim_rach.c **** 
  87:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  88:layer1/prim_rach.c **** 
  89:layer1/prim_rach.c **** 	/* schedule a confirmation back indicating the GSM time at which
  90:layer1/prim_rach.c **** 	 * the RACH burst was transmitted to the BTS */
  91:layer1/prim_rach.c **** 	last_rach.fn = l1s.current_time.fn - 1;
  22              		.loc 1 91 0
  23 0000 30209FE5 		ldr	r2, .L2
  24              	.LVL1:
  87:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  25              		.loc 1 87 0
  26 0004 30309FE5 		ldr	r3, .L2+4
  27 0008 0100A0E3 		mov	r0, #1
  28              	.LVL2:
  29              		.loc 1 91 0
  30 000c 001092E5 		ldr	r1, [r2, #0]
  31              	.LVL3:
  84:layer1/prim_rach.c **** {
  32              		.loc 1 84 0
  33 0010 04E02DE5 		str	lr, [sp, #-4]!
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  92:layer1/prim_rach.c **** 	last_rach.band_arfcn = l1s.serving_cell.arfcn;
  36              		.loc 1 92 0
  37 0014 B821D2E1 		ldrh	r2, [r2, #24]
  87:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  38              		.loc 1 87 0
  39 0018 180083E5 		str	r0, [r3, #24]
  91:layer1/prim_rach.c **** 	last_rach.fn = l1s.current_time.fn - 1;
  40              		.loc 1 91 0
  41 001c 1C309FE5 		ldr	r3, .L2+8
  42 0020 011041E2 		sub	r1, r1, #1
  43 0024 001083E5 		str	r1, [r3, #0]
  44              		.loc 1 92 0
  45 0028 B420C3E1 		strh	r2, [r3, #4]	@ movhi
  93:layer1/prim_rach.c **** 	l1s_compl_sched(L1_COMPL_RACH);
  46              		.loc 1 93 0
  47              		.cfi_offset 14, -4
  48 002c FEFFFFEB 		bl	l1s_compl_sched
  94:layer1/prim_rach.c **** 
  95:layer1/prim_rach.c **** 	return 0;
  96:layer1/prim_rach.c **** }
  49              		.loc 1 96 0
  50 0030 0000A0E3 		mov	r0, #0
  51 0034 04F09DE4 		ldr	pc, [sp], #4
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0038 00000000 		.word	l1s
  56 003c 00000000 		.word	dsp_api
  57 0040 00000000 		.word	last_rach
  58              		.cfi_endproc
  59              	.LFE60:
  61              		.section	.text.l1s_tx_rach_cmd,"ax",%progbits
  62              		.align	2
  64              	l1s_tx_rach_cmd:
  65              	.LFB59:
  59:layer1/prim_rach.c **** {
  66              		.loc 1 59 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL4:
  71 0000 10402DE9 		stmfd	sp!, {r4, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 8
  66:layer1/prim_rach.c **** 	l1s_tx_apc_helper(l1s.serving_cell.arfcn);
  74              		.loc 1 66 0
  75 0004 54409FE5 		ldr	r4, .L5
  76              		.cfi_offset 14, -4
  77              		.cfi_offset 4, -8
  78 0008 B801D4E1 		ldrh	r0, [r4, #24]
  79              	.LVL5:
  80 000c FEFFFFEB 		bl	l1s_tx_apc_helper
  81              	.LVL6:
  68:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  82              		.loc 1 68 0
  83 0010 1A00D4E5 		ldrb	r0, [r4, #26]	@ zero_extendqisi2
  71:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  84              		.loc 1 71 0
  85 0014 48309FE5 		ldr	r3, .L5+4
  72:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  86              		.loc 1 72 0
  87 0018 042BD4E5 		ldrb	r2, [r4, #2820]	@ zero_extendqisi2
  68:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  88              		.loc 1 68 0
  89 001c 0001A0E1 		mov	r0, r0, asl #2
  71:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  90              		.loc 1 71 0
  91 0020 001093E5 		ldr	r1, [r3, #0]
  72:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  92              		.loc 1 72 0
  93 0024 FF0000E2 		and	r0, r0, #255
  94 0028 020480E1 		orr	r0, r0, r2, asl #8
  95 002c B32FA0E3 		mov	r2, #716
  96 0030 B20081E1 		strh	r0, [r1, r2]	@ movhi
  74:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = RACH_DSP_TASK;
  97              		.loc 1 74 0
  98 0034 083093E5 		ldr	r3, [r3, #8]
  76:layer1/prim_rach.c **** 	l1s_tx_win_ctrl(l1s.serving_cell.arfcn | ARFCN_UPLINK, L1_TXWIN_AB, 0, 3);
  99              		.loc 1 76 0
 100 0038 B801D4E1 		ldrh	r0, [r4, #24]
  74:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = RACH_DSP_TASK;
 101              		.loc 1 74 0
 102 003c 0A20A0E3 		mov	r2, #10	@ movhi
 103 0040 BE20C3E1 		strh	r2, [r3, #14]	@ movhi
  76:layer1/prim_rach.c **** 	l1s_tx_win_ctrl(l1s.serving_cell.arfcn | ARFCN_UPLINK, L1_TXWIN_AB, 0, 3);
 104              		.loc 1 76 0
 105 0044 010980E3 		orr	r0, r0, #16384
 106 0048 0110A0E3 		mov	r1, #1
 107 004c 0020A0E3 		mov	r2, #0
 108 0050 0330A0E3 		mov	r3, #3
 109 0054 FEFFFFEB 		bl	l1s_tx_win_ctrl
 110              	.LVL7:
  79:layer1/prim_rach.c **** }
 111              		.loc 1 79 0
 112 0058 0000A0E3 		mov	r0, #0
 113 005c 1080BDE8 		ldmfd	sp!, {r4, pc}
 114              	.L6:
 115              		.align	2
 116              	.L5:
 117 0060 00000000 		.word	l1s
 118 0064 00000000 		.word	dsp_api
 119              		.cfi_endproc
 120              	.LFE59:
 122              		.section	.text.l1a_rach_compl,"ax",%progbits
 123              		.align	2
 125              	l1a_rach_compl:
 126              	.LFB61:
  97:layer1/prim_rach.c **** 
  98:layer1/prim_rach.c **** /* sched sets for uplink */
  99:layer1/prim_rach.c **** const struct tdma_sched_item rach_sched_set_ul[] = {
 100:layer1/prim_rach.c **** 	SCHED_ITEM_DT(l1s_tx_rach_cmd, 3, 1, 0),	SCHED_END_FRAME(),
 101:layer1/prim_rach.c **** 							SCHED_END_FRAME(),
 102:layer1/prim_rach.c **** 	SCHED_ITEM(l1s_tx_rach_resp, -4, 1, 0),		SCHED_END_FRAME(),
 103:layer1/prim_rach.c **** 	SCHED_END_SET()
 104:layer1/prim_rach.c **** };
 105:layer1/prim_rach.c **** 
 106:layer1/prim_rach.c **** /* Asynchronous completion handler for FB detection */
 107:layer1/prim_rach.c **** static void l1a_rach_compl(__unused enum l1_compl c)
 108:layer1/prim_rach.c **** {
 127              		.loc 1 108 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131              	.LVL8:
 109:layer1/prim_rach.c **** 	struct msgb *msg;
 110:layer1/prim_rach.c **** 
 111:layer1/prim_rach.c **** 	msg = l1_create_l2_msg(L1CTL_RACH_CONF, last_rach.fn, 0,
 132              		.loc 1 111 0
 133 0000 1C309FE5 		ldr	r3, .L8
 108:layer1/prim_rach.c **** {
 134              		.loc 1 108 0
 135 0004 04E02DE5 		str	lr, [sp, #-4]!
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 4
 138              		.loc 1 111 0
 139 0008 001093E5 		ldr	r1, [r3, #0]
 140 000c 0020A0E3 		mov	r2, #0
 141 0010 B430D3E1 		ldrh	r3, [r3, #4]
 142 0014 0C00A0E3 		mov	r0, #12
 143              	.LVL9:
 144              		.cfi_offset 14, -4
 145 0018 FEFFFFEB 		bl	l1_create_l2_msg
 112:layer1/prim_rach.c **** 				last_rach.band_arfcn);
 113:layer1/prim_rach.c **** 	l1_queue_for_l2(msg);
 114:layer1/prim_rach.c **** }
 146              		.loc 1 114 0
 147 001c 04E09DE4 		ldr	lr, [sp], #4
 113:layer1/prim_rach.c **** 	l1_queue_for_l2(msg);
 148              		.loc 1 113 0
 149 0020 FEFFFFEA 		b	l1_queue_for_l2
 150              	.L9:
 151              		.align	2
 152              	.L8:
 153 0024 00000000 		.word	last_rach
 154              		.cfi_endproc
 155              	.LFE61:
 157              		.global	__udivsi3
 158              		.global	__umodsi3
 159              		.section	.text.l1a_rach_req,"ax",%progbits
 160              		.align	2
 161              		.global	l1a_rach_req
 163              	l1a_rach_req:
 164              	.LFB62:
 115:layer1/prim_rach.c **** 
 116:layer1/prim_rach.c **** static uint8_t t3_to_rach_comb[51] = {
 117:layer1/prim_rach.c **** 	 0,  0,  0,  0,
 118:layer1/prim_rach.c **** 	 0,  1,
 119:layer1/prim_rach.c **** 	 2,  2,  2,  2,  2,  2,  2,  2,
 120:layer1/prim_rach.c **** 	 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
 121:layer1/prim_rach.c **** 	13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
 122:layer1/prim_rach.c **** 	25, 25, 25, 25, 25, 25, 25, 25,
 123:layer1/prim_rach.c **** 	25, 26,
 124:layer1/prim_rach.c **** 	27, 27, 27, 27};
 125:layer1/prim_rach.c **** static uint8_t rach_to_t3_comb[27] = {
 126:layer1/prim_rach.c **** 	 4,  5,
 127:layer1/prim_rach.c **** 	14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
 128:layer1/prim_rach.c **** 	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
 129:layer1/prim_rach.c **** 	45, 46};
 130:layer1/prim_rach.c **** 
 131:layer1/prim_rach.c **** /* request a RACH request at the next multiframe T3 = fn51 */
 132:layer1/prim_rach.c **** void l1a_rach_req(uint16_t offset, uint8_t combined, uint8_t ra)
 133:layer1/prim_rach.c **** {
 165              		.loc 1 133 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL10:
 170 0000 0008A0E1 		mov	r0, r0, asl #16
 171              	.LVL11:
 172 0004 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 173              	.LCFI3:
 174              		.cfi_def_cfa_offset 28
 175              		.loc 1 133 0
 176 0008 FF7002E2 		and	r7, r2, #255
 177              		.cfi_offset 14, -4
 178              		.cfi_offset 10, -8
 179              		.cfi_offset 8, -12
 180              		.cfi_offset 7, -16
 181              		.cfi_offset 6, -20
 182              		.cfi_offset 5, -24
 183              		.cfi_offset 4, -28
 134:layer1/prim_rach.c **** 	uint32_t fn_sched;
 135:layer1/prim_rach.c **** 	unsigned long flags;
 136:layer1/prim_rach.c **** 
 137:layer1/prim_rach.c **** 	offset += 3;
 184              		.loc 1 137 0
 185 000c 032880E2 		add	r2, r0, #196608
 186              	.LVL12:
 133:layer1/prim_rach.c **** {
 187              		.loc 1 133 0
 188 0010 FF1001E2 		and	r1, r1, #255
 189              	.LVL13:
 190              		.loc 1 137 0
 191 0014 2228A0E1 		mov	r2, r2, lsr #16
 192              	.LVL14:
 193              	.LBB2:
 138:layer1/prim_rach.c **** 
 139:layer1/prim_rach.c **** 	local_firq_save(flags);
 194              		.loc 1 139 0
 195              	@ 139 "layer1/prim_rach.c" 1
 196 0018 00400FE1 		mrs	r4, cpsr		@ local_firq_save
 197 001c C03084E3 		orr	r3, r4, #0xC0
 198 0020 03F021E1 		msr	cpsr_c, r3
 199              	@ 0 "" 2
 200              	.LVL15:
 201 0024 90309FE5 		ldr	r3, .L13
 202              	.LBE2:
 140:layer1/prim_rach.c **** 	if (combined) {
 203              		.loc 1 140 0
 204 0028 000051E3 		cmp	r1, #0
 141:layer1/prim_rach.c **** 		/* add elapsed RACH slots to offset */
 142:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 143:layer1/prim_rach.c **** 		/* offset is the number of RACH slots in the future */
 144:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 145:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 146:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 147:layer1/prim_rach.c **** 	} else
 148:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn + offset;
 205              		.loc 1 148 0
 206 002c 00109305 		ldreq	r1, [r3, #0]
 207 0030 01108200 		addeq	r1, r2, r1
 140:layer1/prim_rach.c **** 	if (combined) {
 208              		.loc 1 140 0
 209 0034 1500000A 		beq	.L12
 142:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 210              		.loc 1 142 0
 211 0038 0700D3E5 		ldrb	r0, [r3, #7]	@ zero_extendqisi2
 212 003c 7C509FE5 		ldr	r5, .L13+4
 213 0040 0060D5E7 		ldrb	r6, [r5, r0]	@ zero_extendqisi2
 214 0044 066082E0 		add	r6, r2, r6
 144:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 215              		.loc 1 144 0
 216 0048 00A093E5 		ldr	sl, [r3, #0]
 142:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 217              		.loc 1 142 0
 218 004c 0668A0E1 		mov	r6, r6, asl #16
 219 0050 2668A0E1 		mov	r6, r6, lsr #16
 220              	.LVL16:
 144:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 221              		.loc 1 144 0
 222 0054 0AA060E0 		rsb	sl, r0, sl
 223              	.LVL17:
 145:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 224              		.loc 1 145 0
 225 0058 1B10A0E3 		mov	r1, #27
 226 005c 0600A0E1 		mov	r0, r6
 227 0060 FEFFFFEB 		bl	__udivsi3
 228 0064 0088A0E1 		mov	r8, r0, asl #16
 229 0068 3330A0E3 		mov	r3, #51
 146:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 230              		.loc 1 146 0
 231 006c 1B10A0E3 		mov	r1, #27
 145:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 232              		.loc 1 145 0
 233 0070 2888A0E1 		mov	r8, r8, lsr #16
 146:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 234              		.loc 1 146 0
 235 0074 0600A0E1 		mov	r0, r6
 145:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 236              		.loc 1 145 0
 237 0078 93A828E0 		mla	r8, r3, r8, sl
 238              	.LVL18:
 146:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 239              		.loc 1 146 0
 240 007c FEFFFFEB 		bl	__umodsi3
 241 0080 0008A0E1 		mov	r0, r0, asl #16
 242 0084 205885E0 		add	r5, r5, r0, lsr #16
 243 0088 3410D5E5 		ldrb	r1, [r5, #52]	@ zero_extendqisi2
 244 008c 011088E0 		add	r1, r8, r1
 245              	.LVL19:
 246              	.L12:
 149:layer1/prim_rach.c **** 	l1s.rach.ra = ra;
 247              		.loc 1 149 0
 248 0090 24309FE5 		ldr	r3, .L13
 150:layer1/prim_rach.c **** 	sched_gsmtime(rach_sched_set_ul, fn_sched, 0);
 249              		.loc 1 150 0
 250 0094 0020A0E3 		mov	r2, #0
 149:layer1/prim_rach.c **** 	l1s.rach.ra = ra;
 251              		.loc 1 149 0
 252 0098 047BC3E5 		strb	r7, [r3, #2820]
 253              		.loc 1 150 0
 254 009c 20009FE5 		ldr	r0, .L13+8
 255 00a0 FEFFFFEB 		bl	sched_gsmtime
 256              	.LVL20:
 151:layer1/prim_rach.c **** 	local_irq_restore(flags);
 257              		.loc 1 151 0
 258              	@ 151 "layer1/prim_rach.c" 1
 259 00a4 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
 260              	
 261              	@ 0 "" 2
 152:layer1/prim_rach.c **** 
 153:layer1/prim_rach.c **** 	memset(&last_rach, 0, sizeof(last_rach));
 262              		.loc 1 153 0
 263 00a8 18309FE5 		ldr	r3, .L13+12
 264 00ac 0020A0E3 		mov	r2, #0
 265 00b0 002083E5 		str	r2, [r3, #0]
 266 00b4 042083E5 		str	r2, [r3, #4]
 154:layer1/prim_rach.c **** }
 267              		.loc 1 154 0
 268 00b8 F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 269              	.L14:
 270              		.align	2
 271              	.L13:
 272 00bc 00000000 		.word	l1s
 273 00c0 00000000 		.word	.LANCHOR0
 274 00c4 50000000 		.word	.LANCHOR0+80
 275 00c8 00000000 		.word	last_rach
 276              		.cfi_endproc
 277              	.LFE62:
 279              		.section	.text.prim_rach_init,"ax",%progbits
 280              		.align	2
 282              	prim_rach_init:
 283              	.LFB63:
 155:layer1/prim_rach.c **** 
 156:layer1/prim_rach.c **** static __attribute__ ((constructor)) void prim_rach_init(void)
 157:layer1/prim_rach.c **** {
 284              		.loc 1 157 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 158:layer1/prim_rach.c **** 	l1s.completion[L1_COMPL_RACH] = &l1a_rach_compl;
 289              		.loc 1 158 0
 290 0000 08209FE5 		ldr	r2, .L16
 291 0004 08309FE5 		ldr	r3, .L16+4
 292 0008 742A83E5 		str	r2, [r3, #2676]
 159:layer1/prim_rach.c **** }
 293              		.loc 1 159 0
 294 000c 1EFF2FE1 		bx	lr
 295              	.L17:
 296              		.align	2
 297              	.L16:
 298 0010 00000000 		.word	l1a_rach_compl
 299 0014 00000000 		.word	l1s
 300              		.cfi_endproc
 301              	.LFE63:
 303              		.section	.ctors,"aw",%progbits
 304              		.align	2
 305 0000 00000000 		.word	prim_rach_init
 306              		.global	rach_sched_set_ul
 307              		.comm	last_rach,8,4
 308              		.section	.rodata
 309              		.align	2
 310              		.set	.LANCHOR0,. + 0
 313              	t3_to_rach_comb:
 314 0000 00       		.byte	0
 315 0001 00       		.byte	0
 316 0002 00       		.byte	0
 317 0003 00       		.byte	0
 318 0004 00       		.byte	0
 319 0005 01       		.byte	1
 320 0006 02       		.byte	2
 321 0007 02       		.byte	2
 322 0008 02       		.byte	2
 323 0009 02       		.byte	2
 324 000a 02       		.byte	2
 325 000b 02       		.byte	2
 326 000c 02       		.byte	2
 327 000d 02       		.byte	2
 328 000e 02       		.byte	2
 329 000f 03       		.byte	3
 330 0010 04       		.byte	4
 331 0011 05       		.byte	5
 332 0012 06       		.byte	6
 333 0013 07       		.byte	7
 334 0014 08       		.byte	8
 335 0015 09       		.byte	9
 336 0016 0A       		.byte	10
 337 0017 0B       		.byte	11
 338 0018 0C       		.byte	12
 339 0019 0D       		.byte	13
 340 001a 0E       		.byte	14
 341 001b 0F       		.byte	15
 342 001c 10       		.byte	16
 343 001d 11       		.byte	17
 344 001e 12       		.byte	18
 345 001f 13       		.byte	19
 346 0020 14       		.byte	20
 347 0021 15       		.byte	21
 348 0022 16       		.byte	22
 349 0023 17       		.byte	23
 350 0024 18       		.byte	24
 351 0025 19       		.byte	25
 352 0026 19       		.byte	25
 353 0027 19       		.byte	25
 354 0028 19       		.byte	25
 355 0029 19       		.byte	25
 356 002a 19       		.byte	25
 357 002b 19       		.byte	25
 358 002c 19       		.byte	25
 359 002d 19       		.byte	25
 360 002e 1A       		.byte	26
 361 002f 1B       		.byte	27
 362 0030 1B       		.byte	27
 363 0031 1B       		.byte	27
 364 0032 1B       		.byte	27
 365 0033 00       		.space	1
 368              	rach_to_t3_comb:
 369 0034 04       		.byte	4
 370 0035 05       		.byte	5
 371 0036 0E       		.byte	14
 372 0037 0F       		.byte	15
 373 0038 10       		.byte	16
 374 0039 11       		.byte	17
 375 003a 12       		.byte	18
 376 003b 13       		.byte	19
 377 003c 14       		.byte	20
 378 003d 15       		.byte	21
 379 003e 16       		.byte	22
 380 003f 17       		.byte	23
 381 0040 18       		.byte	24
 382 0041 19       		.byte	25
 383 0042 1A       		.byte	26
 384 0043 1B       		.byte	27
 385 0044 1C       		.byte	28
 386 0045 1D       		.byte	29
 387 0046 1E       		.byte	30
 388 0047 1F       		.byte	31
 389 0048 20       		.byte	32
 390 0049 21       		.byte	33
 391 004a 22       		.byte	34
 392 004b 23       		.byte	35
 393 004c 24       		.byte	36
 394 004d 2D       		.byte	45
 395 004e 2E       		.byte	46
 396 004f 00       		.space	1
 399              	rach_sched_set_ul:
 400 0050 00000000 		.word	l1s_tx_rach_cmd
 401 0054 01       		.byte	1
 402 0055 00       		.byte	0
 403 0056 0000     		.space	2
 404 0058 0300     		.short	3
 405 005a 0300     		.short	3
 406 005c 00000000 		.word	0
 407 0060 00       		.byte	0
 408 0061 00       		.byte	0
 409 0062 00000000 		.space	6
 409      0000
 410 0068 00000000 		.word	0
 411 006c 00       		.byte	0
 412 006d 00       		.byte	0
 413 006e 00000000 		.space	6
 413      0000
 414 0074 00000000 		.word	l1s_tx_rach_resp
 415 0078 01       		.byte	1
 416 0079 00       		.byte	0
 417 007a 0000     		.space	2
 418 007c FCFF     		.short	-4
 419 007e 0000     		.short	0
 420 0080 00000000 		.word	0
 421 0084 00       		.byte	0
 422 0085 00       		.byte	0
 423 0086 00000000 		.space	6
 423      0000
 424 008c 00000000 		.word	tdma_end_set
 425 0090 00       		.byte	0
 426 0091 00       		.byte	0
 427 0092 00000000 		.space	6
 427      0000
 428              		.text
 429              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prim_rach.c
     /tmp/ccxpbeSn.s:12     .text.l1s_tx_rach_resp:0000000000000000 $a
     /tmp/ccxpbeSn.s:14     .text.l1s_tx_rach_resp:0000000000000000 l1s_tx_rach_resp
     /tmp/ccxpbeSn.s:55     .text.l1s_tx_rach_resp:0000000000000038 $d
                            *COM*:0000000000000008 last_rach
     /tmp/ccxpbeSn.s:62     .text.l1s_tx_rach_cmd:0000000000000000 $a
     /tmp/ccxpbeSn.s:64     .text.l1s_tx_rach_cmd:0000000000000000 l1s_tx_rach_cmd
     /tmp/ccxpbeSn.s:117    .text.l1s_tx_rach_cmd:0000000000000060 $d
     /tmp/ccxpbeSn.s:123    .text.l1a_rach_compl:0000000000000000 $a
     /tmp/ccxpbeSn.s:125    .text.l1a_rach_compl:0000000000000000 l1a_rach_compl
     /tmp/ccxpbeSn.s:153    .text.l1a_rach_compl:0000000000000024 $d
     /tmp/ccxpbeSn.s:160    .text.l1a_rach_req:0000000000000000 $a
     /tmp/ccxpbeSn.s:163    .text.l1a_rach_req:0000000000000000 l1a_rach_req
     /tmp/ccxpbeSn.s:272    .text.l1a_rach_req:00000000000000bc $d
     /tmp/ccxpbeSn.s:280    .text.prim_rach_init:0000000000000000 $a
     /tmp/ccxpbeSn.s:282    .text.prim_rach_init:0000000000000000 prim_rach_init
     /tmp/ccxpbeSn.s:298    .text.prim_rach_init:0000000000000010 $d
     /tmp/ccxpbeSn.s:304    .ctors:0000000000000000 $d
     /tmp/ccxpbeSn.s:399    .rodata:0000000000000050 rach_sched_set_ul
     /tmp/ccxpbeSn.s:309    .rodata:0000000000000000 $d
     /tmp/ccxpbeSn.s:313    .rodata:0000000000000000 t3_to_rach_comb
     /tmp/ccxpbeSn.s:368    .rodata:0000000000000034 rach_to_t3_comb
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
l1s_compl_sched
l1s
dsp_api
l1s_tx_apc_helper
l1s_tx_win_ctrl
l1_create_l2_msg
l1_queue_for_l2
__udivsi3
__umodsi3
sched_gsmtime
tdma_end_set
