   1              		.file	"prim_tx_nb.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.l1s_tx_resp,"ax",%progbits
  12              		.align	2
  14              	l1s_tx_resp:
  15              	.LFB59:
  16              		.file 1 "layer1/prim_tx_nb.c"
   1:layer1/prim_tx_nb.c **** /* Layer 1 - Transmit Normal Burst */
   2:layer1/prim_tx_nb.c **** 
   3:layer1/prim_tx_nb.c **** /* (C) 2010 by Dieter Spaar <spaar@mirider.augusta.de>
   4:layer1/prim_tx_nb.c ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   5:layer1/prim_tx_nb.c ****  *
   6:layer1/prim_tx_nb.c ****  * All Rights Reserved
   7:layer1/prim_tx_nb.c ****  *
   8:layer1/prim_tx_nb.c ****  * This program is free software; you can redistribute it and/or modify
   9:layer1/prim_tx_nb.c ****  * it under the terms of the GNU General Public License as published by
  10:layer1/prim_tx_nb.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:layer1/prim_tx_nb.c ****  * (at your option) any later version.
  12:layer1/prim_tx_nb.c ****  *
  13:layer1/prim_tx_nb.c ****  * This program is distributed in the hope that it will be useful,
  14:layer1/prim_tx_nb.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:layer1/prim_tx_nb.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:layer1/prim_tx_nb.c ****  * GNU General Public License for more details.
  17:layer1/prim_tx_nb.c ****  *
  18:layer1/prim_tx_nb.c ****  * You should have received a copy of the GNU General Public License along
  19:layer1/prim_tx_nb.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:layer1/prim_tx_nb.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:layer1/prim_tx_nb.c ****  *
  22:layer1/prim_tx_nb.c ****  */
  23:layer1/prim_tx_nb.c **** 
  24:layer1/prim_tx_nb.c **** #include <stdint.h>
  25:layer1/prim_tx_nb.c **** #include <stdio.h>
  26:layer1/prim_tx_nb.c **** #include <string.h>
  27:layer1/prim_tx_nb.c **** #include <stdlib.h>
  28:layer1/prim_tx_nb.c **** 
  29:layer1/prim_tx_nb.c **** #include <defines.h>
  30:layer1/prim_tx_nb.c **** #include <debug.h>
  31:layer1/prim_tx_nb.c **** #include <memory.h>
  32:layer1/prim_tx_nb.c **** #include <byteorder.h>
  33:layer1/prim_tx_nb.c **** #include <osmocom/gsm/gsm_utils.h>
  34:layer1/prim_tx_nb.c **** #include <osmocom/core/msgb.h>
  35:layer1/prim_tx_nb.c **** #include <calypso/dsp_api.h>
  36:layer1/prim_tx_nb.c **** #include <calypso/irq.h>
  37:layer1/prim_tx_nb.c **** #include <calypso/tpu.h>
  38:layer1/prim_tx_nb.c **** #include <calypso/tsp.h>
  39:layer1/prim_tx_nb.c **** #include <calypso/dsp.h>
  40:layer1/prim_tx_nb.c **** #include <calypso/timer.h>
  41:layer1/prim_tx_nb.c **** #include <comm/sercomm.h>
  42:layer1/prim_tx_nb.c **** 
  43:layer1/prim_tx_nb.c **** #include <layer1/sync.h>
  44:layer1/prim_tx_nb.c **** #include <layer1/agc.h>
  45:layer1/prim_tx_nb.c **** #include <layer1/tdma_sched.h>
  46:layer1/prim_tx_nb.c **** #include <layer1/mframe_sched.h>
  47:layer1/prim_tx_nb.c **** #include <layer1/tpu_window.h>
  48:layer1/prim_tx_nb.c **** #include <layer1/l23_api.h>
  49:layer1/prim_tx_nb.c **** #include <layer1/rfch.h>
  50:layer1/prim_tx_nb.c **** #include <layer1/prim.h>
  51:layer1/prim_tx_nb.c **** 
  52:layer1/prim_tx_nb.c **** #include <l1ctl_proto.h>
  53:layer1/prim_tx_nb.c **** 
  54:layer1/prim_tx_nb.c **** 
  55:layer1/prim_tx_nb.c **** static uint32_t last_txnb_fn;
  56:layer1/prim_tx_nb.c **** 
  57:layer1/prim_tx_nb.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB) */
  58:layer1/prim_tx_nb.c **** static int l1s_tx_resp(__unused uint8_t p1, __unused uint8_t burst_id,
  59:layer1/prim_tx_nb.c **** 		       __unused uint16_t p3)
  60:layer1/prim_tx_nb.c **** {
  17              		.loc 1 60 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  22 0000 FF1001E2 		and	r1, r1, #255
  23              	.LVL1:
  61:layer1/prim_tx_nb.c **** 	putchart('t');
  62:layer1/prim_tx_nb.c **** 
  63:layer1/prim_tx_nb.c **** 	dsp_api.r_page_used = 1;
  24              		.loc 1 63 0
  25 0004 34309FE5 		ldr	r3, .L3
  26 0008 0120A0E3 		mov	r2, #1
  27              	.LVL2:
  64:layer1/prim_tx_nb.c **** 
  65:layer1/prim_tx_nb.c **** 	if (burst_id == 3) {
  28              		.loc 1 65 0
  29 000c 030051E3 		cmp	r1, #3
  60:layer1/prim_tx_nb.c **** {
  30              		.loc 1 60 0
  31 0010 04E02DE5 		str	lr, [sp, #-4]!
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 4
  63:layer1/prim_tx_nb.c **** 	dsp_api.r_page_used = 1;
  34              		.loc 1 63 0
  35 0014 182083E5 		str	r2, [r3, #24]
  36              		.loc 1 65 0
  37 0018 0600001A 		bne	.L2
  38              		.cfi_offset 14, -4
  66:layer1/prim_tx_nb.c **** 		last_txnb_fn = l1s.current_time.fn - 4;
  39              		.loc 1 66 0
  40 001c 20309FE5 		ldr	r3, .L3+4
  41 0020 002093E5 		ldr	r2, [r3, #0]
  42 0024 1C309FE5 		ldr	r3, .L3+8
  43 0028 042042E2 		sub	r2, r2, #4
  44 002c 002083E5 		str	r2, [r3, #0]
  67:layer1/prim_tx_nb.c **** 		l1s_compl_sched(L1_COMPL_TX_NB);
  45              		.loc 1 67 0
  46 0030 0200A0E3 		mov	r0, #2
  47              	.LVL3:
  48 0034 FEFFFFEB 		bl	l1s_compl_sched
  49              	.L2:
  68:layer1/prim_tx_nb.c **** 	}
  69:layer1/prim_tx_nb.c **** 
  70:layer1/prim_tx_nb.c **** 	return 0;
  71:layer1/prim_tx_nb.c **** }
  50              		.loc 1 71 0
  51 0038 0000A0E3 		mov	r0, #0
  52 003c 04F09DE4 		ldr	pc, [sp], #4
  53              	.L4:
  54              		.align	2
  55              	.L3:
  56 0040 00000000 		.word	dsp_api
  57 0044 00000000 		.word	l1s
  58 0048 00000000 		.word	.LANCHOR0
  59              		.cfi_endproc
  60              	.LFE59:
  62              		.section	.text.l1s_tx_cmd,"ax",%progbits
  63              		.align	2
  65              	l1s_tx_cmd:
  66              	.LFB60:
  72:layer1/prim_tx_nb.c **** 
  73:layer1/prim_tx_nb.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB) */
  74:layer1/prim_tx_nb.c **** static int l1s_tx_cmd(uint8_t p1, uint8_t burst_id, uint16_t p3)
  75:layer1/prim_tx_nb.c **** {
  67              		.loc 1 75 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 4
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL4:
  72 0000 FF402DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 36
  76:layer1/prim_tx_nb.c **** 	uint16_t arfcn;
  77:layer1/prim_tx_nb.c **** 	uint8_t tsc, tn;
  78:layer1/prim_tx_nb.c **** 	uint8_t mf_task_id = p3 & 0xff;
  79:layer1/prim_tx_nb.c **** 	uint8_t mf_task_flags = p3 >> 8;
  80:layer1/prim_tx_nb.c **** 
  81:layer1/prim_tx_nb.c **** 	putchart('T');
  82:layer1/prim_tx_nb.c **** 
  83:layer1/prim_tx_nb.c **** 	/* before sending first of the four bursts, copy data to API ram */
  84:layer1/prim_tx_nb.c **** 	if (burst_id == 0) {
  75              		.loc 1 84 0
  76 0004 FF6011E2 		ands	r6, r1, #255
  77              		.cfi_offset 14, -4
  78              		.cfi_offset 7, -8
  79              		.cfi_offset 6, -12
  80              		.cfi_offset 5, -16
  81              		.cfi_offset 4, -20
  82              		.cfi_offset 3, -24
  83              		.cfi_offset 2, -28
  84              		.cfi_offset 1, -32
  85              		.cfi_offset 0, -36
  75:layer1/prim_tx_nb.c **** {
  86              		.loc 1 75 0
  87 0008 FF4000E2 		and	r4, r0, #255
  88 000c 0228A0E1 		mov	r2, r2, asl #16
  89              	.LVL5:
  90              		.loc 1 84 0
  91 0010 2100001A 		bne	.L6
  92              	.LBB2:
  85:layer1/prim_tx_nb.c **** 		uint16_t *info_ptr = dsp_api.ndb->a_cu;
  93              		.loc 1 85 0
  94 0014 20319FE5 		ldr	r3, .L16
  86:layer1/prim_tx_nb.c **** 		struct msgb *msg;
  87:layer1/prim_tx_nb.c **** 		const uint8_t *data;
  88:layer1/prim_tx_nb.c **** 
  89:layer1/prim_tx_nb.c **** 		/* distinguish between DCCH and ACCH */
  90:layer1/prim_tx_nb.c **** 		if (mf_task_flags & MF_F_SACCH) {
  95              		.loc 1 90 0
  96 0018 010412E3 		tst	r2, #16777216
  85:layer1/prim_tx_nb.c **** 		uint16_t *info_ptr = dsp_api.ndb->a_cu;
  97              		.loc 1 85 0
  98 001c 007093E5 		ldr	r7, [r3, #0]
  99              	.LVL6:
 100              		.loc 1 90 0
 101 0020 0500000A 		beq	.L7
  91:layer1/prim_tx_nb.c **** 			msg = msgb_dequeue(&l1s.tx_queue[L1S_CHAN_SACCH]);
 102              		.loc 1 91 0
 103 0024 14019FE5 		ldr	r0, .L16+4
 104              	.LVL7:
 105 0028 FEFFFFEB 		bl	msgb_dequeue
 106              	.LVL8:
  92:layer1/prim_tx_nb.c **** 			data = msg ? msg->l3h : pu_get_meas_frame();
 107              		.loc 1 92 0
 108 002c 005050E2 		subs	r5, r0, #0
 109 0030 0500001A 		bne	.L13
 110              	.L8:
 111              		.loc 1 92 0 is_stmt 0 discriminator 2
 112 0034 FEFFFFEB 		bl	pu_get_meas_frame
 113              	.LVL9:
 114 0038 060000EA 		b	.L14
 115              	.LVL10:
 116              	.L7:
  93:layer1/prim_tx_nb.c **** 		} else {
  94:layer1/prim_tx_nb.c **** 			msg = msgb_dequeue(&l1s.tx_queue[L1S_CHAN_MAIN]);
 117              		.loc 1 94 0 is_stmt 1
 118 003c 00019FE5 		ldr	r0, .L16+8
 119              	.LVL11:
 120 0040 FEFFFFEB 		bl	msgb_dequeue
 121              	.LVL12:
  95:layer1/prim_tx_nb.c **** 			data = msg ? msg->l3h : pu_get_idle_frame();
 122              		.loc 1 95 0
 123 0044 005050E2 		subs	r5, r0, #0
 124 0048 0100000A 		beq	.L10
 125              	.L13:
 126              		.loc 1 95 0 is_stmt 0 discriminator 1
 127 004c 181095E5 		ldr	r1, [r5, #24]
 128 0050 010000EA 		b	.L9
 129              	.L10:
 130              		.loc 1 95 0 discriminator 2
 131 0054 FEFFFFEB 		bl	pu_get_idle_frame
 132              	.LVL13:
 133              	.L14:
 134 0058 0010A0E1 		mov	r1, r0
 135              	.L9:
 136              	.LVL14:
  96:layer1/prim_tx_nb.c **** 		}
  97:layer1/prim_tx_nb.c **** 
  98:layer1/prim_tx_nb.c **** 		/* Fill data block Header */
  99:layer1/prim_tx_nb.c **** 		info_ptr[0] = (1 << B_BLUD);     // 1st word: Set B_BLU bit.
 137              		.loc 1 99 0 is_stmt 1
 138 005c 0229A0E3 		mov	r2, #32768
 139 0060 993FA0E3 		mov	r3, #612
 140 0064 B32087E1 		strh	r2, [r7, r3]	@ movhi
 100:layer1/prim_tx_nb.c **** 		info_ptr[1] = 0;                 // 2nd word: cleared.
 141              		.loc 1 100 0
 142 0068 0020A0E3 		mov	r2, #0	@ movhi
 143 006c 023083E2 		add	r3, r3, #2
 144 0070 B32087E1 		strh	r2, [r7, r3]	@ movhi
 101:layer1/prim_tx_nb.c **** 		info_ptr[2] = 0;                 // 3rd word: cleared.
 145              		.loc 1 101 0
 146 0074 023083E2 		add	r3, r3, #2
 102:layer1/prim_tx_nb.c **** 
 103:layer1/prim_tx_nb.c **** 		/* Copy the actual data after the header */
 104:layer1/prim_tx_nb.c **** 		dsp_memcpy_to_api(&info_ptr[3], data, 23, 0);
 147              		.loc 1 104 0
 148 0078 030087E0 		add	r0, r7, r3
 101:layer1/prim_tx_nb.c **** 		info_ptr[2] = 0;                 // 3rd word: cleared.
 149              		.loc 1 101 0
 150 007c B32087E1 		strh	r2, [r7, r3]	@ movhi
 151              		.loc 1 104 0
 152 0080 020080E2 		add	r0, r0, #2
 153 0084 1720A0E3 		mov	r2, #23
 154 0088 9A3F43E2 		sub	r3, r3, #616
 155 008c FEFFFFEB 		bl	dsp_memcpy_to_api
 156              	.LVL15:
 105:layer1/prim_tx_nb.c **** 
 106:layer1/prim_tx_nb.c **** 		if (msg)
 157              		.loc 1 106 0
 158 0090 000055E3 		cmp	r5, #0
 107:layer1/prim_tx_nb.c **** 			msgb_free(msg);
 159              		.loc 1 107 0
 160 0094 0500A011 		movne	r0, r5
 161 0098 FEFFFF1B 		blne	msgb_free
 162              	.LVL16:
 163              	.L6:
 164              	.LBE2:
 108:layer1/prim_tx_nb.c **** 	}
 109:layer1/prim_tx_nb.c **** 
 110:layer1/prim_tx_nb.c **** 	rfch_get_params(&l1s.next_time, &arfcn, &tsc, &tn);
 165              		.loc 1 110 0
 166 009c A4009FE5 		ldr	r0, .L16+12
 167 00a0 0C108DE2 		add	r1, sp, #12
 168 00a4 0F208DE2 		add	r2, sp, #15
 169 00a8 0E308DE2 		add	r3, sp, #14
 170 00ac FEFFFFEB 		bl	rfch_get_params
 171              	.LVL17:
 111:layer1/prim_tx_nb.c **** 
 112:layer1/prim_tx_nb.c **** 	l1s_tx_apc_helper(arfcn);
 172              		.loc 1 112 0
 173 00b0 BC00DDE1 		ldrh	r0, [sp, #12]
 174 00b4 FEFFFFEB 		bl	l1s_tx_apc_helper
 113:layer1/prim_tx_nb.c **** 
 114:layer1/prim_tx_nb.c **** 	if (p1 == 0)
 175              		.loc 1 114 0
 176 00b8 000054E3 		cmp	r4, #0
 177 00bc 0700001A 		bne	.L11
 178              	.LVL18:
 115:layer1/prim_tx_nb.c **** 		/* DUL_DSP_TASK, one normal burst */
 116:layer1/prim_tx_nb.c **** 		dsp_load_tch_param(&l1s.next_time,
 179              		.loc 1 116 0
 180 00c0 0E30DDE5 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 181              	.LVL19:
 182 00c4 00408DE5 		str	r4, [sp, #0]
 183 00c8 04408DE5 		str	r4, [sp, #4]
 184 00cc 08308DE5 		str	r3, [sp, #8]
 185              	.LVL20:
 186 00d0 70009FE5 		ldr	r0, .L16+12
 187 00d4 0410A0E1 		mov	r1, r4
 188 00d8 0420A0E1 		mov	r2, r4
 189 00dc 070000EA 		b	.L15
 190              	.LVL21:
 191              	.L11:
 117:layer1/prim_tx_nb.c **** 		                   SIG_ONLY_MODE, INVALID_CHANNEL, 0, 0, 0, tn);
 118:layer1/prim_tx_nb.c **** 
 119:layer1/prim_tx_nb.c **** 	else if (p1 == 2)
 192              		.loc 1 119 0
 193 00e0 020054E3 		cmp	r4, #2
 194 00e4 0700001A 		bne	.L12
 195              	.LVL22:
 120:layer1/prim_tx_nb.c **** 		/* DUL_DSP_TASK, four normal bursts */
 121:layer1/prim_tx_nb.c **** 		dsp_load_tch_param(&l1s.next_time,
 196              		.loc 1 121 0
 197 00e8 0E30DDE5 		ldrb	r3, [sp, #14]	@ zero_extendqisi2
 198              	.LVL23:
 199 00ec 0010A0E3 		mov	r1, #0
 200 00f0 00108DE5 		str	r1, [sp, #0]
 201 00f4 0A008DE9 		stmib	sp, {r1, r3}	@ phole stm
 202              	.LVL24:
 203 00f8 48009FE5 		ldr	r0, .L16+12
 204 00fc 0320A0E3 		mov	r2, #3
 205              	.L15:
 206 0100 0130A0E1 		mov	r3, r1
 207              	.LVL25:
 208 0104 FEFFFFEB 		bl	dsp_load_tch_param
 209              	.L12:
 122:layer1/prim_tx_nb.c **** 		                   SIG_ONLY_MODE, SDCCH_4, 0, 0, 0, tn);
 123:layer1/prim_tx_nb.c **** 
 124:layer1/prim_tx_nb.c **** 	dsp_load_tx_task(DUL_DSP_TASK, burst_id, tsc);
 210              		.loc 1 124 0
 211 0108 0610A0E1 		mov	r1, r6
 212              	.LVL26:
 213 010c 0F20DDE5 		ldrb	r2, [sp, #15]	@ zero_extendqisi2
 214 0110 0C00A0E3 		mov	r0, #12
 215 0114 FEFFFFEB 		bl	dsp_load_tx_task
 125:layer1/prim_tx_nb.c **** 
 126:layer1/prim_tx_nb.c **** 	l1s_tx_win_ctrl(arfcn | ARFCN_UPLINK, L1_TXWIN_NB, 0, 3);
 216              		.loc 1 126 0
 217 0118 BC00DDE1 		ldrh	r0, [sp, #12]
 218              	.LVL27:
 219 011c 0010A0E3 		mov	r1, #0
 220 0120 010980E3 		orr	r0, r0, #16384
 221              	.LVL28:
 222 0124 0120A0E1 		mov	r2, r1
 223 0128 0330A0E3 		mov	r3, #3
 224 012c FEFFFFEB 		bl	l1s_tx_win_ctrl
 127:layer1/prim_tx_nb.c **** 
 128:layer1/prim_tx_nb.c **** 	return 0;
 129:layer1/prim_tx_nb.c **** }
 225              		.loc 1 129 0
 226 0130 0000A0E3 		mov	r0, #0
 227 0134 10D08DE2 		add	sp, sp, #16
 228 0138 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 229              	.L17:
 230              		.align	2
 231              	.L16:
 232 013c 00000000 		.word	dsp_api
 233 0140 580A0000 		.word	l1s+2648
 234 0144 500A0000 		.word	l1s+2640
 235 0148 0C000000 		.word	l1s+12
 236              		.cfi_endproc
 237              	.LFE60:
 239              		.section	.text.l1a_tx_nb_compl,"ax",%progbits
 240              		.align	2
 242              	l1a_tx_nb_compl:
 243              	.LFB61:
 130:layer1/prim_tx_nb.c **** 
 131:layer1/prim_tx_nb.c **** /* Asynchronous completion handler for NB transmit */
 132:layer1/prim_tx_nb.c **** static void l1a_tx_nb_compl(__unused enum l1_compl c)
 133:layer1/prim_tx_nb.c **** {
 244              		.loc 1 133 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL29:
 134:layer1/prim_tx_nb.c **** 	struct msgb *msg;
 135:layer1/prim_tx_nb.c **** 
 136:layer1/prim_tx_nb.c **** 	msg = l1_create_l2_msg(L1CTL_DATA_CONF, last_txnb_fn, 0, 0);
 249              		.loc 1 136 0
 250 0000 1C309FE5 		ldr	r3, .L19
 251 0004 0020A0E3 		mov	r2, #0
 252 0008 001093E5 		ldr	r1, [r3, #0]
 133:layer1/prim_tx_nb.c **** {
 253              		.loc 1 133 0
 254 000c 04E02DE5 		str	lr, [sp, #-4]!
 255              	.LCFI2:
 256              		.cfi_def_cfa_offset 4
 257              		.loc 1 136 0
 258 0010 0230A0E1 		mov	r3, r2
 259 0014 0F00A0E3 		mov	r0, #15
 260              	.LVL30:
 261              		.cfi_offset 14, -4
 262 0018 FEFFFFEB 		bl	l1_create_l2_msg
 137:layer1/prim_tx_nb.c **** 	l1_queue_for_l2(msg);
 138:layer1/prim_tx_nb.c **** }
 263              		.loc 1 138 0
 264 001c 04E09DE4 		ldr	lr, [sp], #4
 137:layer1/prim_tx_nb.c **** 	l1_queue_for_l2(msg);
 265              		.loc 1 137 0
 266 0020 FEFFFFEA 		b	l1_queue_for_l2
 267              	.L20:
 268              		.align	2
 269              	.L19:
 270 0024 00000000 		.word	.LANCHOR0
 271              		.cfi_endproc
 272              	.LFE61:
 274              		.section	.text.l1s_tx_test,"ax",%progbits
 275              		.align	2
 276              		.global	l1s_tx_test
 278              	l1s_tx_test:
 279              	.LFB62:
 139:layer1/prim_tx_nb.c **** 
 140:layer1/prim_tx_nb.c **** void l1s_tx_test(uint8_t base_fn, uint8_t type)
 141:layer1/prim_tx_nb.c **** {
 280              		.loc 1 141 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL31:
 285 0000 F3412DE9 		stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 286              	.LCFI3:
 287              		.cfi_def_cfa_offset 32
 288              		.loc 1 141 0
 289 0004 FF4001E2 		and	r4, r1, #255
 290              		.cfi_offset 14, -4
 291              		.cfi_offset 8, -8
 292              		.cfi_offset 7, -12
 293              		.cfi_offset 6, -16
 294              		.cfi_offset 5, -20
 295              		.cfi_offset 4, -24
 296              		.cfi_offset 1, -28
 297              		.cfi_offset 0, -32
 298 0008 FF8000E2 		and	r8, r0, #255
 142:layer1/prim_tx_nb.c **** 	printf("Starting TX %d\n", type);
 299              		.loc 1 142 0
 300 000c 0410A0E1 		mov	r1, r4
 301              	.LVL32:
 302 0010 50019FE5 		ldr	r0, .L25
 303              	.LVL33:
 304 0014 FEFFFFEB 		bl	printf
 143:layer1/prim_tx_nb.c **** 
 144:layer1/prim_tx_nb.c **** 	if (type == 0) {// one normal burst
 305              		.loc 1 144 0
 306 0018 000054E3 		cmp	r4, #0
 307 001c 0D00001A 		bne	.L22
 145:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn, &l1s_tx_cmd, 0, 0, 0, 3);
 308              		.loc 1 145 0
 309 0020 0350A0E3 		mov	r5, #3
 310 0024 40119FE5 		ldr	r1, .L25+4
 311 0028 0420A0E1 		mov	r2, r4
 312 002c 0430A0E1 		mov	r3, r4
 313 0030 0800A0E1 		mov	r0, r8
 314 0034 30008DE8 		stmia	sp, {r4, r5}	@ phole stm
 315 0038 FEFFFFEB 		bl	tdma_schedule
 146:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 2, &l1s_tx_resp, 0, 0, 0, 3);
 316              		.loc 1 146 0
 317 003c 020088E2 		add	r0, r8, #2
 318 0040 30008DE8 		stmia	sp, {r4, r5}	@ phole stm
 319 0044 FF0000E2 		and	r0, r0, #255
 320 0048 20119FE5 		ldr	r1, .L25+8
 321 004c 0420A0E1 		mov	r2, r4
 322 0050 0430A0E1 		mov	r3, r4
 323 0054 410000EA 		b	.L24
 324              	.L22:
 147:layer1/prim_tx_nb.c **** 	} else if (type == 2) { // four normal bursts
 325              		.loc 1 147 0
 326 0058 020054E3 		cmp	r4, #2
 327 005c 4000001A 		bne	.L21
 148:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn, &l1s_tx_cmd, 2, 0, 0, 3);
 328              		.loc 1 148 0
 329 0060 0060A0E3 		mov	r6, #0
 330 0064 0350A0E3 		mov	r5, #3
 331 0068 FC109FE5 		ldr	r1, .L25+4
 332 006c 0420A0E1 		mov	r2, r4
 333 0070 0630A0E1 		mov	r3, r6
 334 0074 0800A0E1 		mov	r0, r8
 335 0078 00608DE5 		str	r6, [sp, #0]
 336 007c 04508DE5 		str	r5, [sp, #4]
 149:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 1, &l1s_tx_cmd, 2, 1, 0, 3);
 150:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 2, &l1s_tx_resp, 2, 0, 0, 3);
 337              		.loc 1 150 0
 338 0080 027088E2 		add	r7, r8, #2
 148:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn, &l1s_tx_cmd, 2, 0, 0, 3);
 339              		.loc 1 148 0
 340 0084 FEFFFFEB 		bl	tdma_schedule
 149:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 1, &l1s_tx_cmd, 2, 1, 0, 3);
 341              		.loc 1 149 0
 342 0088 010088E2 		add	r0, r8, #1
 343              		.loc 1 150 0
 344 008c FF7007E2 		and	r7, r7, #255
 149:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 1, &l1s_tx_cmd, 2, 1, 0, 3);
 345              		.loc 1 149 0
 346 0090 D4109FE5 		ldr	r1, .L25+4
 347 0094 0420A0E1 		mov	r2, r4
 348 0098 0130A0E3 		mov	r3, #1
 349 009c FF0000E2 		and	r0, r0, #255
 350 00a0 00608DE5 		str	r6, [sp, #0]
 351 00a4 04508DE5 		str	r5, [sp, #4]
 352 00a8 FEFFFFEB 		bl	tdma_schedule
 353              		.loc 1 150 0
 354 00ac 0700A0E1 		mov	r0, r7
 355 00b0 B8109FE5 		ldr	r1, .L25+8
 356 00b4 0420A0E1 		mov	r2, r4
 357 00b8 0630A0E1 		mov	r3, r6
 358 00bc 00608DE5 		str	r6, [sp, #0]
 359 00c0 04508DE5 		str	r5, [sp, #4]
 360 00c4 FEFFFFEB 		bl	tdma_schedule
 151:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 2, &l1s_tx_cmd, 2, 2, 0, 3);
 361              		.loc 1 151 0
 362 00c8 0700A0E1 		mov	r0, r7
 152:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 3, &l1s_tx_resp, 2, 1, 0, 3);
 363              		.loc 1 152 0
 364 00cc 057088E0 		add	r7, r8, r5
 151:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 2, &l1s_tx_cmd, 2, 2, 0, 3);
 365              		.loc 1 151 0
 366 00d0 94109FE5 		ldr	r1, .L25+4
 367 00d4 0420A0E1 		mov	r2, r4
 368 00d8 0430A0E1 		mov	r3, r4
 369              		.loc 1 152 0
 370 00dc FF7007E2 		and	r7, r7, #255
 151:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 2, &l1s_tx_cmd, 2, 2, 0, 3);
 371              		.loc 1 151 0
 372 00e0 00608DE5 		str	r6, [sp, #0]
 373 00e4 04508DE5 		str	r5, [sp, #4]
 374 00e8 FEFFFFEB 		bl	tdma_schedule
 375              		.loc 1 152 0
 376 00ec 7C109FE5 		ldr	r1, .L25+8
 377 00f0 0420A0E1 		mov	r2, r4
 378 00f4 0130A0E3 		mov	r3, #1
 379 00f8 0700A0E1 		mov	r0, r7
 380 00fc 00608DE5 		str	r6, [sp, #0]
 381 0100 04508DE5 		str	r5, [sp, #4]
 382 0104 FEFFFFEB 		bl	tdma_schedule
 153:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 3, &l1s_tx_cmd, 2, 3, 0, 3);
 383              		.loc 1 153 0
 384 0108 5C109FE5 		ldr	r1, .L25+4
 385 010c 0420A0E1 		mov	r2, r4
 386 0110 0530A0E1 		mov	r3, r5
 387 0114 0700A0E1 		mov	r0, r7
 388 0118 00608DE5 		str	r6, [sp, #0]
 389 011c 04508DE5 		str	r5, [sp, #4]
 390 0120 FEFFFFEB 		bl	tdma_schedule
 154:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 4, &l1s_tx_resp, 2, 2, 0, 3);
 391              		.loc 1 154 0
 392 0124 040088E2 		add	r0, r8, #4
 393 0128 40109FE5 		ldr	r1, .L25+8
 394 012c 0420A0E1 		mov	r2, r4
 395 0130 0430A0E1 		mov	r3, r4
 396 0134 FF0000E2 		and	r0, r0, #255
 397 0138 00608DE5 		str	r6, [sp, #0]
 398 013c 04508DE5 		str	r5, [sp, #4]
 399 0140 FEFFFFEB 		bl	tdma_schedule
 155:layer1/prim_tx_nb.c **** 		tdma_schedule(base_fn + 5, &l1s_tx_resp, 2, 3, 0, 3);
 400              		.loc 1 155 0
 401 0144 050088E2 		add	r0, r8, #5
 402 0148 00608DE5 		str	r6, [sp, #0]
 403 014c 04508DE5 		str	r5, [sp, #4]
 404 0150 18109FE5 		ldr	r1, .L25+8
 405 0154 FF0000E2 		and	r0, r0, #255
 406 0158 0420A0E1 		mov	r2, r4
 407 015c 0530A0E1 		mov	r3, r5
 408              	.L24:
 409 0160 FEFFFFEB 		bl	tdma_schedule
 410              	.L21:
 156:layer1/prim_tx_nb.c **** 	}
 157:layer1/prim_tx_nb.c **** }
 411              		.loc 1 157 0
 412 0164 FC81BDE8 		ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
 413              	.L26:
 414              		.align	2
 415              	.L25:
 416 0168 00000000 		.word	.LC0
 417 016c 00000000 		.word	l1s_tx_cmd
 418 0170 00000000 		.word	l1s_tx_resp
 419              		.cfi_endproc
 420              	.LFE62:
 422              		.section	.text.prim_tx_nb_init,"ax",%progbits
 423              		.align	2
 425              	prim_tx_nb_init:
 426              	.LFB63:
 158:layer1/prim_tx_nb.c **** 
 159:layer1/prim_tx_nb.c **** /* sched sets for uplink */
 160:layer1/prim_tx_nb.c **** const struct tdma_sched_item nb_sched_set_ul[] = {
 161:layer1/prim_tx_nb.c **** 	SCHED_ITEM_DT(l1s_tx_cmd, 3, 2, 0),						SCHED_END_FRAME(),
 162:layer1/prim_tx_nb.c **** 	SCHED_ITEM_DT(l1s_tx_cmd, 3, 2, 1),						SCHED_END_FRAME(),
 163:layer1/prim_tx_nb.c **** 	SCHED_ITEM(l1s_tx_resp, -4, 2, 0),	SCHED_ITEM_DT(l1s_tx_cmd, 3, 2, 2),	SCHED_END_FRAME(),
 164:layer1/prim_tx_nb.c **** 	SCHED_ITEM(l1s_tx_resp, -4, 2, 1),	SCHED_ITEM_DT(l1s_tx_cmd, 3, 2, 3),	SCHED_END_FRAME(),
 165:layer1/prim_tx_nb.c **** 						SCHED_ITEM(l1s_tx_resp, -4, 2, 2),	SCHED_END_FRAME(),
 166:layer1/prim_tx_nb.c **** 						SCHED_ITEM(l1s_tx_resp, -4, 2, 3),	SCHED_END_FRAME(),
 167:layer1/prim_tx_nb.c **** 	SCHED_END_SET()
 168:layer1/prim_tx_nb.c **** };
 169:layer1/prim_tx_nb.c **** 
 170:layer1/prim_tx_nb.c **** static __attribute__ ((constructor)) void prim_tx_nb_init(void)
 171:layer1/prim_tx_nb.c **** {
 427              		.loc 1 171 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              		@ link register save eliminated.
 172:layer1/prim_tx_nb.c **** 	l1s.completion[L1_COMPL_TX_NB] = &l1a_tx_nb_compl;
 432              		.loc 1 172 0
 433 0000 08209FE5 		ldr	r2, .L28
 434 0004 08309FE5 		ldr	r3, .L28+4
 435 0008 782A83E5 		str	r2, [r3, #2680]
 173:layer1/prim_tx_nb.c **** }
 436              		.loc 1 173 0
 437 000c 1EFF2FE1 		bx	lr
 438              	.L29:
 439              		.align	2
 440              	.L28:
 441 0010 00000000 		.word	l1a_tx_nb_compl
 442 0014 00000000 		.word	l1s
 443              		.cfi_endproc
 444              	.LFE63:
 446              		.section	.ctors,"aw",%progbits
 447              		.align	2
 448 0000 00000000 		.word	prim_tx_nb_init
 449              		.global	nb_sched_set_ul
 450              		.section	.rodata
 451              		.align	2
 454              	nb_sched_set_ul:
 455 0000 00000000 		.word	l1s_tx_cmd
 456 0004 02       		.byte	2
 457 0005 00       		.byte	0
 458 0006 0000     		.space	2
 459 0008 0300     		.short	3
 460 000a 0300     		.short	3
 461 000c 00000000 		.word	0
 462 0010 00       		.byte	0
 463 0011 00       		.byte	0
 464 0012 00000000 		.space	6
 464      0000
 465 0018 00000000 		.word	l1s_tx_cmd
 466 001c 02       		.byte	2
 467 001d 01       		.byte	1
 468 001e 0000     		.space	2
 469 0020 0300     		.short	3
 470 0022 0300     		.short	3
 471 0024 00000000 		.word	0
 472 0028 00       		.byte	0
 473 0029 00       		.byte	0
 474 002a 00000000 		.space	6
 474      0000
 475 0030 00000000 		.word	l1s_tx_resp
 476 0034 02       		.byte	2
 477 0035 00       		.byte	0
 478 0036 0000     		.space	2
 479 0038 FCFF     		.short	-4
 480 003a 0000     		.short	0
 481 003c 00000000 		.word	l1s_tx_cmd
 482 0040 02       		.byte	2
 483 0041 02       		.byte	2
 484 0042 0000     		.space	2
 485 0044 0300     		.short	3
 486 0046 0300     		.short	3
 487 0048 00000000 		.word	0
 488 004c 00       		.byte	0
 489 004d 00       		.byte	0
 490 004e 00000000 		.space	6
 490      0000
 491 0054 00000000 		.word	l1s_tx_resp
 492 0058 02       		.byte	2
 493 0059 01       		.byte	1
 494 005a 0000     		.space	2
 495 005c FCFF     		.short	-4
 496 005e 0000     		.short	0
 497 0060 00000000 		.word	l1s_tx_cmd
 498 0064 02       		.byte	2
 499 0065 03       		.byte	3
 500 0066 0000     		.space	2
 501 0068 0300     		.short	3
 502 006a 0300     		.short	3
 503 006c 00000000 		.word	0
 504 0070 00       		.byte	0
 505 0071 00       		.byte	0
 506 0072 00000000 		.space	6
 506      0000
 507 0078 00000000 		.word	l1s_tx_resp
 508 007c 02       		.byte	2
 509 007d 02       		.byte	2
 510 007e 0000     		.space	2
 511 0080 FCFF     		.short	-4
 512 0082 0000     		.short	0
 513 0084 00000000 		.word	0
 514 0088 00       		.byte	0
 515 0089 00       		.byte	0
 516 008a 00000000 		.space	6
 516      0000
 517 0090 00000000 		.word	l1s_tx_resp
 518 0094 02       		.byte	2
 519 0095 03       		.byte	3
 520 0096 0000     		.space	2
 521 0098 FCFF     		.short	-4
 522 009a 0000     		.short	0
 523 009c 00000000 		.word	0
 524 00a0 00       		.byte	0
 525 00a1 00       		.byte	0
 526 00a2 00000000 		.space	6
 526      0000
 527 00a8 00000000 		.word	tdma_end_set
 528 00ac 00       		.byte	0
 529 00ad 00       		.byte	0
 530 00ae 00000000 		.space	6
 530      0000
 531              		.section	.rodata.str1.1,"aMS",%progbits,1
 532              	.LC0:
 533 0000 53746172 		.ascii	"Starting TX %d\012\000"
 533      74696E67 
 533      20545820 
 533      25640A00 
 534              		.bss
 535              		.align	2
 536              		.set	.LANCHOR0,. + 0
 539              	last_txnb_fn:
 540 0000 00000000 		.space	4
 541              		.text
 542              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prim_tx_nb.c
     /tmp/ccENpnxw.s:12     .text.l1s_tx_resp:0000000000000000 $a
     /tmp/ccENpnxw.s:14     .text.l1s_tx_resp:0000000000000000 l1s_tx_resp
     /tmp/ccENpnxw.s:56     .text.l1s_tx_resp:0000000000000040 $d
     /tmp/ccENpnxw.s:63     .text.l1s_tx_cmd:0000000000000000 $a
     /tmp/ccENpnxw.s:65     .text.l1s_tx_cmd:0000000000000000 l1s_tx_cmd
     /tmp/ccENpnxw.s:232    .text.l1s_tx_cmd:000000000000013c $d
     /tmp/ccENpnxw.s:240    .text.l1a_tx_nb_compl:0000000000000000 $a
     /tmp/ccENpnxw.s:242    .text.l1a_tx_nb_compl:0000000000000000 l1a_tx_nb_compl
     /tmp/ccENpnxw.s:270    .text.l1a_tx_nb_compl:0000000000000024 $d
     /tmp/ccENpnxw.s:275    .text.l1s_tx_test:0000000000000000 $a
     /tmp/ccENpnxw.s:278    .text.l1s_tx_test:0000000000000000 l1s_tx_test
     /tmp/ccENpnxw.s:416    .text.l1s_tx_test:0000000000000168 $d
     /tmp/ccENpnxw.s:423    .text.prim_tx_nb_init:0000000000000000 $a
     /tmp/ccENpnxw.s:425    .text.prim_tx_nb_init:0000000000000000 prim_tx_nb_init
     /tmp/ccENpnxw.s:441    .text.prim_tx_nb_init:0000000000000010 $d
     /tmp/ccENpnxw.s:447    .ctors:0000000000000000 $d
     /tmp/ccENpnxw.s:454    .rodata:0000000000000000 nb_sched_set_ul
     /tmp/ccENpnxw.s:451    .rodata:0000000000000000 $d
     /tmp/ccENpnxw.s:535    .bss:0000000000000000 $d
     /tmp/ccENpnxw.s:539    .bss:0000000000000000 last_txnb_fn
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
l1s_compl_sched
dsp_api
l1s
msgb_dequeue
pu_get_meas_frame
pu_get_idle_frame
dsp_memcpy_to_api
msgb_free
rfch_get_params
l1s_tx_apc_helper
dsp_load_tch_param
dsp_load_tx_task
l1s_tx_win_ctrl
l1_create_l2_msg
l1_queue_for_l2
printf
tdma_schedule
tdma_end_set
