   1              		.file	"afc.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.global	__divsi3
  12              		.section	.text.afc_correct,"ax",%progbits
  13              		.align	2
  14              		.global	afc_correct
  16              	afc_correct:
  17              	.LFB3:
  18              		.file 1 "layer1/afc.c"
   1:layer1/afc.c  **** /* AFC (Automatic Frequency Correction) Implementation */
   2:layer1/afc.c  **** 
   3:layer1/afc.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/afc.c  ****  *
   5:layer1/afc.c  ****  * All Rights Reserved
   6:layer1/afc.c  ****  *
   7:layer1/afc.c  ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/afc.c  ****  * it under the terms of the GNU General Public License as published by
   9:layer1/afc.c  ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/afc.c  ****  * (at your option) any later version.
  11:layer1/afc.c  ****  *
  12:layer1/afc.c  ****  * This program is distributed in the hope that it will be useful,
  13:layer1/afc.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/afc.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/afc.c  ****  * GNU General Public License for more details.
  16:layer1/afc.c  ****  *
  17:layer1/afc.c  ****  * You should have received a copy of the GNU General Public License along
  18:layer1/afc.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/afc.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/afc.c  ****  *
  21:layer1/afc.c  ****  */
  22:layer1/afc.c  **** 
  23:layer1/afc.c  **** #include <stdint.h>
  24:layer1/afc.c  **** #include <stdio.h>
  25:layer1/afc.c  **** 
  26:layer1/afc.c  **** #include <debug.h>
  27:layer1/afc.c  **** #include <osmocom/gsm/gsm_utils.h>
  28:layer1/afc.c  **** 
  29:layer1/afc.c  **** #include <layer1/afc.h>
  30:layer1/afc.c  **** #include <layer1/avg.h>
  31:layer1/afc.c  **** #include <calypso/dsp.h>
  32:layer1/afc.c  **** 
  33:layer1/afc.c  **** #define AFC_INITIAL_DAC_VALUE	-700
  34:layer1/afc.c  **** 
  35:layer1/afc.c  **** /* Over how many TDMA frames do we want to average? (this may change in dedicated mode) */
  36:layer1/afc.c  **** #define AFC_PERIOD		40
  37:layer1/afc.c  **** /* How many of our measurements have to be valid? */
  38:layer1/afc.c  **** #define AFC_MIN_MUN_VALID	8
  39:layer1/afc.c  **** 
  40:layer1/afc.c  **** /* The actual AFC code */
  41:layer1/afc.c  **** 
  42:layer1/afc.c  **** struct afc_state {
  43:layer1/afc.c  **** 	struct running_avg ravg;		/* running average */
  44:layer1/afc.c  **** 	int16_t		dac_value;		/* current DAC output value */
  45:layer1/afc.c  **** 	uint16_t	arfcn;
  46:layer1/afc.c  **** };
  47:layer1/afc.c  **** 
  48:layer1/afc.c  **** static void afc_ravg_output(struct running_avg *ravg, int32_t avg);
  49:layer1/afc.c  **** 
  50:layer1/afc.c  **** static struct afc_state afc_state = {
  51:layer1/afc.c  **** 	.ravg = {
  52:layer1/afc.c  **** 		.outfn = &afc_ravg_output,
  53:layer1/afc.c  **** 		.period = AFC_PERIOD,
  54:layer1/afc.c  **** 		.min_valid = AFC_MIN_MUN_VALID,
  55:layer1/afc.c  **** 	},
  56:layer1/afc.c  **** 	.dac_value = AFC_INITIAL_DAC_VALUE,
  57:layer1/afc.c  **** };
  58:layer1/afc.c  **** 
  59:layer1/afc.c  **** /* The AFC DAC in the ABB has to be configured as follows:
  60:layer1/afc.c  ****  * DAC = 1MHz / 947MHz * FreqErr(Hz) / AFCslop(ppm/LSB)
  61:layer1/afc.c  ****  * where:
  62:layer1/afc.c  ****  *	947 MHz is the center of EGSM
  63:layer1/afc.c  ****  *	AFCslope is coded F1.15, thus a normalization factor of 2^15 applies
  64:layer1/afc.c  ****  */
  65:layer1/afc.c  **** 
  66:layer1/afc.c  **** #define AFC_NORM_FACTOR_GSM	((1<<15) / 947)
  67:layer1/afc.c  **** #define AFC_NORM_FACTOR_DCS	((1<<15) / 1894)
  68:layer1/afc.c  **** 
  69:layer1/afc.c  **** /* we assume 8.769ppb per LSB, equals 0.008769 * 32768 == 287 */
  70:layer1/afc.c  **** //#define AFC_SLOPE		320
  71:layer1/afc.c  **** #define AFC_SLOPE		287
  72:layer1/afc.c  **** 
  73:layer1/afc.c  **** /* The DSP can measure the frequency error in the following ranges:
  74:layer1/afc.c  ****  * 	FB_MODE0:	+/- 20 kHz
  75:layer1/afc.c  ****  *	FB_MODE1:	+/-  4 kHz
  76:layer1/afc.c  ****  *	Sync Burst:	+/-  1 kHz
  77:layer1/afc.c  ****  *	Normal Burst:	+/- 400 Hz
  78:layer1/afc.c  ****  */
  79:layer1/afc.c  **** 
  80:layer1/afc.c  **** /* Update the AFC with a frequency error, bypassing averaging */
  81:layer1/afc.c  **** void afc_correct(int16_t freq_error, uint16_t arfcn)
  82:layer1/afc.c  **** {
  19              		.loc 1 82 0
  20              		.cfi_startproc
  21              		@ args = 0, pretend = 0, frame = 0
  22              		@ frame_needed = 0, uses_anonymous_args = 0
  23              	.LVL0:
  24 0000 0118A0E1 		mov	r1, r1, asl #16
  25              	.LVL1:
  26 0004 0008A0E1 		mov	r0, r0, asl #16
  27              	.LVL2:
  28 0008 10402DE9 		stmfd	sp!, {r4, lr}
  29              	.LCFI0:
  30              		.cfi_def_cfa_offset 8
  31              		.loc 1 82 0
  32 000c 4048A0E1 		mov	r4, r0, asr #16
  33              		.cfi_offset 14, -4
  34              		.cfi_offset 4, -8
  83:layer1/afc.c  **** 	int32_t afc_norm_factor;
  84:layer1/afc.c  **** 	int16_t delta;
  85:layer1/afc.c  **** 
  86:layer1/afc.c  **** 	switch (gsm_arfcn2band(arfcn)) {
  35              		.loc 1 86 0
  36 0010 2108A0E1 		mov	r0, r1, lsr #16
  37 0014 FEFFFFEB 		bl	gsm_arfcn2band
  38 0018 010040E2 		sub	r0, r0, #1
  39 001c 010050E3 		cmp	r0, #1
  40 0020 2200A093 		movls	r0, #34
  41 0024 1100A083 		movhi	r0, #17
  42              	.LVL3:
  87:layer1/afc.c  **** 	case GSM_BAND_900:
  88:layer1/afc.c  **** 	case GSM_BAND_850:
  89:layer1/afc.c  **** 		afc_norm_factor = AFC_NORM_FACTOR_GSM;
  90:layer1/afc.c  **** 		break;
  91:layer1/afc.c  **** 	default:
  92:layer1/afc.c  **** 		afc_norm_factor = AFC_NORM_FACTOR_DCS;
  93:layer1/afc.c  **** 	}
  94:layer1/afc.c  **** 
  95:layer1/afc.c  **** 	delta = (int16_t) ((afc_norm_factor * (int32_t)freq_error) / AFC_SLOPE);
  43              		.loc 1 95 0
  44 0028 940000E0 		mul	r0, r4, r0
  45              	.LVL4:
  46 002c 40109FE5 		ldr	r1, .L7
  47 0030 FEFFFFEB 		bl	__divsi3
  96:layer1/afc.c  **** 	printd("afc_correct(error=%dHz, arfcn=%u): delta=%d, afc_dac(old=%d,new=%d)\n",
  97:layer1/afc.c  **** 		freq_error, arfcn, delta, afc_state.dac_value, afc_state.dac_value+delta);
  98:layer1/afc.c  **** 	afc_state.dac_value += delta;
  48              		.loc 1 98 0
  49 0034 3C309FE5 		ldr	r3, .L7+4
  50 0038 B421D3E1 		ldrh	r2, [r3, #20]
  51 003c 022080E0 		add	r2, r0, r2
  52 0040 0228A0E1 		mov	r2, r2, asl #16
  53 0044 2228A0E1 		mov	r2, r2, lsr #16
  54 0048 B421C3E1 		strh	r2, [r3, #20]	@ movhi
  99:layer1/afc.c  **** 
 100:layer1/afc.c  **** 	/* The AFC DAC has only 13 bits */
 101:layer1/afc.c  **** 	if (afc_state.dac_value > 4095)
  55              		.loc 1 101 0
  56 004c 0228A0E1 		mov	r2, r2, asl #16
  57 0050 4228A0E1 		mov	r2, r2, asr #16
  58 0054 010A52E3 		cmp	r2, #4096
 102:layer1/afc.c  **** 		afc_state.dac_value = 4095;
  59              		.loc 1 102 0
  60 0058 0F2AE0A3 		mvnge	r2, #61440
 101:layer1/afc.c  **** 	if (afc_state.dac_value > 4095)
  61              		.loc 1 101 0
  62 005c 020000AA 		bge	.L6
 103:layer1/afc.c  **** 	else if (afc_state.dac_value < -4096)
  63              		.loc 1 103 0
  64 0060 010A72E3 		cmn	r2, #4096
  65 0064 1080BDA8 		ldmgefd	sp!, {r4, pc}
 104:layer1/afc.c  **** 		afc_state.dac_value = -4096;
  66              		.loc 1 104 0
  67 0068 0F2AA0E3 		mov	r2, #61440
  68              	.L6:
  69 006c B421C3E1 		strh	r2, [r3, #20]	@ movhi
  70 0070 1080BDE8 		ldmfd	sp!, {r4, pc}
  71              	.L8:
  72              		.align	2
  73              	.L7:
  74 0074 1F010000 		.word	287
  75 0078 00000000 		.word	.LANCHOR0
  76              		.cfi_endproc
  77              	.LFE3:
  79              		.section	.text.afc_ravg_output,"ax",%progbits
  80              		.align	2
  82              	afc_ravg_output:
  83              	.LFB6:
 105:layer1/afc.c  **** }
 106:layer1/afc.c  **** 
 107:layer1/afc.c  **** void afc_reset(void)
 108:layer1/afc.c  **** {
 109:layer1/afc.c  **** 	afc_state.dac_value = AFC_INITIAL_DAC_VALUE;
 110:layer1/afc.c  **** }
 111:layer1/afc.c  **** 
 112:layer1/afc.c  **** void afc_input(int32_t freq_error, uint16_t arfcn, int valid)
 113:layer1/afc.c  **** {
 114:layer1/afc.c  **** 	afc_state.arfcn = arfcn;
 115:layer1/afc.c  **** 	runavg_input(&afc_state.ravg, freq_error, valid);
 116:layer1/afc.c  **** 	runavg_check_output(&afc_state.ravg);
 117:layer1/afc.c  **** }
 118:layer1/afc.c  **** 
 119:layer1/afc.c  **** /* callback function for runavg */
 120:layer1/afc.c  **** static void afc_ravg_output(struct running_avg *ravg, int32_t avg)
 121:layer1/afc.c  **** {
  84              		.loc 1 121 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89              	.LVL5:
 122:layer1/afc.c  **** 	afc_correct(avg, afc_state.arfcn);
  90              		.loc 1 122 0
  91 0000 0C309FE5 		ldr	r3, .L10
  92 0004 0118A0E1 		mov	r1, r1, asl #16
  93              	.LVL6:
  94 0008 4108A0E1 		mov	r0, r1, asr #16
  95              	.LVL7:
  96 000c B611D3E1 		ldrh	r1, [r3, #22]
 123:layer1/afc.c  **** }
  97              		.loc 1 123 0
 122:layer1/afc.c  **** 	afc_correct(avg, afc_state.arfcn);
  98              		.loc 1 122 0
  99 0010 FEFFFFEA 		b	afc_correct
 100              	.L11:
 101              		.align	2
 102              	.L10:
 103 0014 00000000 		.word	.LANCHOR0
 104              		.cfi_endproc
 105              	.LFE6:
 107              		.section	.text.afc_reset,"ax",%progbits
 108              		.align	2
 109              		.global	afc_reset
 111              	afc_reset:
 112              	.LFB4:
 108:layer1/afc.c  **** {
 113              		.loc 1 108 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 109:layer1/afc.c  **** 	afc_state.dac_value = AFC_INITIAL_DAC_VALUE;
 118              		.loc 1 109 0
 119 0000 08209FE5 		ldr	r2, .L13
 120 0004 08309FE5 		ldr	r3, .L13+4
 121 0008 B421C3E1 		strh	r2, [r3, #20]	@ movhi
 110:layer1/afc.c  **** }
 122              		.loc 1 110 0
 123 000c 1EFF2FE1 		bx	lr
 124              	.L14:
 125              		.align	2
 126              	.L13:
 127 0010 44FDFFFF 		.word	-700
 128 0014 00000000 		.word	.LANCHOR0
 129              		.cfi_endproc
 130              	.LFE4:
 132              		.section	.text.afc_input,"ax",%progbits
 133              		.align	2
 134              		.global	afc_input
 136              	afc_input:
 137              	.LFB5:
 113:layer1/afc.c  **** {
 138              		.loc 1 113 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              	.LVL8:
 143 0000 10402DE9 		stmfd	sp!, {r4, lr}
 144              	.LCFI1:
 145              		.cfi_def_cfa_offset 8
 114:layer1/afc.c  **** 	afc_state.arfcn = arfcn;
 146              		.loc 1 114 0
 147 0004 1C409FE5 		ldr	r4, .L16
 148              		.cfi_offset 14, -4
 149              		.cfi_offset 4, -8
 113:layer1/afc.c  **** {
 150              		.loc 1 113 0
 151 0008 0030A0E1 		mov	r3, r0
 114:layer1/afc.c  **** 	afc_state.arfcn = arfcn;
 152              		.loc 1 114 0
 153 000c B611C4E1 		strh	r1, [r4, #22]	@ movhi
 115:layer1/afc.c  **** 	runavg_input(&afc_state.ravg, freq_error, valid);
 154              		.loc 1 115 0
 155 0010 0400A0E1 		mov	r0, r4
 156              	.LVL9:
 157 0014 0310A0E1 		mov	r1, r3
 158              	.LVL10:
 159 0018 FEFFFFEB 		bl	runavg_input
 160              	.LVL11:
 116:layer1/afc.c  **** 	runavg_check_output(&afc_state.ravg);
 161              		.loc 1 116 0
 162 001c 0400A0E1 		mov	r0, r4
 117:layer1/afc.c  **** }
 163              		.loc 1 117 0
 164 0020 1040BDE8 		ldmfd	sp!, {r4, lr}
 116:layer1/afc.c  **** 	runavg_check_output(&afc_state.ravg);
 165              		.loc 1 116 0
 166 0024 FEFFFFEA 		b	runavg_check_output
 167              	.L17:
 168              		.align	2
 169              	.L16:
 170 0028 00000000 		.word	.LANCHOR0
 171              		.cfi_endproc
 172              	.LFE5:
 174              		.section	.text.afc_load_dsp,"ax",%progbits
 175              		.align	2
 176              		.global	afc_load_dsp
 178              	afc_load_dsp:
 179              	.LFB7:
 124:layer1/afc.c  **** 
 125:layer1/afc.c  **** /* Update DSP with new AFC DAC value to be used for next TDMA frame */
 126:layer1/afc.c  **** void afc_load_dsp(void)
 127:layer1/afc.c  **** {
 180              		.loc 1 127 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 128:layer1/afc.c  **** 	dsp_api.db_w->d_afc = afc_state.dac_value;
 185              		.loc 1 128 0
 186 0000 1C309FE5 		ldr	r3, .L19
 187 0004 1C209FE5 		ldr	r2, .L19+4
 188 0008 083093E5 		ldr	r3, [r3, #8]
 189 000c B421D2E1 		ldrh	r2, [r2, #20]
 190 0010 BE21C3E1 		strh	r2, [r3, #30]	@ movhi
 129:layer1/afc.c  **** 	dsp_api.db_w->d_ctrl_abb |= (1 << B_AFC);
 191              		.loc 1 129 0
 192 0014 B621D3E1 		ldrh	r2, [r3, #22]
 193 0018 102082E3 		orr	r2, r2, #16
 194 001c B621C3E1 		strh	r2, [r3, #22]	@ movhi
 130:layer1/afc.c  **** }
 195              		.loc 1 130 0
 196 0020 1EFF2FE1 		bx	lr
 197              	.L20:
 198              		.align	2
 199              	.L19:
 200 0024 00000000 		.word	dsp_api
 201 0028 00000000 		.word	.LANCHOR0
 202              		.cfi_endproc
 203              	.LFE7:
 205              		.data
 206              		.align	2
 207              		.set	.LANCHOR0,. + 0
 210              	afc_state:
 211 0000 2800     		.short	40
 212 0002 0800     		.short	8
 213 0004 00000000 		.space	8
 213      00000000 
 214 000c 00000000 		.word	afc_ravg_output
 215 0010 00000000 		.space	4
 216 0014 44FD     		.short	-700
 217 0016 0000     		.space	2
 218              		.text
 219              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 afc.c
     /tmp/ccth3hYb.s:13     .text.afc_correct:0000000000000000 $a
     /tmp/ccth3hYb.s:16     .text.afc_correct:0000000000000000 afc_correct
     /tmp/ccth3hYb.s:74     .text.afc_correct:0000000000000074 $d
     /tmp/ccth3hYb.s:80     .text.afc_ravg_output:0000000000000000 $a
     /tmp/ccth3hYb.s:82     .text.afc_ravg_output:0000000000000000 afc_ravg_output
     /tmp/ccth3hYb.s:103    .text.afc_ravg_output:0000000000000014 $d
     /tmp/ccth3hYb.s:108    .text.afc_reset:0000000000000000 $a
     /tmp/ccth3hYb.s:111    .text.afc_reset:0000000000000000 afc_reset
     /tmp/ccth3hYb.s:127    .text.afc_reset:0000000000000010 $d
     /tmp/ccth3hYb.s:133    .text.afc_input:0000000000000000 $a
     /tmp/ccth3hYb.s:136    .text.afc_input:0000000000000000 afc_input
     /tmp/ccth3hYb.s:170    .text.afc_input:0000000000000028 $d
     /tmp/ccth3hYb.s:175    .text.afc_load_dsp:0000000000000000 $a
     /tmp/ccth3hYb.s:178    .text.afc_load_dsp:0000000000000000 afc_load_dsp
     /tmp/ccth3hYb.s:200    .text.afc_load_dsp:0000000000000024 $d
     /tmp/ccth3hYb.s:206    .data:0000000000000000 $d
     /tmp/ccth3hYb.s:210    .data:0000000000000000 afc_state
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__divsi3
gsm_arfcn2band
runavg_input
runavg_check_output
dsp_api
