   1              		.file	"toa.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.toa_ravg_output,"ax",%progbits
  12              		.align	2
  14              	toa_ravg_output:
  15              	.LFB18:
  16              		.file 1 "layer1/toa.c"
   1:layer1/toa.c  **** /* AFC (Automatic Frequency Correction) Implementation */
   2:layer1/toa.c  **** 
   3:layer1/toa.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/toa.c  ****  * (C) 2011 by Andreas Eversberg <jolly@eversberg.eu>
   5:layer1/toa.c  ****  *
   6:layer1/toa.c  ****  * All Rights Reserved
   7:layer1/toa.c  ****  *
   8:layer1/toa.c  ****  * This program is free software; you can redistribute it and/or modify
   9:layer1/toa.c  ****  * it under the terms of the GNU General Public License as published by
  10:layer1/toa.c  ****  * the Free Software Foundation; either version 2 of the License, or
  11:layer1/toa.c  ****  * (at your option) any later version.
  12:layer1/toa.c  ****  *
  13:layer1/toa.c  ****  * This program is distributed in the hope that it will be useful,
  14:layer1/toa.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:layer1/toa.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:layer1/toa.c  ****  * GNU General Public License for more details.
  17:layer1/toa.c  ****  *
  18:layer1/toa.c  ****  * You should have received a copy of the GNU General Public License along
  19:layer1/toa.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:layer1/toa.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:layer1/toa.c  ****  *
  22:layer1/toa.c  ****  */
  23:layer1/toa.c  **** 
  24:layer1/toa.c  **** #include <stdint.h>
  25:layer1/toa.c  **** #include <stdio.h>
  26:layer1/toa.c  **** 
  27:layer1/toa.c  **** #include <debug.h>
  28:layer1/toa.c  **** #include <osmocom/gsm/gsm_utils.h>
  29:layer1/toa.c  **** 
  30:layer1/toa.c  **** #include <layer1/toa.h>
  31:layer1/toa.c  **** #include <layer1/avg.h>
  32:layer1/toa.c  **** #include <layer1/sync.h>
  33:layer1/toa.c  **** 
  34:layer1/toa.c  **** /* Over how many TDMA frames do we want to average? */
  35:layer1/toa.c  **** #define TOA_PERIOD		250
  36:layer1/toa.c  **** /* How many of our measurements have to be valid? */
  37:layer1/toa.c  **** #define TOA_MIN_MUN_VALID	125
  38:layer1/toa.c  **** 
  39:layer1/toa.c  **** // FIXME:
  40:layer1/toa.c  **** #define TOA_SNR_THRESHOLD       2560    /* 2.5 dB in fx6.10 */
  41:layer1/toa.c  **** 
  42:layer1/toa.c  **** struct toa_state {
  43:layer1/toa.c  **** 	struct running_avg ravg;		/* running average */
  44:layer1/toa.c  **** };
  45:layer1/toa.c  **** 
  46:layer1/toa.c  **** 
  47:layer1/toa.c  **** static void toa_ravg_output(struct running_avg *ravg, int32_t avg);
  48:layer1/toa.c  **** 
  49:layer1/toa.c  **** static struct toa_state toa_state = {
  50:layer1/toa.c  **** 	.ravg = {
  51:layer1/toa.c  **** 		.outfn = &toa_ravg_output,
  52:layer1/toa.c  **** 		.period = TOA_PERIOD,
  53:layer1/toa.c  **** 		.min_valid = TOA_MIN_MUN_VALID,
  54:layer1/toa.c  **** 	},
  55:layer1/toa.c  **** };
  56:layer1/toa.c  **** 
  57:layer1/toa.c  **** void toa_input(int32_t offset, uint32_t snr)
  58:layer1/toa.c  **** {
  59:layer1/toa.c  **** 	int valid = 1;
  60:layer1/toa.c  **** 
  61:layer1/toa.c  **** 	if (snr < TOA_SNR_THRESHOLD || offset < 0 || offset >31)
  62:layer1/toa.c  **** 		valid = 0;
  63:layer1/toa.c  **** 	runavg_input(&toa_state.ravg, offset, valid);
  64:layer1/toa.c  **** 	runavg_check_output(&toa_state.ravg);
  65:layer1/toa.c  **** }
  66:layer1/toa.c  **** 
  67:layer1/toa.c  **** void toa_reset(void)
  68:layer1/toa.c  **** {
  69:layer1/toa.c  **** 	toa_state.ravg.num_samples = toa_state.ravg.num_samples_valid = 0;
  70:layer1/toa.c  **** 	toa_state.ravg.acc_val = 0;
  71:layer1/toa.c  **** }
  72:layer1/toa.c  **** 
  73:layer1/toa.c  **** /* callback function for runavg */
  74:layer1/toa.c  **** static void toa_ravg_output(struct running_avg *ravg, int32_t avg)
  75:layer1/toa.c  **** {
  17              		.loc 1 75 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  76:layer1/toa.c  **** 	if (avg != 16) {
  22              		.loc 1 76 0
  23 0000 100051E3 		cmp	r1, #16
  75:layer1/toa.c  **** {
  24              		.loc 1 75 0
  25 0004 10402DE9 		stmfd	sp!, {r4, lr}
  26              	.LCFI0:
  27              		.cfi_def_cfa_offset 8
  75:layer1/toa.c  **** {
  28              		.loc 1 75 0
  29 0008 0140A0E1 		mov	r4, r1
  30              		.cfi_offset 14, -4
  31              		.cfi_offset 4, -8
  32              		.loc 1 76 0
  33 000c 1080BD08 		ldmeqfd	sp!, {r4, pc}
  77:layer1/toa.c  **** 		printf("TOA AVG is not 16 qbits, correcting (got %ld)\n", avg);
  34              		.loc 1 77 0
  35 0010 10009FE5 		ldr	r0, .L3
  36              	.LVL1:
  37 0014 FEFFFFEB 		bl	printf
  38              	.LVL2:
  78:layer1/toa.c  **** 		l1s.tpu_offset_correction = avg - 16;
  39              		.loc 1 78 0
  40 0018 0C309FE5 		ldr	r3, .L3+4
  41 001c 104044E2 		sub	r4, r4, #16
  42              	.LVL3:
  43 0020 444A83E5 		str	r4, [r3, #2628]
  44 0024 1080BDE8 		ldmfd	sp!, {r4, pc}
  45              	.L4:
  46              		.align	2
  47              	.L3:
  48 0028 00000000 		.word	.LC0
  49 002c 00000000 		.word	l1s
  50              		.cfi_endproc
  51              	.LFE18:
  53              		.section	.text.toa_input,"ax",%progbits
  54              		.align	2
  55              		.global	toa_input
  57              	toa_input:
  58              	.LFB16:
  58:layer1/toa.c  **** {
  59              		.loc 1 58 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              	.LVL4:
  61:layer1/toa.c  **** 	if (snr < TOA_SNR_THRESHOLD || offset < 0 || offset >31)
  64              		.loc 1 61 0
  65 0000 0A0C51E3 		cmp	r1, #2560
  66 0004 0010A023 		movcs	r1, #0
  67 0008 0110A033 		movcc	r1, #1
  68              	.LVL5:
  69 000c A01F91E1 		orrs	r1, r1, r0, lsr #31
  58:layer1/toa.c  **** {
  70              		.loc 1 58 0
  71 0010 04E02DE5 		str	lr, [sp, #-4]!
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 4
  58:layer1/toa.c  **** {
  74              		.loc 1 58 0
  75 0014 0030A0E1 		mov	r3, r0
  62:layer1/toa.c  **** 		valid = 0;
  76              		.loc 1 62 0
  77 0018 0020A013 		movne	r2, #0
  61:layer1/toa.c  **** 	if (snr < TOA_SNR_THRESHOLD || offset < 0 || offset >31)
  78              		.loc 1 61 0
  79 001c 0200001A 		bne	.L6
  80              		.cfi_offset 14, -4
  59:layer1/toa.c  **** 	int valid = 1;
  81              		.loc 1 59 0 discriminator 1
  82 0020 1F0050E3 		cmp	r0, #31
  83 0024 0020A0C3 		movgt	r2, #0
  84 0028 0120A0D3 		movle	r2, #1
  85              	.L6:
  86              	.LVL6:
  63:layer1/toa.c  **** 	runavg_input(&toa_state.ravg, offset, valid);
  87              		.loc 1 63 0
  88 002c 10009FE5 		ldr	r0, .L8
  89              	.LVL7:
  90 0030 0310A0E1 		mov	r1, r3
  91 0034 FEFFFFEB 		bl	runavg_input
  92              	.LVL8:
  64:layer1/toa.c  **** 	runavg_check_output(&toa_state.ravg);
  93              		.loc 1 64 0
  94 0038 04009FE5 		ldr	r0, .L8
  65:layer1/toa.c  **** }
  95              		.loc 1 65 0
  96 003c 04E09DE4 		ldr	lr, [sp], #4
  64:layer1/toa.c  **** 	runavg_check_output(&toa_state.ravg);
  97              		.loc 1 64 0
  98 0040 FEFFFFEA 		b	runavg_check_output
  99              	.L9:
 100              		.align	2
 101              	.L8:
 102 0044 00000000 		.word	.LANCHOR0
 103              		.cfi_endproc
 104              	.LFE16:
 106              		.section	.text.toa_reset,"ax",%progbits
 107              		.align	2
 108              		.global	toa_reset
 110              	toa_reset:
 111              	.LFB17:
  68:layer1/toa.c  **** {
 112              		.loc 1 68 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  69:layer1/toa.c  **** 	toa_state.ravg.num_samples = toa_state.ravg.num_samples_valid = 0;
 117              		.loc 1 69 0
 118 0000 10309FE5 		ldr	r3, .L11
 119 0004 0020A0E3 		mov	r2, #0
 120 0008 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 121 000c B820C3E1 		strh	r2, [r3, #8]	@ movhi
  70:layer1/toa.c  **** 	toa_state.ravg.acc_val = 0;
 122              		.loc 1 70 0
 123 0010 042083E5 		str	r2, [r3, #4]
  71:layer1/toa.c  **** }
 124              		.loc 1 71 0
 125 0014 1EFF2FE1 		bx	lr
 126              	.L12:
 127              		.align	2
 128              	.L11:
 129 0018 00000000 		.word	.LANCHOR0
 130              		.cfi_endproc
 131              	.LFE17:
 133              		.section	.rodata.str1.1,"aMS",%progbits,1
 134              	.LC0:
 135 0000 544F4120 		.ascii	"TOA AVG is not 16 qbits, correcting (got %ld)\012\000"
 135      41564720 
 135      6973206E 
 135      6F742031 
 135      36207162 
 136              		.data
 137              		.align	2
 138              		.set	.LANCHOR0,. + 0
 141              	toa_state:
 142 0000 FA00     		.short	250
 143 0002 7D00     		.short	125
 144 0004 00000000 		.space	8
 144      00000000 
 145 000c 00000000 		.word	toa_ravg_output
 146 0010 00000000 		.space	4
 147              		.text
 148              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 toa.c
     /tmp/ccTpcz2h.s:12     .text.toa_ravg_output:0000000000000000 $a
     /tmp/ccTpcz2h.s:14     .text.toa_ravg_output:0000000000000000 toa_ravg_output
     /tmp/ccTpcz2h.s:48     .text.toa_ravg_output:0000000000000028 $d
     /tmp/ccTpcz2h.s:54     .text.toa_input:0000000000000000 $a
     /tmp/ccTpcz2h.s:57     .text.toa_input:0000000000000000 toa_input
     /tmp/ccTpcz2h.s:102    .text.toa_input:0000000000000044 $d
     /tmp/ccTpcz2h.s:107    .text.toa_reset:0000000000000000 $a
     /tmp/ccTpcz2h.s:110    .text.toa_reset:0000000000000000 toa_reset
     /tmp/ccTpcz2h.s:129    .text.toa_reset:0000000000000018 $d
     /tmp/ccTpcz2h.s:137    .data:0000000000000000 $d
     /tmp/ccTpcz2h.s:141    .data:0000000000000000 toa_state
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
printf
l1s
runavg_input
runavg_check_output
