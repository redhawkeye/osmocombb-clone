   1              		.file	"uwire.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text._uwire_wait,"ax",%progbits
  12              		.align	2
  14              	_uwire_wait:
  15              	.LFB0:
  16              		.file 1 "calypso/uwire.c"
   1:calypso/uwire.c **** /* Driver for uWire Master Controller inside TI Calypso */
   2:calypso/uwire.c **** 
   3:calypso/uwire.c **** /* (C) 2010 by Sylvain Munaut <tnt@246tNt.com>
   4:calypso/uwire.c ****  *
   5:calypso/uwire.c ****  * All Rights Reserved
   6:calypso/uwire.c ****  *
   7:calypso/uwire.c ****  * This program is free software; you can redistribute it and/or modify
   8:calypso/uwire.c ****  * it under the terms of the GNU General Public License as published by
   9:calypso/uwire.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:calypso/uwire.c ****  * (at your option) any later version.
  11:calypso/uwire.c ****  *
  12:calypso/uwire.c ****  * This program is distributed in the hope that it will be useful,
  13:calypso/uwire.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:calypso/uwire.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:calypso/uwire.c ****  * GNU General Public License for more details.
  16:calypso/uwire.c ****  *
  17:calypso/uwire.c ****  * You should have received a copy of the GNU General Public License along
  18:calypso/uwire.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:calypso/uwire.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:calypso/uwire.c ****  *
  21:calypso/uwire.c ****  */
  22:calypso/uwire.c **** 
  23:calypso/uwire.c **** #include <stdint.h>
  24:calypso/uwire.c **** #include <stdio.h>
  25:calypso/uwire.c **** 
  26:calypso/uwire.c **** //#define DEBUG
  27:calypso/uwire.c **** #include <debug.h>
  28:calypso/uwire.c **** 
  29:calypso/uwire.c **** #include <memory.h>
  30:calypso/uwire.c **** #include <uwire.h>
  31:calypso/uwire.c **** #include <delay.h>
  32:calypso/uwire.c **** 
  33:calypso/uwire.c **** #define BASE_ADDR_UWIRE	0xfffe4000
  34:calypso/uwire.c **** #define UWIRE_REG(n)	(BASE_ADDR_UWIRE+(n))
  35:calypso/uwire.c **** 
  36:calypso/uwire.c **** enum uwire_regs {
  37:calypso/uwire.c **** 	REG_DATA	= 0x00,
  38:calypso/uwire.c **** 	REG_CSR		= 0x02,
  39:calypso/uwire.c **** 	REG_SR1		= 0x04,
  40:calypso/uwire.c **** 	REG_SR2		= 0x06,
  41:calypso/uwire.c **** 	REG_SR3		= 0x08,
  42:calypso/uwire.c **** };
  43:calypso/uwire.c **** 
  44:calypso/uwire.c **** #define UWIRE_CSR_BITS_RD(n)	(((n) & 0x1f) << 0)
  45:calypso/uwire.c **** #define UWIRE_CSR_BITS_WR(n)	(((n) & 0x1f) << 5)
  46:calypso/uwire.c **** #define UWIRE_CSR_IDX(n)	(((n) & 3) << 10)
  47:calypso/uwire.c **** #define UWIRE_CSR_CS_CMD	(1 << 12)
  48:calypso/uwire.c **** #define UWIRE_CSR_START		(1 << 13)
  49:calypso/uwire.c **** #define UWIRE_CSR_CSRB		(1 << 14)
  50:calypso/uwire.c **** #define UWIRE_CSR_RDRB		(1 << 15)
  51:calypso/uwire.c **** 
  52:calypso/uwire.c **** #define UWIRE_CSn_EDGE_RD	(1 << 0)	/* 1=falling 0=rising */
  53:calypso/uwire.c **** #define UWIRE_CSn_EDGE_WR	(1 << 1)	/* 1=falling 0=rising */
  54:calypso/uwire.c **** #define UWIRE_CSn_CS_LVL	(1 << 2)
  55:calypso/uwire.c **** #define UWIRE_CSn_FRQ_DIV2	(0 << 3)
  56:calypso/uwire.c **** #define UWIRE_CSn_FRQ_DIV4	(1 << 3)
  57:calypso/uwire.c **** #define UWIRE_CSn_FRQ_DIV8	(2 << 3)
  58:calypso/uwire.c **** #define UWIRE_CSn_CKH
  59:calypso/uwire.c **** 
  60:calypso/uwire.c **** #define UWIRE_CSn_SHIFT(n)	(((n) & 1) ? 6 : 0)
  61:calypso/uwire.c **** #define UWIRE_CSn_REG(n)	(((n) & 2) ? REG_SR2 : REG_SR1)
  62:calypso/uwire.c **** 
  63:calypso/uwire.c **** #define UWIRE_SR3_CLK_EN	(1 << 0)
  64:calypso/uwire.c **** #define UWIRE_SR3_CLK_DIV2	(0 << 1)
  65:calypso/uwire.c **** #define UWIRE_SR3_CLK_DIV4	(1 << 1)
  66:calypso/uwire.c **** #define UWIRE_SR3_CLK_DIV7	(2 << 1)
  67:calypso/uwire.c **** #define UWIRE_SR3_CLK_DIV10	(3 << 1)
  68:calypso/uwire.c **** 
  69:calypso/uwire.c **** static inline void _uwire_wait(int mask, int val)
  70:calypso/uwire.c **** {
  17              		.loc 1 70 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
  71:calypso/uwire.c **** 	while ((readw(UWIRE_REG(REG_CSR)) & mask) != val);
  23              		.loc 1 71 0
  24 0000 10309FE5 		ldr	r3, .L4
  25              	.L2:
  26              		.loc 1 71 0 is_stmt 0 discriminator 1
  27 0004 BD2F53E1 		ldrh	r2, [r3, #-253]
  28 0008 022000E0 		and	r2, r0, r2
  29 000c 010052E1 		cmp	r2, r1
  30 0010 FBFFFF1A 		bne	.L2
  72:calypso/uwire.c **** }
  31              		.loc 1 72 0 is_stmt 1
  32 0014 1EFF2FE1 		bx	lr
  33              	.L5:
  34              		.align	2
  35              	.L4:
  36 0018 FF40FEFF 		.word	-114433
  37              		.cfi_endproc
  38              	.LFE0:
  40              		.section	.text.uwire_init,"ax",%progbits
  41              		.align	2
  42              		.global	uwire_init
  44              	uwire_init:
  45              	.LFB1:
  73:calypso/uwire.c **** 
  74:calypso/uwire.c **** void uwire_init(void)
  75:calypso/uwire.c **** {
  46              		.loc 1 75 0
  47              		.cfi_startproc
  48              		@ args = 0, pretend = 0, frame = 0
  49              		@ frame_needed = 0, uses_anonymous_args = 0
  50              		@ link register save eliminated.
  76:calypso/uwire.c **** 	writew(UWIRE_SR3_CLK_EN | UWIRE_SR3_CLK_DIV2, UWIRE_REG(REG_SR3));
  51              		.loc 1 76 0
  52 0000 20309FE5 		ldr	r3, .L7
  53 0004 0120A0E3 		mov	r2, #1	@ movhi
  54 0008 B72F43E1 		strh	r2, [r3, #-247]	@ movhi
  77:calypso/uwire.c **** 	/* FIXME only init CS0 for now */
  78:calypso/uwire.c **** 	writew(((UWIRE_CSn_CS_LVL | UWIRE_CSn_FRQ_DIV2) << UWIRE_CSn_SHIFT(0)),
  55              		.loc 1 78 0
  56 000c 0420A0E3 		mov	r2, #4	@ movhi
  57 0010 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
  79:calypso/uwire.c **** 		UWIRE_REG(UWIRE_CSn_REG(0)));
  80:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | UWIRE_CSR_CS_CMD, UWIRE_REG(REG_CSR));
  81:calypso/uwire.c **** 	_uwire_wait(UWIRE_CSR_CSRB, 0);
  58              		.loc 1 81 0
  59 0014 0109A0E3 		mov	r0, #16384
  80:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | UWIRE_CSR_CS_CMD, UWIRE_REG(REG_CSR));
  60              		.loc 1 80 0
  61 0018 012AA0E3 		mov	r2, #4096	@ movhi
  62              		.loc 1 81 0
  63 001c 0010A0E3 		mov	r1, #0
  80:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | UWIRE_CSR_CS_CMD, UWIRE_REG(REG_CSR));
  64              		.loc 1 80 0
  65 0020 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
  82:calypso/uwire.c **** }
  66              		.loc 1 82 0
  81:calypso/uwire.c **** 	_uwire_wait(UWIRE_CSR_CSRB, 0);
  67              		.loc 1 81 0
  68 0024 FEFFFFEA 		b	_uwire_wait
  69              	.L8:
  70              		.align	2
  71              	.L7:
  72 0028 FF40FEFF 		.word	-114433
  73              		.cfi_endproc
  74              	.LFE1:
  76              		.section	.text.uwire_xfer,"ax",%progbits
  77              		.align	2
  78              		.global	uwire_xfer
  80              	uwire_xfer:
  81              	.LFB2:
  83:calypso/uwire.c **** 
  84:calypso/uwire.c **** int uwire_xfer(int cs, int bitlen, const void *dout, void *din)
  85:calypso/uwire.c **** {
  82              		.loc 1 85 0
  83              		.cfi_startproc
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
  86              	.LVL1:
  87 0000 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
  88              	.LCFI0:
  89              		.cfi_def_cfa_offset 16
  90              		.loc 1 85 0
  91 0004 0360A0E1 		mov	r6, r3
  92              		.cfi_offset 14, -4
  93              		.cfi_offset 6, -8
  94              		.cfi_offset 5, -12
  95              		.cfi_offset 4, -16
  86:calypso/uwire.c **** 	uint16_t tmp = 0;
  87:calypso/uwire.c **** 
  88:calypso/uwire.c **** 	if (bitlen <= 0 || bitlen > 16)
  96              		.loc 1 88 0
  97 0008 013041E2 		sub	r3, r1, #1
  98              	.LVL2:
  99 000c 0F0053E3 		cmp	r3, #15
  85:calypso/uwire.c **** {
 100              		.loc 1 85 0
 101 0010 0140A0E1 		mov	r4, r1
 102 0014 0250A0E1 		mov	r5, r2
  89:calypso/uwire.c **** 		return -1;
 103              		.loc 1 89 0
 104 0018 0000E083 		mvnhi	r0, #0
 105              	.LVL3:
  88:calypso/uwire.c **** 	if (bitlen <= 0 || bitlen > 16)
 106              		.loc 1 88 0
 107 001c 7080BD88 		ldmhifd	sp!, {r4, r5, r6, pc}
  90:calypso/uwire.c **** 	if (cs < 0 || cs > 4)
 108              		.loc 1 90 0
 109 0020 040050E3 		cmp	r0, #4
 110 0024 2F00008A 		bhi	.L18
  91:calypso/uwire.c **** 		return -1;
  92:calypso/uwire.c **** 
  93:calypso/uwire.c **** 	/* FIXME uwire_init always selects CS0 for now */
  94:calypso/uwire.c **** 
  95:calypso/uwire.c **** 	printd("uwire_xfer(dev_idx=%u, bitlen=%u\n", cs, bitlen);
  96:calypso/uwire.c **** 
  97:calypso/uwire.c **** 	/* select the chip */
  98:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | UWIRE_CSR_CS_CMD, UWIRE_REG(REG_CSR));
 111              		.loc 1 98 0
 112 0028 C0309FE5 		ldr	r3, .L21
 113 002c 012AA0E3 		mov	r2, #4096	@ movhi
 114              	.LVL4:
 115 0030 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
  99:calypso/uwire.c **** 	_uwire_wait(UWIRE_CSR_CSRB, 0);
 116              		.loc 1 99 0
 117 0034 0109A0E3 		mov	r0, #16384
 118 0038 0010A0E3 		mov	r1, #0
 119              	.LVL5:
 120 003c FEFFFFEB 		bl	_uwire_wait
 100:calypso/uwire.c **** 
 101:calypso/uwire.c **** 	if (dout) {
 121              		.loc 1 101 0
 122 0040 000055E3 		cmp	r5, #0
 123 0044 0A00000A 		beq	.L11
 102:calypso/uwire.c **** 		if (bitlen <= 8)
 124              		.loc 1 102 0
 125 0048 080054E3 		cmp	r4, #8
 103:calypso/uwire.c **** 			tmp = *(uint8_t *)dout;
 126              		.loc 1 103 0
 127 004c 0030D5D5 		ldrleb	r3, [r5, #0]	@ zero_extendqisi2
 128              	.LVL6:
 104:calypso/uwire.c **** 		else if (bitlen <= 16)
 105:calypso/uwire.c **** 			tmp = *(uint16_t *)dout;
 129              		.loc 1 105 0
 130 0050 B030D5C1 		ldrgth	r3, [r5, #0]
 131              	.LVL7:
 106:calypso/uwire.c **** 		tmp <<= 16 - bitlen; /* align to MSB */
 132              		.loc 1 106 0
 133 0054 102064E2 		rsb	r2, r4, #16
 134 0058 1332A0E1 		mov	r3, r3, asl r2
 135              	.LVL8:
 107:calypso/uwire.c **** 		writew(tmp, UWIRE_REG(REG_DATA));
 136              		.loc 1 107 0
 137 005c 8C209FE5 		ldr	r2, .L21
 106:calypso/uwire.c **** 		tmp <<= 16 - bitlen; /* align to MSB */
 138              		.loc 1 106 0
 139 0060 0338A0E1 		mov	r3, r3, asl #16
 140 0064 2338A0E1 		mov	r3, r3, lsr #16
 141              	.LVL9:
 108:calypso/uwire.c **** 		printd(", data_out=0x%04hx", tmp);
 109:calypso/uwire.c **** 	}
 110:calypso/uwire.c **** 
 111:calypso/uwire.c **** 	tmp =	(dout ? UWIRE_CSR_BITS_WR(bitlen) : 0) |
 142              		.loc 1 111 0
 143 0068 1F5004E2 		and	r5, r4, #31
 144              	.LVL10:
 107:calypso/uwire.c **** 		writew(tmp, UWIRE_REG(REG_DATA));
 145              		.loc 1 107 0
 146 006c BF3F42E1 		strh	r3, [r2, #-255]	@ movhi
 147              		.loc 1 111 0
 148 0070 8552A0E1 		mov	r5, r5, asl #5
 149              	.LVL11:
 150              	.L11:
 151              		.loc 1 111 0 is_stmt 0 discriminator 3
 152 0074 000056E3 		cmp	r6, #0
 153 0078 1F300412 		andne	r3, r4, #31
 154 007c 0630A001 		moveq	r3, r6
 155 0080 025A85E3 		orr	r5, r5, #8192
 156 0084 033085E1 		orr	r3, r5, r3
 157 0088 0338A0E1 		mov	r3, r3, asl #16
 112:calypso/uwire.c **** 		(din  ? UWIRE_CSR_BITS_RD(bitlen) : 0) |
 113:calypso/uwire.c **** 		UWIRE_CSR_START;
 114:calypso/uwire.c **** 	writew(tmp, UWIRE_REG(REG_CSR));
 158              		.loc 1 114 0 is_stmt 1 discriminator 3
 159 008c 5C509FE5 		ldr	r5, .L21
 111:calypso/uwire.c **** 	tmp =	(dout ? UWIRE_CSR_BITS_WR(bitlen) : 0) |
 160              		.loc 1 111 0 discriminator 3
 161 0090 2338A0E1 		mov	r3, r3, lsr #16
 162              	.LVL12:
 163              		.loc 1 114 0 discriminator 3
 164 0094 BD3F45E1 		strh	r3, [r5, #-253]	@ movhi
 115:calypso/uwire.c **** 
 116:calypso/uwire.c **** 	_uwire_wait(UWIRE_CSR_CSRB, 0);
 165              		.loc 1 116 0 discriminator 3
 166 0098 0109A0E3 		mov	r0, #16384
 167 009c 0010A0E3 		mov	r1, #0
 168 00a0 FEFFFFEB 		bl	_uwire_wait
 169              	.LVL13:
 117:calypso/uwire.c **** 
 118:calypso/uwire.c **** 	if (din) {
 170              		.loc 1 118 0 discriminator 3
 171 00a4 000056E3 		cmp	r6, #0
 172 00a8 0600000A 		beq	.L15
 119:calypso/uwire.c **** 		_uwire_wait(UWIRE_CSR_RDRB, UWIRE_CSR_RDRB);
 173              		.loc 1 119 0
 174 00ac 0209A0E3 		mov	r0, #32768
 175 00b0 0010A0E1 		mov	r1, r0
 176 00b4 FEFFFFEB 		bl	_uwire_wait
 120:calypso/uwire.c **** 
 121:calypso/uwire.c **** 		tmp = readw(UWIRE_REG(REG_DATA));
 177              		.loc 1 121 0
 178 00b8 BF3F55E1 		ldrh	r3, [r5, #-255]
 179              	.LVL14:
 122:calypso/uwire.c **** 		printd(", data_in=0x%08x", tmp);
 123:calypso/uwire.c **** 
 124:calypso/uwire.c **** 		if (bitlen <= 8)
 180              		.loc 1 124 0
 181 00bc 080054E3 		cmp	r4, #8
 125:calypso/uwire.c **** 			*(uint8_t *)din = tmp & 0xff;
 182              		.loc 1 125 0
 183 00c0 0030C6D5 		strleb	r3, [r6, #0]
 126:calypso/uwire.c **** 		else if (bitlen <= 16)
 127:calypso/uwire.c **** 			*(uint16_t *)din = tmp & 0xffff;
 184              		.loc 1 127 0
 185 00c4 B030C6C1 		strgth	r3, [r6, #0]	@ movhi
 186              	.LVL15:
 187              	.L15:
 128:calypso/uwire.c **** 	}
 129:calypso/uwire.c **** 	/* unselect the chip */
 130:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | 0, UWIRE_REG(REG_CSR));
 188              		.loc 1 130 0
 189 00c8 20309FE5 		ldr	r3, .L21
 190 00cc 0020A0E3 		mov	r2, #0	@ movhi
 131:calypso/uwire.c **** 	_uwire_wait(UWIRE_CSR_CSRB, 0);
 191              		.loc 1 131 0
 192 00d0 0109A0E3 		mov	r0, #16384
 130:calypso/uwire.c **** 	writew(UWIRE_CSR_IDX(0) | 0, UWIRE_REG(REG_CSR));
 193              		.loc 1 130 0
 194 00d4 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
 195              		.loc 1 131 0
 196 00d8 0010A0E3 		mov	r1, #0
 197 00dc FEFFFFEB 		bl	_uwire_wait
 132:calypso/uwire.c **** 
 133:calypso/uwire.c **** 	printd(")\n");
 134:calypso/uwire.c **** 
 135:calypso/uwire.c **** 	return 0;
 198              		.loc 1 135 0
 199 00e0 0000A0E3 		mov	r0, #0
 200 00e4 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 201              	.LVL16:
 202              	.L18:
  91:calypso/uwire.c **** 		return -1;
 203              		.loc 1 91 0
 204 00e8 0000E0E3 		mvn	r0, #0
 136:calypso/uwire.c **** }
 205              		.loc 1 136 0
 206 00ec 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 207              	.L22:
 208              		.align	2
 209              	.L21:
 210 00f0 FF40FEFF 		.word	-114433
 211              		.cfi_endproc
 212              	.LFE2:
 214              		.text
 215              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uwire.c
     /tmp/ccFzRVu4.s:12     .text._uwire_wait:0000000000000000 $a
     /tmp/ccFzRVu4.s:14     .text._uwire_wait:0000000000000000 _uwire_wait
     /tmp/ccFzRVu4.s:36     .text._uwire_wait:0000000000000018 $d
     /tmp/ccFzRVu4.s:41     .text.uwire_init:0000000000000000 $a
     /tmp/ccFzRVu4.s:44     .text.uwire_init:0000000000000000 uwire_init
     /tmp/ccFzRVu4.s:72     .text.uwire_init:0000000000000028 $d
     /tmp/ccFzRVu4.s:77     .text.uwire_xfer:0000000000000000 $a
     /tmp/ccFzRVu4.s:80     .text.uwire_xfer:0000000000000000 uwire_xfer
     /tmp/ccFzRVu4.s:210    .text.uwire_xfer:00000000000000f0 $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
