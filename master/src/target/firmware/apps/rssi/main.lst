   1              		.file	"main.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.fb_boxto,"ax",%progbits
  12              		.align	2
  14              	fb_boxto:
  15              	.LFB67:
  16              		.file 1 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
  52:include/fb/framebuffer.h **** }
  53:include/fb/framebuffer.h **** 
  54:include/fb/framebuffer.h **** static inline void
  55:include/fb/framebuffer.h **** fb_clear(){
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
  57:include/fb/framebuffer.h **** }
  58:include/fb/framebuffer.h **** 
  59:include/fb/framebuffer.h **** static inline void
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  17              		.loc 1 60 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  22              		.loc 1 61 0
  23 0000 10309FE5 		ldr	r3, .L2
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  24              		.loc 1 60 0
  25 0004 04E02DE5 		str	lr, [sp, #-4]!
  26              	.LCFI0:
  27              		.cfi_def_cfa_offset 4
  28              		.loc 1 61 0
  29 0008 003093E5 		ldr	r3, [r3, #0]
  30              		.cfi_offset 14, -4
  31 000c 0FE0A0E1 		mov	lr, pc
  32 0010 10F093E5 		ldr	pc, [r3, #16]
  33              	.LVL1:
  62:include/fb/framebuffer.h **** }
  34              		.loc 1 62 0
  35 0014 04F09DE4 		ldr	pc, [sp], #4
  36              	.L3:
  37              		.align	2
  38              	.L2:
  39 0018 00000000 		.word	framebuffer
  40              		.cfi_endproc
  41              	.LFE67:
  43              		.section	.text.fb_putstr,"ax",%progbits
  44              		.align	2
  46              	fb_putstr:
  47              	.LFB69:
  63:include/fb/framebuffer.h **** 
  64:include/fb/framebuffer.h **** static inline void
  65:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  66:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  67:include/fb/framebuffer.h **** }
  68:include/fb/framebuffer.h **** 
  69:include/fb/framebuffer.h **** static inline int
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  48              		.loc 1 70 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL2:
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  53              		.loc 1 71 0
  54 0000 10309FE5 		ldr	r3, .L5
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  55              		.loc 1 70 0
  56 0004 04E02DE5 		str	lr, [sp, #-4]!
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 4
  59              		.loc 1 71 0
  60 0008 003093E5 		ldr	r3, [r3, #0]
  61              		.cfi_offset 14, -4
  62 000c 0FE0A0E1 		mov	lr, pc
  63 0010 18F093E5 		ldr	pc, [r3, #24]
  64              	.LVL3:
  72:include/fb/framebuffer.h **** }
  65              		.loc 1 72 0
  66 0014 04F09DE4 		ldr	pc, [sp], #4
  67              	.L6:
  68              		.align	2
  69              	.L5:
  70 0018 00000000 		.word	framebuffer
  71              		.cfi_endproc
  72              	.LFE69:
  74              		.section	.text.fb_gotoxy,"ax",%progbits
  75              		.align	2
  77              	fb_gotoxy:
  78              	.LFB71:
  73:include/fb/framebuffer.h **** 
  74:include/fb/framebuffer.h **** static inline void
  75:include/fb/framebuffer.h **** fb_flush(){
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
  77:include/fb/framebuffer.h **** }
  78:include/fb/framebuffer.h **** 
  79:include/fb/framebuffer.h **** static inline void
  80:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  79              		.loc 1 80 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84              	.LVL4:
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
  85              		.loc 1 81 0
  86 0000 0C309FE5 		ldr	r3, .L8
  87 0004 003093E5 		ldr	r3, [r3, #0]
  88 0008 B402C3E1 		strh	r0, [r3, #36]	@ movhi
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
  89              		.loc 1 82 0
  90 000c B612C3E1 		strh	r1, [r3, #38]	@ movhi
  83:include/fb/framebuffer.h **** }
  91              		.loc 1 83 0
  92 0010 1EFF2FE1 		bx	lr
  93              	.L9:
  94              		.align	2
  95              	.L8:
  96 0014 00000000 		.word	framebuffer
  97              		.cfi_endproc
  98              	.LFE71:
 100              		.section	.text.print_display,"ax",%progbits
 101              		.align	2
 103              	print_display:
 104              	.LFB109:
 105              		.file 2 "apps/rssi/main.c"
   1:apps/rssi/main.c **** /* Cell Monitor of Free Software for Calypso Phone */
   2:apps/rssi/main.c **** 
   3:apps/rssi/main.c **** /* (C) 2012 by Andreas Eversberg <jolly@eversberg.eu>
   4:apps/rssi/main.c ****  *
   5:apps/rssi/main.c ****  * All Rights Reserved
   6:apps/rssi/main.c ****  *
   7:apps/rssi/main.c ****  * This program is free software; you can redistribute it and/or modify
   8:apps/rssi/main.c ****  * it under the terms of the GNU General Public License as published by
   9:apps/rssi/main.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:apps/rssi/main.c ****  * (at your option) any later version.
  11:apps/rssi/main.c ****  *
  12:apps/rssi/main.c ****  * This program is distributed in the hope that it will be useful,
  13:apps/rssi/main.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:apps/rssi/main.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:apps/rssi/main.c ****  * GNU General Public License for more details.
  16:apps/rssi/main.c ****  *
  17:apps/rssi/main.c ****  * You should have received a copy of the GNU General Public License along
  18:apps/rssi/main.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:apps/rssi/main.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:apps/rssi/main.c ****  *
  21:apps/rssi/main.c ****  */
  22:apps/rssi/main.c **** 
  23:apps/rssi/main.c **** #include <stdint.h>
  24:apps/rssi/main.c **** #include <stdio.h>
  25:apps/rssi/main.c **** #include <string.h>
  26:apps/rssi/main.c **** #include <errno.h>
  27:apps/rssi/main.c **** 
  28:apps/rssi/main.c **** #include <debug.h>
  29:apps/rssi/main.c **** #include <memory.h>
  30:apps/rssi/main.c **** #include <delay.h>
  31:apps/rssi/main.c **** #include <byteorder.h>
  32:apps/rssi/main.c **** #include <rffe.h>
  33:apps/rssi/main.c **** #include <keypad.h>
  34:apps/rssi/main.c **** #include <board.h>
  35:apps/rssi/main.c **** #include <abb/twl3025.h>
  36:apps/rssi/main.c **** #include <rf/trf6151.h>
  37:apps/rssi/main.c **** #include <calypso/clock.h>
  38:apps/rssi/main.c **** #include <calypso/tpu.h>
  39:apps/rssi/main.c **** #include <calypso/tsp.h>
  40:apps/rssi/main.c **** #include <calypso/dsp.h>
  41:apps/rssi/main.c **** #include <calypso/irq.h>
  42:apps/rssi/main.c **** #include <calypso/misc.h>
  43:apps/rssi/main.c **** #include <calypso/buzzer.h>
  44:apps/rssi/main.c **** #include <comm/sercomm.h>
  45:apps/rssi/main.c **** #include <comm/timer.h>
  46:apps/rssi/main.c **** #include <fb/framebuffer.h>
  47:apps/rssi/main.c **** #include <layer1/sync.h>
  48:apps/rssi/main.c **** #include <layer1/async.h>
  49:apps/rssi/main.c **** #include <layer1/l23_api.h>
  50:apps/rssi/main.c **** #include <osmocom/gsm/rsl.h>
  51:apps/rssi/main.c **** #include <osmocom/gsm/protocol/gsm_04_08.h>
  52:apps/rssi/main.c **** #include <osmocom/gsm/gsm48_ie.h>
  53:apps/rssi/main.c **** #include <battery/battery.h>
  54:apps/rssi/main.c **** 
  55:apps/rssi/main.c **** enum key_codes key_code = KEY_INV;
  56:apps/rssi/main.c **** int key_pressed = 0;
  57:apps/rssi/main.c **** enum key_codes key_pressed_code;
  58:apps/rssi/main.c **** unsigned long key_pressed_when;
  59:apps/rssi/main.c **** unsigned int key_pressed_delay;
  60:apps/rssi/main.c **** 
  61:apps/rssi/main.c **** enum mode {
  62:apps/rssi/main.c **** 	MODE_MAIN,
  63:apps/rssi/main.c **** 	MODE_SPECTRUM,
  64:apps/rssi/main.c **** 	MODE_ARFCN,
  65:apps/rssi/main.c **** 	MODE_SYNC,
  66:apps/rssi/main.c **** 	MODE_RACH,
  67:apps/rssi/main.c **** } mode = MODE_MAIN;
  68:apps/rssi/main.c **** enum mode last_mode; /* where to return after entering ARFCN */
  69:apps/rssi/main.c **** 
  70:apps/rssi/main.c **** static uint16_t arfcn = 0, ul_arfcn;
  71:apps/rssi/main.c **** int pcs = 0;
  72:apps/rssi/main.c **** int uplink = 0;
  73:apps/rssi/main.c **** int max = 0;
  74:apps/rssi/main.c **** uint8_t power, max_power;
  75:apps/rssi/main.c **** char input[5];
  76:apps/rssi/main.c **** int cursor;
  77:apps/rssi/main.c **** 
  78:apps/rssi/main.c **** char *sync_result = NULL;
  79:apps/rssi/main.c **** char *sync_msg = "";
  80:apps/rssi/main.c **** 
  81:apps/rssi/main.c **** static struct band {
  82:apps/rssi/main.c **** 	int min, max, prev, next, freq_ul, freq_dl;
  83:apps/rssi/main.c **** } bands[] = {
  84:apps/rssi/main.c ****         { 128, 251, 124, 512, 8242, 8692 }, /* GSM 850 */
  85:apps/rssi/main.c ****         { 955, 124, 885, 128, 8762, 9212 }, /* P,E,R GSM */
  86:apps/rssi/main.c ****         { 512, 885, 251, 955, 17102, 18052 }, /* DCS 1800 */
  87:apps/rssi/main.c **** 	{ 0, 0, 0, 0, 0, 0},
  88:apps/rssi/main.c **** };
  89:apps/rssi/main.c **** 
  90:apps/rssi/main.c **** struct band *band;
  91:apps/rssi/main.c **** 
  92:apps/rssi/main.c **** #define PCS_MIN 512
  93:apps/rssi/main.c **** #define PCS_MAX 810
  94:apps/rssi/main.c **** #define DCS_MIN 512
  95:apps/rssi/main.c **** #define DCS_MAX 885
  96:apps/rssi/main.c **** #define PCS_UL 18502
  97:apps/rssi/main.c **** #define PCS_DL 19302
  98:apps/rssi/main.c **** 
  99:apps/rssi/main.c **** enum pm_mode {
 100:apps/rssi/main.c **** 	PM_IDLE,
 101:apps/rssi/main.c **** 	PM_SENT,
 102:apps/rssi/main.c **** 	PM_RANGE_SENT,
 103:apps/rssi/main.c **** 	PM_RANGE_RESULT,
 104:apps/rssi/main.c **** 	PM_RESULT,
 105:apps/rssi/main.c **** } pm_mode = PM_IDLE;
 106:apps/rssi/main.c **** 
 107:apps/rssi/main.c **** #define NUM_PM_DL 2
 108:apps/rssi/main.c **** #define NUM_PM_UL 10
 109:apps/rssi/main.c **** int pm_meas[NUM_PM_UL];
 110:apps/rssi/main.c **** int pm_count = 0;
 111:apps/rssi/main.c **** int pm_max = 2;
 112:apps/rssi/main.c **** uint8_t pm_spectrum[1024];
 113:apps/rssi/main.c **** int pm_scale = 1; /* scale measured power level */
 114:apps/rssi/main.c **** 
 115:apps/rssi/main.c **** #define TONE_JIFFIES ((HZ < 25) ? 1 : HZ / 25)
 116:apps/rssi/main.c **** int tone = 0;
 117:apps/rssi/main.c **** unsigned long tone_time;
 118:apps/rssi/main.c **** int tone_on = 0;
 119:apps/rssi/main.c **** 
 120:apps/rssi/main.c **** uint8_t bsic;
 121:apps/rssi/main.c **** uint8_t ul_levels[8], ul_max[8]; /* 8 uplink levels */
 122:apps/rssi/main.c **** uint8_t si_1[23];
 123:apps/rssi/main.c **** uint8_t si_2[23];
 124:apps/rssi/main.c **** uint8_t si_2bis[23];
 125:apps/rssi/main.c **** uint8_t si_2ter[23];
 126:apps/rssi/main.c **** uint8_t si_3[23];
 127:apps/rssi/main.c **** uint8_t si_4[23];
 128:apps/rssi/main.c **** uint16_t si_new = 0, ul_new;
 129:apps/rssi/main.c **** uint16_t mcc, mnc, lac, cell_id;
 130:apps/rssi/main.c **** int ccch_conf;
 131:apps/rssi/main.c **** int nb_num;
 132:apps/rssi/main.c **** struct gsm_sysinfo_freq freq[1024];
 133:apps/rssi/main.c **** #define NEIGH_LINES	((framebuffer->height - 25) / 8)
 134:apps/rssi/main.c **** 
 135:apps/rssi/main.c **** #define FREQ_TYPE_SERV		0x01 /* frequency of the serving cell */
 136:apps/rssi/main.c **** #define FREQ_TYPE_NCELL		0x1c /* frequency of the neighbor cell */
 137:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2	0x04 /* sub channel of SI 2 */
 138:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2bis	0x08 /* sub channel of SI 2bis */
 139:apps/rssi/main.c **** #define FREQ_TYPE_NCELL_2ter	0x10 /* sub channel of SI 2ter */
 140:apps/rssi/main.c **** 
 141:apps/rssi/main.c **** int rach = 0;
 142:apps/rssi/main.c **** struct gsm48_req_ref rach_ref;
 143:apps/rssi/main.c **** uint8_t rach_ra;
 144:apps/rssi/main.c **** unsigned long rach_when;
 145:apps/rssi/main.c **** uint8_t ta;
 146:apps/rssi/main.c **** 
 147:apps/rssi/main.c **** enum assign {
 148:apps/rssi/main.c **** 	ASSIGN_NONE,
 149:apps/rssi/main.c **** 	ASSIGN_NO_TX,
 150:apps/rssi/main.c **** 	ASSIGN_RESULT,
 151:apps/rssi/main.c **** 	ASSIGN_REJECT,
 152:apps/rssi/main.c **** 	ASSIGN_TIMEOUT,
 153:apps/rssi/main.c **** } assign;
 154:apps/rssi/main.c **** 
 155:apps/rssi/main.c **** /* UI */
 156:apps/rssi/main.c **** 
 157:apps/rssi/main.c **** static void print_display(char *text, int *y, int c)
 158:apps/rssi/main.c **** {
 106              		.loc 2 158 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              	.LVL5:
 159:apps/rssi/main.c **** 	/* skip lines, given by cursor */
 160:apps/rssi/main.c **** 	(*y)++;
 111              		.loc 2 160 0
 112 0000 003091E5 		ldr	r3, [r1, #0]
 113 0004 013083E2 		add	r3, r3, #1
 161:apps/rssi/main.c **** 	if (c >= (*y))
 114              		.loc 2 161 0
 115 0008 030052E1 		cmp	r2, r3
 158:apps/rssi/main.c **** {
 116              		.loc 2 158 0
 117 000c 30402DE9 		stmfd	sp!, {r4, r5, lr}
 118              	.LCFI2:
 119              		.cfi_def_cfa_offset 12
 158:apps/rssi/main.c **** {
 120              		.loc 2 158 0
 121 0010 0040A0E1 		mov	r4, r0
 122              		.cfi_offset 14, -4
 123              		.cfi_offset 5, -8
 124              		.cfi_offset 4, -12
 160:apps/rssi/main.c **** 	(*y)++;
 125              		.loc 2 160 0
 126 0014 003081E5 		str	r3, [r1, #0]
 127              		.loc 2 161 0
 128 0018 3080BDA8 		ldmgefd	sp!, {r4, r5, pc}
 162:apps/rssi/main.c **** 		return;
 163:apps/rssi/main.c **** 	/* skip, if end of display area is reached */
 164:apps/rssi/main.c **** 	if ((*y) - c > NEIGH_LINES)
 129              		.loc 2 164 0
 130 001c 48509FE5 		ldr	r5, .L12
 131 0020 032062E0 		rsb	r2, r2, r3
 132              	.LVL6:
 133 0024 003095E5 		ldr	r3, [r5, #0]
 134 0028 B232D3E1 		ldrh	r3, [r3, #34]
 135 002c 193043E2 		sub	r3, r3, #25
 136 0030 000053E3 		cmp	r3, #0
 137 0034 071083E2 		add	r1, r3, #7
 138              	.LVL7:
 139 0038 0130A0B1 		movlt	r3, r1
 140 003c C30152E1 		cmp	r2, r3, asr #3
 141 0040 3080BDC8 		ldmgtfd	sp!, {r4, r5, pc}
 165:apps/rssi/main.c **** 		return;
 166:apps/rssi/main.c **** 
 167:apps/rssi/main.c **** 	fb_gotoxy(0, 20 + (((*y) - c - 1) << 3));
 142              		.loc 2 167 0
 143 0044 8229A0E1 		mov	r2, r2, asl #19
 144 0048 031782E2 		add	r1, r2, #786432
 145 004c 0000A0E3 		mov	r0, #0
 146              	.LVL8:
 147 0050 2118A0E1 		mov	r1, r1, lsr #16
 148 0054 FEFFFFEB 		bl	fb_gotoxy
 168:apps/rssi/main.c **** 	fb_putstr(text, framebuffer->width);
 149              		.loc 2 168 0
 150 0058 003095E5 		ldr	r3, [r5, #0]
 151 005c B012D3E1 		ldrh	r1, [r3, #32]
 152 0060 0400A0E1 		mov	r0, r4
 169:apps/rssi/main.c **** }
 153              		.loc 2 169 0
 154 0064 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
 168:apps/rssi/main.c **** 	fb_putstr(text, framebuffer->width);
 155              		.loc 2 168 0
 156 0068 FEFFFFEA 		b	fb_putstr
 157              	.L13:
 158              		.align	2
 159              	.L12:
 160 006c 00000000 		.word	framebuffer
 161              		.cfi_endproc
 162              	.LFE109:
 164              		.section	.text.gsm48_match_ra,"ax",%progbits
 165              		.align	2
 167              	gsm48_match_ra:
 168              	.LFB133:
 170:apps/rssi/main.c **** 
 171:apps/rssi/main.c **** static void refresh_display(void)
 172:apps/rssi/main.c **** {
 173:apps/rssi/main.c **** 	char text[16];
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 175:apps/rssi/main.c **** 
 176:apps/rssi/main.c **** 	fb_clear();
 177:apps/rssi/main.c **** 
 178:apps/rssi/main.c **** 	/* header */
 179:apps/rssi/main.c **** 	fb_setbg(FB_COLOR_WHITE);
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 181:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLUE);
 182:apps/rssi/main.c **** 		fb_setfont(FB_FONT_HELVR08);
 183:apps/rssi/main.c **** 		fb_gotoxy(0, 7);
 184:apps/rssi/main.c **** 		fb_putstr("Osmocom RSSI", -1);
 185:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_RGB(0xc0, 0xc0, 0x00));
 186:apps/rssi/main.c **** 		fb_setfont(FB_FONT_SYMBOLS);
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 188:apps/rssi/main.c **** 		if (bat >= 100 && (battery_info.flags & BATTERY_CHG_ENABLED)
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 190:apps/rssi/main.c **** 			fb_putstr("@HHBC", framebuffer->width);
 191:apps/rssi/main.c **** 		else {
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 193:apps/rssi/main.c **** 				(bat >= 60) ? 'B':'A', (bat >= 90) ? 'B':'A');
 194:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 195:apps/rssi/main.c **** 		}
 196:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 198:apps/rssi/main.c **** 			(power >= 10) ? 'D':'G', (power >= 10) ? 'F':'G',
 199:apps/rssi/main.c **** 			(power >= 40) ? 'F':'G');
 200:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 201:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_GREEN);
 202:apps/rssi/main.c **** 		fb_gotoxy(0, 10);
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 204:apps/rssi/main.c **** 	}
 205:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_BLACK);
 206:apps/rssi/main.c **** 	fb_setfont(FB_FONT_C64);
 207:apps/rssi/main.c **** 
 208:apps/rssi/main.c **** 	/* RACH */
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 211:apps/rssi/main.c **** 
 212:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 213:apps/rssi/main.c **** 		switch (assign) {
 214:apps/rssi/main.c **** 		case ASSIGN_NONE:
 215:apps/rssi/main.c **** 			fb_putstr("Rach sent...", -1);
 216:apps/rssi/main.c **** 			break;
 217:apps/rssi/main.c **** 		case ASSIGN_RESULT:
 218:apps/rssi/main.c **** 			sprintf(text, "TA = %d", ta);
 219:apps/rssi/main.c **** 			fb_putstr(text, -1);
 220:apps/rssi/main.c **** 			fb_gotoxy(0,36);
 221:apps/rssi/main.c **** 			sprintf(text, "(%dm)", ta * 554);
 222:apps/rssi/main.c **** 			fb_putstr(text, -1);
 223:apps/rssi/main.c **** 			break;
 224:apps/rssi/main.c **** 		case ASSIGN_REJECT:
 225:apps/rssi/main.c **** 			fb_putstr("Rejected!", -1);
 226:apps/rssi/main.c **** 			break;
 227:apps/rssi/main.c **** 		case ASSIGN_NO_TX:
 228:apps/rssi/main.c **** 			fb_putstr("TX disabled", -1);
 229:apps/rssi/main.c **** 			break;
 230:apps/rssi/main.c **** 		case ASSIGN_TIMEOUT:
 231:apps/rssi/main.c **** 			fb_putstr("Timeout", -1);
 232:apps/rssi/main.c **** 			break;
 233:apps/rssi/main.c **** 		}
 234:apps/rssi/main.c **** 		switch (assign) {
 235:apps/rssi/main.c **** 		case ASSIGN_RESULT:
 236:apps/rssi/main.c **** 		case ASSIGN_REJECT:
 237:apps/rssi/main.c **** 			fb_gotoxy(0,44);
 238:apps/rssi/main.c **** 			sprintf(text, "Delay:%ldms", elapsed * 1000 / HZ);
 239:apps/rssi/main.c **** 			fb_putstr(text, -1);
 240:apps/rssi/main.c **** 			break;
 241:apps/rssi/main.c **** 		default:
 242:apps/rssi/main.c **** 			break;
 243:apps/rssi/main.c **** 		}
 244:apps/rssi/main.c **** 	}
 245:apps/rssi/main.c **** 
 246:apps/rssi/main.c **** 	/* SYNC / UL levels */
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 248:apps/rssi/main.c **** 		int i, tn, l;
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 251:apps/rssi/main.c **** 
 252:apps/rssi/main.c **** 		fb_setfont(FB_FONT_HELVR08);
 253:apps/rssi/main.c **** 		for (i = 0; i < 8; i++) {
 254:apps/rssi/main.c **** 			if (uplink)
 255:apps/rssi/main.c **** 				tn = (i + 3) & 7; /* UL is shifted by 3 */
 256:apps/rssi/main.c **** 			else
 257:apps/rssi/main.c **** 				tn = i;
 258:apps/rssi/main.c **** 			fb_setbg(FB_COLOR_WHITE);
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 261:apps/rssi/main.c **** 			l = 110 - l;
 262:apps/rssi/main.c **** 			if (l >= 100)
 263:apps/rssi/main.c **** 				l -= 100;
 264:apps/rssi/main.c **** 			sprintf(text, "%02d", l);
 265:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 266:apps/rssi/main.c **** 			fb_setbg(FB_COLOR_BLACK);
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 269:apps/rssi/main.c **** 			if (max) {
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 271:apps/rssi/main.c **** 				fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_max[tn] * height / 64);
 272:apps/rssi/main.c **** 			}
 273:apps/rssi/main.c **** 		}
 274:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_TRANSP);
 275:apps/rssi/main.c **** 		if (max) {
 276:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_RED);
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 278:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 279:apps/rssi/main.c **** 		}
 280:apps/rssi/main.c **** 		fb_setfont(FB_FONT_C64);
 281:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLUE);
 282:apps/rssi/main.c **** 		fb_gotoxy(0, 16);
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 284:apps/rssi/main.c **** 			sprintf(text, "%4dP", ul_arfcn);
 285:apps/rssi/main.c **** 		else if (ul_arfcn >= DCS_MIN && ul_arfcn <= DCS_MAX)
 286:apps/rssi/main.c **** 			sprintf(text, "%4dD", ul_arfcn);
 287:apps/rssi/main.c **** 		else
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 289:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 290:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 291:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 292:apps/rssi/main.c **** 	}
 293:apps/rssi/main.c **** 
 294:apps/rssi/main.c **** 	/* SYNC / SI */
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 296:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 297:apps/rssi/main.c **** 		if (sync_msg[0] == 'o')
 298:apps/rssi/main.c **** 			sprintf(text, "BSIC%d/%d %4d", bsic >> 3, bsic & 7,
 299:apps/rssi/main.c **** 				power - 110);
 300:apps/rssi/main.c **** 		else
 301:apps/rssi/main.c **** 			sprintf(text, "Sync %s", sync_msg);
 302:apps/rssi/main.c **** 		fb_putstr(text, -1);
 303:apps/rssi/main.c **** 
 304:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 306:apps/rssi/main.c **** 		text[1] = ' ';
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 308:apps/rssi/main.c **** 		text[3] = ' ';
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 310:apps/rssi/main.c **** 		text[5] = si_2bis[2] ? 'b' : ' ';
 311:apps/rssi/main.c **** 		text[6] = si_2ter[2] ? '2' : '-';
 312:apps/rssi/main.c **** 		text[7] = si_2ter[2] ? 't' : ' ';
 313:apps/rssi/main.c **** 		text[8] = ' ';
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 315:apps/rssi/main.c **** 		text[10] = ' ';
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 317:apps/rssi/main.c **** 		text[12] = '\0';
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 319:apps/rssi/main.c **** 
 320:apps/rssi/main.c **** 		fb_gotoxy(0, 36);
 321:apps/rssi/main.c **** 		fb_putstr("MCC MNC LAC ", -1);
 322:apps/rssi/main.c **** 		fb_gotoxy(0, 44);
 323:apps/rssi/main.c **** 		if (mcc) {
 324:apps/rssi/main.c **** 			if ((mnc & 0x00f) == 0x00f)
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 326:apps/rssi/main.c **** 			else
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 328:apps/rssi/main.c **** 			fb_putstr(text, -1);
 329:apps/rssi/main.c **** 		} else
 330:apps/rssi/main.c **** 			fb_putstr("--- --- ----", -1);
 331:apps/rssi/main.c **** 		fb_gotoxy(0, 52);
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 333:apps/rssi/main.c **** 			sprintf(text, "cell id:%04x", cell_id);
 334:apps/rssi/main.c **** 			fb_putstr(text, -1);
 335:apps/rssi/main.c **** 		} else
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 337:apps/rssi/main.c **** 	}
 338:apps/rssi/main.c **** 
 339:apps/rssi/main.c **** 	/* SYNC / neighbour cells */
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 341:apps/rssi/main.c **** 		int i, y = 0;
 342:apps/rssi/main.c **** 
 343:apps/rssi/main.c **** 		text[0] = '\0';
 344:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 346:apps/rssi/main.c **** 				if (!text[0])
 347:apps/rssi/main.c **** 					sprintf(text, "S: %4d", i);
 348:apps/rssi/main.c **** 				else {
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 350:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 351:apps/rssi/main.c **** 					text[0] = '\0';
 352:apps/rssi/main.c **** 				}
 353:apps/rssi/main.c **** 			}
 354:apps/rssi/main.c **** 		}
 355:apps/rssi/main.c **** 		if (text[0])
 356:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 357:apps/rssi/main.c **** 		text[0] = '\0';
 358:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 359:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_NCELL) {
 360:apps/rssi/main.c **** 				if (!text[0])
 361:apps/rssi/main.c **** 					sprintf(text, "N: %4d", i);
 362:apps/rssi/main.c **** 				else {
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 365:apps/rssi/main.c **** 					text[0] = '\0';
 366:apps/rssi/main.c **** 				}
 367:apps/rssi/main.c **** 			}
 368:apps/rssi/main.c **** 		}
 369:apps/rssi/main.c **** 		if (text[0])
 370:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 371:apps/rssi/main.c **** 		nb_num = y;
 372:apps/rssi/main.c **** 	}
 373:apps/rssi/main.c **** 
 374:apps/rssi/main.c **** 	/* ARFCN */
 375:apps/rssi/main.c **** 	if (mode == MODE_MAIN || mode == MODE_ARFCN) {
 376:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 377:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 378:apps/rssi/main.c **** 			sprintf(text, "ARFCN %s", input);
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 380:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dPCS", arfcn);
 381:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 382:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dDCS", arfcn);
 383:apps/rssi/main.c **** 		else
 384:apps/rssi/main.c **** 			sprintf(text, "ARFCN %d", arfcn);
 385:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 386:apps/rssi/main.c **** 	}
 387:apps/rssi/main.c **** 
 388:apps/rssi/main.c **** 	/* cursor */
 389:apps/rssi/main.c **** 	if (mode == MODE_ARFCN) {
 390:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_WHITE);
 391:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_BLUE);
 392:apps/rssi/main.c **** 		fb_putstr(" ", framebuffer->width);
 393:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 394:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 395:apps/rssi/main.c **** 	}
 396:apps/rssi/main.c **** 
 397:apps/rssi/main.c **** 	/* Frequency / power */
 398:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 399:apps/rssi/main.c **** 		int f;
 400:apps/rssi/main.c **** 
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 402:apps/rssi/main.c **** 			if (uplink)
 403:apps/rssi/main.c **** 				f = PCS_UL;
 404:apps/rssi/main.c **** 			else
 405:apps/rssi/main.c **** 				f = PCS_DL;
 406:apps/rssi/main.c **** 		} else if (uplink)
 407:apps/rssi/main.c **** 			f = band->freq_ul;
 408:apps/rssi/main.c **** 		else
 409:apps/rssi/main.c **** 			f = band->freq_dl;
 410:apps/rssi/main.c **** 		f += ((arfcn - band->min) & 1023) << 1;
 411:apps/rssi/main.c **** 
 412:apps/rssi/main.c **** 		fb_gotoxy(0, 30);
 413:apps/rssi/main.c **** 		sprintf(text, "Freq. %d.%d", f / 10, f % 10);
 414:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 415:apps/rssi/main.c **** 
 416:apps/rssi/main.c **** 		fb_gotoxy(0, 40);
 417:apps/rssi/main.c **** 		sprintf(text, "Power %d", ((max) ? max_power : power) - 110);
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 419:apps/rssi/main.c **** 		if (max) {
 420:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 421:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_RED);
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 423:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 424:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 425:apps/rssi/main.c **** 			fb_setfg(FB_COLOR_BLACK);
 426:apps/rssi/main.c **** 		}
 427:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_BLACK);
 428:apps/rssi/main.c **** 		fb_gotoxy(0, 45);
 429:apps/rssi/main.c **** 		fb_boxto(framebuffer->width * power / 64, 50);
 430:apps/rssi/main.c **** 		if (max) {
 431:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width * max_power / 64 ,45);
 432:apps/rssi/main.c **** 			fb_boxto(framebuffer->width * max_power / 64, 50);
 433:apps/rssi/main.c **** 		}
 434:apps/rssi/main.c **** 		fb_setbg(FB_COLOR_WHITE);
 435:apps/rssi/main.c **** 	}
 436:apps/rssi/main.c **** 
 437:apps/rssi/main.c **** 	/* spectrum */
 438:apps/rssi/main.c **** 	if (mode == MODE_SPECTRUM) {
 439:apps/rssi/main.c **** 		int i;
 440:apps/rssi/main.c **** 		uint16_t a, e, p;
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 442:apps/rssi/main.c **** 
 443:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 445:apps/rssi/main.c **** 			sprintf(text, "%4dP", arfcn);
 446:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 447:apps/rssi/main.c **** 			sprintf(text, "%4dD", arfcn);
 448:apps/rssi/main.c **** 		else
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 450:apps/rssi/main.c **** 		sprintf(text + 5, "   %4d", pm_spectrum[arfcn & 1023] - 110);
 451:apps/rssi/main.c **** 		fb_putstr(text, -1);
 452:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_RED);
 453:apps/rssi/main.c **** 		if (max) {
 454:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 456:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 457:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 458:apps/rssi/main.c **** 		}
 459:apps/rssi/main.c **** 		if (pm_scale != 1) {
 460:apps/rssi/main.c **** 			fb_setfont(FB_FONT_HELVR08);
 461:apps/rssi/main.c **** 			fb_gotoxy(1, 15);
 462:apps/rssi/main.c **** 			sprintf(text, "x%d", pm_scale);
 463:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 464:apps/rssi/main.c **** 			fb_setfont(FB_FONT_C64);
 465:apps/rssi/main.c **** 		}
 466:apps/rssi/main.c **** 		fb_setfg(FB_COLOR_BLACK);
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 468:apps/rssi/main.c **** 			a = PCS_MIN;
 469:apps/rssi/main.c **** 			e = PCS_MAX;
 470:apps/rssi/main.c **** 		} else {
 471:apps/rssi/main.c **** 			a = band->min;
 472:apps/rssi/main.c **** 			e = band->max;
 473:apps/rssi/main.c **** 		}
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 477:apps/rssi/main.c **** 				continue;
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 479:apps/rssi/main.c **** 				continue;
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 481:apps/rssi/main.c **** 			if (p > height)
 482:apps/rssi/main.c **** 				p = height;
 483:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 484:apps/rssi/main.c **** 				fb_setfg(FB_COLOR_RED);
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 486:apps/rssi/main.c **** 			fb_boxto(i, height + 10);
 487:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 488:apps/rssi/main.c **** 				fb_setfg(FB_COLOR_BLACK);
 489:apps/rssi/main.c **** 		}
 490:apps/rssi/main.c **** 		i = framebuffer->width >> 1;
 491:apps/rssi/main.c **** 		fb_gotoxy(i, 0);
 492:apps/rssi/main.c **** 		fb_boxto(i, 4);
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 495:apps/rssi/main.c **** 	}
 496:apps/rssi/main.c **** 
 497:apps/rssi/main.c **** 	/* footer */
 498:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_GREEN);
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 501:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 1);
 502:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_RED);
 503:apps/rssi/main.c **** 	if (mode == MODE_ARFCN)
 504:apps/rssi/main.c **** 		sprintf(text, "%s   %s", (cursor) ? "del " : "back",
 505:apps/rssi/main.c **** 			(cursor) ? "enter" : "     ");
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 507:apps/rssi/main.c **** 		sprintf(text, "%s      %s", "back",
 508:apps/rssi/main.c **** 			(uplink) ? "UL" : "DL");
 509:apps/rssi/main.c **** 	else if (mode == MODE_SYNC || mode == MODE_RACH)
 510:apps/rssi/main.c **** 		sprintf(text, "%s        ", "back");
 511:apps/rssi/main.c **** 	else
 512:apps/rssi/main.c **** 		sprintf(text, "%s       %s", (pcs) ? "PCS" : "DCS",
 513:apps/rssi/main.c **** 			(uplink) ? "UL" : "DL");
 514:apps/rssi/main.c **** 	fb_putstr(text, -1);
 515:apps/rssi/main.c **** 	fb_setfg(FB_COLOR_BLACK);
 516:apps/rssi/main.c **** 	fb_setfont(FB_FONT_HELVR08);
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 518:apps/rssi/main.c **** 	sprintf(text, "%d", tone / 25);
 519:apps/rssi/main.c **** 	fb_putstr(text, -1);
 520:apps/rssi/main.c **** 
 521:apps/rssi/main.c **** 	fb_flush();
 522:apps/rssi/main.c **** }
 523:apps/rssi/main.c **** 
 524:apps/rssi/main.c **** static void exit_arfcn(void)
 525:apps/rssi/main.c **** {
 526:apps/rssi/main.c **** 	mode = last_mode;
 527:apps/rssi/main.c **** 	refresh_display();
 528:apps/rssi/main.c **** }
 529:apps/rssi/main.c **** 
 530:apps/rssi/main.c **** static void enter_arfcn(enum key_codes code)
 531:apps/rssi/main.c **** {
 532:apps/rssi/main.c **** 	/* enter mode */
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 534:apps/rssi/main.c **** 		last_mode = mode;
 535:apps/rssi/main.c **** 		mode = MODE_ARFCN;
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 537:apps/rssi/main.c **** 		input[1] = '\0';
 538:apps/rssi/main.c **** 		cursor = 1;
 539:apps/rssi/main.c **** 		refresh_display();
 540:apps/rssi/main.c **** 		return;
 541:apps/rssi/main.c **** 	}
 542:apps/rssi/main.c **** 
 543:apps/rssi/main.c **** 	if (code == KEY_LEFT_SB) {
 544:apps/rssi/main.c **** 		/* back */
 545:apps/rssi/main.c **** 		if (cursor == 0) {
 546:apps/rssi/main.c **** 			exit_arfcn();
 547:apps/rssi/main.c **** 			return;
 548:apps/rssi/main.c **** 		}
 549:apps/rssi/main.c **** 		/* delete */
 550:apps/rssi/main.c **** 		cursor--;
 551:apps/rssi/main.c **** 		input[cursor] = '\0';
 552:apps/rssi/main.c **** 		refresh_display();
 553:apps/rssi/main.c **** 		return;
 554:apps/rssi/main.c **** 	}
 555:apps/rssi/main.c **** 
 556:apps/rssi/main.c **** 	if (code == KEY_RIGHT_SB) {
 557:apps/rssi/main.c **** 		int check = 0;
 558:apps/rssi/main.c **** 		int i;
 559:apps/rssi/main.c **** 		struct band *temp = NULL;
 560:apps/rssi/main.c **** 
 561:apps/rssi/main.c **** 		/* nothing entered */
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 563:apps/rssi/main.c **** 			return;
 564:apps/rssi/main.c **** 		}
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 567:apps/rssi/main.c **** 
 568:apps/rssi/main.c **** 		/* check */
 569:apps/rssi/main.c **** 		for (i = 0; bands[i].max; i++) {
 570:apps/rssi/main.c **** 			temp = &bands[i];
 571:apps/rssi/main.c **** 			if (temp->min < temp->max) {
 572:apps/rssi/main.c **** 				if (check >= temp->min && check <= temp->max)
 573:apps/rssi/main.c **** 					break;
 574:apps/rssi/main.c **** 			} else {
 575:apps/rssi/main.c **** 				if (check >= temp->min || check <= temp->max)
 576:apps/rssi/main.c **** 					break;
 577:apps/rssi/main.c **** 			}
 578:apps/rssi/main.c **** 		}
 579:apps/rssi/main.c **** 		if (!bands[i].max)
 580:apps/rssi/main.c **** 			return;
 581:apps/rssi/main.c **** 		if (check > 1023)
 582:apps/rssi/main.c **** 			return;
 583:apps/rssi/main.c **** 		arfcn = check;
 584:apps/rssi/main.c **** 		band = temp;
 585:apps/rssi/main.c **** 		mode = last_mode;
 586:apps/rssi/main.c **** 		refresh_display();
 587:apps/rssi/main.c **** 		return;
 588:apps/rssi/main.c **** 	}
 589:apps/rssi/main.c **** 
 590:apps/rssi/main.c **** 	if (cursor == 4)
 591:apps/rssi/main.c **** 		return;
 592:apps/rssi/main.c **** 
 593:apps/rssi/main.c **** 	input[cursor] = code - KEY_0 + '0';
 594:apps/rssi/main.c **** 	cursor++;
 595:apps/rssi/main.c **** 	input[cursor] = '\0';
 596:apps/rssi/main.c **** 	refresh_display();
 597:apps/rssi/main.c **** }
 598:apps/rssi/main.c **** 
 599:apps/rssi/main.c **** static int inc_dec_arfcn(int inc)
 600:apps/rssi/main.c **** {
 601:apps/rssi/main.c **** 	int i;
 602:apps/rssi/main.c **** 
 603:apps/rssi/main.c **** 	/* select current band */
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 605:apps/rssi/main.c **** 		band = &bands[i];
 606:apps/rssi/main.c **** 		if (band->min < band->max) {
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 608:apps/rssi/main.c **** 				break;
 609:apps/rssi/main.c **** 		} else {
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 611:apps/rssi/main.c **** 				break;
 612:apps/rssi/main.c **** 		}
 613:apps/rssi/main.c **** 	}
 614:apps/rssi/main.c **** 	if (!bands[i].max)
 615:apps/rssi/main.c **** 		return -EINVAL;
 616:apps/rssi/main.c **** 
 617:apps/rssi/main.c **** 	if (inc) {
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 619:apps/rssi/main.c **** 			arfcn = band->next;
 620:apps/rssi/main.c **** 		else if (arfcn == 1023)
 621:apps/rssi/main.c **** 			arfcn = 0;
 622:apps/rssi/main.c **** 		else
 623:apps/rssi/main.c **** 			arfcn++;
 624:apps/rssi/main.c **** 	} else {
 625:apps/rssi/main.c **** 		if (arfcn == band->min)
 626:apps/rssi/main.c **** 			arfcn = band->prev;
 627:apps/rssi/main.c **** 		else if (arfcn == 0)
 628:apps/rssi/main.c **** 			arfcn = 1023;
 629:apps/rssi/main.c **** 		else
 630:apps/rssi/main.c **** 			arfcn--;
 631:apps/rssi/main.c **** 	}
 632:apps/rssi/main.c **** 	/* select next band */
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 634:apps/rssi/main.c **** 		band = &bands[i];
 635:apps/rssi/main.c **** 		if (band->min < band->max) {
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 637:apps/rssi/main.c **** 				break;
 638:apps/rssi/main.c **** 		} else {
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 640:apps/rssi/main.c **** 				break;
 641:apps/rssi/main.c **** 		}
 642:apps/rssi/main.c **** 	}
 643:apps/rssi/main.c **** 	if (!bands[i].max)
 644:apps/rssi/main.c **** 		return -EINVAL;
 645:apps/rssi/main.c **** 
 646:apps/rssi/main.c **** 	refresh_display();
 647:apps/rssi/main.c **** 
 648:apps/rssi/main.c **** 	return 0;
 649:apps/rssi/main.c **** }
 650:apps/rssi/main.c **** 
 651:apps/rssi/main.c **** static void request_ul_levels(uint16_t a);
 652:apps/rssi/main.c **** 
 653:apps/rssi/main.c **** static int inc_dec_ul_arfcn(int inc)
 654:apps/rssi/main.c **** {
 655:apps/rssi/main.c **** 	uint16_t a;
 656:apps/rssi/main.c **** 
 657:apps/rssi/main.c **** 	/* loop until we hit a serving cell or our current bcch arfcn */
 658:apps/rssi/main.c **** 	if (inc) {
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 660:apps/rssi/main.c **** 					a = (a + 1) & 1023) {
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 662:apps/rssi/main.c **** 				break;
 663:apps/rssi/main.c **** 		}
 664:apps/rssi/main.c **** 	} else {
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 666:apps/rssi/main.c **** 					a = (a - 1) & 1023) {
 667:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 668:apps/rssi/main.c **** 				break;
 669:apps/rssi/main.c **** 		}
 670:apps/rssi/main.c **** 	}
 671:apps/rssi/main.c **** 	ul_arfcn = a;
 672:apps/rssi/main.c **** 
 673:apps/rssi/main.c **** 	refresh_display();
 674:apps/rssi/main.c **** 
 675:apps/rssi/main.c **** 	request_ul_levels(a);
 676:apps/rssi/main.c **** 
 677:apps/rssi/main.c **** 	return 0;
 678:apps/rssi/main.c **** }
 679:apps/rssi/main.c **** 
 680:apps/rssi/main.c **** static void toggle_dcs_pcs(void)
 681:apps/rssi/main.c **** {
 682:apps/rssi/main.c **** 	pcs = !pcs;
 683:apps/rssi/main.c **** 	refresh_display();
 684:apps/rssi/main.c **** }
 685:apps/rssi/main.c **** 
 686:apps/rssi/main.c **** static void toggle_up_down(void)
 687:apps/rssi/main.c **** {
 688:apps/rssi/main.c **** 	uplink = !uplink;
 689:apps/rssi/main.c **** 	refresh_display();
 690:apps/rssi/main.c **** 
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 693:apps/rssi/main.c **** }
 694:apps/rssi/main.c **** 
 695:apps/rssi/main.c **** static void toggle_spectrum(void)
 696:apps/rssi/main.c **** {
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 698:apps/rssi/main.c **** 		mode = MODE_SPECTRUM;
 699:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 700:apps/rssi/main.c **** 	} else if (mode == MODE_SPECTRUM) {
 701:apps/rssi/main.c **** 		mode = MODE_MAIN;
 702:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 703:apps/rssi/main.c **** 	}
 704:apps/rssi/main.c **** 	l1s_reset();
 705:apps/rssi/main.c **** 	l1s_reset_hw();
 706:apps/rssi/main.c **** 	pm_count = 0;
 707:apps/rssi/main.c **** 	refresh_display();
 708:apps/rssi/main.c **** }
 709:apps/rssi/main.c **** 
 710:apps/rssi/main.c **** static void tone_inc_dec(int inc)
 711:apps/rssi/main.c **** {
 712:apps/rssi/main.c **** 	if (inc) {
 713:apps/rssi/main.c **** 		if (tone + 25 <= 255)
 714:apps/rssi/main.c **** 			tone += 25;
 715:apps/rssi/main.c **** 	} else {
 716:apps/rssi/main.c **** 		if (tone - 25 >= 0)
 717:apps/rssi/main.c **** 			tone -= 25;
 718:apps/rssi/main.c **** 	}
 719:apps/rssi/main.c **** 
 720:apps/rssi/main.c **** 	refresh_display();
 721:apps/rssi/main.c **** }
 722:apps/rssi/main.c **** 
 723:apps/rssi/main.c **** static void hold_max(void)
 724:apps/rssi/main.c **** {
 725:apps/rssi/main.c **** 	max = !max;
 726:apps/rssi/main.c **** 	max_power = power;
 727:apps/rssi/main.c **** 	refresh_display();
 728:apps/rssi/main.c **** }
 729:apps/rssi/main.c **** 
 730:apps/rssi/main.c **** static int inc_dec_neighbour(int inc)
 731:apps/rssi/main.c **** {
 732:apps/rssi/main.c **** 	if (inc) {
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 734:apps/rssi/main.c **** 			return -EINVAL;
 735:apps/rssi/main.c **** 		cursor++;
 736:apps/rssi/main.c **** 	} else {
 737:apps/rssi/main.c **** 		if (cursor < 0)
 738:apps/rssi/main.c **** 			return -EINVAL;
 739:apps/rssi/main.c **** 		cursor--;
 740:apps/rssi/main.c **** 	}
 741:apps/rssi/main.c **** 
 742:apps/rssi/main.c **** 	refresh_display();
 743:apps/rssi/main.c **** 
 744:apps/rssi/main.c **** 	return 0;
 745:apps/rssi/main.c **** }
 746:apps/rssi/main.c **** 
 747:apps/rssi/main.c **** static int inc_dec_spectrum(int inc)
 748:apps/rssi/main.c **** {
 749:apps/rssi/main.c **** 	if (inc) {
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 752:apps/rssi/main.c **** 			pm_scale = 8;
 753:apps/rssi/main.c **** 	} else {
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 755:apps/rssi/main.c **** 		if (pm_scale < 1)
 756:apps/rssi/main.c **** 			pm_scale = 1;
 757:apps/rssi/main.c **** 	}
 758:apps/rssi/main.c **** 
 759:apps/rssi/main.c **** 	refresh_display();
 760:apps/rssi/main.c **** 
 761:apps/rssi/main.c **** 	return 0;
 762:apps/rssi/main.c **** }
 763:apps/rssi/main.c **** 
 764:apps/rssi/main.c **** static void enter_sync(void);
 765:apps/rssi/main.c **** static void exit_sync(void);
 766:apps/rssi/main.c **** 
 767:apps/rssi/main.c **** static void enter_rach(void);
 768:apps/rssi/main.c **** static void exit_rach(void);
 769:apps/rssi/main.c **** 
 770:apps/rssi/main.c **** static void handle_key_code()
 771:apps/rssi/main.c **** {
 772:apps/rssi/main.c **** 	/* key repeat */
 773:apps/rssi/main.c **** 	if (key_pressed) {
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 775:apps/rssi/main.c **** 		if (elapsed > key_pressed_delay) {
 776:apps/rssi/main.c **** 			key_pressed_when = jiffies;
 777:apps/rssi/main.c **** 			key_pressed_delay = HZ / 10;
 778:apps/rssi/main.c **** 			/* only repeat these keys */
 779:apps/rssi/main.c **** 			if (key_pressed_code == KEY_LEFT
 780:apps/rssi/main.c **** 			 || key_pressed_code == KEY_RIGHT)
 781:apps/rssi/main.c **** 				key_code = key_pressed_code;
 782:apps/rssi/main.c **** 		}
 783:apps/rssi/main.c **** 	}
 784:apps/rssi/main.c **** 
 785:apps/rssi/main.c **** 	if (key_code == KEY_INV)
 786:apps/rssi/main.c **** 		return;
 787:apps/rssi/main.c **** 
 788:apps/rssi/main.c **** 	/* do later, do not disturb tone */
 789:apps/rssi/main.c **** 	if (tone_on)
 790:apps/rssi/main.c **** 		return;
 791:apps/rssi/main.c **** 
 792:apps/rssi/main.c **** 	switch (key_code) {
 793:apps/rssi/main.c **** 	case KEY_0:
 794:apps/rssi/main.c **** 	case KEY_1:
 795:apps/rssi/main.c **** 	case KEY_2:
 796:apps/rssi/main.c **** 	case KEY_3:
 797:apps/rssi/main.c **** 	case KEY_4:
 798:apps/rssi/main.c **** 	case KEY_5:
 799:apps/rssi/main.c **** 	case KEY_6:
 800:apps/rssi/main.c **** 	case KEY_7:
 801:apps/rssi/main.c **** 	case KEY_8:
 802:apps/rssi/main.c **** 	case KEY_9:
 803:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM || mode == MODE_ARFCN)
 804:apps/rssi/main.c **** 			enter_arfcn(key_code);
 805:apps/rssi/main.c **** 		break;
 806:apps/rssi/main.c **** 	case KEY_UP:
 807:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 808:apps/rssi/main.c **** 			tone_inc_dec(1);
 809:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 810:apps/rssi/main.c **** 			inc_dec_neighbour(0);
 811:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 812:apps/rssi/main.c **** 			inc_dec_spectrum(1);
 813:apps/rssi/main.c **** 		break;
 814:apps/rssi/main.c **** 	case KEY_DOWN:
 815:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 816:apps/rssi/main.c **** 			tone_inc_dec(0);
 817:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 818:apps/rssi/main.c **** 			inc_dec_neighbour(1);
 819:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 820:apps/rssi/main.c **** 			inc_dec_spectrum(0);
 821:apps/rssi/main.c **** 		break;
 822:apps/rssi/main.c **** 	case KEY_RIGHT:
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 824:apps/rssi/main.c **** 			inc_dec_arfcn(1);
 825:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 826:apps/rssi/main.c **** 			inc_dec_ul_arfcn(1);
 827:apps/rssi/main.c **** 		break;
 828:apps/rssi/main.c **** 	case KEY_LEFT:
 829:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 830:apps/rssi/main.c **** 			inc_dec_arfcn(0);
 831:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 832:apps/rssi/main.c **** 			inc_dec_ul_arfcn(0);
 833:apps/rssi/main.c **** 		break;
 834:apps/rssi/main.c **** 	case KEY_LEFT_SB:
 835:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 836:apps/rssi/main.c **** 			toggle_dcs_pcs();
 837:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 838:apps/rssi/main.c **** 			enter_arfcn(key_code);
 839:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 840:apps/rssi/main.c **** 			exit_sync();
 841:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 842:apps/rssi/main.c **** 			exit_rach();
 843:apps/rssi/main.c **** 		break;
 844:apps/rssi/main.c **** 	case KEY_RIGHT_SB:
 845:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 846:apps/rssi/main.c **** 			toggle_up_down();
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 848:apps/rssi/main.c **** 			enter_arfcn(key_code);
 849:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 850:apps/rssi/main.c **** 			toggle_up_down();
 851:apps/rssi/main.c **** 		break;
 852:apps/rssi/main.c **** 	case KEY_OK:
 853:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 854:apps/rssi/main.c **** 			enter_sync();
 855:apps/rssi/main.c **** 		else if (mode == MODE_SYNC || mode == MODE_RACH)
 856:apps/rssi/main.c **** 			enter_rach();
 857:apps/rssi/main.c **** 		break;
 858:apps/rssi/main.c **** 	case KEY_MENU:
 859:apps/rssi/main.c **** 		hold_max();
 860:apps/rssi/main.c **** 		break;
 861:apps/rssi/main.c **** 	case KEY_POWER:
 862:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 863:apps/rssi/main.c **** 			exit_arfcn();
 864:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 865:apps/rssi/main.c **** 			exit_sync();
 866:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 867:apps/rssi/main.c **** 			exit_rach();
 868:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 869:apps/rssi/main.c **** 			toggle_spectrum();
 870:apps/rssi/main.c **** 		break;
 871:apps/rssi/main.c **** 	case KEY_STAR:
 872:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 873:apps/rssi/main.c **** 			toggle_spectrum();
 874:apps/rssi/main.c **** 		break;
 875:apps/rssi/main.c **** 	default:
 876:apps/rssi/main.c **** 		break;
 877:apps/rssi/main.c **** 	}
 878:apps/rssi/main.c **** 
 879:apps/rssi/main.c **** 	key_code = KEY_INV;
 880:apps/rssi/main.c **** }
 881:apps/rssi/main.c **** 
 882:apps/rssi/main.c **** static void handle_tone(void)
 883:apps/rssi/main.c **** {
 884:apps/rssi/main.c **** 	unsigned long elapsed = jiffies - tone_time;
 885:apps/rssi/main.c **** 
 886:apps/rssi/main.c **** 	if (!tone_on) {
 887:apps/rssi/main.c **** 		if (!tone || mode != MODE_MAIN)
 888:apps/rssi/main.c **** 			return;
 889:apps/rssi/main.c **** 		/* wait depending on power level */
 890:apps/rssi/main.c **** 		if (elapsed < (uint8_t)(63-power))
 891:apps/rssi/main.c **** 			return;
 892:apps/rssi/main.c **** 		buzzer_volume(tone);
 893:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 894:apps/rssi/main.c **** 		tone_time = jiffies;
 895:apps/rssi/main.c **** 		tone_on = 1;
 896:apps/rssi/main.c **** 		return;
 897:apps/rssi/main.c **** 	}
 898:apps/rssi/main.c **** 
 899:apps/rssi/main.c **** 	if (elapsed >= TONE_JIFFIES) {
 900:apps/rssi/main.c **** 		tone_on = 0;
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 902:apps/rssi/main.c **** 		buzzer_volume(0);
 903:apps/rssi/main.c **** 	}
 904:apps/rssi/main.c **** }
 905:apps/rssi/main.c **** 
 906:apps/rssi/main.c **** /* PM handling */
 907:apps/rssi/main.c **** 
 908:apps/rssi/main.c **** static void handle_pm(void)
 909:apps/rssi/main.c **** {
 910:apps/rssi/main.c **** 	/* start power measurement */
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 913:apps/rssi/main.c **** 		struct l1ctl_pm_req *pm;
 914:apps/rssi/main.c **** 		uint16_t a, e;
 915:apps/rssi/main.c **** 
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 917:apps/rssi/main.c **** 		pm->type = 1;
 918:apps/rssi/main.c **** 		if (mode == MODE_MAIN) {
 919:apps/rssi/main.c **** 			a = arfcn;
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 921:apps/rssi/main.c **** 				a |= ARFCN_PCS;
 922:apps/rssi/main.c **** 			if (uplink)
 923:apps/rssi/main.c **** 				a |= ARFCN_UPLINK;
 924:apps/rssi/main.c **** 			e = a;
 925:apps/rssi/main.c **** 			pm_mode = PM_SENT;
 926:apps/rssi/main.c **** 		}
 927:apps/rssi/main.c **** 		if (mode == MODE_SPECTRUM) {
 928:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 929:apps/rssi/main.c **** 				a = PCS_MIN | ARFCN_PCS;
 930:apps/rssi/main.c **** 				e = PCS_MAX | ARFCN_PCS;
 931:apps/rssi/main.c **** 			} else {
 932:apps/rssi/main.c **** 				a = band->min;
 933:apps/rssi/main.c **** 				e = band->max;
 934:apps/rssi/main.c **** 			}
 935:apps/rssi/main.c **** 			pm_mode = PM_RANGE_SENT;
 936:apps/rssi/main.c **** 		}
 937:apps/rssi/main.c **** 		if (uplink) {
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 940:apps/rssi/main.c **** 		}
 941:apps/rssi/main.c **** 		pm->range.band_arfcn_from = htons(a);
 942:apps/rssi/main.c **** 		pm->range.band_arfcn_to = htons(e);
 943:apps/rssi/main.c **** 
 944:apps/rssi/main.c **** 		l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 945:apps/rssi/main.c **** 
 946:apps/rssi/main.c **** 		return;
 947:apps/rssi/main.c **** 	}
 948:apps/rssi/main.c **** 
 949:apps/rssi/main.c **** 	if (pm_mode == PM_RESULT) {
 950:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 952:apps/rssi/main.c **** 			int i = 0;
 953:apps/rssi/main.c **** 			int sum = 0;
 954:apps/rssi/main.c **** 
 955:apps/rssi/main.c **** 			if (uplink) {
 956:apps/rssi/main.c **** 				/* find max */
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 958:apps/rssi/main.c **** 					if (pm_meas[i] > sum)
 959:apps/rssi/main.c **** 						sum = pm_meas[i];
 960:apps/rssi/main.c **** 				}
 961:apps/rssi/main.c **** 				power = sum;
 962:apps/rssi/main.c **** 			} else {
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 965:apps/rssi/main.c **** 				power = sum / pm_count;
 966:apps/rssi/main.c **** 			}
 967:apps/rssi/main.c **** 			if (power > max_power)
 968:apps/rssi/main.c **** 				max_power = power;
 969:apps/rssi/main.c **** 			pm_count = 0;
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 971:apps/rssi/main.c **** 			if (!tone_on)
 972:apps/rssi/main.c **** 				refresh_display();
 973:apps/rssi/main.c **** 		}
 974:apps/rssi/main.c **** 		return;
 975:apps/rssi/main.c **** 	}
 976:apps/rssi/main.c **** 
 977:apps/rssi/main.c **** 	if (pm_mode == PM_RANGE_RESULT) {
 978:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 979:apps/rssi/main.c **** 		refresh_display();
 980:apps/rssi/main.c **** 		buzzer_volume(tone);
 981:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 982:apps/rssi/main.c **** 		tone_time = jiffies;
 983:apps/rssi/main.c **** 		tone_on = 1;
 984:apps/rssi/main.c **** 		return;
 985:apps/rssi/main.c **** 	}
 986:apps/rssi/main.c **** }
 987:apps/rssi/main.c **** 
 988:apps/rssi/main.c **** /* sync / SI */
 989:apps/rssi/main.c **** 
 990:apps/rssi/main.c **** static void enter_sync(void)
 991:apps/rssi/main.c **** {
 992:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_FBSB_REQ);
 993:apps/rssi/main.c **** 	struct l1ctl_fbsb_req *req;
 994:apps/rssi/main.c **** 	uint16_t a = arfcn;
 995:apps/rssi/main.c **** 
 996:apps/rssi/main.c **** 	l1s_reset();
 997:apps/rssi/main.c **** 	l1s_reset_hw();
 998:apps/rssi/main.c **** 	pm_count = 0;
 999:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
1000:apps/rssi/main.c **** 
1001:apps/rssi/main.c **** 	req = (struct l1ctl_fbsb_req *) msgb_put(msg, sizeof(*req));
1002:apps/rssi/main.c **** 	if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
1003:apps/rssi/main.c **** 		a |= ARFCN_PCS;
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
1006:apps/rssi/main.c **** 	/* Threshold when to consider FB_MODE1: 4kHz - 1kHz */
1007:apps/rssi/main.c **** 	req->freq_err_thresh1 = htons(11000 - 1000);
1008:apps/rssi/main.c **** 	/* Threshold when to consider SCH: 1kHz - 200Hz */
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
1010:apps/rssi/main.c **** 	/* not used yet! */
1011:apps/rssi/main.c **** 	req->num_freqerr_avg = 3;
1012:apps/rssi/main.c **** 	req->flags = L1CTL_FBSB_F_FB01SB;
1013:apps/rssi/main.c **** 	req->sync_info_idx = 0;
1014:apps/rssi/main.c **** 	req->ccch_mode = CCCH_MODE_NONE;
1015:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1016:apps/rssi/main.c **** 
1017:apps/rssi/main.c **** 	mode = MODE_SYNC;
1018:apps/rssi/main.c **** 	memset(ul_levels, 0, sizeof(ul_levels));
1019:apps/rssi/main.c **** 	si_new = 0;
1020:apps/rssi/main.c **** 	ul_new = 0;
1021:apps/rssi/main.c **** 	ul_arfcn = arfcn;
1022:apps/rssi/main.c **** 	si_1[2] = 0;
1023:apps/rssi/main.c **** 	si_2[2] = 0;
1024:apps/rssi/main.c **** 	si_2bis[2] = 0;
1025:apps/rssi/main.c **** 	si_2ter[2] = 0;
1026:apps/rssi/main.c **** 	si_3[2] = 0;
1027:apps/rssi/main.c **** 	si_4[2] = 0;
1028:apps/rssi/main.c **** 	mcc = mnc = lac = 0;
1029:apps/rssi/main.c **** 	ccch_conf = -1;
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
1031:apps/rssi/main.c **** 	cursor = 0;
1032:apps/rssi/main.c **** 	nb_num = 0;
1033:apps/rssi/main.c **** 	sync_msg = "trying";
1034:apps/rssi/main.c **** 	refresh_display();
1035:apps/rssi/main.c **** }
1036:apps/rssi/main.c **** 
1037:apps/rssi/main.c **** static void exit_sync(void)
1038:apps/rssi/main.c **** {
1039:apps/rssi/main.c **** 	l1s_reset();
1040:apps/rssi/main.c **** 	l1s_reset_hw();
1041:apps/rssi/main.c **** 	pm_count = 0;
1042:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
1043:apps/rssi/main.c **** 	mode = MODE_MAIN;
1044:apps/rssi/main.c **** }
1045:apps/rssi/main.c **** 
1046:apps/rssi/main.c **** int gsm48_decode_lai(struct gsm48_loc_area_id *lai, uint16_t *_mcc,
1047:apps/rssi/main.c **** uint16_t *_mnc, uint16_t *_lac)
1048:apps/rssi/main.c **** {
1049:apps/rssi/main.c **** 	*_mcc = ((lai->digits[0] & 0x0f) << 8)
1050:apps/rssi/main.c **** 	 | (lai->digits[0] & 0xf0)
1051:apps/rssi/main.c **** 	 | (lai->digits[1] & 0x0f);
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
1053:apps/rssi/main.c **** 	 | (lai->digits[2] & 0xf0)
1054:apps/rssi/main.c **** 	 | ((lai->digits[1] & 0xf0) >> 4);
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
1056:apps/rssi/main.c **** 
1057:apps/rssi/main.c **** 	return 0;
1058:apps/rssi/main.c **** }
1059:apps/rssi/main.c **** 
1060:apps/rssi/main.c **** static void request_ul_levels(uint16_t a)
1061:apps/rssi/main.c **** {
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
1063:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req =
1064:apps/rssi/main.c **** 		(struct l1ctl_neigh_pm_req *) msgb_put(msg, sizeof(*pm_req));
1065:apps/rssi/main.c **** 	int i;
1066:apps/rssi/main.c **** 
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
1068:apps/rssi/main.c **** 		a |= ARFCN_PCS;
1069:apps/rssi/main.c **** 	if (uplink)
1070:apps/rssi/main.c **** 		a |= ARFCN_UPLINK;
1071:apps/rssi/main.c **** 	pm_req->n = 8;
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
1073:apps/rssi/main.c **** 		pm_req->band_arfcn[i] = htons(a);
1074:apps/rssi/main.c **** 		pm_req->tn[i] = i;
1075:apps/rssi/main.c **** 	}
1076:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1077:apps/rssi/main.c **** }
1078:apps/rssi/main.c **** 
1079:apps/rssi/main.c **** static void handle_sync(void)
1080:apps/rssi/main.c **** {
1081:apps/rssi/main.c **** 	struct gsm48_system_information_type_1 *si1;
1082:apps/rssi/main.c **** 	struct gsm48_system_information_type_2 *si2;
1083:apps/rssi/main.c **** 	struct gsm48_system_information_type_2bis *si2bis;
1084:apps/rssi/main.c **** 	struct gsm48_system_information_type_2ter *si2ter;
1085:apps/rssi/main.c **** 	struct gsm48_system_information_type_3 *si3;
1086:apps/rssi/main.c **** 	struct gsm48_system_information_type_4 *si4;
1087:apps/rssi/main.c **** 
1088:apps/rssi/main.c **** 	if (mode != MODE_SYNC)
1089:apps/rssi/main.c **** 		return;
1090:apps/rssi/main.c **** 
1091:apps/rssi/main.c **** 	/* once we synced, we take the result and request UL measurement */
1092:apps/rssi/main.c **** 	if (sync_result) {
1093:apps/rssi/main.c **** 		uint16_t a = ul_arfcn;
1094:apps/rssi/main.c **** 
1095:apps/rssi/main.c **** 		sync_msg = sync_result;
1096:apps/rssi/main.c **** 		sync_result = NULL;
1097:apps/rssi/main.c **** 		refresh_display();
1098:apps/rssi/main.c **** 
1099:apps/rssi/main.c **** 		if (sync_msg[0] != 'o')
1100:apps/rssi/main.c **** 			return;
1101:apps/rssi/main.c **** 
1102:apps/rssi/main.c **** 		request_ul_levels(a);
1103:apps/rssi/main.c **** 
1104:apps/rssi/main.c **** 		return;
1105:apps/rssi/main.c **** 	}
1106:apps/rssi/main.c **** 
1107:apps/rssi/main.c **** 	if (tone_on)
1108:apps/rssi/main.c **** 		return;
1109:apps/rssi/main.c **** 
1110:apps/rssi/main.c **** 	/* no UL result, no SI result */
1111:apps/rssi/main.c **** 	if (!ul_new && !(si_new & 0x100))
1112:apps/rssi/main.c **** 		return;
1113:apps/rssi/main.c **** 
1114:apps/rssi/main.c **** 	/* new UL result */
1115:apps/rssi/main.c **** 	if (ul_new) {
1116:apps/rssi/main.c **** 		ul_new = 0;
1117:apps/rssi/main.c **** 		if (cursor < 0)
1118:apps/rssi/main.c **** 			refresh_display();
1119:apps/rssi/main.c **** 		return;
1120:apps/rssi/main.c **** 	}
1121:apps/rssi/main.c **** 
1122:apps/rssi/main.c **** 	/* decode si */
1123:apps/rssi/main.c **** 	switch (si_new & 0xff) {
1124:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_1:
1125:apps/rssi/main.c **** 		si1 = (struct gsm48_system_information_type_1 *)si_1;
1126:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si1->cell_channel_description,
1127:apps/rssi/main.c **** 	                sizeof(si1->cell_channel_description), 0xce,
1128:apps/rssi/main.c **** 					FREQ_TYPE_SERV);
1129:apps/rssi/main.c **** 		break;
1130:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2:
1131:apps/rssi/main.c **** 		si2 = (struct gsm48_system_information_type_2 *)si_2;
1132:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2->bcch_frequency_list,
1133:apps/rssi/main.c **** 	                sizeof(si2->bcch_frequency_list), 0xce,
1134:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2);
1135:apps/rssi/main.c **** 		break;
1136:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2bis:
1137:apps/rssi/main.c **** 		si2bis = (struct gsm48_system_information_type_2bis *)si_2bis;
1138:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2bis->bcch_frequency_list,
1139:apps/rssi/main.c **** 	                sizeof(si2bis->bcch_frequency_list), 0xce,
1140:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2bis);
1141:apps/rssi/main.c **** 		break;
1142:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2ter:
1143:apps/rssi/main.c **** 		si2ter = (struct gsm48_system_information_type_2ter *)si_2ter;
1144:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2ter->ext_bcch_frequency_list,
1145:apps/rssi/main.c **** 	                sizeof(si2ter->ext_bcch_frequency_list), 0x8e,
1146:apps/rssi/main.c **** 					FREQ_TYPE_NCELL_2ter);
1147:apps/rssi/main.c **** 		break;
1148:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_3:
1149:apps/rssi/main.c **** 		si3 = (struct gsm48_system_information_type_3 *)si_3;
1150:apps/rssi/main.c **** 		gsm48_decode_lai(&si3->lai, &mcc, &mnc, &lac);
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
1153:apps/rssi/main.c **** 			struct msgb *msg =
1154:apps/rssi/main.c **** 				l1ctl_msgb_alloc(L1CTL_CCCH_MODE_REQ);
1155:apps/rssi/main.c **** 			struct l1ctl_ccch_mode_req *req =
1156:apps/rssi/main.c **** 				(struct l1ctl_ccch_mode_req *)
1157:apps/rssi/main.c **** 					msgb_put(msg, sizeof(*req));
1158:apps/rssi/main.c **** 
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
1161:apps/rssi/main.c **** 					? CCCH_MODE_COMBINED
1162:apps/rssi/main.c **** 					: CCCH_MODE_NON_COMBINED;
1163:apps/rssi/main.c **** 			printf("ccch_mode=%d\n", ccch_conf);
1164:apps/rssi/main.c **** 
1165:apps/rssi/main.c **** 			l1a_l23_rx(SC_DLCI_L1A_L23, msg);
1166:apps/rssi/main.c **** 		}
1167:apps/rssi/main.c **** 		break;
1168:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_4:
1169:apps/rssi/main.c **** 		si4 = (struct gsm48_system_information_type_4 *)si_4;
1170:apps/rssi/main.c **** 		gsm48_decode_lai(&si4->lai, &mcc, &mnc, &lac);
1171:apps/rssi/main.c **** 		break;
1172:apps/rssi/main.c **** 	}
1173:apps/rssi/main.c **** 
1174:apps/rssi/main.c **** 	if (cursor >= 0)
1175:apps/rssi/main.c **** 		refresh_display();
1176:apps/rssi/main.c **** 
1177:apps/rssi/main.c **** 	/* tone depends on successfully received BCCH */
1178:apps/rssi/main.c **** 	buzzer_volume(tone);
1179:apps/rssi/main.c **** 	tone_time = jiffies;
1180:apps/rssi/main.c **** 	tone_on = 1;
1181:apps/rssi/main.c **** 	if ((si_new & 0xff) == 0xff)
1182:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_2));
1183:apps/rssi/main.c **** 	else
1184:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
1185:apps/rssi/main.c **** 	si_new = 0;
1186:apps/rssi/main.c **** }
1187:apps/rssi/main.c **** 
1188:apps/rssi/main.c **** static void enter_rach(void)
1189:apps/rssi/main.c **** {
1190:apps/rssi/main.c **** 	if (ccch_conf < 0)
1191:apps/rssi/main.c **** 		return;
1192:apps/rssi/main.c **** 
1193:apps/rssi/main.c **** 	if (rach)
1194:apps/rssi/main.c **** 		return;
1195:apps/rssi/main.c **** 
1196:apps/rssi/main.c **** #ifndef CONFIG_TX_ENABLE
1197:apps/rssi/main.c **** 	assign = ASSIGN_NO_TX;
1198:apps/rssi/main.c **** 	mode = MODE_RACH;
1199:apps/rssi/main.c **** 	/* display refresh is done by rach handler */
1200:apps/rssi/main.c **** #else
1201:apps/rssi/main.c **** 	struct msgb *msg1 = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
1203:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_req *pm_req = (struct l1ctl_neigh_pm_req *)
1204:apps/rssi/main.c **** 			msgb_put(msg1, sizeof(*pm_req));
1205:apps/rssi/main.c **** 	struct l1ctl_info_ul *ul = (struct l1ctl_info_ul *)
1206:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*ul));;
1207:apps/rssi/main.c **** 	struct l1ctl_rach_req *rach_req = (struct l1ctl_rach_req *)
1208:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*rach_req));
1209:apps/rssi/main.c **** 
1210:apps/rssi/main.c **** 	l1s.tx_power = 0;
1211:apps/rssi/main.c **** 
1212:apps/rssi/main.c **** 	pm_req->n = 0; /* disable */
1213:apps/rssi/main.c **** 
1214:apps/rssi/main.c **** 	rach_ra = 0x00;
1215:apps/rssi/main.c **** 	rach_req->ra = rach_ra;
1216:apps/rssi/main.c **** 	rach_req->offset = 0;
1217:apps/rssi/main.c **** 	rach_req->combined = (ccch_conf == 1);
1218:apps/rssi/main.c **** 
1219:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg1);
1220:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg2);
1221:apps/rssi/main.c **** 	rach = 1;
1222:apps/rssi/main.c **** 	rach_when = jiffies;
1223:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
1224:apps/rssi/main.c **** 	mode = MODE_RACH;
1225:apps/rssi/main.c **** 	refresh_display();
1226:apps/rssi/main.c **** #endif
1227:apps/rssi/main.c **** 
1228:apps/rssi/main.c **** }
1229:apps/rssi/main.c **** 
1230:apps/rssi/main.c **** static void exit_rach(void)
1231:apps/rssi/main.c **** {
1232:apps/rssi/main.c **** 	rach = 0;
1233:apps/rssi/main.c **** 
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
1235:apps/rssi/main.c **** 
1236:apps/rssi/main.c **** 	mode = MODE_SYNC;
1237:apps/rssi/main.c **** 	refresh_display();
1238:apps/rssi/main.c **** }
1239:apps/rssi/main.c **** 
1240:apps/rssi/main.c **** static void handle_assign(void)
1241:apps/rssi/main.c **** {
1242:apps/rssi/main.c **** 	if (mode != MODE_RACH)
1243:apps/rssi/main.c **** 		return;
1244:apps/rssi/main.c **** 
1245:apps/rssi/main.c **** 	if (assign == ASSIGN_NONE) {
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
1247:apps/rssi/main.c **** 
1248:apps/rssi/main.c **** 		if (!rach)
1249:apps/rssi/main.c **** 			return;
1250:apps/rssi/main.c **** 		if (elapsed < HZ * 2)
1251:apps/rssi/main.c **** 			return;
1252:apps/rssi/main.c **** 		assign = ASSIGN_TIMEOUT;
1253:apps/rssi/main.c **** 		rach = 0;
1254:apps/rssi/main.c **** 	}
1255:apps/rssi/main.c **** 
1256:apps/rssi/main.c **** 	refresh_display();
1257:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
1258:apps/rssi/main.c **** }
1259:apps/rssi/main.c **** 
1260:apps/rssi/main.c **** /* Main Program */
1261:apps/rssi/main.c **** const char *hr = "======================================================================\n";
1262:apps/rssi/main.c **** 
1263:apps/rssi/main.c **** /* match request reference agains request history */
1264:apps/rssi/main.c **** static int gsm48_match_ra(struct gsm48_req_ref *ref)
1265:apps/rssi/main.c **** {
 169              		.loc 2 1265 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL9:
1266:apps/rssi/main.c **** 	uint8_t ia_t1, ia_t2, ia_t3;
1267:apps/rssi/main.c **** 	uint8_t cr_t1, cr_t2, cr_t3;
1268:apps/rssi/main.c **** 
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 174              		.loc 2 1269 0
 175 0000 94309FE5 		ldr	r3, .L19
 176 0004 003093E5 		ldr	r3, [r3, #0]
 177 0008 000053E3 		cmp	r3, #0
1265:apps/rssi/main.c **** {
 178              		.loc 2 1265 0
 179 000c F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 180              	.LCFI3:
 181              		.cfi_def_cfa_offset 20
1270:apps/rssi/main.c **** 		ia_t1 = ref->t1;
1271:apps/rssi/main.c **** 		ia_t2 = ref->t2;
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
1273:apps/rssi/main.c **** 		ref = &rach_ref;
1274:apps/rssi/main.c **** 		cr_t1 = ref->t1;
1275:apps/rssi/main.c **** 		cr_t2 = ref->t2;
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
1278:apps/rssi/main.c **** 			return 1;
1279:apps/rssi/main.c **** 	}
1280:apps/rssi/main.c **** 
1281:apps/rssi/main.c **** 	return 0;
 182              		.loc 2 1281 0
 183 0010 0300A001 		moveq	r0, r3
 184              	.LVL10:
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 185              		.loc 2 1269 0
 186 0014 F080BD08 		ldmeqfd	sp!, {r4, r5, r6, r7, pc}
 187              		.cfi_offset 14, -4
 188              		.cfi_offset 7, -8
 189              		.cfi_offset 6, -12
 190              		.cfi_offset 5, -16
 191              		.cfi_offset 4, -20
1269:apps/rssi/main.c **** 	if (rach && ref->ra == rach_ra) {
 192              		.loc 2 1269 0 is_stmt 0 discriminator 1
 193 0018 80309FE5 		ldr	r3, .L19+4
 194 001c 0020D0E5 		ldrb	r2, [r0, #0]	@ zero_extendqisi2
 195 0020 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 196 0024 030052E1 		cmp	r2, r3
 197 0028 1900001A 		bne	.L17
 198              	.LVL11:
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 199              		.loc 2 1276 0 is_stmt 1
 200 002c 70109FE5 		ldr	r1, .L19+8
 201 0030 0120D1E5 		ldrb	r2, [r1, #1]	@ zero_extendqisi2
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 202              		.loc 2 1272 0
 203 0034 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 204 0038 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 205              		.loc 2 1276 0
 206 003c 0210D1E5 		ldrb	r1, [r1, #2]	@ zero_extendqisi2
 207 0040 075002E2 		and	r5, r2, #7
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 208              		.loc 2 1277 0
 209 0044 A221A0E1 		mov	r2, r2, lsr #3
 210 0048 A30152E1 		cmp	r2, r3, lsr #3
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 211              		.loc 2 1272 0
 212 004c 077003E2 		and	r7, r3, #7
1276:apps/rssi/main.c **** 		cr_t3 = (ref->t3_high << 3) | ref->t3_low;
 213              		.loc 2 1276 0
 214 0050 A142A0E1 		mov	r4, r1, lsr #5
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 215              		.loc 2 1277 0
 216 0054 0030A013 		movne	r3, #0
 217 0058 0130A003 		moveq	r3, #1
1271:apps/rssi/main.c **** 		ia_t2 = ref->t2;
 218              		.loc 2 1271 0
 219 005c 1F000CE2 		and	r0, ip, #31
 220              	.LVL12:
1275:apps/rssi/main.c **** 		cr_t2 = ref->t2;
 221              		.loc 2 1275 0
 222 0060 1F1001E2 		and	r1, r1, #31
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 223              		.loc 2 1277 0
 224 0064 010050E1 		cmp	r0, r1
 225 0068 0000A013 		movne	r0, #0
 226 006c 01000302 		andeq	r0, r3, #1
 227 0070 000050E3 		cmp	r0, #0
1272:apps/rssi/main.c **** 		ia_t3 = (ref->t3_high << 3) | ref->t3_low;
 228              		.loc 2 1272 0
 229 0074 AC62A0E1 		mov	r6, ip, lsr #5
 230              	.LVL13:
1277:apps/rssi/main.c **** 		if (ia_t1 == cr_t1 && ia_t2 == cr_t2 && ia_t3 == cr_t3)
 231              		.loc 2 1277 0
 232 0078 F080BD08 		ldmeqfd	sp!, {r4, r5, r6, r7, pc}
1264:apps/rssi/main.c **** static int gsm48_match_ra(struct gsm48_req_ref *ref)
 233              		.loc 2 1264 0 discriminator 1
 234 007c 870186E1 		orr	r0, r6, r7, asl #3
 235 0080 853184E1 		orr	r3, r4, r5, asl #3
 236 0084 030050E1 		cmp	r0, r3
 237 0088 0000A013 		movne	r0, #0
 238 008c 0100A003 		moveq	r0, #1
 239 0090 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 240              	.LVL14:
 241              	.L17:
 242              		.loc 2 1281 0
 243 0094 0000A0E3 		mov	r0, #0
1282:apps/rssi/main.c **** }
 244              		.loc 2 1282 0
 245 0098 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 246              	.L20:
 247              		.align	2
 248              	.L19:
 249 009c 00000000 		.word	.LANCHOR0
 250 00a0 00000000 		.word	rach_ra
 251 00a4 00000000 		.word	rach_ref
 252              		.cfi_endproc
 253              	.LFE133:
 255              		.section	.text.key_handler,"ax",%progbits
 256              		.align	2
 258              	key_handler:
 259              	.LFB142:
1283:apps/rssi/main.c **** 
1284:apps/rssi/main.c **** 
1285:apps/rssi/main.c **** /* note: called from IRQ context */
1286:apps/rssi/main.c **** static void rx_imm_ass(struct msgb *msg)
1287:apps/rssi/main.c **** {
1288:apps/rssi/main.c **** 	struct gsm48_imm_ass *ia = msgb_l3(msg);
1289:apps/rssi/main.c **** 
1290:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref)) {
1291:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1292:apps/rssi/main.c **** 		ta = ia->timing_advance;
1293:apps/rssi/main.c **** 		rach = 0;
1294:apps/rssi/main.c **** 	}
1295:apps/rssi/main.c **** }
1296:apps/rssi/main.c **** 
1297:apps/rssi/main.c **** /* note: called from IRQ context */
1298:apps/rssi/main.c **** static void rx_imm_ass_ext(struct msgb *msg)
1299:apps/rssi/main.c **** {
1300:apps/rssi/main.c **** 	struct gsm48_imm_ass_ext *ia = msgb_l3(msg);
1301:apps/rssi/main.c **** 
1302:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref1)) {
1303:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1304:apps/rssi/main.c **** 		ta = ia->timing_advance1;
1305:apps/rssi/main.c **** 		rach = 0;
1306:apps/rssi/main.c **** 	}
1307:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref2)) {
1308:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
1309:apps/rssi/main.c **** 		ta = ia->timing_advance2;
1310:apps/rssi/main.c **** 		rach = 0;
1311:apps/rssi/main.c **** 	}
1312:apps/rssi/main.c **** }
1313:apps/rssi/main.c **** 
1314:apps/rssi/main.c **** /* note: called from IRQ context */
1315:apps/rssi/main.c **** static void rx_imm_ass_rej(struct msgb *msg)
1316:apps/rssi/main.c **** {
1317:apps/rssi/main.c **** 	struct gsm48_imm_ass_rej *ia = msgb_l3(msg);
1318:apps/rssi/main.c **** 	struct gsm48_req_ref *req_ref;
1319:apps/rssi/main.c **** 	int i;
1320:apps/rssi/main.c **** 
1321:apps/rssi/main.c **** 	for (i = 0; i < 4; i++) {
1322:apps/rssi/main.c **** 		/* request reference */
1323:apps/rssi/main.c **** 		req_ref = (struct gsm48_req_ref *)
1324:apps/rssi/main.c **** 			(((uint8_t *)&ia->req_ref1) + i * 4);
1325:apps/rssi/main.c **** 		if (gsm48_match_ra(req_ref)) {
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
1327:apps/rssi/main.c **** 			rach = 0;
1328:apps/rssi/main.c **** 		}
1329:apps/rssi/main.c **** 	}
1330:apps/rssi/main.c **** }
1331:apps/rssi/main.c **** 
1332:apps/rssi/main.c **** /* note: called from IRQ context */
1333:apps/rssi/main.c **** static void rx_pch_agch(struct msgb *msg)
1334:apps/rssi/main.c **** {
1335:apps/rssi/main.c **** 	struct gsm48_system_information_type_header *sih;
1336:apps/rssi/main.c **** 
1337:apps/rssi/main.c **** 	/* store SI */
1338:apps/rssi/main.c **** 	sih = msgb_l3(msg);
1339:apps/rssi/main.c **** 	switch (sih->system_information) {
1340:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS:
1341:apps/rssi/main.c **** 		rx_imm_ass(msg);
1342:apps/rssi/main.c **** 		break;
1343:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS_EXT:
1344:apps/rssi/main.c **** 		rx_imm_ass_ext(msg);
1345:apps/rssi/main.c **** 		break;
1346:apps/rssi/main.c **** 	case GSM48_MT_RR_IMM_ASS_REJ:
1347:apps/rssi/main.c **** 		rx_imm_ass_rej(msg);
1348:apps/rssi/main.c **** 		break;
1349:apps/rssi/main.c **** 	}
1350:apps/rssi/main.c **** }
1351:apps/rssi/main.c **** 
1352:apps/rssi/main.c **** /* note: called from IRQ context */
1353:apps/rssi/main.c **** static void rx_bcch(struct msgb *msg)
1354:apps/rssi/main.c **** {
1355:apps/rssi/main.c **** 	struct gsm48_system_information_type_header *sih;
1356:apps/rssi/main.c **** 
1357:apps/rssi/main.c **** 	/* store SI */
1358:apps/rssi/main.c **** 	sih = msgb_l3(msg);
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
1360:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_1:
1361:apps/rssi/main.c **** 		memcpy(si_1, msgb_l3(msg), msgb_l3len(msg));
1362:apps/rssi/main.c **** 		break;
1363:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2:
1364:apps/rssi/main.c **** 		memcpy(si_2, msgb_l3(msg), msgb_l3len(msg));
1365:apps/rssi/main.c **** 		break;
1366:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2bis:
1367:apps/rssi/main.c **** 		memcpy(si_2bis, msgb_l3(msg), msgb_l3len(msg));
1368:apps/rssi/main.c **** 		break;
1369:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_2ter:
1370:apps/rssi/main.c **** 		memcpy(si_2ter, msgb_l3(msg), msgb_l3len(msg));
1371:apps/rssi/main.c **** 		break;
1372:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_3:
1373:apps/rssi/main.c **** 		memcpy(si_3, msgb_l3(msg), msgb_l3len(msg));
1374:apps/rssi/main.c **** 		break;
1375:apps/rssi/main.c **** 	case GSM48_MT_RR_SYSINFO_4:
1376:apps/rssi/main.c **** 		memcpy(si_4, msgb_l3(msg), msgb_l3len(msg));
1377:apps/rssi/main.c **** 		break;
1378:apps/rssi/main.c **** 	}
1379:apps/rssi/main.c **** 	si_new = sih->system_information | 0x100;
1380:apps/rssi/main.c **** }
1381:apps/rssi/main.c **** 
1382:apps/rssi/main.c **** /* note: called from IRQ context */
1383:apps/rssi/main.c **** static void l1a_l23_tx(struct msgb *msg)
1384:apps/rssi/main.c **** {
1385:apps/rssi/main.c **** 	struct l1ctl_hdr *l1h = (struct l1ctl_hdr *) msg->l1h;
1386:apps/rssi/main.c **** 	struct l1ctl_pm_conf *pmr;
1387:apps/rssi/main.c **** 	struct l1ctl_info_dl *dl;
1388:apps/rssi/main.c **** 	struct l1ctl_fbsb_conf *sb;
1389:apps/rssi/main.c **** 	uint8_t chan_type, chan_ts, chan_ss;
1390:apps/rssi/main.c **** 	struct l1ctl_neigh_pm_ind *pm_ind;
1391:apps/rssi/main.c **** 	struct gsm_time tm;
1392:apps/rssi/main.c **** 
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
1394:apps/rssi/main.c **** 	case L1CTL_PM_CONF:
1395:apps/rssi/main.c **** 		if (pm_mode == PM_SENT) {
1396:apps/rssi/main.c **** 			pmr = (struct l1ctl_pm_conf *) l1h->data;
1397:apps/rssi/main.c **** 			pm_meas[pm_count] = pmr->pm[0];
1398:apps/rssi/main.c **** 			pm_count++;
1399:apps/rssi/main.c **** 			pm_mode = PM_RESULT;
1400:apps/rssi/main.c **** 		}
1401:apps/rssi/main.c **** 		if (pm_mode == PM_RANGE_SENT) {
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
1403:apps/rssi/main.c **** 				(uint8_t *) pmr < msg->tail; pmr++) {
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
1406:apps/rssi/main.c **** 			}
1407:apps/rssi/main.c **** 			if ((l1h->flags & L1CTL_F_DONE))
1408:apps/rssi/main.c **** 				pm_mode = PM_RANGE_RESULT;
1409:apps/rssi/main.c **** 		}
1410:apps/rssi/main.c **** 		l1s.tpu_offset_correction += 5000 / NUM_PM_UL;
1411:apps/rssi/main.c **** 		break;
1412:apps/rssi/main.c **** 	case L1CTL_FBSB_CONF:
1413:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1414:apps/rssi/main.c **** 		sb = (struct l1ctl_fbsb_conf *) dl->payload;
1415:apps/rssi/main.c **** 		if (sb->result == 0)
1416:apps/rssi/main.c **** 			sync_result = "ok";
1417:apps/rssi/main.c **** 		else
1418:apps/rssi/main.c **** 			sync_result = "error";
1419:apps/rssi/main.c **** 		bsic = sb->bsic;
1420:apps/rssi/main.c **** 		break;
1421:apps/rssi/main.c **** 	case L1CTL_DATA_IND:
1422:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1423:apps/rssi/main.c **** 		msg->l2h = dl->payload;
1424:apps/rssi/main.c **** 		rsl_dec_chan_nr(dl->chan_nr, &chan_type, &chan_ss, &chan_ts);
1425:apps/rssi/main.c **** 
1426:apps/rssi/main.c **** 		power = dl->rx_level;
1427:apps/rssi/main.c **** 		if (dl->fire_crc >= 2) {
1428:apps/rssi/main.c **** 			if (chan_type == RSL_CHAN_BCCH)
1429:apps/rssi/main.c **** 				si_new = 0x1ff; /* error frame indication */
1430:apps/rssi/main.c **** 			break; /* free, but don't send to sercom */
1431:apps/rssi/main.c **** 		}
1432:apps/rssi/main.c **** 
1433:apps/rssi/main.c **** 		switch (chan_type) {
1434:apps/rssi/main.c **** 		case RSL_CHAN_BCCH:
1435:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
1436:apps/rssi/main.c **** 			rx_bcch(msg);
1437:apps/rssi/main.c **** 			break;
1438:apps/rssi/main.c **** 		case RSL_CHAN_PCH_AGCH:
1439:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
1440:apps/rssi/main.c **** 			rx_pch_agch(msg);
1441:apps/rssi/main.c **** 			break;
1442:apps/rssi/main.c **** 		}
1443:apps/rssi/main.c **** 		sercomm_sendmsg(SC_DLCI_L1A_L23, msg);
1444:apps/rssi/main.c **** 		return; /* msg is freed by sercom */
1445:apps/rssi/main.c **** 	case L1CTL_NEIGH_PM_IND:
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
1447:apps/rssi/main.c **** 			(uint8_t *) pm_ind < msg->tail; pm_ind++) {
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
1449:apps/rssi/main.c **** 			/* hold max only, if max enabled and level is lower */
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
1451:apps/rssi/main.c **** 				ul_max[pm_ind->tn] = ul_levels[pm_ind->tn];
1452:apps/rssi/main.c **** 			if (pm_ind->tn == 7)
1453:apps/rssi/main.c **** 				ul_new = 1;
1454:apps/rssi/main.c **** 		}
1455:apps/rssi/main.c **** 		break;
1456:apps/rssi/main.c **** 	case L1CTL_RACH_CONF:
1457:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
1459:apps/rssi/main.c **** 		rach_ref.t1 = tm.t1;
1460:apps/rssi/main.c **** 		rach_ref.t2 = tm.t2;
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
1463:apps/rssi/main.c **** 		break;
1464:apps/rssi/main.c **** 	}
1465:apps/rssi/main.c **** 
1466:apps/rssi/main.c **** 	msgb_free(msg);
1467:apps/rssi/main.c **** 
1468:apps/rssi/main.c **** }
1469:apps/rssi/main.c **** 
1470:apps/rssi/main.c **** static void console_rx_cb(uint8_t dlci, struct msgb *msg)
1471:apps/rssi/main.c **** {
1472:apps/rssi/main.c **** 	if (dlci != SC_DLCI_CONSOLE) {
1473:apps/rssi/main.c **** 		printf("Message for unknown DLCI %u\n", dlci);
1474:apps/rssi/main.c **** 		return;
1475:apps/rssi/main.c **** 	}
1476:apps/rssi/main.c **** 
1477:apps/rssi/main.c **** 	printf("Message on console DLCI: '%s'\n", msg->data);
1478:apps/rssi/main.c **** 	msgb_free(msg);
1479:apps/rssi/main.c **** }
1480:apps/rssi/main.c **** 
1481:apps/rssi/main.c **** static void l1a_l23_rx_cb(uint8_t dlci, struct msgb *msg)
1482:apps/rssi/main.c **** {
1483:apps/rssi/main.c **** 	int i;
1484:apps/rssi/main.c **** 	printf("l1a_l23_rx_cb (DLCI %d): ", dlci);
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
1486:apps/rssi/main.c **** 		printf("%02x ", msg->data[i]);
1487:apps/rssi/main.c **** 	puts("\n");
1488:apps/rssi/main.c **** }
1489:apps/rssi/main.c **** 
1490:apps/rssi/main.c **** static void key_handler(enum key_codes code, enum key_states state)
1491:apps/rssi/main.c **** {
 260              		.loc 2 1491 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL15:
1492:apps/rssi/main.c **** 	if (state != PRESSED) {
 266              		.loc 2 1492 0
 267 0000 000051E3 		cmp	r1, #0
 268 0004 4C309FE5 		ldr	r3, .L25
1493:apps/rssi/main.c **** 		key_pressed = 0;
 269              		.loc 2 1493 0
 270 0008 0020A013 		movne	r2, #0
 271 000c 04208315 		strne	r2, [r3, #4]
1492:apps/rssi/main.c **** 	if (state != PRESSED) {
 272              		.loc 2 1492 0
 273 0010 1EFF2F11 		bxne	lr
1494:apps/rssi/main.c **** 		return;
1495:apps/rssi/main.c **** 	}
1496:apps/rssi/main.c **** 	/* key repeat */
1497:apps/rssi/main.c **** 	if (!key_pressed) {
 274              		.loc 2 1497 0
 275 0014 042093E5 		ldr	r2, [r3, #4]
 276 0018 000052E3 		cmp	r2, #0
 277 001c 0A00001A 		bne	.L24
1498:apps/rssi/main.c **** 		key_pressed = 1;
 278              		.loc 2 1498 0
 279 0020 012082E2 		add	r2, r2, #1
 280 0024 042083E5 		str	r2, [r3, #4]
1499:apps/rssi/main.c **** 		key_pressed_when = jiffies;
 281              		.loc 2 1499 0
 282 0028 2C309FE5 		ldr	r3, .L25+4
 283 002c 002093E5 		ldr	r2, [r3, #0]
 284 0030 28309FE5 		ldr	r3, .L25+8
 285 0034 002083E5 		str	r2, [r3, #0]
1500:apps/rssi/main.c **** 		key_pressed_code = code;
 286              		.loc 2 1500 0
 287 0038 24309FE5 		ldr	r3, .L25+12
 288 003c 000083E5 		str	r0, [r3, #0]
1501:apps/rssi/main.c **** 		key_pressed_delay = HZ * 6 / 10;
 289              		.loc 2 1501 0
 290 0040 20309FE5 		ldr	r3, .L25+16
 291 0044 3C20A0E3 		mov	r2, #60
 292 0048 002083E5 		str	r2, [r3, #0]
 293              	.L24:
1502:apps/rssi/main.c **** 	}
1503:apps/rssi/main.c **** 
1504:apps/rssi/main.c **** 	key_code = code;
 294              		.loc 2 1504 0
 295 004c 18309FE5 		ldr	r3, .L25+20
 296 0050 000083E5 		str	r0, [r3, #0]
 297 0054 1EFF2FE1 		bx	lr
 298              	.L26:
 299              		.align	2
 300              	.L25:
 301 0058 00000000 		.word	.LANCHOR0
 302 005c 00000000 		.word	jiffies
 303 0060 00000000 		.word	key_pressed_when
 304 0064 00000000 		.word	key_pressed_code
 305 0068 00000000 		.word	key_pressed_delay
 306 006c 00000000 		.word	.LANCHOR1
 307              		.cfi_endproc
 308              	.LFE142:
 310              		.global	__udivsi3
 311              		.global	__divsi3
 312              		.global	__modsi3
 313              		.section	.text.refresh_display,"ax",%progbits
 314              		.align	2
 316              	refresh_display:
 317              	.LFB110:
 172:apps/rssi/main.c **** {
 318              		.loc 2 172 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 28
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 323              	.LCFI4:
 324              		.cfi_def_cfa_offset 36
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 325              		.loc 2 174 0
 326 0004 CC3F9FE5 		ldr	r3, .L152
 327              	.LBB161:
 328              	.LBB162:
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 329              		.loc 1 56 0
 330 0008 CC5F9FE5 		ldr	r5, .L152+4
 331              		.cfi_offset 14, -4
 332              		.cfi_offset 11, -8
 333              		.cfi_offset 10, -12
 334              		.cfi_offset 9, -16
 335              		.cfi_offset 8, -20
 336              		.cfi_offset 7, -24
 337              		.cfi_offset 6, -28
 338              		.cfi_offset 5, -32
 339              		.cfi_offset 4, -36
 340              	.LBE162:
 341              	.LBE161:
 174:apps/rssi/main.c **** 	int bat = battery_info.battery_percent;
 342              		.loc 2 174 0
 343 000c 104093E5 		ldr	r4, [r3, #16]
 344              	.LVL16:
 172:apps/rssi/main.c **** {
 345              		.loc 2 172 0
 346 0010 24D04DE2 		sub	sp, sp, #36
 347              	.LCFI5:
 348              		.cfi_def_cfa_offset 72
 349              	.LBB164:
 350              	.LBB163:
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
 351              		.loc 1 56 0
 352 0014 003095E5 		ldr	r3, [r5, #0]
 353              	.LVL17:
 354 0018 0FE0A0E1 		mov	lr, pc
 355 001c 0CF093E5 		ldr	pc, [r3, #12]
 356              	.LVL18:
 357              	.LBE163:
 358              	.LBE164:
 359              	.LBB165:
 360              	.LBB166:
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
  88:include/fb/framebuffer.h **** }
  89:include/fb/framebuffer.h **** 
  90:include/fb/framebuffer.h **** static inline void
  91:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 361              		.loc 1 92 0
 362 0020 003095E5 		ldr	r3, [r5, #0]
 363 0024 FF24E0E3 		mvn	r2, #-16777216
 364 0028 2C2083E5 		str	r2, [r3, #44]
 365              	.LBE166:
 366              	.LBE165:
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 367              		.loc 2 180 0
 368 002c AC2F9FE5 		ldr	r2, .L152+8
 369 0030 082092E5 		ldr	r2, [r2, #8]
 370 0034 010052E3 		cmp	r2, #1
 371 0038 6600000A 		beq	.L28
 180:apps/rssi/main.c **** 	if (mode != MODE_SPECTRUM && !(mode == MODE_SYNC && cursor < 0)) {
 372              		.loc 2 180 0 is_stmt 0 discriminator 1
 373 003c 030052E3 		cmp	r2, #3
 374 0040 0300001A 		bne	.L29
 375 0044 982F9FE5 		ldr	r2, .L152+12
 376 0048 002092E5 		ldr	r2, [r2, #0]
 377 004c 000052E3 		cmp	r2, #0
 378 0050 600000BA 		blt	.L28
 379              	.L29:
 380              	.LVL19:
 381              	.LBB167:
 382              	.LBB168:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 383              		.loc 1 87 0 is_stmt 1
 384 0054 FF20A0E3 		mov	r2, #255
 385              	.LBE168:
 386              	.LBE167:
 387              	.LBB170:
 388              	.LBB171:
  93:include/fb/framebuffer.h **** }
  94:include/fb/framebuffer.h **** 
  95:include/fb/framebuffer.h **** static inline void
  96:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
  97:include/fb/framebuffer.h **** 	framebuffer->font = fid;
 389              		.loc 1 97 0
 390 0058 0000A0E3 		mov	r0, #0
 391              	.LBE171:
 392              	.LBE170:
 393              	.LBB173:
 394              	.LBB169:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 395              		.loc 1 87 0
 396 005c 282083E5 		str	r2, [r3, #40]
 397              	.LVL20:
 398              	.LBE169:
 399              	.LBE173:
 400              	.LBB174:
 401              	.LBB172:
 402              		.loc 1 97 0
 403 0060 300083E5 		str	r0, [r3, #48]
 404              	.LBE172:
 405              	.LBE174:
 183:apps/rssi/main.c **** 		fb_gotoxy(0, 7);
 406              		.loc 2 183 0
 407 0064 0710A0E3 		mov	r1, #7
 408              	.LBB175:
 409              	.LBB177:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 410              		.loc 1 87 0
 411 0068 6C5F9FE5 		ldr	r5, .L152+4
 412              	.LBE177:
 413              	.LBE175:
 183:apps/rssi/main.c **** 		fb_gotoxy(0, 7);
 414              		.loc 2 183 0
 415 006c FEFFFFEB 		bl	fb_gotoxy
 184:apps/rssi/main.c **** 		fb_putstr("Osmocom RSSI", -1);
 416              		.loc 2 184 0
 417 0070 0010E0E3 		mvn	r1, #0
 418 0074 6C0F9FE5 		ldr	r0, .L152+16
 419 0078 FEFFFFEB 		bl	fb_putstr
 420              	.LVL21:
 421              	.LBB180:
 422              	.LBB178:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 423              		.loc 1 87 0
 424 007c 003095E5 		ldr	r3, [r5, #0]
 425              	.LBE178:
 426              	.LBE180:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 427              		.loc 2 187 0
 428 0080 B002D3E1 		ldrh	r0, [r3, #32]
 429              	.LBB181:
 430              	.LBB176:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 431              		.loc 1 87 0
 432 0084 602F9FE5 		ldr	r2, .L152+20
 433              	.LBE176:
 434              	.LBE181:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 435              		.loc 2 187 0
 436 0088 0F0040E2 		sub	r0, r0, #15
 437              	.LBB182:
 438              	.LBB179:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 439              		.loc 1 87 0
 440 008c 282083E5 		str	r2, [r3, #40]
 441              	.LVL22:
 442              	.LBE179:
 443              	.LBE182:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 444              		.loc 2 187 0
 445 0090 0008A0E1 		mov	r0, r0, asl #16
 446              	.LBB183:
 447              	.LBB184:
 448              		.loc 1 97 0
 449 0094 0320A0E3 		mov	r2, #3
 450 0098 302083E5 		str	r2, [r3, #48]
 451              	.LBE184:
 452              	.LBE183:
 187:apps/rssi/main.c **** 		fb_gotoxy(framebuffer->width - 15, 8);
 453              		.loc 2 187 0
 454 009c 2008A0E1 		mov	r0, r0, lsr #16
 455 00a0 0810A0E3 		mov	r1, #8
 456 00a4 FEFFFFEB 		bl	fb_gotoxy
 188:apps/rssi/main.c **** 		if (bat >= 100 && (battery_info.flags & BATTERY_CHG_ENABLED)
 457              		.loc 2 188 0
 458 00a8 630054E3 		cmp	r4, #99
 459 00ac 070000DA 		ble	.L30
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 460              		.loc 2 189 0
 461 00b0 203F9FE5 		ldr	r3, .L152
 462 00b4 003093E5 		ldr	r3, [r3, #0]
 463 00b8 063003E2 		and	r3, r3, #6
 464 00bc 020053E3 		cmp	r3, #2
 190:apps/rssi/main.c **** 			fb_putstr("@HHBC", framebuffer->width);
 465              		.loc 2 190 0
 466 00c0 00309505 		ldreq	r3, [r5, #0]
 467 00c4 240F9F05 		ldreq	r0, .L152+24
 189:apps/rssi/main.c **** 		 && !(battery_info.flags & BATTERY_CHARGING))
 468              		.loc 2 189 0
 469 00c8 0500001A 		bne	.L31
 470 00cc 140000EA 		b	.L141
 471              	.L30:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 472              		.loc 2 192 0
 473 00d0 1D0054E3 		cmp	r4, #29
 474 00d4 4120A0D3 		movle	r2, #65
 475 00d8 540400DA 		ble	.L33
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 476              		.loc 2 192 0 is_stmt 0 discriminator 3
 477 00dc 3B0054E3 		cmp	r4, #59
 478 00e0 510400DA 		ble	.L119
 479              	.L31:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 480              		.loc 2 192 0 discriminator 6
 481 00e4 590054E3 		cmp	r4, #89
 482 00e8 4230A0C3 		movgt	r3, #66
 483 00ec 0320A0C1 		movgt	r2, r3
 484 00f0 0310A0C1 		movgt	r1, r3
 485 00f4 020000CA 		bgt	.L34
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 486              		.loc 2 192 0
 487 00f8 4230A0E3 		mov	r3, #66
 488 00fc 0320A0E1 		mov	r2, r3
 489              	.L117:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 490              		.loc 2 192 0 discriminator 8
 491 0100 4110A0E3 		mov	r1, #65
 492              	.L34:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 493              		.loc 2 192 0 discriminator 9
 494 0104 10408DE2 		add	r4, sp, #16
 495              	.LVL23:
 496 0108 00108DE5 		str	r1, [sp, #0]
 497 010c 0400A0E1 		mov	r0, r4
 498 0110 DC1E9FE5 		ldr	r1, .L152+28
 499 0114 FEFFFFEB 		bl	sprintf
 194:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 500              		.loc 2 194 0 is_stmt 1 discriminator 9
 501 0118 BC3E9FE5 		ldr	r3, .L152+4
 502 011c 003093E5 		ldr	r3, [r3, #0]
 503 0120 0400A0E1 		mov	r0, r4
 504              	.L141:
 505 0124 B012D3E1 		ldrh	r1, [r3, #32]
 506 0128 FEFFFFEB 		bl	fb_putstr
 196:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 507              		.loc 2 196 0 discriminator 9
 508 012c 0000A0E3 		mov	r0, #0
 509 0130 0810A0E3 		mov	r1, #8
 510 0134 FEFFFFEB 		bl	fb_gotoxy
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 511              		.loc 2 197 0 discriminator 9
 512 0138 B83E9FE5 		ldr	r3, .L152+32
 513 013c 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 514 0140 270053E3 		cmp	r3, #39
 515 0144 0700008A 		bhi	.L121
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 516              		.loc 2 197 0 is_stmt 0 discriminator 3
 517 0148 090053E3 		cmp	r3, #9
 518 014c 4710A093 		movls	r1, #71
 519 0150 4720A0E3 		mov	r2, #71
 520 0154 0130A091 		movls	r3, r1
 521 0158 4610A083 		movhi	r1, #70
 522 015c 4430A083 		movhi	r3, #68
 523 0160 0200A0E1 		mov	r0, r2
 524 0164 030000EA 		b	.L35
 525              	.L121:
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 526              		.loc 2 197 0
 527 0168 4610A0E3 		mov	r1, #70
 528 016c 4430A0E3 		mov	r3, #68
 529 0170 0320A0E1 		mov	r2, r3
 530 0174 0100A0E1 		mov	r0, r1
 531              	.L35:
 200:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 532              		.loc 2 200 0 is_stmt 1 discriminator 12
 533 0178 5C5E9FE5 		ldr	r5, .L152+4
 197:apps/rssi/main.c **** 		sprintf(text, "%c%cE%c%c", (power >= 40) ? 'D':'G',
 534              		.loc 2 197 0 discriminator 12
 535 017c 10408DE2 		add	r4, sp, #16
 536 0180 00108DE5 		str	r1, [sp, #0]
 537 0184 04008DE5 		str	r0, [sp, #4]
 538 0188 6C1E9FE5 		ldr	r1, .L152+36
 539 018c 0400A0E1 		mov	r0, r4
 540 0190 FEFFFFEB 		bl	sprintf
 200:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 541              		.loc 2 200 0 discriminator 12
 542 0194 003095E5 		ldr	r3, [r5, #0]
 543 0198 0400A0E1 		mov	r0, r4
 544 019c B012D3E1 		ldrh	r1, [r3, #32]
 545 01a0 FEFFFFEB 		bl	fb_putstr
 546              	.LVL24:
 547              	.LBB185:
 548              	.LBB186:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 549              		.loc 1 87 0 discriminator 12
 550 01a4 003095E5 		ldr	r3, [r5, #0]
 551 01a8 FF2CA0E3 		mov	r2, #65280
 552 01ac 282083E5 		str	r2, [r3, #40]
 553              	.LBE186:
 554              	.LBE185:
 202:apps/rssi/main.c **** 		fb_gotoxy(0, 10);
 555              		.loc 2 202 0 discriminator 12
 556 01b0 0000A0E3 		mov	r0, #0
 557 01b4 0A10A0E3 		mov	r1, #10
 558 01b8 FEFFFFEB 		bl	fb_gotoxy
 203:apps/rssi/main.c **** 		fb_boxto(framebuffer->width - 1, 10);
 559              		.loc 2 203 0 discriminator 12
 560 01bc 003095E5 		ldr	r3, [r5, #0]
 561 01c0 B002D3E1 		ldrh	r0, [r3, #32]
 562 01c4 010040E2 		sub	r0, r0, #1
 563 01c8 0008A0E1 		mov	r0, r0, asl #16
 564 01cc 2008A0E1 		mov	r0, r0, lsr #16
 565 01d0 0A10A0E3 		mov	r1, #10
 566 01d4 FEFFFFEB 		bl	fb_boxto
 567              	.LVL25:
 568              	.L28:
 569              	.LBB187:
 570              	.LBB188:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 571              		.loc 1 87 0
 572 01d8 FC3D9FE5 		ldr	r3, .L152+4
 573 01dc 003093E5 		ldr	r3, [r3, #0]
 574 01e0 0000A0E3 		mov	r0, #0
 575              	.LBE188:
 576              	.LBE187:
 577              	.LBB190:
 578              	.LBB191:
 579              		.loc 1 97 0
 580 01e4 0220A0E3 		mov	r2, #2
 581              	.LBE191:
 582              	.LBE190:
 583              	.LBB193:
 584              	.LBB189:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 585              		.loc 1 87 0
 586 01e8 280083E5 		str	r0, [r3, #40]
 587              	.LVL26:
 588              	.LBE189:
 589              	.LBE193:
 590              	.LBB194:
 591              	.LBB192:
 592              		.loc 1 97 0
 593 01ec 302083E5 		str	r2, [r3, #48]
 594              	.LBE192:
 595              	.LBE194:
 209:apps/rssi/main.c **** 	if (mode == MODE_RACH) {
 596              		.loc 2 209 0
 597 01f0 E83D9FE5 		ldr	r3, .L152+8
 598 01f4 083093E5 		ldr	r3, [r3, #8]
 599 01f8 040053E3 		cmp	r3, #4
 600 01fc 4100001A 		bne	.L37
 601              	.LBB195:
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 602              		.loc 2 210 0
 603 0200 F83D9FE5 		ldr	r3, .L152+40
 604 0204 007093E5 		ldr	r7, [r3, #0]
 605 0208 F43D9FE5 		ldr	r3, .L152+44
 212:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 606              		.loc 2 212 0
 607 020c 1C10A0E3 		mov	r1, #28
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 608              		.loc 2 210 0
 609 0210 006093E5 		ldr	r6, [r3, #0]
 610              	.LVL27:
 212:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 611              		.loc 2 212 0
 612 0214 FEFFFFEB 		bl	fb_gotoxy
 613              	.LVL28:
 213:apps/rssi/main.c **** 		switch (assign) {
 614              		.loc 2 213 0
 615 0218 E83D9FE5 		ldr	r3, .L152+48
 616 021c 003093E5 		ldr	r3, [r3, #0]
 617 0220 040053E3 		cmp	r3, #4
 618 0224 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 619 0228 210000EA 		b	.L38
 620              	.L44:
 621 022c 40020000 		.word	.L39
 622 0230 A0020000 		.word	.L40
 623 0234 48020000 		.word	.L41
 624 0238 98020000 		.word	.L42
 625 023c A8020000 		.word	.L43
 626              	.L39:
 215:apps/rssi/main.c **** 			fb_putstr("Rach sent...", -1);
 627              		.loc 2 215 0
 628 0240 C40D9FE5 		ldr	r0, .L152+52
 629 0244 180000EA 		b	.L142
 630              	.L41:
 218:apps/rssi/main.c **** 			sprintf(text, "TA = %d", ta);
 631              		.loc 2 218 0
 632 0248 C05D9FE5 		ldr	r5, .L152+56
 633 024c 10408DE2 		add	r4, sp, #16
 634 0250 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 635 0254 B81D9FE5 		ldr	r1, .L152+60
 636 0258 0400A0E1 		mov	r0, r4
 637 025c FEFFFFEB 		bl	sprintf
 219:apps/rssi/main.c **** 			fb_putstr(text, -1);
 638              		.loc 2 219 0
 639 0260 0010E0E3 		mvn	r1, #0
 640 0264 0400A0E1 		mov	r0, r4
 641 0268 FEFFFFEB 		bl	fb_putstr
 220:apps/rssi/main.c **** 			fb_gotoxy(0,36);
 642              		.loc 2 220 0
 643 026c 0000A0E3 		mov	r0, #0
 644 0270 2410A0E3 		mov	r1, #36
 645 0274 FEFFFFEB 		bl	fb_gotoxy
 221:apps/rssi/main.c **** 			sprintf(text, "(%dm)", ta * 554);
 646              		.loc 2 221 0
 647 0278 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 648 027c 942D9FE5 		ldr	r2, .L152+64
 649 0280 0400A0E1 		mov	r0, r4
 650 0284 901D9FE5 		ldr	r1, .L152+68
 651 0288 930202E0 		mul	r2, r3, r2
 652 028c FEFFFFEB 		bl	sprintf
 222:apps/rssi/main.c **** 			fb_putstr(text, -1);
 653              		.loc 2 222 0
 654 0290 0400A0E1 		mov	r0, r4
 655 0294 040000EA 		b	.L142
 656              	.L42:
 225:apps/rssi/main.c **** 			fb_putstr("Rejected!", -1);
 657              		.loc 2 225 0
 658 0298 800D9FE5 		ldr	r0, .L152+72
 659 029c 020000EA 		b	.L142
 660              	.L40:
 228:apps/rssi/main.c **** 			fb_putstr("TX disabled", -1);
 661              		.loc 2 228 0
 662 02a0 7C0D9FE5 		ldr	r0, .L152+76
 663 02a4 000000EA 		b	.L142
 664              	.L43:
 231:apps/rssi/main.c **** 			fb_putstr("Timeout", -1);
 665              		.loc 2 231 0
 666 02a8 780D9FE5 		ldr	r0, .L152+80
 667              	.L142:
 668 02ac 0010E0E3 		mvn	r1, #0
 669 02b0 FEFFFFEB 		bl	fb_putstr
 670              	.L38:
 234:apps/rssi/main.c **** 		switch (assign) {
 671              		.loc 2 234 0
 672 02b4 4C3D9FE5 		ldr	r3, .L152+48
 673 02b8 003093E5 		ldr	r3, [r3, #0]
 674 02bc 023043E2 		sub	r3, r3, #2
 675 02c0 010053E3 		cmp	r3, #1
 676 02c4 0F00008A 		bhi	.L37
 237:apps/rssi/main.c **** 			fb_gotoxy(0,44);
 677              		.loc 2 237 0
 678 02c8 0000A0E3 		mov	r0, #0
 679 02cc 2C10A0E3 		mov	r1, #44
 680 02d0 FEFFFFEB 		bl	fb_gotoxy
 210:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 681              		.loc 2 210 0
 682 02d4 076066E0 		rsb	r6, r6, r7
 683              	.LVL29:
 238:apps/rssi/main.c **** 			sprintf(text, "Delay:%ldms", elapsed * 1000 / HZ);
 684              		.loc 2 238 0
 685 02d8 FA0FA0E3 		mov	r0, #1000
 686 02dc 6410A0E3 		mov	r1, #100
 687 02e0 960000E0 		mul	r0, r6, r0
 688 02e4 FEFFFFEB 		bl	__udivsi3
 689 02e8 10408DE2 		add	r4, sp, #16
 690 02ec 0020A0E1 		mov	r2, r0
 691 02f0 341D9FE5 		ldr	r1, .L152+84
 692 02f4 0400A0E1 		mov	r0, r4
 693 02f8 FEFFFFEB 		bl	sprintf
 239:apps/rssi/main.c **** 			fb_putstr(text, -1);
 694              		.loc 2 239 0
 695 02fc 0400A0E1 		mov	r0, r4
 696 0300 0010E0E3 		mvn	r1, #0
 697 0304 FEFFFFEB 		bl	fb_putstr
 698              	.L37:
 699              	.LBE195:
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 700              		.loc 2 247 0
 701 0308 D0AC9FE5 		ldr	sl, .L152+8
 702 030c 08309AE5 		ldr	r3, [sl, #8]
 703 0310 030053E3 		cmp	r3, #3
 704 0314 9E00001A 		bne	.L46
 247:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0) {
 705              		.loc 2 247 0 is_stmt 0 discriminator 1
 706 0318 C43C9FE5 		ldr	r3, .L152+12
 707 031c 003093E5 		ldr	r3, [r3, #0]
 708 0320 000053E3 		cmp	r3, #0
 709 0324 9A0000AA 		bge	.L46
 710              	.LBB196:
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 711              		.loc 2 249 0 is_stmt 1
 712 0328 AC8C9FE5 		ldr	r8, .L152+4
 713 032c 003098E5 		ldr	r3, [r8, #0]
 714 0330 B052D3E1 		ldrh	r5, [r3, #32]
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 715              		.loc 2 250 0
 716 0334 B272D3E1 		ldrh	r7, [r3, #34]
 249:apps/rssi/main.c **** 		int offset = (framebuffer->width - 96) >> 1;
 717              		.loc 2 249 0
 718 0338 605045E2 		sub	r5, r5, #96
 719 033c C550A0E1 		mov	r5, r5, asr #1
 720              	.LVL30:
 250:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 721              		.loc 2 250 0
 722 0340 197047E2 		sub	r7, r7, #25
 723              	.LVL31:
 724              	.LBB197:
 725              	.LBB199:
 726              		.loc 1 97 0
 727 0344 0040A0E3 		mov	r4, #0
 728 0348 035085E2 		add	r5, r5, #3
 729              	.LVL32:
 730              	.LBE199:
 731              	.LBE197:
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 732              		.loc 2 267 0
 733 034c 0A9087E2 		add	r9, r7, #10
 734              	.LBB202:
 735              	.LBB200:
 736              		.loc 1 97 0
 737 0350 0558A0E1 		mov	r5, r5, asl #16
 738              	.LVL33:
 739              	.LBE200:
 740              	.LBE202:
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 741              		.loc 2 267 0
 742 0354 0998A0E1 		mov	r9, r9, asl #16
 743              	.LBB203:
 744              	.LBB198:
 745              		.loc 1 97 0
 746 0358 304083E5 		str	r4, [r3, #48]
 747              	.LVL34:
 748              	.LBE198:
 749              	.LBE203:
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 750              		.loc 2 260 0
 751 035c CCBC9FE5 		ldr	fp, .L152+88
 752              	.LBB204:
 753              	.LBB201:
 754              		.loc 1 97 0
 755 0360 2558A0E1 		mov	r5, r5, lsr #16
 756              	.LBE201:
 757              	.LBE204:
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 758              		.loc 2 267 0
 759 0364 2998A0E1 		mov	r9, r9, lsr #16
 760              	.LVL35:
 761              	.L52:
 254:apps/rssi/main.c **** 			if (uplink)
 762              		.loc 2 254 0
 763 0368 0C309AE5 		ldr	r3, [sl, #12]
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 764              		.loc 2 259 0
 765 036c 030045E2 		sub	r0, r5, #3
 254:apps/rssi/main.c **** 			if (uplink)
 766              		.loc 2 254 0
 767 0370 000053E3 		cmp	r3, #0
 768              	.LBB205:
 769              	.LBB206:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 770              		.loc 1 92 0
 771 0374 003098E5 		ldr	r3, [r8, #0]
 772 0378 FF24E0E3 		mvn	r2, #-16777216
 773              	.LBE206:
 774              	.LBE205:
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 775              		.loc 2 259 0
 776 037c 0008A0E1 		mov	r0, r0, asl #16
 171:apps/rssi/main.c **** static void refresh_display(void)
 777              		.loc 2 171 0
 778 0380 03608412 		addne	r6, r4, #3
 779              	.LBB208:
 780              	.LBB207:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 781              		.loc 1 92 0
 782 0384 2C2083E5 		str	r2, [r3, #44]
 783              	.LBE207:
 784              	.LBE208:
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 785              		.loc 2 259 0
 786 0388 2008A0E1 		mov	r0, r0, lsr #16
 787 038c 0710A0E3 		mov	r1, #7
 255:apps/rssi/main.c **** 				tn = (i + 3) & 7; /* UL is shifted by 3 */
 788              		.loc 2 255 0
 789 0390 07600612 		andne	r6, r6, #7
 790              	.LVL36:
 254:apps/rssi/main.c **** 			if (uplink)
 791              		.loc 2 254 0
 792 0394 0460A001 		moveq	r6, r4
 793              	.LVL37:
 259:apps/rssi/main.c **** 			fb_gotoxy(offset + 12 * i, 7);
 794              		.loc 2 259 0
 795 0398 FEFFFFEB 		bl	fb_gotoxy
 260:apps/rssi/main.c **** 			l = (max) ? ul_max[tn] : ul_levels[tn];
 796              		.loc 2 260 0
 797 039c 10309AE5 		ldr	r3, [sl, #16]
 798 03a0 000053E3 		cmp	r3, #0
 799 03a4 883C9F05 		ldreq	r3, .L152+92
 800 03a8 0620DB17 		ldrneb	r2, [fp, r6]	@ zero_extendqisi2
 801 03ac 0620D307 		ldreqb	r2, [r3, r6]	@ zero_extendqisi2
 802              	.LVL38:
 261:apps/rssi/main.c **** 			l = 110 - l;
 803              		.loc 2 261 0
 804 03b0 6E2062E2 		rsb	r2, r2, #110
 805              	.LVL39:
 262:apps/rssi/main.c **** 			if (l >= 100)
 806              		.loc 2 262 0
 807 03b4 630052E3 		cmp	r2, #99
 263:apps/rssi/main.c **** 				l -= 100;
 808              		.loc 2 263 0
 809 03b8 642042C2 		subgt	r2, r2, #100
 810              	.LVL40:
 264:apps/rssi/main.c **** 			sprintf(text, "%02d", l);
 811              		.loc 2 264 0
 812 03bc 741C9FE5 		ldr	r1, .L152+96
 813 03c0 10008DE2 		add	r0, sp, #16
 814 03c4 FEFFFFEB 		bl	sprintf
 815              	.LVL41:
 265:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 816              		.loc 2 265 0
 817 03c8 003098E5 		ldr	r3, [r8, #0]
 818 03cc 10008DE2 		add	r0, sp, #16
 819 03d0 B012D3E1 		ldrh	r1, [r3, #32]
 820 03d4 FEFFFFEB 		bl	fb_putstr
 821              	.LVL42:
 822              	.LBB209:
 823              	.LBB210:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 824              		.loc 1 92 0
 825 03d8 003098E5 		ldr	r3, [r8, #0]
 826 03dc 00C0A0E3 		mov	ip, #0
 827 03e0 2CC083E5 		str	ip, [r3, #44]
 828              	.LBE210:
 829              	.LBE209:
 267:apps/rssi/main.c **** 			fb_gotoxy(offset + 3 + 12 * i, height + 10);
 830              		.loc 2 267 0
 831 03e4 0500A0E1 		mov	r0, r5
 832 03e8 0910A0E1 		mov	r1, r9
 833 03ec FEFFFFEB 		bl	fb_gotoxy
 268:apps/rssi/main.c **** 			fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_levels[tn] * height / 64);
 834              		.loc 2 268 0
 835 03f0 3CEC9FE5 		ldr	lr, .L152+92
 836 03f4 0610DEE7 		ldrb	r1, [lr, r6]	@ zero_extendqisi2
 837 03f8 970101E0 		mul	r1, r7, r1
 838 03fc 053085E2 		add	r3, r5, #5
 839 0400 0338A0E1 		mov	r3, r3, asl #16
 840 0404 2338A0E1 		mov	r3, r3, lsr #16
 841 0408 000051E3 		cmp	r1, #0
 842 040c 0C308DE5 		str	r3, [sp, #12]
 843 0410 3F3081E2 		add	r3, r1, #63
 844 0414 0310A0B1 		movlt	r1, r3
 845 0418 411349E0 		sub	r1, r9, r1, asr #6
 846 041c 0118A0E1 		mov	r1, r1, asl #16
 847 0420 0C009DE5 		ldr	r0, [sp, #12]
 848 0424 2118A0E1 		mov	r1, r1, lsr #16
 849 0428 FEFFFFEB 		bl	fb_boxto
 269:apps/rssi/main.c **** 			if (max) {
 850              		.loc 2 269 0
 851 042c 10309AE5 		ldr	r3, [sl, #16]
 852 0430 000053E3 		cmp	r3, #0
 853 0434 1300000A 		beq	.L51
 270:apps/rssi/main.c **** 				fb_gotoxy(offset + 3 + 12 * i, height + 10 - ul_max[tn] * height / 64);
 854              		.loc 2 270 0
 855 0438 0610DBE7 		ldrb	r1, [fp, r6]	@ zero_extendqisi2
 856 043c 970101E0 		mul	r1, r7, r1
 857 0440 3F3081E2 		add	r3, r1, #63
 858 0444 000051E3 		cmp	r1, #0
 859 0448 0310A0B1 		movlt	r1, r3
 860 044c 411349E0 		sub	r1, r9, r1, asr #6
 861 0450 0118A0E1 		mov	r1, r1, asl #16
 862 0454 0500A0E1 		mov	r0, r5
 863 0458 2118A0E1 		mov	r1, r1, lsr #16
 864 045c FEFFFFEB 		bl	fb_gotoxy
 271:apps/rssi/main.c **** 				fb_boxto(offset + 3 + 12 * i + 5, height + 10 - ul_max[tn] * height / 64);
 865              		.loc 2 271 0
 866 0460 0610DBE7 		ldrb	r1, [fp, r6]	@ zero_extendqisi2
 867 0464 970101E0 		mul	r1, r7, r1
 868 0468 3F3081E2 		add	r3, r1, #63
 869 046c 000051E3 		cmp	r1, #0
 870 0470 0310A0B1 		movlt	r1, r3
 871 0474 411349E0 		sub	r1, r9, r1, asr #6
 872 0478 0118A0E1 		mov	r1, r1, asl #16
 873 047c 0C009DE5 		ldr	r0, [sp, #12]
 874 0480 2118A0E1 		mov	r1, r1, lsr #16
 875 0484 FEFFFFEB 		bl	fb_boxto
 876              	.L51:
 253:apps/rssi/main.c **** 		for (i = 0; i < 8; i++) {
 877              		.loc 2 253 0
 878 0488 014084E2 		add	r4, r4, #1
 879              	.LVL43:
 880 048c 0C5085E2 		add	r5, r5, #12
 881 0490 0558A0E1 		mov	r5, r5, asl #16
 882 0494 080054E3 		cmp	r4, #8
 883 0498 2558A0E1 		mov	r5, r5, lsr #16
 884 049c B1FFFF1A 		bne	.L52
 885              	.LVL44:
 886              	.LBB211:
 887              	.LBB212:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 888              		.loc 1 92 0
 889 04a0 344B9FE5 		ldr	r4, .L152+4
 890              	.LVL45:
 891 04a4 003094E5 		ldr	r3, [r4, #0]
 892 04a8 FE24E0E3 		mvn	r2, #-33554432
 893 04ac 2C2083E5 		str	r2, [r3, #44]
 894              	.LBE212:
 895              	.LBE211:
 275:apps/rssi/main.c **** 		if (max) {
 896              		.loc 2 275 0
 897 04b0 282B9FE5 		ldr	r2, .L152+8
 898 04b4 102092E5 		ldr	r2, [r2, #16]
 899 04b8 000052E3 		cmp	r2, #0
 900 04bc 0B00000A 		beq	.L53
 901              	.LVL46:
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 902              		.loc 2 277 0
 903 04c0 B002D3E1 		ldrh	r0, [r3, #32]
 904 04c4 100040E2 		sub	r0, r0, #16
 905              	.LBB213:
 906              	.LBB214:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 907              		.loc 1 87 0
 908 04c8 FF28A0E3 		mov	r2, #16711680
 909              	.LBE214:
 910              	.LBE213:
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 911              		.loc 2 277 0
 912 04cc 0008A0E1 		mov	r0, r0, asl #16
 913              	.LBB216:
 914              	.LBB215:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 915              		.loc 1 87 0
 916 04d0 282083E5 		str	r2, [r3, #40]
 917              	.LBE215:
 918              	.LBE216:
 277:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 15);
 919              		.loc 2 277 0
 920 04d4 2008A0E1 		mov	r0, r0, lsr #16
 921 04d8 0F10A0E3 		mov	r1, #15
 922 04dc FEFFFFEB 		bl	fb_gotoxy
 278:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 923              		.loc 2 278 0
 924 04e0 003094E5 		ldr	r3, [r4, #0]
 925 04e4 500B9FE5 		ldr	r0, .L152+100
 926 04e8 B012D3E1 		ldrh	r1, [r3, #32]
 927 04ec FEFFFFEB 		bl	fb_putstr
 928              	.LVL47:
 929              	.L53:
 930              	.LBB217:
 931              	.LBB218:
 932              		.loc 1 97 0
 933 04f0 E43A9FE5 		ldr	r3, .L152+4
 934 04f4 003093E5 		ldr	r3, [r3, #0]
 935 04f8 0220A0E3 		mov	r2, #2
 936 04fc 302083E5 		str	r2, [r3, #48]
 937              	.LVL48:
 938              	.LBE218:
 939              	.LBE217:
 940              	.LBB219:
 941              	.LBB220:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 942              		.loc 1 87 0
 943 0500 FD2082E2 		add	r2, r2, #253
 944 0504 282083E5 		str	r2, [r3, #40]
 945              	.LBE220:
 946              	.LBE219:
 282:apps/rssi/main.c **** 		fb_gotoxy(0, 16);
 947              		.loc 2 282 0
 948 0508 0000A0E3 		mov	r0, #0
 949 050c 1010A0E3 		mov	r1, #16
 950 0510 FEFFFFEB 		bl	fb_gotoxy
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 951              		.loc 2 283 0
 952 0514 C43A9FE5 		ldr	r3, .L152+8
 953 0518 142093E5 		ldr	r2, [r3, #20]
 954 051c 000052E3 		cmp	r2, #0
 955 0520 0700000A 		beq	.L54
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 956              		.loc 2 283 0 is_stmt 0 discriminator 1
 957 0524 B821D3E1 		ldrh	r2, [r3, #24]
 958 0528 020C52E3 		cmp	r2, #512
 959 052c 0400003A 		bcc	.L54
 960 0530 083B9FE5 		ldr	r3, .L152+104
 961 0534 030052E1 		cmp	r2, r3
 284:apps/rssi/main.c **** 			sprintf(text, "%4dP", ul_arfcn);
 962              		.loc 2 284 0 is_stmt 1 discriminator 1
 963 0538 10008D92 		addls	r0, sp, #16
 964 053c 001B9F95 		ldrls	r1, .L152+108
 283:apps/rssi/main.c **** 		if (pcs && ul_arfcn >= PCS_MIN && ul_arfcn <= PCS_MAX)
 965              		.loc 2 283 0 discriminator 1
 966 0540 0800009A 		bls	.L143
 967              	.L54:
 285:apps/rssi/main.c **** 		else if (ul_arfcn >= DCS_MIN && ul_arfcn <= DCS_MAX)
 968              		.loc 2 285 0
 969 0544 943A9FE5 		ldr	r3, .L152+8
 970 0548 B821D3E1 		ldrh	r2, [r3, #24]
 971 054c F43A9FE5 		ldr	r3, .L152+112
 972 0550 021C42E2 		sub	r1, r2, #512
 973 0554 0118A0E1 		mov	r1, r1, asl #16
 974 0558 210853E1 		cmp	r3, r1, lsr #16
 286:apps/rssi/main.c **** 			sprintf(text, "%4dD", ul_arfcn);
 975              		.loc 2 286 0
 976 055c E81A9F25 		ldrcs	r1, .L152+116
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 977              		.loc 2 288 0
 978 0560 E81A9F35 		ldrcc	r1, .L152+120
 979 0564 10008DE2 		add	r0, sp, #16
 980              	.L143:
 289:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 981              		.loc 2 289 0
 982 0568 6C4A9FE5 		ldr	r4, .L152+4
 288:apps/rssi/main.c **** 			sprintf(text, "%4d ", ul_arfcn);
 983              		.loc 2 288 0
 984 056c FEFFFFEB 		bl	sprintf
 289:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 985              		.loc 2 289 0
 986 0570 003094E5 		ldr	r3, [r4, #0]
 987 0574 10008DE2 		add	r0, sp, #16
 988 0578 B012D3E1 		ldrh	r1, [r3, #32]
 989 057c FEFFFFEB 		bl	fb_putstr
 990              	.LVL49:
 991              	.LBB221:
 992              	.LBB222:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 993              		.loc 1 92 0
 994 0580 003094E5 		ldr	r3, [r4, #0]
 995 0584 FF24E0E3 		mvn	r2, #-16777216
 996 0588 2C2083E5 		str	r2, [r3, #44]
 997              	.LVL50:
 998              	.LBE222:
 999              	.LBE221:
 1000              	.LBB223:
 1001              	.LBB224:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1002              		.loc 1 87 0
 1003 058c 0020A0E3 		mov	r2, #0
 1004 0590 282083E5 		str	r2, [r3, #40]
 1005              	.LVL51:
 1006              	.L46:
 1007              	.LBE224:
 1008              	.LBE223:
 1009              	.LBE196:
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 1010              		.loc 2 295 0
 1011 0594 443A9FE5 		ldr	r3, .L152+8
 1012 0598 083093E5 		ldr	r3, [r3, #8]
 1013 059c 030053E3 		cmp	r3, #3
 1014 05a0 8400001A 		bne	.L57
 295:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor == 0) {
 1015              		.loc 2 295 0 is_stmt 0 discriminator 1
 1016 05a4 383A9FE5 		ldr	r3, .L152+12
 1017 05a8 000093E5 		ldr	r0, [r3, #0]
 1018 05ac 000050E3 		cmp	r0, #0
 1019 05b0 8000001A 		bne	.L57
 296:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 1020              		.loc 2 296 0 is_stmt 1
 1021 05b4 1410A0E3 		mov	r1, #20
 1022 05b8 FEFFFFEB 		bl	fb_gotoxy
 297:apps/rssi/main.c **** 		if (sync_msg[0] == 'o')
 1023              		.loc 2 297 0
 1024 05bc 903A9FE5 		ldr	r3, .L152+124
 1025 05c0 042093E5 		ldr	r2, [r3, #4]
 1026 05c4 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1027 05c8 6F0053E3 		cmp	r3, #111
 1028 05cc 10008DE2 		add	r0, sp, #16
 1029 05d0 0A00001A 		bne	.L58
 298:apps/rssi/main.c **** 			sprintf(text, "BSIC%d/%d %4d", bsic >> 3, bsic & 7,
 1030              		.loc 2 298 0
 1031 05d4 1C2A9FE5 		ldr	r2, .L152+32
 1032 05d8 783A9FE5 		ldr	r3, .L152+128
 1033 05dc 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 1034 05e0 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1035 05e4 6E2042E2 		sub	r2, r2, #110
 1036 05e8 00208DE5 		str	r2, [sp, #0]
 1037 05ec 681A9FE5 		ldr	r1, .L152+132
 1038 05f0 A321A0E1 		mov	r2, r3, lsr #3
 1039 05f4 073003E2 		and	r3, r3, #7
 1040 05f8 FEFFFFEB 		bl	sprintf
 1041 05fc 010000EA 		b	.L59
 1042              	.L58:
 301:apps/rssi/main.c **** 			sprintf(text, "Sync %s", sync_msg);
 1043              		.loc 2 301 0
 1044 0600 581A9FE5 		ldr	r1, .L152+136
 1045 0604 FEFFFFEB 		bl	sprintf
 1046              	.L59:
 302:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1047              		.loc 2 302 0
 1048 0608 10408DE2 		add	r4, sp, #16
 1049 060c 0010E0E3 		mvn	r1, #0
 1050 0610 0400A0E1 		mov	r0, r4
 1051 0614 FEFFFFEB 		bl	fb_putstr
 304:apps/rssi/main.c **** 		fb_gotoxy(0,28);
 1052              		.loc 2 304 0
 1053 0618 0000A0E3 		mov	r0, #0
 1054 061c 1C10A0E3 		mov	r1, #28
 1055 0620 FEFFFFEB 		bl	fb_gotoxy
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1056              		.loc 2 305 0
 1057 0624 383A9FE5 		ldr	r3, .L152+140
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1058              		.loc 2 307 0
 1059 0628 382A9FE5 		ldr	r2, .L152+144
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1060              		.loc 2 305 0
 1061 062c 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1062              		.loc 2 307 0
 1063 0630 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1064              		.loc 2 305 0
 1065 0634 000053E3 		cmp	r3, #0
 1066 0638 2D30A003 		moveq	r3, #45
 1067 063c 3130A013 		movne	r3, #49
 307:apps/rssi/main.c **** 		text[2] = si_2[2] ? '2' : '-';
 1068              		.loc 2 307 0
 1069 0640 000052E3 		cmp	r2, #0
 1070 0644 2D20A003 		moveq	r2, #45
 1071 0648 3220A013 		movne	r2, #50
 1072 064c 1220CDE5 		strb	r2, [sp, #18]
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 1073              		.loc 2 309 0
 1074 0650 142A9FE5 		ldr	r2, .L152+148
 1075 0654 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1076 0658 000052E3 		cmp	r2, #0
 1077 065c 2D20A003 		moveq	r2, #45
 1078 0660 3220A013 		movne	r2, #50
 305:apps/rssi/main.c **** 		text[0] = si_1[2] ? '1' : '-';
 1079              		.loc 2 305 0
 1080 0664 1030CDE5 		strb	r3, [sp, #16]
 306:apps/rssi/main.c **** 		text[1] = ' ';
 1081              		.loc 2 306 0
 1082 0668 2030A0E3 		mov	r3, #32
 309:apps/rssi/main.c **** 		text[4] = si_2bis[2] ? '2' : '-';
 1083              		.loc 2 309 0
 1084 066c 1420CDE5 		strb	r2, [sp, #20]
 310:apps/rssi/main.c **** 		text[5] = si_2bis[2] ? 'b' : ' ';
 1085              		.loc 2 310 0
 1086 0670 0320A001 		moveq	r2, r3
 1087 0674 6220A013 		movne	r2, #98
 1088 0678 1520CDE5 		strb	r2, [sp, #21]
 311:apps/rssi/main.c **** 		text[6] = si_2ter[2] ? '2' : '-';
 1089              		.loc 2 311 0
 1090 067c EC299FE5 		ldr	r2, .L152+152
 1091 0680 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 1092 0684 000052E3 		cmp	r2, #0
 1093 0688 2D20A003 		moveq	r2, #45
 1094 068c 3220A013 		movne	r2, #50
 1095 0690 1620CDE5 		strb	r2, [sp, #22]
 312:apps/rssi/main.c **** 		text[7] = si_2ter[2] ? 't' : ' ';
 1096              		.loc 2 312 0
 1097 0694 0320A001 		moveq	r2, r3
 1098 0698 7420A013 		movne	r2, #116
 1099 069c 1720CDE5 		strb	r2, [sp, #23]
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1100              		.loc 2 314 0
 1101 06a0 CC299FE5 		ldr	r2, .L152+156
 306:apps/rssi/main.c **** 		text[1] = ' ';
 1102              		.loc 2 306 0
 1103 06a4 1130CDE5 		strb	r3, [sp, #17]
 308:apps/rssi/main.c **** 		text[3] = ' ';
 1104              		.loc 2 308 0
 1105 06a8 1330CDE5 		strb	r3, [sp, #19]
 313:apps/rssi/main.c **** 		text[8] = ' ';
 1106              		.loc 2 313 0
 1107 06ac 1830CDE5 		strb	r3, [sp, #24]
 315:apps/rssi/main.c **** 		text[10] = ' ';
 1108              		.loc 2 315 0
 1109 06b0 1A30CDE5 		strb	r3, [sp, #26]
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1110              		.loc 2 316 0
 1111 06b4 BC399FE5 		ldr	r3, .L152+160
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1112              		.loc 2 314 0
 1113 06b8 0220D2E5 		ldrb	r2, [r2, #2]	@ zero_extendqisi2
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1114              		.loc 2 316 0
 1115 06bc 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1116              		.loc 2 314 0
 1117 06c0 000052E3 		cmp	r2, #0
 1118 06c4 2D20A003 		moveq	r2, #45
 1119 06c8 3320A013 		movne	r2, #51
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1120              		.loc 2 316 0
 1121 06cc 000053E3 		cmp	r3, #0
 1122 06d0 2D30A003 		moveq	r3, #45
 1123 06d4 3430A013 		movne	r3, #52
 317:apps/rssi/main.c **** 		text[12] = '\0';
 1124              		.loc 2 317 0
 1125 06d8 0050A0E3 		mov	r5, #0
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1126              		.loc 2 318 0
 1127 06dc 0010E0E3 		mvn	r1, #0
 1128 06e0 0400A0E1 		mov	r0, r4
 314:apps/rssi/main.c **** 		text[9] = si_3[2] ? '3' : '-';
 1129              		.loc 2 314 0
 1130 06e4 1920CDE5 		strb	r2, [sp, #25]
 316:apps/rssi/main.c **** 		text[11] = si_4[2] ? '4' : '-';
 1131              		.loc 2 316 0
 1132 06e8 1B30CDE5 		strb	r3, [sp, #27]
 317:apps/rssi/main.c **** 		text[12] = '\0';
 1133              		.loc 2 317 0
 1134 06ec 1C50CDE5 		strb	r5, [sp, #28]
 318:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1135              		.loc 2 318 0
 1136 06f0 FEFFFFEB 		bl	fb_putstr
 320:apps/rssi/main.c **** 		fb_gotoxy(0, 36);
 1137              		.loc 2 320 0
 1138 06f4 0500A0E1 		mov	r0, r5
 1139 06f8 2410A0E3 		mov	r1, #36
 1140 06fc FEFFFFEB 		bl	fb_gotoxy
 321:apps/rssi/main.c **** 		fb_putstr("MCC MNC LAC ", -1);
 1141              		.loc 2 321 0
 1142 0700 0010E0E3 		mvn	r1, #0
 1143 0704 70099FE5 		ldr	r0, .L152+164
 1144 0708 FEFFFFEB 		bl	fb_putstr
 322:apps/rssi/main.c **** 		fb_gotoxy(0, 44);
 1145              		.loc 2 322 0
 1146 070c 0500A0E1 		mov	r0, r5
 1147 0710 2C10A0E3 		mov	r1, #44
 1148 0714 FEFFFFEB 		bl	fb_gotoxy
 323:apps/rssi/main.c **** 		if (mcc) {
 1149              		.loc 2 323 0
 1150 0718 60399FE5 		ldr	r3, .L152+168
 1151 071c B020D3E1 		ldrh	r2, [r3, #0]
 1152 0720 050052E1 		cmp	r2, r5
 330:apps/rssi/main.c **** 			fb_putstr("--- --- ----", -1);
 1153              		.loc 2 330 0
 1154 0724 58099F05 		ldreq	r0, .L152+172
 323:apps/rssi/main.c **** 		if (mcc) {
 1155              		.loc 2 323 0
 1156 0728 0F00000A 		beq	.L145
 324:apps/rssi/main.c **** 			if ((mnc & 0x00f) == 0x00f)
 1157              		.loc 2 324 0
 1158 072c 54399FE5 		ldr	r3, .L152+176
 1159 0730 B030D3E1 		ldrh	r3, [r3, #0]
 1160 0734 0F1003E2 		and	r1, r3, #15
 1161 0738 0F0051E3 		cmp	r1, #15
 1162 073c 48199FE5 		ldr	r1, .L152+180
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 1163              		.loc 2 325 0
 1164 0740 B010D101 		ldreqh	r1, [r1, #0]
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 1165              		.loc 2 327 0
 1166 0744 B010D111 		ldrneh	r1, [r1, #0]
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 1167              		.loc 2 325 0
 1168 0748 00108D05 		streq	r1, [sp, #0]
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 1169              		.loc 2 327 0
 1170 074c 00108D15 		strne	r1, [sp, #0]
 325:apps/rssi/main.c **** 				sprintf(text, "%3x %02x  %04x", mcc, mnc >> 4, lac);
 1171              		.loc 2 325 0
 1172 0750 0400A001 		moveq	r0, r4
 1173 0754 34199F05 		ldreq	r1, .L152+184
 1174 0758 2332A001 		moveq	r3, r3, lsr #4
 327:apps/rssi/main.c **** 				sprintf(text, "%3x %03x %04x", mcc, mnc, lac);
 1175              		.loc 2 327 0
 1176 075c 0400A011 		movne	r0, r4
 1177 0760 2C199F15 		ldrne	r1, .L152+188
 1178 0764 FEFFFFEB 		bl	sprintf
 328:apps/rssi/main.c **** 			fb_putstr(text, -1);
 1179              		.loc 2 328 0
 1180 0768 10008DE2 		add	r0, sp, #16
 1181              	.L145:
 330:apps/rssi/main.c **** 			fb_putstr("--- --- ----", -1);
 1182              		.loc 2 330 0
 1183 076c 0010E0E3 		mvn	r1, #0
 1184 0770 FEFFFFEB 		bl	fb_putstr
 331:apps/rssi/main.c **** 		fb_gotoxy(0, 52);
 1185              		.loc 2 331 0
 1186 0774 0000A0E3 		mov	r0, #0
 1187 0778 3410A0E3 		mov	r1, #52
 1188 077c FEFFFFEB 		bl	fb_gotoxy
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 1189              		.loc 2 332 0
 1190 0780 EC389FE5 		ldr	r3, .L152+156
 1191 0784 0230D3E5 		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1192 0788 000053E3 		cmp	r3, #0
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 1193              		.loc 2 336 0
 1194 078c 04099F05 		ldreq	r0, .L152+192
 332:apps/rssi/main.c **** 		if (si_3[2]) {
 1195              		.loc 2 332 0
 1196 0790 0600000A 		beq	.L146
 333:apps/rssi/main.c **** 			sprintf(text, "cell id:%04x", cell_id);
 1197              		.loc 2 333 0
 1198 0794 00399FE5 		ldr	r3, .L152+196
 1199 0798 10408DE2 		add	r4, sp, #16
 1200 079c 0400A0E1 		mov	r0, r4
 1201 07a0 F8189FE5 		ldr	r1, .L152+200
 1202 07a4 B020D3E1 		ldrh	r2, [r3, #0]
 1203 07a8 FEFFFFEB 		bl	sprintf
 334:apps/rssi/main.c **** 			fb_putstr(text, -1);
 1204              		.loc 2 334 0
 1205 07ac 0400A0E1 		mov	r0, r4
 1206              	.L146:
 336:apps/rssi/main.c **** 			fb_putstr("cell id:----", -1);
 1207              		.loc 2 336 0
 1208 07b0 0010E0E3 		mvn	r1, #0
 1209 07b4 FEFFFFEB 		bl	fb_putstr
 1210              	.L57:
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 1211              		.loc 2 340 0
 1212 07b8 20389FE5 		ldr	r3, .L152+8
 1213 07bc 083093E5 		ldr	r3, [r3, #8]
 1214 07c0 030053E3 		cmp	r3, #3
 1215 07c4 5800001A 		bne	.L73
 340:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor > 0) {
 1216              		.loc 2 340 0 is_stmt 0 discriminator 1
 1217 07c8 14689FE5 		ldr	r6, .L152+12
 1218 07cc 003096E5 		ldr	r3, [r6, #0]
 1219 07d0 000053E3 		cmp	r3, #0
 1220 07d4 540000DA 		ble	.L73
 1221              	.LBB225:
 341:apps/rssi/main.c **** 		int i, y = 0;
 1222              		.loc 2 341 0 is_stmt 1
 1223 07d8 0040A0E3 		mov	r4, #0
 343:apps/rssi/main.c **** 		text[0] = '\0';
 1224              		.loc 2 343 0
 1225 07dc 24508DE2 		add	r5, sp, #36
 1226 07e0 144065E5 		strb	r4, [r5, #-20]!
 1227              	.LVL52:
 341:apps/rssi/main.c **** 		int i, y = 0;
 1228              		.loc 2 341 0
 1229 07e4 20408DE5 		str	r4, [sp, #32]
 1230              	.LVL53:
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 1231              		.loc 2 345 0
 1232 07e8 B4A89FE5 		ldr	sl, .L152+204
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1233              		.loc 2 349 0
 1234 07ec 078085E2 		add	r8, r5, #7
 350:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1235              		.loc 2 350 0
 1236 07f0 20708DE2 		add	r7, sp, #32
 351:apps/rssi/main.c **** 					text[0] = '\0';
 1237              		.loc 2 351 0
 1238 07f4 0490A0E1 		mov	r9, r4
 1239              	.LVL54:
 1240              	.L76:
 345:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_SERV) {
 1241              		.loc 2 345 0
 1242 07f8 0A30D4E7 		ldrb	r3, [r4, sl]	@ zero_extendqisi2
 1243 07fc 010013E3 		tst	r3, #1
 1244 0800 1100000A 		beq	.L74
 346:apps/rssi/main.c **** 				if (!text[0])
 1245              		.loc 2 346 0
 1246 0804 1030DDE5 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1247 0808 000053E3 		cmp	r3, #0
 1248 080c 0400001A 		bne	.L75
 347:apps/rssi/main.c **** 					sprintf(text, "S: %4d", i);
 1249              		.loc 2 347 0
 1250 0810 0500A0E1 		mov	r0, r5
 1251 0814 8C189FE5 		ldr	r1, .L152+208
 1252 0818 0420A0E1 		mov	r2, r4
 1253 081c FEFFFFEB 		bl	sprintf
 1254 0820 090000EA 		b	.L74
 1255              	.L75:
 349:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1256              		.loc 2 349 0
 1257 0824 80189FE5 		ldr	r1, .L152+212
 1258 0828 0420A0E1 		mov	r2, r4
 1259 082c 0800A0E1 		mov	r0, r8
 1260 0830 FEFFFFEB 		bl	sprintf
 350:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1261              		.loc 2 350 0
 1262 0834 002096E5 		ldr	r2, [r6, #0]
 1263 0838 0500A0E1 		mov	r0, r5
 1264 083c 0710A0E1 		mov	r1, r7
 1265 0840 012042E2 		sub	r2, r2, #1
 1266 0844 FEFFFFEB 		bl	print_display
 351:apps/rssi/main.c **** 					text[0] = '\0';
 1267              		.loc 2 351 0
 1268 0848 1090CDE5 		strb	r9, [sp, #16]
 1269              	.L74:
 344:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 1270              		.loc 2 344 0
 1271 084c 014084E2 		add	r4, r4, #1
 1272              	.LVL55:
 1273 0850 010B54E3 		cmp	r4, #1024
 1274 0854 E7FFFF1A 		bne	.L76
 355:apps/rssi/main.c **** 		if (text[0])
 1275              		.loc 2 355 0
 1276 0858 1030DDE5 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1277 085c 000053E3 		cmp	r3, #0
 1278 0860 0500000A 		beq	.L77
 356:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 1279              		.loc 2 356 0
 1280 0864 78379FE5 		ldr	r3, .L152+12
 1281 0868 002093E5 		ldr	r2, [r3, #0]
 1282 086c 10008DE2 		add	r0, sp, #16
 1283 0870 20108DE2 		add	r1, sp, #32
 1284 0874 012042E2 		sub	r2, r2, #1
 1285 0878 FEFFFFEB 		bl	print_display
 1286              	.L77:
 357:apps/rssi/main.c **** 		text[0] = '\0';
 1287              		.loc 2 357 0
 1288 087c 0040A0E3 		mov	r4, #0
 1289              	.LVL56:
 1290 0880 24508DE2 		add	r5, sp, #36
 1291 0884 144065E5 		strb	r4, [r5, #-20]!
 1292              	.LVL57:
 359:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_NCELL) {
 1293              		.loc 2 359 0
 1294 0888 14A89FE5 		ldr	sl, .L152+204
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1295              		.loc 2 364 0
 1296 088c 50679FE5 		ldr	r6, .L152+12
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1297              		.loc 2 363 0
 1298 0890 078085E2 		add	r8, r5, #7
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1299              		.loc 2 364 0
 1300 0894 20708DE2 		add	r7, sp, #32
 365:apps/rssi/main.c **** 					text[0] = '\0';
 1301              		.loc 2 365 0
 1302 0898 0490A0E1 		mov	r9, r4
 1303              	.LVL58:
 1304              	.L80:
 359:apps/rssi/main.c **** 			if (freq[i].mask & FREQ_TYPE_NCELL) {
 1305              		.loc 2 359 0
 1306 089c 0A30D4E7 		ldrb	r3, [r4, sl]	@ zero_extendqisi2
 1307 08a0 1C0013E3 		tst	r3, #28
 1308 08a4 1100000A 		beq	.L78
 360:apps/rssi/main.c **** 				if (!text[0])
 1309              		.loc 2 360 0
 1310 08a8 1030DDE5 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1311 08ac 000053E3 		cmp	r3, #0
 1312 08b0 0400001A 		bne	.L79
 361:apps/rssi/main.c **** 					sprintf(text, "N: %4d", i);
 1313              		.loc 2 361 0
 1314 08b4 0500A0E1 		mov	r0, r5
 1315 08b8 F0179FE5 		ldr	r1, .L152+216
 1316 08bc 0420A0E1 		mov	r2, r4
 1317 08c0 FEFFFFEB 		bl	sprintf
 1318 08c4 090000EA 		b	.L78
 1319              	.L79:
 363:apps/rssi/main.c **** 					sprintf(text + 7, " %4d", i);
 1320              		.loc 2 363 0
 1321 08c8 DC179FE5 		ldr	r1, .L152+212
 1322 08cc 0420A0E1 		mov	r2, r4
 1323 08d0 0800A0E1 		mov	r0, r8
 1324 08d4 FEFFFFEB 		bl	sprintf
 364:apps/rssi/main.c **** 					print_display(text, &y, cursor - 1);
 1325              		.loc 2 364 0
 1326 08d8 002096E5 		ldr	r2, [r6, #0]
 1327 08dc 0500A0E1 		mov	r0, r5
 1328 08e0 0710A0E1 		mov	r1, r7
 1329 08e4 012042E2 		sub	r2, r2, #1
 1330 08e8 FEFFFFEB 		bl	print_display
 365:apps/rssi/main.c **** 					text[0] = '\0';
 1331              		.loc 2 365 0
 1332 08ec 1090CDE5 		strb	r9, [sp, #16]
 1333              	.L78:
 358:apps/rssi/main.c **** 		for (i = 0; i < 1024; i++) {
 1334              		.loc 2 358 0
 1335 08f0 014084E2 		add	r4, r4, #1
 1336              	.LVL59:
 1337 08f4 010B54E3 		cmp	r4, #1024
 1338 08f8 E7FFFF1A 		bne	.L80
 369:apps/rssi/main.c **** 		if (text[0])
 1339              		.loc 2 369 0
 1340 08fc 1030DDE5 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1341 0900 000053E3 		cmp	r3, #0
 1342 0904 0500000A 		beq	.L81
 370:apps/rssi/main.c **** 			print_display(text, &y, cursor - 1);
 1343              		.loc 2 370 0
 1344 0908 D4369FE5 		ldr	r3, .L152+12
 1345 090c 002093E5 		ldr	r2, [r3, #0]
 1346 0910 10008DE2 		add	r0, sp, #16
 1347 0914 20108DE2 		add	r1, sp, #32
 1348 0918 012042E2 		sub	r2, r2, #1
 1349 091c FEFFFFEB 		bl	print_display
 1350              	.L81:
 371:apps/rssi/main.c **** 		nb_num = y;
 1351              		.loc 2 371 0
 1352 0920 20209DE5 		ldr	r2, [sp, #32]
 1353 0924 88379FE5 		ldr	r3, .L152+220
 1354 0928 002083E5 		str	r2, [r3, #0]
 1355              	.LVL60:
 1356              	.L73:
 1357              	.LBE225:
 375:apps/rssi/main.c **** 	if (mode == MODE_MAIN || mode == MODE_ARFCN) {
 1358              		.loc 2 375 0
 1359 092c AC469FE5 		ldr	r4, .L152+8
 1360 0930 083094E5 		ldr	r3, [r4, #8]
 1361 0934 000053E3 		cmp	r3, #0
 1362 0938 02005313 		cmpne	r3, #2
 1363 093c 2200001A 		bne	.L82
 376:apps/rssi/main.c **** 		fb_gotoxy(0, 20);
 1364              		.loc 2 376 0
 1365 0940 0000A0E3 		mov	r0, #0
 1366 0944 1410A0E3 		mov	r1, #20
 1367 0948 FEFFFFEB 		bl	fb_gotoxy
 377:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 1368              		.loc 2 377 0
 1369 094c 083094E5 		ldr	r3, [r4, #8]
 1370 0950 020053E3 		cmp	r3, #2
 378:apps/rssi/main.c **** 			sprintf(text, "ARFCN %s", input);
 1371              		.loc 2 378 0
 1372 0954 10008D02 		addeq	r0, sp, #16
 1373 0958 58179F05 		ldreq	r1, .L152+224
 1374 095c 58279F05 		ldreq	r2, .L152+228
 1375 0960 1300000A 		beq	.L147
 1376              	.L83:
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1377              		.loc 2 379 0
 1378 0964 143094E5 		ldr	r3, [r4, #20]
 1379 0968 000053E3 		cmp	r3, #0
 1380 096c 0700000A 		beq	.L85
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1381              		.loc 2 379 0 is_stmt 0 discriminator 1
 1382 0970 BA21D4E1 		ldrh	r2, [r4, #26]
 1383 0974 020C52E3 		cmp	r2, #512
 1384 0978 0400003A 		bcc	.L85
 1385 097c BC369FE5 		ldr	r3, .L152+104
 1386 0980 030052E1 		cmp	r2, r3
 380:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dPCS", arfcn);
 1387              		.loc 2 380 0 is_stmt 1 discriminator 1
 1388 0984 10008D92 		addls	r0, sp, #16
 1389 0988 30179F95 		ldrls	r1, .L152+232
 379:apps/rssi/main.c **** 		else if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1390              		.loc 2 379 0 discriminator 1
 1391 098c 0800009A 		bls	.L147
 1392              	.L85:
 381:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 1393              		.loc 2 381 0
 1394 0990 48369FE5 		ldr	r3, .L152+8
 1395 0994 BA21D3E1 		ldrh	r2, [r3, #26]
 1396 0998 A8369FE5 		ldr	r3, .L152+112
 1397 099c 021C42E2 		sub	r1, r2, #512
 1398 09a0 0118A0E1 		mov	r1, r1, asl #16
 1399 09a4 210853E1 		cmp	r3, r1, lsr #16
 382:apps/rssi/main.c **** 			sprintf(text, "ARFCN %dDCS", arfcn);
 1400              		.loc 2 382 0
 1401 09a8 14179F25 		ldrcs	r1, .L152+236
 384:apps/rssi/main.c **** 			sprintf(text, "ARFCN %d", arfcn);
 1402              		.loc 2 384 0
 1403 09ac 14179F35 		ldrcc	r1, .L152+240
 1404 09b0 10008DE2 		add	r0, sp, #16
 1405              	.L147:
 1406 09b4 FEFFFFEB 		bl	sprintf
 385:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 1407              		.loc 2 385 0
 1408 09b8 1C369FE5 		ldr	r3, .L152+4
 1409 09bc 003093E5 		ldr	r3, [r3, #0]
 1410 09c0 10008DE2 		add	r0, sp, #16
 1411 09c4 B012D3E1 		ldrh	r1, [r3, #32]
 1412 09c8 FEFFFFEB 		bl	fb_putstr
 1413              	.L82:
 389:apps/rssi/main.c **** 	if (mode == MODE_ARFCN) {
 1414              		.loc 2 389 0
 1415 09cc 0C369FE5 		ldr	r3, .L152+8
 1416 09d0 083093E5 		ldr	r3, [r3, #8]
 1417 09d4 020053E3 		cmp	r3, #2
 1418 09d8 0C00001A 		bne	.L87
 1419              	.LVL61:
 1420              	.LBB226:
 1421              	.LBB228:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1422              		.loc 1 87 0
 1423 09dc F8559FE5 		ldr	r5, .L152+4
 1424 09e0 003095E5 		ldr	r3, [r5, #0]
 1425              	.LBE228:
 1426              	.LBE226:
 1427              	.LBB230:
 1428              	.LBB231:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1429              		.loc 1 92 0
 1430 09e4 FF20A0E3 		mov	r2, #255
 1431              	.LBE231:
 1432              	.LBE230:
 1433              	.LBB233:
 1434              	.LBB227:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1435              		.loc 1 87 0
 1436 09e8 FF44E0E3 		mvn	r4, #-16777216
 1437              	.LBE227:
 1438              	.LBE233:
 1439              	.LBB234:
 1440              	.LBB232:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1441              		.loc 1 92 0
 1442 09ec 2C2083E5 		str	r2, [r3, #44]
 1443              	.LBE232:
 1444              	.LBE234:
 1445              	.LBB235:
 1446              	.LBB229:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1447              		.loc 1 87 0
 1448 09f0 284083E5 		str	r4, [r3, #40]
 1449              	.LVL62:
 1450              	.LBE229:
 1451              	.LBE235:
 392:apps/rssi/main.c **** 		fb_putstr(" ", framebuffer->width);
 1452              		.loc 2 392 0
 1453 09f4 B012D3E1 		ldrh	r1, [r3, #32]
 1454 09f8 CC069FE5 		ldr	r0, .L152+244
 1455 09fc FEFFFFEB 		bl	fb_putstr
 1456              	.LVL63:
 1457              	.LBB236:
 1458              	.LBB237:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1459              		.loc 1 87 0
 1460 0a00 003095E5 		ldr	r3, [r5, #0]
 1461 0a04 0020A0E3 		mov	r2, #0
 1462 0a08 282083E5 		str	r2, [r3, #40]
 1463              	.LVL64:
 1464              	.LBE237:
 1465              	.LBE236:
 1466              	.LBB238:
 1467              	.LBB239:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1468              		.loc 1 92 0
 1469 0a0c 2C4083E5 		str	r4, [r3, #44]
 1470              	.LVL65:
 1471              	.L87:
 1472              	.LBE239:
 1473              	.LBE238:
 398:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 1474              		.loc 2 398 0
 1475 0a10 C8359FE5 		ldr	r3, .L152+8
 1476 0a14 082093E5 		ldr	r2, [r3, #8]
 1477 0a18 000052E3 		cmp	r2, #0
 1478 0a1c 8400001A 		bne	.L88
 1479              	.LBB240:
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1480              		.loc 2 401 0
 1481 0a20 142093E5 		ldr	r2, [r3, #20]
 1482 0a24 000052E3 		cmp	r2, #0
 1483 0a28 0B00000A 		beq	.L89
 401:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1484              		.loc 2 401 0 is_stmt 0 discriminator 1
 1485 0a2c BA21D3E1 		ldrh	r2, [r3, #26]
 1486 0a30 020C52E3 		cmp	r2, #512
 1487 0a34 0800003A 		bcc	.L89
 1488 0a38 00169FE5 		ldr	r1, .L152+104
 1489 0a3c 010052E1 		cmp	r2, r1
 1490 0a40 0500008A 		bhi	.L89
 402:apps/rssi/main.c **** 			if (uplink)
 1491              		.loc 2 402 0 is_stmt 1
 1492 0a44 0C6093E5 		ldr	r6, [r3, #12]
 403:apps/rssi/main.c **** 				f = PCS_UL;
 1493              		.loc 2 403 0
 1494 0a48 80269FE5 		ldr	r2, .L152+248
 1495 0a4c 000056E3 		cmp	r6, #0
 1496 0a50 7C369FE5 		ldr	r3, .L152+252
 1497 0a54 0230A011 		movne	r3, r2
 1498 0a58 070000EA 		b	.L90
 1499              	.L89:
 406:apps/rssi/main.c **** 		} else if (uplink)
 1500              		.loc 2 406 0
 1501 0a5c 7C359FE5 		ldr	r3, .L152+8
 1502 0a60 0C3093E5 		ldr	r3, [r3, #12]
 1503 0a64 000053E3 		cmp	r3, #0
 1504 0a68 68369FE5 		ldr	r3, .L152+256
 407:apps/rssi/main.c **** 			f = band->freq_ul;
 1505              		.loc 2 407 0
 1506 0a6c 00309315 		ldrne	r3, [r3, #0]
 409:apps/rssi/main.c **** 			f = band->freq_dl;
 1507              		.loc 2 409 0
 1508 0a70 00309305 		ldreq	r3, [r3, #0]
 407:apps/rssi/main.c **** 			f = band->freq_ul;
 1509              		.loc 2 407 0
 1510 0a74 10309315 		ldrne	r3, [r3, #16]
 409:apps/rssi/main.c **** 			f = band->freq_dl;
 1511              		.loc 2 409 0
 1512 0a78 14309305 		ldreq	r3, [r3, #20]
 1513              	.LVL66:
 1514              	.L90:
 410:apps/rssi/main.c **** 		f += ((arfcn - band->min) & 1023) << 1;
 1515              		.loc 2 410 0
 1516 0a7c 54269FE5 		ldr	r2, .L152+256
 1517 0a80 58459FE5 		ldr	r4, .L152+8
 1518 0a84 002092E5 		ldr	r2, [r2, #0]
 1519 0a88 BA61D4E1 		ldrh	r6, [r4, #26]
 1520 0a8c 002092E5 		ldr	r2, [r2, #0]
 1521 0a90 066062E0 		rsb	r6, r2, r6
 1522 0a94 066BA0E1 		mov	r6, r6, asl #22
 1523 0a98 A66A83E0 		add	r6, r3, r6, lsr #21
 1524              	.LVL67:
 412:apps/rssi/main.c **** 		fb_gotoxy(0, 30);
 1525              		.loc 2 412 0
 1526 0a9c 0000A0E3 		mov	r0, #0
 1527 0aa0 1E10A0E3 		mov	r1, #30
 1528 0aa4 FEFFFFEB 		bl	fb_gotoxy
 413:apps/rssi/main.c **** 		sprintf(text, "Freq. %d.%d", f / 10, f % 10);
 1529              		.loc 2 413 0
 1530 0aa8 0A10A0E3 		mov	r1, #10
 1531 0aac 0600A0E1 		mov	r0, r6
 1532 0ab0 FEFFFFEB 		bl	__divsi3
 1533 0ab4 0A10A0E3 		mov	r1, #10
 1534 0ab8 0070A0E1 		mov	r7, r0
 1535 0abc 0600A0E1 		mov	r0, r6
 1536 0ac0 FEFFFFEB 		bl	__modsi3
 1537 0ac4 10508DE2 		add	r5, sp, #16
 1538 0ac8 0720A0E1 		mov	r2, r7
 1539 0acc 0030A0E1 		mov	r3, r0
 1540 0ad0 04169FE5 		ldr	r1, .L152+260
 1541 0ad4 0500A0E1 		mov	r0, r5
 1542 0ad8 FEFFFFEB 		bl	sprintf
 414:apps/rssi/main.c **** 		fb_putstr(text,framebuffer->width);
 1543              		.loc 2 414 0
 1544 0adc F8349FE5 		ldr	r3, .L152+4
 1545 0ae0 003093E5 		ldr	r3, [r3, #0]
 1546 0ae4 0500A0E1 		mov	r0, r5
 1547 0ae8 B012D3E1 		ldrh	r1, [r3, #32]
 1548 0aec FEFFFFEB 		bl	fb_putstr
 416:apps/rssi/main.c **** 		fb_gotoxy(0, 40);
 1549              		.loc 2 416 0
 1550 0af0 0000A0E3 		mov	r0, #0
 1551 0af4 2810A0E3 		mov	r1, #40
 1552 0af8 FEFFFFEB 		bl	fb_gotoxy
 417:apps/rssi/main.c **** 		sprintf(text, "Power %d", ((max) ? max_power : power) - 110);
 1553              		.loc 2 417 0
 1554 0afc 103094E5 		ldr	r3, [r4, #16]
 1555 0b00 000053E3 		cmp	r3, #0
 1556 0b04 D4359F15 		ldrne	r3, .L152+264
 1557 0b08 E8349F05 		ldreq	r3, .L152+32
 1558 0b0c 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1559 0b10 10408DE2 		add	r4, sp, #16
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 1560              		.loc 2 418 0
 1561 0b14 C0549FE5 		ldr	r5, .L152+4
 417:apps/rssi/main.c **** 		sprintf(text, "Power %d", ((max) ? max_power : power) - 110);
 1562              		.loc 2 417 0
 1563 0b18 6E2042E2 		sub	r2, r2, #110
 1564 0b1c C0159FE5 		ldr	r1, .L152+268
 1565 0b20 0400A0E1 		mov	r0, r4
 1566 0b24 FEFFFFEB 		bl	sprintf
 418:apps/rssi/main.c **** 		fb_putstr(text, framebuffer->width);
 1567              		.loc 2 418 0
 1568 0b28 003095E5 		ldr	r3, [r5, #0]
 1569 0b2c 0400A0E1 		mov	r0, r4
 1570 0b30 B012D3E1 		ldrh	r1, [r3, #32]
 1571 0b34 FEFFFFEB 		bl	fb_putstr
 419:apps/rssi/main.c **** 		if (max) {
 1572              		.loc 2 419 0
 1573 0b38 A0349FE5 		ldr	r3, .L152+8
 1574 0b3c 103093E5 		ldr	r3, [r3, #16]
 1575 0b40 000053E3 		cmp	r3, #0
 1576 0b44 1200000A 		beq	.L94
 1577              	.LVL68:
 1578              	.LBB241:
 1579              	.LBB243:
 1580              		.loc 1 97 0
 1581 0b48 003095E5 		ldr	r3, [r5, #0]
 1582              	.LBE243:
 1583              	.LBE241:
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 1584              		.loc 2 422 0
 1585 0b4c B002D3E1 		ldrh	r0, [r3, #32]
 1586 0b50 100040E2 		sub	r0, r0, #16
 1587              	.LBB245:
 1588              	.LBB246:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1589              		.loc 1 87 0
 1590 0b54 FF28A0E3 		mov	r2, #16711680
 1591              	.LBE246:
 1592              	.LBE245:
 1593              	.LBB248:
 1594              	.LBB242:
 1595              		.loc 1 97 0
 1596 0b58 0040A0E3 		mov	r4, #0
 1597              	.LBE242:
 1598              	.LBE248:
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 1599              		.loc 2 422 0
 1600 0b5c 0008A0E1 		mov	r0, r0, asl #16
 1601              	.LBB249:
 1602              	.LBB247:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1603              		.loc 1 87 0
 1604 0b60 282083E5 		str	r2, [r3, #40]
 1605              	.LBE247:
 1606              	.LBE249:
 1607              	.LBB250:
 1608              	.LBB244:
 1609              		.loc 1 97 0
 1610 0b64 304083E5 		str	r4, [r3, #48]
 1611              	.LVL69:
 1612              	.LBE244:
 1613              	.LBE250:
 422:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16, 39);
 1614              		.loc 2 422 0
 1615 0b68 2008A0E1 		mov	r0, r0, lsr #16
 1616 0b6c 2710A0E3 		mov	r1, #39
 1617 0b70 FEFFFFEB 		bl	fb_gotoxy
 423:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 1618              		.loc 2 423 0
 1619 0b74 003095E5 		ldr	r3, [r5, #0]
 1620 0b78 BC049FE5 		ldr	r0, .L152+100
 1621 0b7c B012D3E1 		ldrh	r1, [r3, #32]
 1622 0b80 FEFFFFEB 		bl	fb_putstr
 1623              	.LVL70:
 1624              	.LBB251:
 1625              	.LBB252:
 1626              		.loc 1 97 0
 1627 0b84 003095E5 		ldr	r3, [r5, #0]
 1628 0b88 0220A0E3 		mov	r2, #2
 1629 0b8c 302083E5 		str	r2, [r3, #48]
 1630              	.LVL71:
 1631              	.LBE252:
 1632              	.LBE251:
 1633              	.LBB253:
 1634              	.LBB254:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1635              		.loc 1 87 0
 1636 0b90 284083E5 		str	r4, [r3, #40]
 1637              	.LVL72:
 1638              	.L94:
 1639              	.LBE254:
 1640              	.LBE253:
 1641              	.LBB255:
 1642              	.LBB256:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1643              		.loc 1 92 0
 1644 0b94 40449FE5 		ldr	r4, .L152+4
 1645 0b98 003094E5 		ldr	r3, [r4, #0]
 1646 0b9c 0000A0E3 		mov	r0, #0
 1647 0ba0 2C0083E5 		str	r0, [r3, #44]
 1648              	.LBE256:
 1649              	.LBE255:
 428:apps/rssi/main.c **** 		fb_gotoxy(0, 45);
 1650              		.loc 2 428 0
 1651 0ba4 2D10A0E3 		mov	r1, #45
 1652 0ba8 FEFFFFEB 		bl	fb_gotoxy
 429:apps/rssi/main.c **** 		fb_boxto(framebuffer->width * power / 64, 50);
 1653              		.loc 2 429 0
 1654 0bac 002094E5 		ldr	r2, [r4, #0]
 1655 0bb0 40349FE5 		ldr	r3, .L152+32
 1656 0bb4 B002D2E1 		ldrh	r0, [r2, #32]
 1657 0bb8 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1658 0bbc 930000E0 		mul	r0, r3, r0
 1659 0bc0 0005A0E1 		mov	r0, r0, asl #10
 1660 0bc4 2008A0E1 		mov	r0, r0, lsr #16
 1661 0bc8 3210A0E3 		mov	r1, #50
 1662 0bcc FEFFFFEB 		bl	fb_boxto
 430:apps/rssi/main.c **** 		if (max) {
 1663              		.loc 2 430 0
 1664 0bd0 08349FE5 		ldr	r3, .L152+8
 1665 0bd4 103093E5 		ldr	r3, [r3, #16]
 1666 0bd8 000053E3 		cmp	r3, #0
 1667 0bdc 1000000A 		beq	.L95
 431:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width * max_power / 64 ,45);
 1668              		.loc 2 431 0
 1669 0be0 002094E5 		ldr	r2, [r4, #0]
 1670 0be4 F4549FE5 		ldr	r5, .L152+264
 1671 0be8 B002D2E1 		ldrh	r0, [r2, #32]
 1672 0bec 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1673 0bf0 930000E0 		mul	r0, r3, r0
 1674 0bf4 0005A0E1 		mov	r0, r0, asl #10
 1675 0bf8 2008A0E1 		mov	r0, r0, lsr #16
 1676 0bfc 2D10A0E3 		mov	r1, #45
 1677 0c00 FEFFFFEB 		bl	fb_gotoxy
 432:apps/rssi/main.c **** 			fb_boxto(framebuffer->width * max_power / 64, 50);
 1678              		.loc 2 432 0
 1679 0c04 002094E5 		ldr	r2, [r4, #0]
 1680 0c08 0030D5E5 		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 1681 0c0c B002D2E1 		ldrh	r0, [r2, #32]
 1682 0c10 930000E0 		mul	r0, r3, r0
 1683 0c14 0005A0E1 		mov	r0, r0, asl #10
 1684 0c18 2008A0E1 		mov	r0, r0, lsr #16
 1685 0c1c 3210A0E3 		mov	r1, #50
 1686 0c20 FEFFFFEB 		bl	fb_boxto
 1687              	.L95:
 1688              	.LVL73:
 1689              	.LBB257:
 1690              	.LBB258:
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
 1691              		.loc 1 92 0
 1692 0c24 B0339FE5 		ldr	r3, .L152+4
 1693 0c28 003093E5 		ldr	r3, [r3, #0]
 1694 0c2c FF24E0E3 		mvn	r2, #-16777216
 1695 0c30 2C2083E5 		str	r2, [r3, #44]
 1696              	.LVL74:
 1697              	.L88:
 1698              	.LBE258:
 1699              	.LBE257:
 1700              	.LBE240:
 438:apps/rssi/main.c **** 	if (mode == MODE_SPECTRUM) {
 1701              		.loc 2 438 0
 1702 0c34 A4539FE5 		ldr	r5, .L152+8
 1703 0c38 083095E5 		ldr	r3, [r5, #8]
 1704 0c3c 010053E3 		cmp	r3, #1
 1705 0c40 B600001A 		bne	.L96
 1706              	.LBB259:
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1707              		.loc 2 441 0
 1708 0c44 90339FE5 		ldr	r3, .L152+4
 1709 0c48 003093E5 		ldr	r3, [r3, #0]
 443:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 1710              		.loc 2 443 0
 1711 0c4c 0000A0E3 		mov	r0, #0
 1712 0c50 0810A0E3 		mov	r1, #8
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1713              		.loc 2 441 0
 1714 0c54 B242D3E1 		ldrh	r4, [r3, #34]
 443:apps/rssi/main.c **** 		fb_gotoxy(0, 8);
 1715              		.loc 2 443 0
 1716 0c58 FEFFFFEB 		bl	fb_gotoxy
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1717              		.loc 2 444 0
 1718 0c5c 143095E5 		ldr	r3, [r5, #20]
 1719 0c60 000053E3 		cmp	r3, #0
 441:apps/rssi/main.c **** 		int height = framebuffer->height - 25;
 1720              		.loc 2 441 0
 1721 0c64 194044E2 		sub	r4, r4, #25
 1722              	.LVL75:
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1723              		.loc 2 444 0
 1724 0c68 0700000A 		beq	.L97
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1725              		.loc 2 444 0 is_stmt 0 discriminator 1
 1726 0c6c BA21D5E1 		ldrh	r2, [r5, #26]
 1727 0c70 020C52E3 		cmp	r2, #512
 1728 0c74 0400003A 		bcc	.L97
 1729 0c78 C0339FE5 		ldr	r3, .L152+104
 1730 0c7c 030052E1 		cmp	r2, r3
 445:apps/rssi/main.c **** 			sprintf(text, "%4dP", arfcn);
 1731              		.loc 2 445 0 is_stmt 1 discriminator 1
 1732 0c80 10008D92 		addls	r0, sp, #16
 1733 0c84 B8139F95 		ldrls	r1, .L152+108
 444:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 1734              		.loc 2 444 0 discriminator 1
 1735 0c88 0800009A 		bls	.L149
 1736              	.L97:
 446:apps/rssi/main.c **** 		else if (arfcn >= DCS_MIN && arfcn <= DCS_MAX)
 1737              		.loc 2 446 0
 1738 0c8c 4C339FE5 		ldr	r3, .L152+8
 1739 0c90 BA21D3E1 		ldrh	r2, [r3, #26]
 1740 0c94 AC339FE5 		ldr	r3, .L152+112
 1741 0c98 021C42E2 		sub	r1, r2, #512
 1742 0c9c 0118A0E1 		mov	r1, r1, asl #16
 1743 0ca0 210853E1 		cmp	r3, r1, lsr #16
 447:apps/rssi/main.c **** 			sprintf(text, "%4dD", arfcn);
 1744              		.loc 2 447 0
 1745 0ca4 A0139F25 		ldrcs	r1, .L152+116
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 1746              		.loc 2 449 0
 1747 0ca8 A0139F35 		ldrcc	r1, .L152+120
 1748 0cac 10008DE2 		add	r0, sp, #16
 1749              	.L149:
 450:apps/rssi/main.c **** 		sprintf(text + 5, "   %4d", pm_spectrum[arfcn & 1023] - 110);
 1750              		.loc 2 450 0
 1751 0cb0 28539FE5 		ldr	r5, .L152+8
 449:apps/rssi/main.c **** 			sprintf(text, "%4d ", arfcn);
 1752              		.loc 2 449 0
 1753 0cb4 FEFFFFEB 		bl	sprintf
 450:apps/rssi/main.c **** 		sprintf(text + 5, "   %4d", pm_spectrum[arfcn & 1023] - 110);
 1754              		.loc 2 450 0
 1755 0cb8 BA21D5E1 		ldrh	r2, [r5, #26]
 1756 0cbc 24349FE5 		ldr	r3, .L152+272
 1757 0cc0 022BA0E1 		mov	r2, r2, asl #22
 1758 0cc4 222BD3E7 		ldrb	r2, [r3, r2, lsr #22]	@ zero_extendqisi2
 1759 0cc8 10608DE2 		add	r6, sp, #16
 1760 0ccc 6E2042E2 		sub	r2, r2, #110
 1761 0cd0 050086E2 		add	r0, r6, #5
 1762 0cd4 10149FE5 		ldr	r1, .L152+276
 1763 0cd8 FEFFFFEB 		bl	sprintf
 451:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1764              		.loc 2 451 0
 1765 0cdc 0600A0E1 		mov	r0, r6
 1766              	.LBB260:
 1767              	.LBB261:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1768              		.loc 1 87 0
 1769 0ce0 F4629FE5 		ldr	r6, .L152+4
 1770              	.LBE261:
 1771              	.LBE260:
 451:apps/rssi/main.c **** 		fb_putstr(text, -1);
 1772              		.loc 2 451 0
 1773 0ce4 0010E0E3 		mvn	r1, #0
 1774 0ce8 FEFFFFEB 		bl	fb_putstr
 1775              	.LVL76:
 1776              	.LBB263:
 1777              	.LBB262:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1778              		.loc 1 87 0
 1779 0cec 003096E5 		ldr	r3, [r6, #0]
 1780 0cf0 FF28A0E3 		mov	r2, #16711680
 1781 0cf4 282083E5 		str	r2, [r3, #40]
 1782              	.LBE262:
 1783              	.LBE263:
 453:apps/rssi/main.c **** 		if (max) {
 1784              		.loc 2 453 0
 1785 0cf8 102095E5 		ldr	r2, [r5, #16]
 1786 0cfc 000052E3 		cmp	r2, #0
 1787 0d00 0E00000A 		beq	.L100
 1788              	.LVL77:
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 1789              		.loc 2 455 0
 1790 0d04 B002D3E1 		ldrh	r0, [r3, #32]
 1791 0d08 100040E2 		sub	r0, r0, #16
 1792              	.LBB264:
 1793              	.LBB265:
 1794              		.loc 1 97 0
 1795 0d0c 0020A0E3 		mov	r2, #0
 1796              	.LBE265:
 1797              	.LBE264:
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 1798              		.loc 2 455 0
 1799 0d10 0008A0E1 		mov	r0, r0, asl #16
 1800              	.LBB267:
 1801              	.LBB266:
 1802              		.loc 1 97 0
 1803 0d14 302083E5 		str	r2, [r3, #48]
 1804              	.LBE266:
 1805              	.LBE267:
 455:apps/rssi/main.c **** 			fb_gotoxy(framebuffer->width - 16,15);
 1806              		.loc 2 455 0
 1807 0d18 2008A0E1 		mov	r0, r0, lsr #16
 1808 0d1c 0F10A0E3 		mov	r1, #15
 1809 0d20 FEFFFFEB 		bl	fb_gotoxy
 456:apps/rssi/main.c **** 			fb_putstr("max", framebuffer->width);
 1810              		.loc 2 456 0
 1811 0d24 003096E5 		ldr	r3, [r6, #0]
 1812 0d28 0C039FE5 		ldr	r0, .L152+100
 1813 0d2c B012D3E1 		ldrh	r1, [r3, #32]
 1814 0d30 FEFFFFEB 		bl	fb_putstr
 1815              	.LVL78:
 1816              	.LBB268:
 1817              	.LBB269:
 1818              		.loc 1 97 0
 1819 0d34 003096E5 		ldr	r3, [r6, #0]
 1820 0d38 0220A0E3 		mov	r2, #2
 1821 0d3c 302083E5 		str	r2, [r3, #48]
 1822              	.LVL79:
 1823              	.L100:
 1824              	.LBE269:
 1825              	.LBE268:
 459:apps/rssi/main.c **** 		if (pm_scale != 1) {
 1826              		.loc 2 459 0
 1827 0d40 0C739FE5 		ldr	r7, .L152+124
 1828 0d44 083097E5 		ldr	r3, [r7, #8]
 1829 0d48 010053E3 		cmp	r3, #1
 1830 0d4c 1200000A 		beq	.L101
 1831              	.LVL80:
 1832              	.LBB270:
 1833              	.LBB271:
 1834              		.loc 1 97 0
 1835 0d50 84529FE5 		ldr	r5, .L152+4
 1836 0d54 003095E5 		ldr	r3, [r5, #0]
 1837 0d58 0020A0E3 		mov	r2, #0
 1838 0d5c 302083E5 		str	r2, [r3, #48]
 1839              	.LBE271:
 1840              	.LBE270:
 461:apps/rssi/main.c **** 			fb_gotoxy(1, 15);
 1841              		.loc 2 461 0
 1842 0d60 0100A0E3 		mov	r0, #1
 1843 0d64 0F10A0E3 		mov	r1, #15
 462:apps/rssi/main.c **** 			sprintf(text, "x%d", pm_scale);
 1844              		.loc 2 462 0
 1845 0d68 10608DE2 		add	r6, sp, #16
 461:apps/rssi/main.c **** 			fb_gotoxy(1, 15);
 1846              		.loc 2 461 0
 1847 0d6c FEFFFFEB 		bl	fb_gotoxy
 462:apps/rssi/main.c **** 			sprintf(text, "x%d", pm_scale);
 1848              		.loc 2 462 0
 1849 0d70 082097E5 		ldr	r2, [r7, #8]
 1850 0d74 74139FE5 		ldr	r1, .L152+280
 1851 0d78 0600A0E1 		mov	r0, r6
 1852 0d7c FEFFFFEB 		bl	sprintf
 463:apps/rssi/main.c **** 			fb_putstr(text, framebuffer->width);
 1853              		.loc 2 463 0
 1854 0d80 003095E5 		ldr	r3, [r5, #0]
 1855 0d84 0600A0E1 		mov	r0, r6
 1856 0d88 B012D3E1 		ldrh	r1, [r3, #32]
 1857 0d8c FEFFFFEB 		bl	fb_putstr
 1858              	.LVL81:
 1859              	.LBB272:
 1860              	.LBB273:
 1861              		.loc 1 97 0
 1862 0d90 003095E5 		ldr	r3, [r5, #0]
 1863 0d94 0220A0E3 		mov	r2, #2
 1864 0d98 302083E5 		str	r2, [r3, #48]
 1865              	.LVL82:
 1866              	.L101:
 1867              	.LBE273:
 1868              	.LBE272:
 1869              	.LBB274:
 1870              	.LBB275:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1871              		.loc 1 87 0
 1872 0d9c 38329FE5 		ldr	r3, .L152+4
 1873 0da0 003093E5 		ldr	r3, [r3, #0]
 1874 0da4 0020A0E3 		mov	r2, #0
 1875 0da8 282083E5 		str	r2, [r3, #40]
 1876              	.LBE275:
 1877              	.LBE274:
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1878              		.loc 2 467 0
 1879 0dac 2C329FE5 		ldr	r3, .L152+8
 1880 0db0 142093E5 		ldr	r2, [r3, #20]
 1881 0db4 000052E3 		cmp	r2, #0
 1882 0db8 0600000A 		beq	.L102
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1883              		.loc 2 467 0 is_stmt 0 discriminator 1
 1884 0dbc BA31D3E1 		ldrh	r3, [r3, #26]
 1885 0dc0 020C53E3 		cmp	r3, #512
 1886 0dc4 0300003A 		bcc	.L102
 1887 0dc8 70929FE5 		ldr	r9, .L152+104
 1888 0dcc 090053E1 		cmp	r3, r9
 468:apps/rssi/main.c **** 			a = PCS_MIN;
 1889              		.loc 2 468 0 is_stmt 1 discriminator 1
 1890 0dd0 02ACA093 		movls	sl, #512
 467:apps/rssi/main.c **** 		if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 1891              		.loc 2 467 0 discriminator 1
 1892 0dd4 0300009A 		bls	.L103
 1893              	.L102:
 471:apps/rssi/main.c **** 			a = band->min;
 1894              		.loc 2 471 0
 1895 0dd8 F8329FE5 		ldr	r3, .L152+256
 1896 0ddc 003093E5 		ldr	r3, [r3, #0]
 1897 0de0 B0A0D3E1 		ldrh	sl, [r3, #0]
 1898              	.LVL83:
 472:apps/rssi/main.c **** 			e = band->max;
 1899              		.loc 2 472 0
 1900 0de4 B490D3E1 		ldrh	r9, [r3, #4]
 1901              	.LVL84:
 1902              	.L103:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1903              		.loc 2 485 0
 1904 0de8 0A7084E2 		add	r7, r4, #10
 482:apps/rssi/main.c **** 				p = height;
 1905              		.loc 2 482 0
 1906 0dec 0428A0E1 		mov	r2, r4, asl #16
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1907              		.loc 2 485 0
 1908 0df0 0778A0E1 		mov	r7, r7, asl #16
 482:apps/rssi/main.c **** 				p = height;
 1909              		.loc 2 482 0
 1910 0df4 2228A0E1 		mov	r2, r2, lsr #16
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 1911              		.loc 2 474 0
 1912 0df8 0050A0E3 		mov	r5, #0
 1913 0dfc D8819FE5 		ldr	r8, .L152+4
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 1914              		.loc 2 475 0
 1915 0e00 D8319FE5 		ldr	r3, .L152+8
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 1916              		.loc 2 480 0
 1917 0e04 48B29FE5 		ldr	fp, .L152+124
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1918              		.loc 2 485 0
 1919 0e08 2778A0E1 		mov	r7, r7, lsr #16
 482:apps/rssi/main.c **** 				p = height;
 1920              		.loc 2 482 0
 1921 0e0c 0C208DE5 		str	r2, [sp, #12]
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 1922              		.loc 2 474 0
 1923 0e10 2C0000EA 		b	.L104
 1924              	.LVL85:
 1925              	.L108:
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 1926              		.loc 2 475 0
 1927 0e14 BA11D3E1 		ldrh	r1, [r3, #26]
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 1928              		.loc 2 474 0
 1929 0e18 0568A0E1 		mov	r6, r5, asl #16
 1930 0e1c 2668A0E1 		mov	r6, r6, lsr #16
 475:apps/rssi/main.c **** 			p = (arfcn + i - (framebuffer->width >> 1)) & 1023;
 1931              		.loc 2 475 0
 1932 0e20 011060E0 		rsb	r1, r0, r1
 1933 0e24 011086E0 		add	r1, r6, r1
 1934 0e28 011BA0E1 		mov	r1, r1, asl #22
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 1935              		.loc 2 476 0
 1936 0e2c 2113A0E1 		mov	r1, r1, lsr #6
 1937 0e30 21C8A0E1 		mov	ip, r1, lsr #16
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 1938              		.loc 2 478 0
 1939 0e34 09E06CE0 		rsb	lr, ip, r9
 476:apps/rssi/main.c **** 			if ((((p - a) & 1023) & 512))
 1940              		.loc 2 476 0
 1941 0e38 0CC06AE0 		rsb	ip, sl, ip
 171:apps/rssi/main.c **** static void refresh_display(void)
 1942              		.loc 2 171 0
 1943 0e3c 0CC08EE1 		orr	ip, lr, ip
 478:apps/rssi/main.c **** 			if ((((e - p) & 1023) & 512))
 1944              		.loc 2 478 0
 1945 0e40 020C1CE3 		tst	ip, #512
 1946 0e44 1E00001A 		bne	.L105
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 1947              		.loc 2 480 0
 1948 0e48 08C09BE5 		ldr	ip, [fp, #8]
 1949 0e4c 940C0CE0 		mul	ip, r4, ip
 1950 0e50 90E29FE5 		ldr	lr, .L152+272
 1951 0e54 2118DEE7 		ldrb	r1, [lr, r1, lsr #16]	@ zero_extendqisi2
 1952 0e58 9C0101E0 		mul	r1, ip, r1
 1953 0e5c 3FC081E2 		add	ip, r1, #63
 1954 0e60 000051E3 		cmp	r1, #0
 1955 0e64 0C10A0B1 		movlt	r1, ip
 1956 0e68 0115A0E1 		mov	r1, r1, asl #10
 482:apps/rssi/main.c **** 				p = height;
 1957              		.loc 2 482 0
 1958 0e6c 0CC09DE5 		ldr	ip, [sp, #12]
 480:apps/rssi/main.c **** 			p = (pm_spectrum[p] * pm_scale * height / 64);
 1959              		.loc 2 480 0
 1960 0e70 2118A0E1 		mov	r1, r1, lsr #16
 1961              	.LVL86:
 481:apps/rssi/main.c **** 			if (p > height)
 1962              		.loc 2 481 0
 1963 0e74 040051E1 		cmp	r1, r4
 482:apps/rssi/main.c **** 				p = height;
 1964              		.loc 2 482 0
 1965 0e78 0C10A0C1 		movgt	r1, ip
 1966              	.LVL87:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1967              		.loc 2 485 0
 1968 0e7c 071061E0 		rsb	r1, r1, r7
 1969              	.LVL88:
 483:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 1970              		.loc 2 483 0
 1971 0e80 000055E1 		cmp	r5, r0
 1972              	.LVL89:
 1973              	.LBB276:
 1974              	.LBB277:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1975              		.loc 1 87 0
 1976 0e84 FF08A003 		moveq	r0, #16711680
 1977              	.LBE277:
 1978              	.LBE276:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1979              		.loc 2 485 0
 1980 0e88 0118A0E1 		mov	r1, r1, asl #16
 1981              	.LBB279:
 1982              	.LBB278:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 1983              		.loc 1 87 0
 1984 0e8c 28008205 		streq	r0, [r2, #40]
 1985              	.LBE278:
 1986              	.LBE279:
 485:apps/rssi/main.c **** 			fb_gotoxy(i, height + 10 - p);
 1987              		.loc 2 485 0
 1988 0e90 2118A0E1 		mov	r1, r1, lsr #16
 1989 0e94 0600A0E1 		mov	r0, r6
 1990 0e98 08308DE5 		str	r3, [sp, #8]
 1991 0e9c FEFFFFEB 		bl	fb_gotoxy
 486:apps/rssi/main.c **** 			fb_boxto(i, height + 10);
 1992              		.loc 2 486 0
 1993 0ea0 0710A0E1 		mov	r1, r7
 1994 0ea4 0600A0E1 		mov	r0, r6
 1995 0ea8 FEFFFFEB 		bl	fb_boxto
 487:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 1996              		.loc 2 487 0
 1997 0eac 002098E5 		ldr	r2, [r8, #0]
 1998 0eb0 B012D2E1 		ldrh	r1, [r2, #32]
 1999 0eb4 A10055E1 		cmp	r5, r1, lsr #1
 2000              	.LBB280:
 2001              	.LBB281:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2002              		.loc 1 87 0
 2003 0eb8 0010A003 		moveq	r1, #0
 2004              	.LBE281:
 2005              	.LBE280:
 487:apps/rssi/main.c **** 			if (i == (framebuffer->width >> 1))
 2006              		.loc 2 487 0
 2007 0ebc 08309DE5 		ldr	r3, [sp, #8]
 2008              	.LVL90:
 2009              	.LBB283:
 2010              	.LBB282:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2011              		.loc 1 87 0
 2012 0ec0 28108205 		streq	r1, [r2, #40]
 2013              	.LVL91:
 2014              	.L105:
 2015              	.LBE282:
 2016              	.LBE283:
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 2017              		.loc 2 474 0
 2018 0ec4 015085E2 		add	r5, r5, #1
 2019              	.LVL92:
 2020              	.L104:
 474:apps/rssi/main.c **** 		for (i = 0; i < framebuffer->width; i++) {
 2021              		.loc 2 474 0 is_stmt 0 discriminator 1
 2022 0ec8 002098E5 		ldr	r2, [r8, #0]
 2023 0ecc B002D2E1 		ldrh	r0, [r2, #32]
 2024 0ed0 000055E1 		cmp	r5, r0
 2025 0ed4 A000A0E1 		mov	r0, r0, lsr #1
 2026 0ed8 CDFFFFBA 		blt	.L108
 490:apps/rssi/main.c **** 		i = framebuffer->width >> 1;
 2027              		.loc 2 490 0 is_stmt 1
 2028 0edc 0050A0E1 		mov	r5, r0
 2029              	.LVL93:
 491:apps/rssi/main.c **** 		fb_gotoxy(i, 0);
 2030              		.loc 2 491 0
 2031 0ee0 0010A0E3 		mov	r1, #0
 2032 0ee4 FEFFFFEB 		bl	fb_gotoxy
 2033              	.LVL94:
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2034              		.loc 2 493 0
 2035 0ee8 0448A0E1 		mov	r4, r4, asl #16
 2036              	.LVL95:
 492:apps/rssi/main.c **** 		fb_boxto(i, 4);
 2037              		.loc 2 492 0
 2038 0eec 0500A0E1 		mov	r0, r5
 2039 0ef0 0410A0E3 		mov	r1, #4
 2040 0ef4 FEFFFFEB 		bl	fb_boxto
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2041              		.loc 2 493 0
 2042 0ef8 2468A0E1 		mov	r6, r4, lsr #16
 2043 0efc 0A1884E2 		add	r1, r4, #655360
 2044 0f00 0500A0E1 		mov	r0, r5
 2045 0f04 2118A0E1 		mov	r1, r1, lsr #16
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 2046              		.loc 2 494 0
 2047 0f08 0E6086E2 		add	r6, r6, #14
 493:apps/rssi/main.c **** 		fb_gotoxy(i, height + 10);
 2048              		.loc 2 493 0
 2049 0f0c FEFFFFEB 		bl	fb_gotoxy
 494:apps/rssi/main.c **** 		fb_boxto(i, height + 14);
 2050              		.loc 2 494 0
 2051 0f10 0618A0E1 		mov	r1, r6, asl #16
 2052 0f14 0500A0E1 		mov	r0, r5
 2053 0f18 2118A0E1 		mov	r1, r1, lsr #16
 2054 0f1c FEFFFFEB 		bl	fb_boxto
 2055              	.LVL96:
 2056              	.L96:
 2057              	.LBE259:
 2058              	.LBB284:
 2059              	.LBB286:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2060              		.loc 1 87 0
 2061 0f20 B4409FE5 		ldr	r4, .L152+4
 2062 0f24 003094E5 		ldr	r3, [r4, #0]
 2063              	.LBE286:
 2064              	.LBE284:
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2065              		.loc 2 499 0
 2066 0f28 B212D3E1 		ldrh	r1, [r3, #34]
 2067 0f2c 0A1041E2 		sub	r1, r1, #10
 2068              	.LBB288:
 2069              	.LBB285:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2070              		.loc 1 87 0
 2071 0f30 FF2CA0E3 		mov	r2, #65280
 2072              	.LBE285:
 2073              	.LBE288:
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2074              		.loc 2 499 0
 2075 0f34 0118A0E1 		mov	r1, r1, asl #16
 2076              	.LBB289:
 2077              	.LBB287:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2078              		.loc 1 87 0
 2079 0f38 282083E5 		str	r2, [r3, #40]
 2080              	.LBE287:
 2081              	.LBE289:
 499:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 10);
 2082              		.loc 2 499 0
 2083 0f3c 0000A0E3 		mov	r0, #0
 2084 0f40 2118A0E1 		mov	r1, r1, lsr #16
 2085 0f44 FEFFFFEB 		bl	fb_gotoxy
 500:apps/rssi/main.c **** 	fb_boxto(framebuffer->width-1, framebuffer->height - 10);
 2086              		.loc 2 500 0
 2087 0f48 003094E5 		ldr	r3, [r4, #0]
 2088 0f4c B002D3E1 		ldrh	r0, [r3, #32]
 2089 0f50 B212D3E1 		ldrh	r1, [r3, #34]
 2090 0f54 010040E2 		sub	r0, r0, #1
 2091 0f58 0A1041E2 		sub	r1, r1, #10
 2092 0f5c 0008A0E1 		mov	r0, r0, asl #16
 2093 0f60 0118A0E1 		mov	r1, r1, asl #16
 2094 0f64 2008A0E1 		mov	r0, r0, lsr #16
 2095 0f68 2118A0E1 		mov	r1, r1, lsr #16
 2096 0f6c FEFFFFEB 		bl	fb_boxto
 501:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 1);
 2097              		.loc 2 501 0
 2098 0f70 003094E5 		ldr	r3, [r4, #0]
 2099 0f74 B212D3E1 		ldrh	r1, [r3, #34]
 2100 0f78 011041E2 		sub	r1, r1, #1
 2101 0f7c 0118A0E1 		mov	r1, r1, asl #16
 2102 0f80 0000A0E3 		mov	r0, #0
 2103 0f84 2118A0E1 		mov	r1, r1, lsr #16
 2104 0f88 FEFFFFEB 		bl	fb_gotoxy
 2105              	.LVL97:
 2106              	.LBB290:
 2107              	.LBB291:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2108              		.loc 1 87 0
 2109 0f8c 003094E5 		ldr	r3, [r4, #0]
 2110 0f90 FF28A0E3 		mov	r2, #16711680
 2111 0f94 282083E5 		str	r2, [r3, #40]
 2112              	.LBE291:
 2113              	.LBE290:
 503:apps/rssi/main.c **** 	if (mode == MODE_ARFCN)
 2114              		.loc 2 503 0
 2115 0f98 40209FE5 		ldr	r2, .L152+8
 2116 0f9c 083092E5 		ldr	r3, [r2, #8]
 2117 0fa0 020053E3 		cmp	r3, #2
 2118 0fa4 6200001A 		bne	.L109
 504:apps/rssi/main.c **** 		sprintf(text, "%s   %s", (cursor) ? "del " : "back",
 2119              		.loc 2 504 0
 2120 0fa8 34309FE5 		ldr	r3, .L152+12
 2121 0fac 003093E5 		ldr	r3, [r3, #0]
 2122 0fb0 58219FE5 		ldr	r2, .L152+312
 2123 0fb4 000053E3 		cmp	r3, #0
 2124 0fb8 34319FE5 		ldr	r3, .L152+284
 2125 0fbc 34C19FE5 		ldr	ip, .L152+288
 2126 0fc0 0320A011 		movne	r2, r3
 2127 0fc4 30319FE5 		ldr	r3, .L152+292
 2128 0fc8 10008DE2 		add	r0, sp, #16
 2129 0fcc 2C119FE5 		ldr	r1, .L152+296
 2130 0fd0 0C30A001 		moveq	r3, ip
 2131 0fd4 750000EA 		b	.L150
 2132              	.L153:
 2133              		.align	2
 2134              	.L152:
 2135 0fd8 00000000 		.word	battery_info
 2136 0fdc 00000000 		.word	framebuffer
 2137 0fe0 00000000 		.word	.LANCHOR0
 2138 0fe4 00000000 		.word	cursor
 2139 0fe8 24000000 		.word	.LC8
 2140 0fec 00C0C000 		.word	12632064
 2141 0ff0 31000000 		.word	.LC9
 2142 0ff4 37000000 		.word	.LC10
 2143 0ff8 00000000 		.word	power
 2144 0ffc 40000000 		.word	.LC11
 2145 1000 00000000 		.word	jiffies
 2146 1004 00000000 		.word	rach_when
 2147 1008 00000000 		.word	assign
 2148 100c 4A000000 		.word	.LC12
 2149 1010 00000000 		.word	ta
 2150 1014 57000000 		.word	.LC13
 2151 1018 2A020000 		.word	554
 2152 101c 5F000000 		.word	.LC14
 2153 1020 65000000 		.word	.LC15
 2154 1024 6F000000 		.word	.LC16
 2155 1028 7B000000 		.word	.LC17
 2156 102c 83000000 		.word	.LC18
 2157 1030 00000000 		.word	ul_max
 2158 1034 00000000 		.word	ul_levels
 2159 1038 8F000000 		.word	.LC19
 2160 103c 94000000 		.word	.LC20
 2161 1040 2A030000 		.word	810
 2162 1044 98000000 		.word	.LC21
 2163 1048 75010000 		.word	373
 2164 104c 9D000000 		.word	.LC22
 2165 1050 A2000000 		.word	.LC23
 2166 1054 00000000 		.word	.LANCHOR1
 2167 1058 00000000 		.word	bsic
 2168 105c A7000000 		.word	.LC24
 2169 1060 B5000000 		.word	.LC25
 2170 1064 00000000 		.word	si_1
 2171 1068 00000000 		.word	si_2
 2172 106c 00000000 		.word	si_2bis
 2173 1070 00000000 		.word	si_2ter
 2174 1074 00000000 		.word	si_3
 2175 1078 00000000 		.word	si_4
 2176 107c BD000000 		.word	.LC26
 2177 1080 00000000 		.word	mcc
 2178 1084 E7000000 		.word	.LC29
 2179 1088 00000000 		.word	mnc
 2180 108c 00000000 		.word	lac
 2181 1090 CA000000 		.word	.LC27
 2182 1094 D9000000 		.word	.LC28
 2183 1098 01010000 		.word	.LC31
 2184 109c 00000000 		.word	cell_id
 2185 10a0 F4000000 		.word	.LC30
 2186 10a4 00000000 		.word	freq
 2187 10a8 0E010000 		.word	.LC32
 2188 10ac 15010000 		.word	.LC33
 2189 10b0 1A010000 		.word	.LC34
 2190 10b4 00000000 		.word	nb_num
 2191 10b8 21010000 		.word	.LC35
 2192 10bc 00000000 		.word	input
 2193 10c0 2A010000 		.word	.LC36
 2194 10c4 36010000 		.word	.LC37
 2195 10c8 42010000 		.word	.LC38
 2196 10cc 4B010000 		.word	.LC39
 2197 10d0 46480000 		.word	18502
 2198 10d4 664B0000 		.word	19302
 2199 10d8 00000000 		.word	band
 2200 10dc 4D010000 		.word	.LC40
 2201 10e0 00000000 		.word	max_power
 2202 10e4 59010000 		.word	.LC41
 2203 10e8 00000000 		.word	pm_spectrum
 2204 10ec 62010000 		.word	.LC42
 2205 10f0 69010000 		.word	.LC43
 2206 10f4 00000000 		.word	.LC0
 2207 10f8 10000000 		.word	.LC3
 2208 10fc 05000000 		.word	.LC1
 2209 1100 6D010000 		.word	.LC44
 2210 1104 00000000 		.word	cursor
 2211 1108 75010000 		.word	.LC45
 2212 110c 80010000 		.word	.LC46
 2213 1110 0B000000 		.word	.LC2
 2214 1114 1C000000 		.word	.LC6
 2215 1118 8B010000 		.word	.LC47
 2216 111c 20000000 		.word	.LC7
 2217 1120 16000000 		.word	.LC4
 2218 1124 19000000 		.word	.LC5
 2219 1128 00000000 		.word	framebuffer
 2220 112c 00000000 		.word	.LANCHOR0
 2221 1130 97010000 		.word	.LC48
 2222              	.L109:
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 2223              		.loc 2 506 0
 2224 1134 030053E3 		cmp	r3, #3
 2225 1138 0700001A 		bne	.L112
 506:apps/rssi/main.c **** 	else if (mode == MODE_SYNC && cursor < 0)
 2226              		.loc 2 506 0 is_stmt 0 discriminator 1
 2227 113c 40101FE5 		ldr	r1, .L152+300
 2228 1140 001091E5 		ldr	r1, [r1, #0]
 2229 1144 000051E3 		cmp	r1, #0
 507:apps/rssi/main.c **** 		sprintf(text, "%s      %s", "back",
 2230              		.loc 2 507 0 is_stmt 1
 2231 1148 0CE092B5 		ldrlt	lr, [r2, #12]
 2232 114c 10008DB2 		addlt	r0, sp, #16
 2233 1150 50101FB5 		ldrlt	r1, .L152+304
 2234 1154 4C201FB5 		ldrlt	r2, .L152+312
 2235 1158 100000BA 		blt	.L151
 2236              	.L112:
 509:apps/rssi/main.c **** 	else if (mode == MODE_SYNC || mode == MODE_RACH)
 2237              		.loc 2 509 0
 2238 115c 033043E2 		sub	r3, r3, #3
 2239 1160 010053E3 		cmp	r3, #1
 2240 1164 0400008A 		bhi	.L114
 510:apps/rssi/main.c **** 		sprintf(text, "%s        ", "back");
 2241              		.loc 2 510 0
 2242 1168 10008DE2 		add	r0, sp, #16
 2243 116c 68101FE5 		ldr	r1, .L152+308
 2244 1170 68201FE5 		ldr	r2, .L152+312
 2245 1174 FEFFFFEB 		bl	sprintf
 2246 1178 0D0000EA 		b	.L111
 2247              	.L114:
 512:apps/rssi/main.c **** 		sprintf(text, "%s       %s", (pcs) ? "PCS" : "DCS",
 2248              		.loc 2 512 0
 2249 117c 58301FE5 		ldr	r3, .L152+340
 2250 1180 14C093E5 		ldr	ip, [r3, #20]
 2251 1184 0CE093E5 		ldr	lr, [r3, #12]
 2252 1188 7C301FE5 		ldr	r3, .L152+316
 2253 118c 00005CE3 		cmp	ip, #0
 2254 1190 80101FE5 		ldr	r1, .L152+320
 2255 1194 80201FE5 		ldr	r2, .L152+324
 2256 1198 10008DE2 		add	r0, sp, #16
 2257 119c 0320A011 		movne	r2, r3
 2258              	.L151:
 2259 11a0 88C01FE5 		ldr	ip, .L152+328
 2260 11a4 00005EE3 		cmp	lr, #0
 2261 11a8 8C301FE5 		ldr	r3, .L152+332
 2262 11ac 0C30A011 		movne	r3, ip
 2263              	.L150:
 2264 11b0 FEFFFFEB 		bl	sprintf
 2265              	.L111:
 514:apps/rssi/main.c **** 	fb_putstr(text, -1);
 2266              		.loc 2 514 0
 2267 11b4 10408DE2 		add	r4, sp, #16
 2268              	.LBB292:
 2269              	.LBB294:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2270              		.loc 1 87 0
 2271 11b8 98501FE5 		ldr	r5, .L152+336
 2272              	.LBE294:
 2273              	.LBE292:
 514:apps/rssi/main.c **** 	fb_putstr(text, -1);
 2274              		.loc 2 514 0
 2275 11bc 0400A0E1 		mov	r0, r4
 2276 11c0 0010E0E3 		mvn	r1, #0
 2277 11c4 FEFFFFEB 		bl	fb_putstr
 2278              	.LVL98:
 2279              	.LBB297:
 2280              	.LBB295:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2281              		.loc 1 87 0
 2282 11c8 003095E5 		ldr	r3, [r5, #0]
 2283              	.LBE295:
 2284              	.LBE297:
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 2285              		.loc 2 517 0
 2286 11cc B212D3E1 		ldrh	r1, [r3, #34]
 2287 11d0 021041E2 		sub	r1, r1, #2
 2288              	.LBB298:
 2289              	.LBB293:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2290              		.loc 1 87 0
 2291 11d4 0000A0E3 		mov	r0, #0
 2292              	.LBE293:
 2293              	.LBE298:
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 2294              		.loc 2 517 0
 2295 11d8 0118A0E1 		mov	r1, r1, asl #16
 2296              	.LBB299:
 2297              	.LBB296:
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
 2298              		.loc 1 87 0
 2299 11dc 280083E5 		str	r0, [r3, #40]
 2300              	.LVL99:
 2301              	.LBE296:
 2302              	.LBE299:
 2303              	.LBB300:
 2304              	.LBB301:
 2305              		.loc 1 97 0
 2306 11e0 300083E5 		str	r0, [r3, #48]
 2307              	.LBE301:
 2308              	.LBE300:
 517:apps/rssi/main.c **** 	fb_gotoxy(0, framebuffer->height - 2);
 2309              		.loc 2 517 0
 2310 11e4 2118A0E1 		mov	r1, r1, lsr #16
 2311 11e8 FEFFFFEB 		bl	fb_gotoxy
 518:apps/rssi/main.c **** 	sprintf(text, "%d", tone / 25);
 2312              		.loc 2 518 0
 2313 11ec C8301FE5 		ldr	r3, .L152+340
 2314 11f0 1910A0E3 		mov	r1, #25
 2315 11f4 1C0093E5 		ldr	r0, [r3, #28]
 2316 11f8 FEFFFFEB 		bl	__divsi3
 2317 11fc D4101FE5 		ldr	r1, .L152+344
 2318 1200 0020A0E1 		mov	r2, r0
 2319 1204 0400A0E1 		mov	r0, r4
 2320 1208 FEFFFFEB 		bl	sprintf
 519:apps/rssi/main.c **** 	fb_putstr(text, -1);
 2321              		.loc 2 519 0
 2322 120c 0400A0E1 		mov	r0, r4
 2323 1210 0010E0E3 		mvn	r1, #0
 2324 1214 FEFFFFEB 		bl	fb_putstr
 2325              	.LBB302:
 2326              	.LBB303:
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
 2327              		.loc 1 76 0
 2328 1218 003095E5 		ldr	r3, [r5, #0]
 2329 121c 0FE0A0E1 		mov	lr, pc
 2330 1220 1CF093E5 		ldr	pc, [r3, #28]
 2331              	.LBE303:
 2332              	.LBE302:
 522:apps/rssi/main.c **** }
 2333              		.loc 2 522 0
 2334 1224 24D08DE2 		add	sp, sp, #36
 2335 1228 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2336              	.LVL100:
 2337              	.L119:
 192:apps/rssi/main.c **** 			sprintf(text, "@%c%c%cC", (bat >= 30) ? 'B':'A',
 2338              		.loc 2 192 0
 2339 122c 4220A0E3 		mov	r2, #66
 2340              	.L33:
 2341 1230 4130A0E3 		mov	r3, #65
 2342 1234 B1FBFFEA 		b	.L117
 2343              		.cfi_endproc
 2344              	.LFE110:
 2346              		.section	.text.inc_dec_arfcn,"ax",%progbits
 2347              		.align	2
 2349              	inc_dec_arfcn:
 2350              	.LFB113:
 600:apps/rssi/main.c **** {
 2351              		.loc 2 600 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              	.LVL101:
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2356              		.loc 2 607 0
 2357 0000 64319FE5 		ldr	r3, .L182
 2358 0004 64219FE5 		ldr	r2, .L182+4
 2359 0008 BAC1D3E1 		ldrh	ip, [r3, #26]
 2360 000c 60319FE5 		ldr	r3, .L182+8
 600:apps/rssi/main.c **** {
 2361              		.loc 2 600 0
 2362 0010 F0412DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, lr}
 2363              	.LCFI6:
 2364              		.cfi_def_cfa_offset 24
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2365              		.loc 2 607 0
 2366 0014 003093E5 		ldr	r3, [r3, #0]
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2367              		.loc 2 604 0
 2368 0018 0210A0E1 		mov	r1, r2
 2369 001c 0050A0E3 		mov	r5, #0
 2370              		.cfi_offset 14, -4
 2371              		.cfi_offset 8, -8
 2372              		.cfi_offset 7, -12
 2373              		.cfi_offset 6, -16
 2374              		.cfi_offset 5, -20
 2375              		.cfi_offset 4, -24
 605:apps/rssi/main.c **** 		band = &bands[i];
 2376              		.loc 2 605 0
 2377 0020 0280A0E1 		mov	r8, r2
 2378 0024 1870A0E3 		mov	r7, #24
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2379              		.loc 2 604 0
 2380 0028 130000EA 		b	.L155
 2381              	.LVL102:
 2382              	.L160:
 606:apps/rssi/main.c **** 		if (band->min < band->max) {
 2383              		.loc 2 606 0
 2384 002c 006091E5 		ldr	r6, [r1, #0]
 2385 0030 040056E1 		cmp	r6, r4
 605:apps/rssi/main.c **** 		band = &bands[i];
 2386              		.loc 2 605 0
 2387 0034 978523E0 		mla	r3, r7, r5, r8
 606:apps/rssi/main.c **** 		if (band->min < band->max) {
 2388              		.loc 2 606 0
 2389 0038 020000AA 		bge	.L156
 607:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2390              		.loc 2 607 0
 2391 003c 06005CE1 		cmp	ip, r6
 2392 0040 0B0000BA 		blt	.L157
 2393 0044 010000EA 		b	.L159
 2394              	.L156:
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2395              		.loc 2 610 0
 2396 0048 06005CE1 		cmp	ip, r6
 2397 004c 010000AA 		bge	.L174
 2398              	.L159:
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2399              		.loc 2 610 0 is_stmt 0 discriminator 1
 2400 0050 04005CE1 		cmp	ip, r4
 2401 0054 060000CA 		bgt	.L157
 2402              	.L174:
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2403              		.loc 2 610 0
 2404 0058 14119FE5 		ldr	r1, .L182+8
 617:apps/rssi/main.c **** 	if (inc) {
 2405              		.loc 2 617 0 is_stmt 1
 2406 005c 000050E3 		cmp	r0, #0
 610:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2407              		.loc 2 610 0
 2408 0060 003081E5 		str	r3, [r1, #0]
 2409 0064 08019FE5 		ldr	r0, .L182+8
 2410              	.LVL103:
 2411 0068 FC309FE5 		ldr	r3, .L182
 617:apps/rssi/main.c **** 	if (inc) {
 2412              		.loc 2 617 0
 2413 006c 1900000A 		beq	.L162
 2414 0070 050000EA 		b	.L181
 2415              	.LVL104:
 2416              	.L157:
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2417              		.loc 2 604 0
 2418 0074 015085E2 		add	r5, r5, #1
 2419              	.LVL105:
 2420 0078 181081E2 		add	r1, r1, #24
 2421              	.LVL106:
 2422              	.L155:
 604:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2423              		.loc 2 604 0 is_stmt 0 discriminator 1
 2424 007c 044091E5 		ldr	r4, [r1, #4]
 2425 0080 000054E3 		cmp	r4, #0
 2426 0084 E8FFFF1A 		bne	.L160
 2427 0088 330000EA 		b	.L178
 2428              	.LVL107:
 2429              	.L181:
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 2430              		.loc 2 618 0 is_stmt 1
 2431 008c 000090E5 		ldr	r0, [r0, #0]
 2432 0090 BA11D3E1 		ldrh	r1, [r3, #26]
 2433 0094 04C090E5 		ldr	ip, [r0, #4]
 2434 0098 0C0051E1 		cmp	r1, ip
 619:apps/rssi/main.c **** 			arfcn = band->next;
 2435              		.loc 2 619 0
 2436 009c BC00D001 		ldreqh	r0, [r0, #12]
 618:apps/rssi/main.c **** 		if (arfcn == band->max)
 2437              		.loc 2 618 0
 2438 00a0 1200000A 		beq	.L176
 620:apps/rssi/main.c **** 		else if (arfcn == 1023)
 2439              		.loc 2 620 0
 2440 00a4 CC009FE5 		ldr	r0, .L182+12
 2441 00a8 000051E1 		cmp	r1, r0
 623:apps/rssi/main.c **** 			arfcn++;
 2442              		.loc 2 623 0
 2443 00ac 01108112 		addne	r1, r1, #1
 621:apps/rssi/main.c **** 			arfcn = 0;
 2444              		.loc 2 621 0
 2445 00b0 0010A003 		moveq	r1, #0	@ movhi
 2446              	.L175:
 2447 00b4 BA11C3E1 		strh	r1, [r3, #26]	@ movhi
 2448              	.L164:
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2449              		.loc 2 636 0 discriminator 1
 2450 00b8 AC309FE5 		ldr	r3, .L182
 2451 00bc BA11D3E1 		ldrh	r1, [r3, #26]
 2452 00c0 AC309FE5 		ldr	r3, .L182+8
 2453 00c4 00C0A0E3 		mov	ip, #0
 2454 00c8 003093E5 		ldr	r3, [r3, #0]
 634:apps/rssi/main.c **** 		band = &bands[i];
 2455              		.loc 2 634 0 discriminator 1
 2456 00cc 9C609FE5 		ldr	r6, .L182+4
 2457 00d0 1850A0E3 		mov	r5, #24
 2458              	.LVL108:
 2459 00d4 1D0000EA 		b	.L166
 2460              	.LVL109:
 2461              	.L162:
 625:apps/rssi/main.c **** 		if (arfcn == band->min)
 2462              		.loc 2 625 0
 2463 00d8 000090E5 		ldr	r0, [r0, #0]
 2464 00dc BA11D3E1 		ldrh	r1, [r3, #26]
 2465 00e0 00C090E5 		ldr	ip, [r0, #0]
 2466 00e4 0C0051E1 		cmp	r1, ip
 2467 00e8 0200001A 		bne	.L167
 626:apps/rssi/main.c **** 			arfcn = band->prev;
 2468              		.loc 2 626 0
 2469 00ec B800D0E1 		ldrh	r0, [r0, #8]
 2470              	.L176:
 2471 00f0 BA01C3E1 		strh	r0, [r3, #26]	@ movhi
 2472 00f4 EFFFFFEA 		b	.L164
 2473              	.L167:
 627:apps/rssi/main.c **** 		else if (arfcn == 0)
 2474              		.loc 2 627 0
 2475 00f8 000051E3 		cmp	r1, #0
 628:apps/rssi/main.c **** 			arfcn = 1023;
 2476              		.loc 2 628 0
 2477 00fc 3F1BE003 		mvneq	r1, #64512
 630:apps/rssi/main.c **** 			arfcn--;
 2478              		.loc 2 630 0
 2479 0100 01104112 		subne	r1, r1, #1
 2480 0104 EAFFFFEA 		b	.L175
 2481              	.LVL110:
 2482              	.L173:
 635:apps/rssi/main.c **** 		if (band->min < band->max) {
 2483              		.loc 2 635 0
 2484 0108 004092E5 		ldr	r4, [r2, #0]
 2485 010c 000054E1 		cmp	r4, r0
 634:apps/rssi/main.c **** 		band = &bands[i];
 2486              		.loc 2 634 0
 2487 0110 956C23E0 		mla	r3, r5, ip, r6
 635:apps/rssi/main.c **** 		if (band->min < band->max) {
 2488              		.loc 2 635 0
 2489 0114 020000AA 		bge	.L169
 636:apps/rssi/main.c **** 			if (arfcn >= band->min && arfcn <= band->max)
 2490              		.loc 2 636 0
 2491 0118 040051E1 		cmp	r1, r4
 2492 011c 090000BA 		blt	.L170
 2493 0120 010000EA 		b	.L172
 2494              	.L169:
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2495              		.loc 2 639 0
 2496 0124 040051E1 		cmp	r1, r4
 2497 0128 010000AA 		bge	.L177
 2498              	.L172:
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2499              		.loc 2 639 0 is_stmt 0 discriminator 1
 2500 012c 000051E1 		cmp	r1, r0
 2501 0130 040000CA 		bgt	.L170
 2502              	.L177:
 639:apps/rssi/main.c **** 			if (arfcn >= band->min || arfcn <= band->max)
 2503              		.loc 2 639 0
 2504 0134 38209FE5 		ldr	r2, .L182+8
 2505 0138 003082E5 		str	r3, [r2, #0]
 646:apps/rssi/main.c **** 	refresh_display();
 2506              		.loc 2 646 0 is_stmt 1
 2507 013c FEFFFFEB 		bl	refresh_display
 2508              	.LVL111:
 648:apps/rssi/main.c **** 	return 0;
 2509              		.loc 2 648 0
 2510 0140 0000A0E3 		mov	r0, #0
 649:apps/rssi/main.c **** }
 2511              		.loc 2 649 0
 2512 0144 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 2513              	.LVL112:
 2514              	.L170:
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2515              		.loc 2 633 0
 2516 0148 01C08CE2 		add	ip, ip, #1
 2517              	.LVL113:
 2518 014c 182082E2 		add	r2, r2, #24
 2519              	.LVL114:
 2520              	.L166:
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2521              		.loc 2 633 0 is_stmt 0 discriminator 1
 2522 0150 040092E5 		ldr	r0, [r2, #4]
 2523 0154 000050E3 		cmp	r0, #0
 2524 0158 EAFFFF1A 		bne	.L173
 2525              	.LVL115:
 2526              	.L178:
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2527              		.loc 2 633 0
 2528 015c 10209FE5 		ldr	r2, .L182+8
 644:apps/rssi/main.c **** 		return -EINVAL;
 2529              		.loc 2 644 0 is_stmt 1
 2530 0160 1500E0E3 		mvn	r0, #21
 633:apps/rssi/main.c **** 	for (i = 0; bands[i].max; i++) {
 2531              		.loc 2 633 0
 2532 0164 003082E5 		str	r3, [r2, #0]
 2533 0168 F081BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, pc}
 2534              	.L183:
 2535              		.align	2
 2536              	.L182:
 2537 016c 00000000 		.word	.LANCHOR0
 2538 0170 0C000000 		.word	.LANCHOR1+12
 2539 0174 00000000 		.word	band
 2540 0178 FF030000 		.word	1023
 2541              		.cfi_endproc
 2542              	.LFE113:
 2544              		.section	.text.tone_inc_dec,"ax",%progbits
 2545              		.align	2
 2547              	tone_inc_dec:
 2548              	.LFB118:
 711:apps/rssi/main.c **** {
 2549              		.loc 2 711 0
 2550              		.cfi_startproc
 2551              		@ args = 0, pretend = 0, frame = 0
 2552              		@ frame_needed = 0, uses_anonymous_args = 0
 2553              		@ link register save eliminated.
 2554              	.LVL116:
 712:apps/rssi/main.c **** 	if (inc) {
 2555              		.loc 2 712 0
 2556 0000 000050E3 		cmp	r0, #0
 2557 0004 2C309FE5 		ldr	r3, .L188
 2558 0008 0400000A 		beq	.L185
 713:apps/rssi/main.c **** 		if (tone + 25 <= 255)
 2559              		.loc 2 713 0
 2560 000c 1C2093E5 		ldr	r2, [r3, #28]
 2561 0010 E60052E3 		cmp	r2, #230
 714:apps/rssi/main.c **** 			tone += 25;
 2562              		.loc 2 714 0
 2563 0014 192082D2 		addle	r2, r2, #25
 713:apps/rssi/main.c **** 		if (tone + 25 <= 255)
 2564              		.loc 2 713 0
 2565 0018 040000DA 		ble	.L187
 2566 001c 040000EA 		b	.L186
 2567              	.L185:
 716:apps/rssi/main.c **** 		if (tone - 25 >= 0)
 2568              		.loc 2 716 0
 2569 0020 1C2093E5 		ldr	r2, [r3, #28]
 2570 0024 180052E3 		cmp	r2, #24
 2571 0028 010000DA 		ble	.L186
 717:apps/rssi/main.c **** 			tone -= 25;
 2572              		.loc 2 717 0
 2573 002c 192042E2 		sub	r2, r2, #25
 2574              	.L187:
 2575 0030 1C2083E5 		str	r2, [r3, #28]
 2576              	.L186:
 721:apps/rssi/main.c **** }
 2577              		.loc 2 721 0
 720:apps/rssi/main.c **** 	refresh_display();
 2578              		.loc 2 720 0
 2579 0034 FEFFFFEA 		b	refresh_display
 2580              	.LVL117:
 2581              	.L189:
 2582              		.align	2
 2583              	.L188:
 2584 0038 00000000 		.word	.LANCHOR0
 2585              		.cfi_endproc
 2586              	.LFE118:
 2588              		.section	.text.inc_dec_neighbour,"ax",%progbits
 2589              		.align	2
 2591              	inc_dec_neighbour:
 2592              	.LFB120:
 731:apps/rssi/main.c **** {
 2593              		.loc 2 731 0
 2594              		.cfi_startproc
 2595              		@ args = 0, pretend = 0, frame = 0
 2596              		@ frame_needed = 0, uses_anonymous_args = 0
 2597              	.LVL118:
 732:apps/rssi/main.c **** 	if (inc) {
 2598              		.loc 2 732 0
 2599 0000 000050E3 		cmp	r0, #0
 731:apps/rssi/main.c **** {
 2600              		.loc 2 731 0
 2601 0004 04E02DE5 		str	lr, [sp, #-4]!
 2602              	.LCFI7:
 2603              		.cfi_def_cfa_offset 4
 2604 0008 78309FE5 		ldr	r3, .L197
 732:apps/rssi/main.c **** 	if (inc) {
 2605              		.loc 2 732 0
 2606 000c 1300000A 		beq	.L191
 2607              		.cfi_offset 14, -4
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 2608              		.loc 2 733 0
 2609 0010 003093E5 		ldr	r3, [r3, #0]
 2610 0014 000053E3 		cmp	r3, #0
 2611 0018 0C0000DA 		ble	.L192
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 2612              		.loc 2 733 0 is_stmt 0 discriminator 1
 2613 001c 68209FE5 		ldr	r2, .L197+4
 2614 0020 002092E5 		ldr	r2, [r2, #0]
 2615 0024 B222D2E1 		ldrh	r2, [r2, #34]
 2616 0028 192042E2 		sub	r2, r2, #25
 2617 002c 071082E2 		add	r1, r2, #7
 2618 0030 000052E3 		cmp	r2, #0
 2619 0034 0120A0B1 		movlt	r2, r1
 2620 0038 50109FE5 		ldr	r1, .L197+8
 2621 003c 001091E5 		ldr	r1, [r1, #0]
 2622 0040 C22141E0 		sub	r2, r1, r2, asr #3
 2623 0044 020053E1 		cmp	r3, r2
 734:apps/rssi/main.c **** 			return -EINVAL;
 2624              		.loc 2 734 0 is_stmt 1 discriminator 1
 2625 0048 1500E0C3 		mvngt	r0, #21
 2626              	.LVL119:
 733:apps/rssi/main.c **** 		if (cursor > 0 && cursor - 1 >= (nb_num - NEIGH_LINES))
 2627              		.loc 2 733 0 discriminator 1
 2628 004c 04F09DC4 		ldrgt	pc, [sp], #4
 2629              	.L192:
 735:apps/rssi/main.c **** 		cursor++;
 2630              		.loc 2 735 0
 2631 0050 30209FE5 		ldr	r2, .L197
 2632 0054 013083E2 		add	r3, r3, #1
 2633 0058 003082E5 		str	r3, [r2, #0]
 2634 005c 040000EA 		b	.L194
 2635              	.LVL120:
 2636              	.L191:
 737:apps/rssi/main.c **** 		if (cursor < 0)
 2637              		.loc 2 737 0
 2638 0060 002093E5 		ldr	r2, [r3, #0]
 2639 0064 000052E3 		cmp	r2, #0
 2640 0068 040000BA 		blt	.L196
 739:apps/rssi/main.c **** 		cursor--;
 2641              		.loc 2 739 0
 2642 006c 012042E2 		sub	r2, r2, #1
 2643 0070 002083E5 		str	r2, [r3, #0]
 2644              	.LVL121:
 2645              	.L194:
 742:apps/rssi/main.c **** 	refresh_display();
 2646              		.loc 2 742 0
 2647 0074 FEFFFFEB 		bl	refresh_display
 744:apps/rssi/main.c **** 	return 0;
 2648              		.loc 2 744 0
 2649 0078 0000A0E3 		mov	r0, #0
 2650 007c 04F09DE4 		ldr	pc, [sp], #4
 2651              	.LVL122:
 2652              	.L196:
 738:apps/rssi/main.c **** 			return -EINVAL;
 2653              		.loc 2 738 0
 2654 0080 1500E0E3 		mvn	r0, #21
 2655              	.LVL123:
 745:apps/rssi/main.c **** }
 2656              		.loc 2 745 0
 2657 0084 04F09DE4 		ldr	pc, [sp], #4
 2658              	.L198:
 2659              		.align	2
 2660              	.L197:
 2661 0088 00000000 		.word	cursor
 2662 008c 00000000 		.word	framebuffer
 2663 0090 00000000 		.word	nb_num
 2664              		.cfi_endproc
 2665              	.LFE120:
 2667              		.section	.text.inc_dec_spectrum,"ax",%progbits
 2668              		.align	2
 2670              	inc_dec_spectrum:
 2671              	.LFB121:
 748:apps/rssi/main.c **** {
 2672              		.loc 2 748 0
 2673              		.cfi_startproc
 2674              		@ args = 0, pretend = 0, frame = 0
 2675              		@ frame_needed = 0, uses_anonymous_args = 0
 2676              	.LVL124:
 749:apps/rssi/main.c **** 	if (inc) {
 2677              		.loc 2 749 0
 2678 0000 000050E3 		cmp	r0, #0
 748:apps/rssi/main.c **** {
 2679              		.loc 2 748 0
 2680 0004 04E02DE5 		str	lr, [sp, #-4]!
 2681              	.LCFI8:
 2682              		.cfi_def_cfa_offset 4
 2683 0008 44309FE5 		ldr	r3, .L203
 749:apps/rssi/main.c **** 	if (inc) {
 2684              		.loc 2 749 0
 2685 000c 0600000A 		beq	.L200
 2686              		.cfi_offset 14, -4
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 2687              		.loc 2 750 0
 2688 0010 082093E5 		ldr	r2, [r3, #8]
 2689 0014 8220A0E1 		mov	r2, r2, asl #1
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 2690              		.loc 2 751 0
 2691 0018 080052E3 		cmp	r2, #8
 750:apps/rssi/main.c **** 		pm_scale <<= 1;
 2692              		.loc 2 750 0
 2693 001c 082083E5 		str	r2, [r3, #8]
 752:apps/rssi/main.c **** 			pm_scale = 8;
 2694              		.loc 2 752 0
 2695 0020 0820A0C3 		movgt	r2, #8
 751:apps/rssi/main.c **** 		if (pm_scale > 8)
 2696              		.loc 2 751 0
 2697 0024 060000CA 		bgt	.L202
 2698 0028 060000EA 		b	.L201
 2699              	.L200:
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 2700              		.loc 2 754 0
 2701 002c 082093E5 		ldr	r2, [r3, #8]
 2702 0030 C220A0E1 		mov	r2, r2, asr #1
 755:apps/rssi/main.c **** 		if (pm_scale < 1)
 2703              		.loc 2 755 0
 2704 0034 000052E3 		cmp	r2, #0
 754:apps/rssi/main.c **** 		pm_scale >>= 1;
 2705              		.loc 2 754 0
 2706 0038 082083E5 		str	r2, [r3, #8]
 755:apps/rssi/main.c **** 		if (pm_scale < 1)
 2707              		.loc 2 755 0
 2708 003c 010000CA 		bgt	.L201
 756:apps/rssi/main.c **** 			pm_scale = 1;
 2709              		.loc 2 756 0
 2710 0040 0120A0E3 		mov	r2, #1
 2711              	.L202:
 2712 0044 082083E5 		str	r2, [r3, #8]
 2713              	.L201:
 759:apps/rssi/main.c **** 	refresh_display();
 2714              		.loc 2 759 0
 2715 0048 FEFFFFEB 		bl	refresh_display
 2716              	.LVL125:
 762:apps/rssi/main.c **** }
 2717              		.loc 2 762 0
 2718 004c 0000A0E3 		mov	r0, #0
 2719 0050 04F09DE4 		ldr	pc, [sp], #4
 2720              	.L204:
 2721              		.align	2
 2722              	.L203:
 2723 0054 00000000 		.word	.LANCHOR1
 2724              		.cfi_endproc
 2725              	.LFE121:
 2727              		.section	.text.exit_arfcn,"ax",%progbits
 2728              		.align	2
 2730              	exit_arfcn:
 2731              	.LFB111:
 525:apps/rssi/main.c **** {
 2732              		.loc 2 525 0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 0
 2735              		@ frame_needed = 0, uses_anonymous_args = 0
 2736              		@ link register save eliminated.
 526:apps/rssi/main.c **** 	mode = last_mode;
 2737              		.loc 2 526 0
 2738 0000 0C309FE5 		ldr	r3, .L206
 2739 0004 002093E5 		ldr	r2, [r3, #0]
 2740 0008 08309FE5 		ldr	r3, .L206+4
 2741 000c 082083E5 		str	r2, [r3, #8]
 528:apps/rssi/main.c **** }
 2742              		.loc 2 528 0
 527:apps/rssi/main.c **** 	refresh_display();
 2743              		.loc 2 527 0
 2744 0010 FEFFFFEA 		b	refresh_display
 2745              	.L207:
 2746              		.align	2
 2747              	.L206:
 2748 0014 00000000 		.word	last_mode
 2749 0018 00000000 		.word	.LANCHOR0
 2750              		.cfi_endproc
 2751              	.LFE111:
 2753              		.section	.text.enter_arfcn,"ax",%progbits
 2754              		.align	2
 2756              	enter_arfcn:
 2757              	.LFB112:
 531:apps/rssi/main.c **** {
 2758              		.loc 2 531 0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 0
 2761              		@ frame_needed = 0, uses_anonymous_args = 0
 2762              	.LVL126:
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 2763              		.loc 2 533 0
 2764 0000 6C319FE5 		ldr	r3, .L223
 2765 0004 082093E5 		ldr	r2, [r3, #8]
 2766 0008 020052E3 		cmp	r2, #2
 531:apps/rssi/main.c **** {
 2767              		.loc 2 531 0
 2768 000c 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2769              	.LCFI9:
 2770              		.cfi_def_cfa_offset 16
 533:apps/rssi/main.c **** 	if (mode != MODE_ARFCN) {
 2771              		.loc 2 533 0
 2772 0010 0C00000A 		beq	.L209
 2773              		.cfi_offset 14, -4
 2774              		.cfi_offset 6, -8
 2775              		.cfi_offset 5, -12
 2776              		.cfi_offset 4, -16
 534:apps/rssi/main.c **** 		last_mode = mode;
 2777              		.loc 2 534 0
 2778 0014 5C119FE5 		ldr	r1, .L223+4
 2779 0018 002081E5 		str	r2, [r1, #0]
 535:apps/rssi/main.c **** 		mode = MODE_ARFCN;
 2780              		.loc 2 535 0
 2781 001c 0220A0E3 		mov	r2, #2
 2782 0020 082083E5 		str	r2, [r3, #8]
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 2783              		.loc 2 536 0
 2784 0024 50319FE5 		ldr	r3, .L223+8
 537:apps/rssi/main.c **** 		input[1] = '\0';
 2785              		.loc 2 537 0
 2786 0028 0020A0E3 		mov	r2, #0
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 2787              		.loc 2 536 0
 2788 002c 300080E2 		add	r0, r0, #48
 2789              	.LVL127:
 537:apps/rssi/main.c **** 		input[1] = '\0';
 2790              		.loc 2 537 0
 2791 0030 0120C3E5 		strb	r2, [r3, #1]
 536:apps/rssi/main.c **** 		input[0] = code - KEY_0 + '0';
 2792              		.loc 2 536 0
 2793 0034 0000C3E5 		strb	r0, [r3, #0]
 538:apps/rssi/main.c **** 		cursor = 1;
 2794              		.loc 2 538 0
 2795 0038 40319FE5 		ldr	r3, .L223+12
 2796 003c 012082E2 		add	r2, r2, #1
 2797 0040 002083E5 		str	r2, [r3, #0]
 2798 0044 480000EA 		b	.L222
 2799              	.LVL128:
 2800              	.L209:
 543:apps/rssi/main.c **** 	if (code == KEY_LEFT_SB) {
 2801              		.loc 2 543 0
 2802 0048 0D0050E3 		cmp	r0, #13
 2803 004c 0B00001A 		bne	.L210
 545:apps/rssi/main.c **** 		if (cursor == 0) {
 2804              		.loc 2 545 0
 2805 0050 28219FE5 		ldr	r2, .L223+12
 2806 0054 003092E5 		ldr	r3, [r2, #0]
 2807 0058 000053E3 		cmp	r3, #0
 2808 005c 0100001A 		bne	.L211
 597:apps/rssi/main.c **** }
 2809              		.loc 2 597 0
 2810 0060 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 546:apps/rssi/main.c **** 			exit_arfcn();
 2811              		.loc 2 546 0
 2812 0064 FEFFFFEA 		b	exit_arfcn
 2813              	.LVL129:
 2814              	.L211:
 550:apps/rssi/main.c **** 		cursor--;
 2815              		.loc 2 550 0
 2816 0068 013043E2 		sub	r3, r3, #1
 2817 006c 003082E5 		str	r3, [r2, #0]
 551:apps/rssi/main.c **** 		input[cursor] = '\0';
 2818              		.loc 2 551 0
 2819 0070 04219FE5 		ldr	r2, .L223+8
 2820 0074 0010A0E3 		mov	r1, #0
 2821 0078 0310C2E7 		strb	r1, [r2, r3]
 2822 007c 3A0000EA 		b	.L222
 2823              	.L210:
 556:apps/rssi/main.c **** 	if (code == KEY_RIGHT_SB) {
 2824              		.loc 2 556 0
 2825 0080 0E0050E3 		cmp	r0, #14
 2826 0084 F4309FE5 		ldr	r3, .L223+12
 2827 0088 2D00001A 		bne	.L212
 2828              	.LVL130:
 2829              	.LBB304:
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 2830              		.loc 2 562 0
 2831 008c 001093E5 		ldr	r1, [r3, #0]
 2832 0090 000051E3 		cmp	r1, #0
 2833 0094 7080BD08 		ldmeqfd	sp!, {r4, r5, r6, pc}
 562:apps/rssi/main.c **** 		if (cursor == 0) {
 2834              		.loc 2 562 0 is_stmt 0 discriminator 1
 2835 0098 0020A0E3 		mov	r2, #0
 2836 009c 0230A0E1 		mov	r3, r2
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 2837              		.loc 2 566 0 is_stmt 1 discriminator 1
 2838 00a0 D4009FE5 		ldr	r0, .L223+8
 2839              	.LVL131:
 2840 00a4 040000EA 		b	.L214
 2841              	.LVL132:
 2842              	.L215:
 566:apps/rssi/main.c **** 			check = (check << 3) + (check << 1) + input[i] - '0';
 2843              		.loc 2 566 0 is_stmt 0 discriminator 2
 2844 00a8 00C0D2E7 		ldrb	ip, [r2, r0]	@ zero_extendqisi2
 2845 00ac 30C04CE2 		sub	ip, ip, #48
 2846 00b0 83C18CE0 		add	ip, ip, r3, asl #3
 2847 00b4 83308CE0 		add	r3, ip, r3, asl #1
 2848              	.LVL133:
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 2849              		.loc 2 565 0 is_stmt 1 discriminator 2
 2850 00b8 012082E2 		add	r2, r2, #1
 2851              	.LVL134:
 2852              	.L214:
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 2853              		.loc 2 565 0 is_stmt 0 discriminator 1
 2854 00bc 010052E1 		cmp	r2, r1
 2855 00c0 F8FFFFBA 		blt	.L215
 565:apps/rssi/main.c **** 		for (i = 0; i < cursor; i++)
 2856              		.loc 2 565 0
 2857 00c4 B8209FE5 		ldr	r2, .L223+16
 2858              	.LVL135:
 2859 00c8 0000A0E3 		mov	r0, #0
 570:apps/rssi/main.c **** 			temp = &bands[i];
 2860              		.loc 2 570 0 is_stmt 1
 2861 00cc 0260A0E1 		mov	r6, r2
 2862 00d0 1850A0E3 		mov	r5, #24
 2863 00d4 0C0000EA 		b	.L216
 2864              	.LVL136:
 2865              	.L220:
 571:apps/rssi/main.c **** 			if (temp->min < temp->max) {
 2866              		.loc 2 571 0
 2867 00d8 00C092E5 		ldr	ip, [r2, #0]
 2868 00dc 01005CE1 		cmp	ip, r1
 570:apps/rssi/main.c **** 			temp = &bands[i];
 2869              		.loc 2 570 0
 2870 00e0 956024E0 		mla	r4, r5, r0, r6
 2871              	.LVL137:
 571:apps/rssi/main.c **** 			if (temp->min < temp->max) {
 2872              		.loc 2 571 0
 2873 00e4 020000AA 		bge	.L217
 572:apps/rssi/main.c **** 				if (check >= temp->min && check <= temp->max)
 2874              		.loc 2 572 0
 2875 00e8 0C0053E1 		cmp	r3, ip
 2876 00ec 040000BA 		blt	.L218
 2877 00f0 010000EA 		b	.L221
 2878              	.L217:
 575:apps/rssi/main.c **** 				if (check >= temp->min || check <= temp->max)
 2879              		.loc 2 575 0
 2880 00f4 0C0053E1 		cmp	r3, ip
 2881 00f8 070000AA 		bge	.L219
 2882              	.L221:
 575:apps/rssi/main.c **** 				if (check >= temp->min || check <= temp->max)
 2883              		.loc 2 575 0 is_stmt 0 discriminator 1
 2884 00fc 010053E1 		cmp	r3, r1
 2885 0100 050000DA 		ble	.L219
 2886              	.L218:
 569:apps/rssi/main.c **** 		for (i = 0; bands[i].max; i++) {
 2887              		.loc 2 569 0 is_stmt 1
 2888 0104 010080E2 		add	r0, r0, #1
 2889              	.LVL138:
 2890 0108 182082E2 		add	r2, r2, #24
 2891              	.LVL139:
 2892              	.L216:
 569:apps/rssi/main.c **** 		for (i = 0; bands[i].max; i++) {
 2893              		.loc 2 569 0 is_stmt 0 discriminator 1
 2894 010c 041092E5 		ldr	r1, [r2, #4]
 2895 0110 000051E3 		cmp	r1, #0
 2896 0114 EFFFFF1A 		bne	.L220
 2897 0118 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 2898              	.LVL140:
 2899              	.L219:
 581:apps/rssi/main.c **** 		if (check > 1023)
 2900              		.loc 2 581 0 is_stmt 1
 2901 011c 010B53E3 		cmp	r3, #1024
 2902 0120 7080BDA8 		ldmgefd	sp!, {r4, r5, r6, pc}
 583:apps/rssi/main.c **** 		arfcn = check;
 2903              		.loc 2 583 0
 2904 0124 48209FE5 		ldr	r2, .L223
 2905 0128 BA31C2E1 		strh	r3, [r2, #26]	@ movhi
 584:apps/rssi/main.c **** 		band = temp;
 2906              		.loc 2 584 0
 2907 012c 54309FE5 		ldr	r3, .L223+20
 2908              	.LVL141:
 2909 0130 004083E5 		str	r4, [r3, #0]
 585:apps/rssi/main.c **** 		mode = last_mode;
 2910              		.loc 2 585 0
 2911 0134 3C309FE5 		ldr	r3, .L223+4
 2912 0138 003093E5 		ldr	r3, [r3, #0]
 2913 013c 083082E5 		str	r3, [r2, #8]
 2914 0140 090000EA 		b	.L222
 2915              	.LVL142:
 2916              	.L212:
 2917              	.LBE304:
 590:apps/rssi/main.c **** 	if (cursor == 4)
 2918              		.loc 2 590 0
 2919 0144 002093E5 		ldr	r2, [r3, #0]
 2920 0148 040052E3 		cmp	r2, #4
 2921 014c 7080BD08 		ldmeqfd	sp!, {r4, r5, r6, pc}
 593:apps/rssi/main.c **** 	input[cursor] = code - KEY_0 + '0';
 2922              		.loc 2 593 0
 2923 0150 24109FE5 		ldr	r1, .L223+8
 2924 0154 300080E2 		add	r0, r0, #48
 2925              	.LVL143:
 2926 0158 0200C1E7 		strb	r0, [r1, r2]
 594:apps/rssi/main.c **** 	cursor++;
 2927              		.loc 2 594 0
 2928 015c 012082E2 		add	r2, r2, #1
 2929 0160 002083E5 		str	r2, [r3, #0]
 595:apps/rssi/main.c **** 	input[cursor] = '\0';
 2930              		.loc 2 595 0
 2931 0164 0030A0E3 		mov	r3, #0
 2932 0168 0230C1E7 		strb	r3, [r1, r2]
 2933              	.LVL144:
 2934              	.L222:
 597:apps/rssi/main.c **** }
 2935              		.loc 2 597 0
 2936 016c 7040BDE8 		ldmfd	sp!, {r4, r5, r6, lr}
 596:apps/rssi/main.c **** 	refresh_display();
 2937              		.loc 2 596 0
 2938 0170 FEFFFFEA 		b	refresh_display
 2939              	.L224:
 2940              		.align	2
 2941              	.L223:
 2942 0174 00000000 		.word	.LANCHOR0
 2943 0178 00000000 		.word	last_mode
 2944 017c 00000000 		.word	input
 2945 0180 00000000 		.word	cursor
 2946 0184 0C000000 		.word	.LANCHOR1+12
 2947 0188 00000000 		.word	band
 2948              		.cfi_endproc
 2949              	.LFE112:
 2951              		.section	.text.msgb_put,"ax",%progbits
 2952              		.align	2
 2954              	msgb_put:
 2955              	.LFB47:
 2956              		.file 3 "../../shared/libosmocore/include/osmocom/core/msgb.h"
   1:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifndef _MSGB_H
   2:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define _MSGB_H
   3:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
   4:../../shared/libosmocore/include/osmocom/core/msgb.h **** /* (C) 2008 by Harald Welte <laforge@gnumonks.org>
   5:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * All Rights Reserved
   6:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
   7:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is free software; you can redistribute it and/or modify
   8:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * it under the terms of the GNU General Public License as published by
   9:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the Free Software Foundation; either version 2 of the License, or
  10:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * (at your option) any later version.
  11:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  12:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This program is distributed in the hope that it will be useful,
  13:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * GNU General Public License for more details.
  16:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  17:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * You should have received a copy of the GNU General Public License along
  18:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  21:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  22:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  23:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <stdint.h>
  24:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/linuxlist.h>
  25:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/utils.h>
  26:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  27:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \defgroup msgb Message buffers
  28:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  @{
  29:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  30:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  31:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \file msgb.h
  32:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \brief Osmocom message buffers
  33:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The Osmocom message buffers are modelled after the 'struct skb'
  34:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * inside the Linux kernel network stack.  As they exist in userspace,
  35:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * they are much simplified.  However, terminology such as headroom,
  36:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * tailroom, push/pull/put etc. remains the same.
  37:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
  38:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  39:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_DEBUG
  40:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  41:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief Osmocom message buffer */
  42:../../shared/libosmocore/include/osmocom/core/msgb.h **** struct msgb {
  43:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct llist_head list; /*!< \brief linked list header */
  44:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  45:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  46:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* Part of which TRX logical channel we were received / transmitted */
  47:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	/* FIXME: move them into the control buffer */
  48:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	union {
  49:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		void *dst; /*!< \brief reference of origin/destination */
  50:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		struct gsm_bts_trx *trx;
  51:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	};
  52:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	struct gsm_lchan *lchan; /*!< \brief logical channel */
  53:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  54:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l1h; /*!< \brief pointer to Layer1 header (if any) */
  55:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l2h; /*!< \brief pointer to A-bis layer 2 header: OML, RSL(RLL), NS */
  56:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l3h; /*!< \brief pointer to Layer 3 header. For OML: FOM; RSL: 04.08; GPRS: BSSGP *
  57:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *l4h; /*!< \brief pointer to layer 4 header */
  58:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  59:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned long cb[5]; /*!< \brief control buffer */
  60:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  61:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t data_len;   /*!< \brief length of underlying data array */
  62:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	uint16_t len;	     /*!< \brief length of bytes used in msgb */
  63:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  64:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *head;	/*!< \brief start of underlying memory buffer */
  65:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tail;	/*!< \brief end of message in buffer */
  66:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *data;	/*!< \brief start of message in buffer */
  67:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char _data[0]; /*!< \brief optional immediate data array */
  68:../../shared/libosmocore/include/osmocom/core/msgb.h **** };
  69:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  70:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_alloc(uint16_t size, const char *name);
  71:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_free(struct msgb *m);
  72:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_enqueue(struct llist_head *queue, struct msgb *msg);
  73:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern struct msgb *msgb_dequeue(struct llist_head *queue);
  74:../../shared/libosmocore/include/osmocom/core/msgb.h **** extern void msgb_reset(struct msgb *m);
  75:../../shared/libosmocore/include/osmocom/core/msgb.h **** uint16_t msgb_length(const struct msgb *msg);
  76:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  77:../../shared/libosmocore/include/osmocom/core/msgb.h **** #ifdef MSGB_DEBUG
  78:../../shared/libosmocore/include/osmocom/core/msgb.h **** #include <osmocom/core/panic.h>
  79:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...) do {		\
  80:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	osmo_panic("msgb(%p): " fmt, msg, ## args);	\
  81:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	} while(0)
  82:../../shared/libosmocore/include/osmocom/core/msgb.h **** #else
  83:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define MSGB_ABORT(msg, fmt, args ...)
  84:../../shared/libosmocore/include/osmocom/core/msgb.h **** #endif
  85:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  86:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L1 header of msgb */
  87:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l1(m)	((void *)(m->l1h))
  88:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L2 header of msgb */
  89:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l2(m)	((void *)(m->l2h))
  90:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain L3 header of msgb */
  91:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_l3(m)	((void *)(m->l3h))
  92:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief obtain SMS header of msgb */
  93:../../shared/libosmocore/include/osmocom/core/msgb.h **** #define msgb_sms(m)	((void *)(m->l4h))
  94:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
  95:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L1 message
  96:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
  97:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L1 message in bytes
  98:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
  99:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 100:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 1 header.
 101:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 102:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l1len(const struct msgb *msgb)
 103:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 104:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l1(msgb);
 105:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 106:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 107:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L2 message
 108:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 109:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L2 message in bytes
 110:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 111:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 112:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 2 header.
 113:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 114:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l2len(const struct msgb *msgb)
 115:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 116:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l2(msgb);
 117:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 118:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 119:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine length of L3 message
 120:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 121:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns size of L3 message in bytes
 122:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 123:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the number of bytes between the tail of the
 124:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * message and the layer 3 header.
 125:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 126:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_l3len(const struct msgb *msgb)
 127:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 129:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 130:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 131:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the length of the header
 132:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 133:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes between start of buffer and start of msg
 134:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 135:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the length difference between the underlying
 136:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer and the used section of the \a msgb.
 137:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 138:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned int msgb_headlen(const struct msgb *msgb)
 139:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 140:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->len - msgb->data_len;
 141:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 142:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 143:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine how much tail room is left in msgb
 144:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 145:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes remaining at end of msgb
 146:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 147:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of octets left in the underlying
 148:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer after the end of the message.
 149:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 150:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_tailroom(const struct msgb *msgb)
 151:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 153:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 154:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 155:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief determine the amount of headroom in msgb
 156:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 157:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns number of bytes left ahead of message start in msgb
 158:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 159:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function computes the amount of bytes left in the underlying
 160:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data buffer before the start of the actual message.
 161:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 162:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline int msgb_headroom(const struct msgb *msgb)
 163:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 164:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->data - msgb->head);
 165:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 166:../../shared/libosmocore/include/osmocom/core/msgb.h **** 
 167:../../shared/libosmocore/include/osmocom/core/msgb.h **** /*! \brief append data to end of message buffer
 168:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] msgb message buffer
 169:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \param[in] len number of bytes to append to message
 170:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *  \returns pointer to start of newly-appended data
 171:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 172:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * This function will move the \a tail pointer of the message buffer \a
 173:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * len bytes further, thus enlarging the message by \a len bytes.
 174:../../shared/libosmocore/include/osmocom/core/msgb.h ****  *
 175:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * The return value is a pointer to start of the newly added section at
 176:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * the end of the message and can be used for actually filling/copying
 177:../../shared/libosmocore/include/osmocom/core/msgb.h ****  * data into it.
 178:../../shared/libosmocore/include/osmocom/core/msgb.h ****  */
 179:../../shared/libosmocore/include/osmocom/core/msgb.h **** static inline unsigned char *msgb_put(struct msgb *msgb, unsigned int len)
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 2957              		.loc 3 180 0
 2958              		.cfi_startproc
 2959              		@ args = 0, pretend = 0, frame = 0
 2960              		@ frame_needed = 0, uses_anonymous_args = 0
 2961              	.LVL145:
 2962              	.LBB305:
 2963              	.LBB306:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 2964              		.loc 3 152 0
 2965 0000 B433D0E1 		ldrh	r3, [r0, #52]
 2966 0004 382090E5 		ldr	r2, [r0, #56]
 2967              	.LBE306:
 2968              	.LBE305:
 2969              		.loc 3 180 0
 2970 0008 70402DE9 		stmfd	sp!, {r4, r5, r6, lr}
 2971              	.LCFI10:
 2972              		.cfi_def_cfa_offset 16
 181:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	unsigned char *tmp = msgb->tail;
 2973              		.loc 3 181 0
 2974 000c 3C6090E5 		ldr	r6, [r0, #60]
 2975              		.cfi_offset 14, -4
 2976              		.cfi_offset 6, -8
 2977              		.cfi_offset 5, -12
 2978              		.cfi_offset 4, -16
 2979              	.LVL146:
 2980              	.LBB308:
 2981              	.LBB307:
 152:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return (msgb->head + msgb->data_len) - msgb->tail;
 2982              		.loc 3 152 0
 2983 0010 032082E0 		add	r2, r2, r3
 2984 0014 022066E0 		rsb	r2, r6, r2
 2985              	.LBE307:
 2986              	.LBE308:
 182:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	if (msgb_tailroom(msgb) < (int) len)
 2987              		.loc 3 182 0
 2988 0018 010052E1 		cmp	r2, r1
 180:../../shared/libosmocore/include/osmocom/core/msgb.h **** {
 2989              		.loc 3 180 0
 2990 001c 0040A0E1 		mov	r4, r0
 2991              	.LVL147:
 2992 0020 0150A0E1 		mov	r5, r1
 2993              		.loc 3 182 0
 2994              	.LVL148:
 183:../../shared/libosmocore/include/osmocom/core/msgb.h **** 		MSGB_ABORT(msgb, "Not enough tailroom msgb_push (%u < %u)\n",
 2995              		.loc 3 183 0
 2996 0024 28009FB5 		ldrlt	r0, .L227
 2997              	.LVL149:
 2998 0028 0410A0B1 		movlt	r1, r4
 2999              	.LVL150:
 3000 002c 0530A0B1 		movlt	r3, r5
 3001 0030 FEFFFFBB 		bllt	osmo_panic
 3002              	.LVL151:
 3003              	.L226:
 184:../../shared/libosmocore/include/osmocom/core/msgb.h **** 			   msgb_tailroom(msgb), len);
 185:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->tail += len;
 3004              		.loc 3 185 0
 3005 0034 3C3094E5 		ldr	r3, [r4, #60]
 3006 0038 053083E0 		add	r3, r3, r5
 3007 003c 3C3084E5 		str	r3, [r4, #60]
 186:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	msgb->len += len;
 3008              		.loc 3 186 0
 3009 0040 B633D4E1 		ldrh	r3, [r4, #54]
 3010 0044 035085E0 		add	r5, r5, r3
 3011              	.LVL152:
 3012 0048 B653C4E1 		strh	r5, [r4, #54]	@ movhi
 187:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return tmp;
 188:../../shared/libosmocore/include/osmocom/core/msgb.h **** }
 3013              		.loc 3 188 0
 3014 004c 0600A0E1 		mov	r0, r6
 3015 0050 7080BDE8 		ldmfd	sp!, {r4, r5, r6, pc}
 3016              	.L228:
 3017              		.align	2
 3018              	.L227:
 3019 0054 9A010000 		.word	.LC49
 3020              		.cfi_endproc
 3021              	.LFE47:
 3023              		.section	.text.request_ul_levels,"ax",%progbits
 3024              		.align	2
 3026              	request_ul_levels:
 3027              	.LFB128:
1061:apps/rssi/main.c **** {
 3028              		.loc 2 1061 0
 3029              		.cfi_startproc
 3030              		@ args = 0, pretend = 0, frame = 0
 3031              		@ frame_needed = 0, uses_anonymous_args = 0
 3032              	.LVL153:
 3033 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 3034              	.LCFI11:
 3035              		.cfi_def_cfa_offset 12
1061:apps/rssi/main.c **** {
 3036              		.loc 2 1061 0
 3037 0004 0040A0E1 		mov	r4, r0
 3038              		.cfi_offset 14, -4
 3039              		.cfi_offset 5, -8
 3040              		.cfi_offset 4, -12
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 3041              		.loc 2 1062 0
 3042 0008 1A00A0E3 		mov	r0, #26
 3043              	.LVL154:
 3044 000c FEFFFFEB 		bl	l1ctl_msgb_alloc
1064:apps/rssi/main.c **** 		(struct l1ctl_neigh_pm_req *) msgb_put(msg, sizeof(*pm_req));
 3045              		.loc 2 1064 0
 3046 0010 C210A0E3 		mov	r1, #194
1062:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 3047              		.loc 2 1062 0
 3048 0014 0050A0E1 		mov	r5, r0
 3049              	.LVL155:
1064:apps/rssi/main.c **** 		(struct l1ctl_neigh_pm_req *) msgb_put(msg, sizeof(*pm_req));
 3050              		.loc 2 1064 0
 3051 0018 FEFFFFEB 		bl	msgb_put
 3052              	.LVL156:
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
 3053              		.loc 2 1067 0
 3054 001c 8C309FE5 		ldr	r3, .L234
 3055 0020 142093E5 		ldr	r2, [r3, #20]
 3056 0024 020C54E3 		cmp	r4, #512
 3057 0028 0030A033 		movcc	r3, #0
 3058 002c 0130A023 		movcs	r3, #1
 3059 0030 000052E3 		cmp	r2, #0
 3060 0034 0030A003 		moveq	r3, #0
 3061 0038 000053E3 		cmp	r3, #0
 3062 003c 0200000A 		beq	.L230
1067:apps/rssi/main.c **** 	if (pcs && a >= PCS_MIN && a <= PCS_MAX)
 3063              		.loc 2 1067 0 is_stmt 0 discriminator 1
 3064 0040 6C309FE5 		ldr	r3, .L234+4
 3065 0044 030054E1 		cmp	r4, r3
1068:apps/rssi/main.c **** 		a |= ARFCN_PCS;
 3066              		.loc 2 1068 0 is_stmt 1 discriminator 1
 3067 0048 02498493 		orrls	r4, r4, #32768
 3068              	.LVL157:
 3069              	.L230:
1069:apps/rssi/main.c **** 	if (uplink)
 3070              		.loc 2 1069 0
 3071 004c 5C309FE5 		ldr	r3, .L234
 3072 0050 0C3093E5 		ldr	r3, [r3, #12]
 3073 0054 000053E3 		cmp	r3, #0
1070:apps/rssi/main.c **** 		a |= ARFCN_UPLINK;
 3074              		.loc 2 1070 0
 3075 0058 01498413 		orrne	r4, r4, #16384
 3076              	.LVL158:
1071:apps/rssi/main.c **** 	pm_req->n = 8;
 3077              		.loc 2 1071 0
 3078 005c 0830A0E3 		mov	r3, #8
 3079 0060 0020A0E1 		mov	r2, r0
 3080 0064 8130C2E4 		strb	r3, [r2], #129
 3081              	.LVL159:
 3082              	.LBB309:
 3083              	.LBB310:
 3084              		.file 4 "include/swab.h"
   1:include/swab.h **** #ifndef _LINUX_SWAB_H
   2:include/swab.h **** #define _LINUX_SWAB_H
   3:include/swab.h **** 
   4:include/swab.h **** #include <stdint.h>
   5:include/swab.h **** #include <defines.h>
   6:include/swab.h **** #include <asm/swab.h>
   7:include/swab.h **** 
   8:include/swab.h **** /*
   9:include/swab.h ****  * casts are necessary for constants, because we never know how for sure
  10:include/swab.h ****  * how U/UL/ULL map to uint16_t, uint32_t, uint64_t. At least not in a portable way.
  11:include/swab.h ****  */
  12:include/swab.h **** #define ___constant_swab16(x) ((uint16_t)(				\
  13:include/swab.h **** 	(((uint16_t)(x) & (uint16_t)0x00ffU) << 8) |			\
  14:include/swab.h **** 	(((uint16_t)(x) & (uint16_t)0xff00U) >> 8)))
  15:include/swab.h **** 
  16:include/swab.h **** #define ___constant_swab32(x) ((uint32_t)(				\
  17:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x000000ffUL) << 24) |		\
  18:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x0000ff00UL) <<  8) |		\
  19:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x00ff0000UL) >>  8) |		\
  20:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xff000000UL) >> 24)))
  21:include/swab.h **** 
  22:include/swab.h **** #define ___constant_swab64(x) ((uint64_t)(				\
  23:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00000000000000ffULL) << 56) |	\
  24:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x000000000000ff00ULL) << 40) |	\
  25:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x0000000000ff0000ULL) << 24) |	\
  26:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00000000ff000000ULL) <<  8) |	\
  27:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x000000ff00000000ULL) >>  8) |	\
  28:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x0000ff0000000000ULL) >> 24) |	\
  29:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0x00ff000000000000ULL) >> 40) |	\
  30:include/swab.h **** 	(((uint64_t)(x) & (uint64_t)0xff00000000000000ULL) >> 56)))
  31:include/swab.h **** 
  32:include/swab.h **** #define ___constant_swahw32(x) ((uint32_t)(			\
  33:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x0000ffffUL) << 16) |		\
  34:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xffff0000UL) >> 16)))
  35:include/swab.h **** 
  36:include/swab.h **** #define ___constant_swahb32(x) ((uint32_t)(			\
  37:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0x00ff00ffUL) << 8) |		\
  38:include/swab.h **** 	(((uint32_t)(x) & (uint32_t)0xff00ff00UL) >> 8)))
  39:include/swab.h **** 
  40:include/swab.h **** /*
  41:include/swab.h ****  * Implement the following as inlines, but define the interface using
  42:include/swab.h ****  * macros to allow constant folding when possible:
  43:include/swab.h ****  * ___swab16, ___swab32, ___swab64, ___swahw32, ___swahb32
  44:include/swab.h ****  */
  45:include/swab.h **** 
  46:include/swab.h **** static inline __attribute_const__ uint16_t __fswab16(uint16_t val)
  47:include/swab.h **** {
  48:include/swab.h **** #ifdef __arch_swab16
  49:include/swab.h **** 	return __arch_swab16(val);
  50:include/swab.h **** #else
  51:include/swab.h **** 	return ___constant_swab16(val);
 3085              		.loc 4 51 0
 3086 0068 3433A0E1 		mov	r3, r4, lsr r3
 3087 006c 044483E1 		orr	r4, r3, r4, asl #8
 3088              	.LVL160:
 3089 0070 0448A0E1 		mov	r4, r4, asl #16
 3090 0074 24C8A0E1 		mov	ip, r4, lsr #16
 3091              	.LBE310:
 3092              	.LBE309:
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
 3093              		.loc 2 1072 0
 3094 0078 0030A0E3 		mov	r3, #0
1073:apps/rssi/main.c **** 		pm_req->band_arfcn[i] = htons(a);
 3095              		.loc 2 1073 0
 3096 007c FFC00CE2 		and	ip, ip, #255
 3097 0080 244CA0E1 		mov	r4, r4, lsr #24
 3098              	.LVL161:
 3099              	.L232:
 3100 0084 831080E0 		add	r1, r0, r3, asl #1
 3101 0088 02C0C1E5 		strb	ip, [r1, #2]
 3102 008c 0340C1E5 		strb	r4, [r1, #3]
1074:apps/rssi/main.c **** 		pm_req->tn[i] = i;
 3103              		.loc 2 1074 0
 3104 0090 0130E2E5 		strb	r3, [r2, #1]!
1072:apps/rssi/main.c **** 	for (i = 0; i < 8; i++) {
 3105              		.loc 2 1072 0
 3106 0094 013083E2 		add	r3, r3, #1
 3107              	.LVL162:
 3108 0098 080053E3 		cmp	r3, #8
 3109 009c F8FFFF1A 		bne	.L232
1076:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 3110              		.loc 2 1076 0
 3111 00a0 0500A0E3 		mov	r0, #5
 3112              	.LVL163:
 3113 00a4 0510A0E1 		mov	r1, r5
1077:apps/rssi/main.c **** }
 3114              		.loc 2 1077 0
 3115 00a8 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
1076:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 3116              		.loc 2 1076 0
 3117 00ac FEFFFFEA 		b	l1a_l23_rx
 3118              	.LVL164:
 3119              	.L235:
 3120              		.align	2
 3121              	.L234:
 3122 00b0 00000000 		.word	.LANCHOR0
 3123 00b4 2A030000 		.word	810
 3124              		.cfi_endproc
 3125              	.LFE128:
 3127              		.section	.text.inc_dec_ul_arfcn,"ax",%progbits
 3128              		.align	2
 3130              	inc_dec_ul_arfcn:
 3131              	.LFB114:
 654:apps/rssi/main.c **** {
 3132              		.loc 2 654 0
 3133              		.cfi_startproc
 3134              		@ args = 0, pretend = 0, frame = 0
 3135              		@ frame_needed = 0, uses_anonymous_args = 0
 3136              	.LVL165:
 658:apps/rssi/main.c **** 	if (inc) {
 3137              		.loc 2 658 0
 3138 0000 000050E3 		cmp	r0, #0
 654:apps/rssi/main.c **** {
 3139              		.loc 2 654 0
 3140 0004 10402DE9 		stmfd	sp!, {r4, lr}
 3141              	.LCFI12:
 3142              		.cfi_def_cfa_offset 8
 3143 0008 A8309FE5 		ldr	r3, .L243
 658:apps/rssi/main.c **** 	if (inc) {
 3144              		.loc 2 658 0
 3145 000c 1100000A 		beq	.L237
 3146              		.cfi_offset 14, -4
 3147              		.cfi_offset 4, -8
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 3148              		.loc 2 659 0
 3149 0010 B841D3E1 		ldrh	r4, [r3, #24]
 3150 0014 BA21D3E1 		ldrh	r2, [r3, #26]
 3151 0018 014084E2 		add	r4, r4, #1
 3152 001c 044BA0E1 		mov	r4, r4, asl #22
 3153 0020 022BA0E1 		mov	r2, r2, asl #22
 3154 0024 244BA0E1 		mov	r4, r4, lsr #22
 3155              	.LVL166:
 3156 0028 222BA0E1 		mov	r2, r2, lsr #22
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 3157              		.loc 2 661 0
 3158 002c 88309FE5 		ldr	r3, .L243+4
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 3159              		.loc 2 659 0
 3160 0030 050000EA 		b	.L238
 3161              	.L240:
 661:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 3162              		.loc 2 661 0
 3163 0034 0410D3E7 		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 3164 0038 010011E3 		tst	r1, #1
 3165 003c 1600001A 		bne	.L239
 660:apps/rssi/main.c **** 					a = (a + 1) & 1023) {
 3166              		.loc 2 660 0
 3167 0040 014084E2 		add	r4, r4, #1
 3168              	.LVL167:
 3169 0044 044BA0E1 		mov	r4, r4, asl #22
 3170              	.LVL168:
 3171 0048 244BA0E1 		mov	r4, r4, lsr #22
 3172              	.LVL169:
 3173              	.L238:
 659:apps/rssi/main.c **** 		for (a = (ul_arfcn + 1) & 1023; a != (arfcn & 1023);
 3174              		.loc 2 659 0 discriminator 1
 3175 004c 020054E1 		cmp	r4, r2
 3176 0050 F7FFFF1A 		bne	.L240
 3177 0054 100000EA 		b	.L239
 3178              	.LVL170:
 3179              	.L237:
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 3180              		.loc 2 665 0
 3181 0058 B841D3E1 		ldrh	r4, [r3, #24]
 3182 005c BA21D3E1 		ldrh	r2, [r3, #26]
 3183 0060 014044E2 		sub	r4, r4, #1
 3184 0064 044BA0E1 		mov	r4, r4, asl #22
 3185 0068 022BA0E1 		mov	r2, r2, asl #22
 3186 006c 244BA0E1 		mov	r4, r4, lsr #22
 3187              	.LVL171:
 3188 0070 222BA0E1 		mov	r2, r2, lsr #22
 667:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 3189              		.loc 2 667 0
 3190 0074 40309FE5 		ldr	r3, .L243+4
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 3191              		.loc 2 665 0
 3192 0078 050000EA 		b	.L241
 3193              	.L242:
 667:apps/rssi/main.c **** 			if ((freq[a].mask & FREQ_TYPE_SERV))
 3194              		.loc 2 667 0
 3195 007c 0410D3E7 		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 3196 0080 010011E3 		tst	r1, #1
 3197 0084 0400001A 		bne	.L239
 666:apps/rssi/main.c **** 					a = (a - 1) & 1023) {
 3198              		.loc 2 666 0
 3199 0088 014044E2 		sub	r4, r4, #1
 3200              	.LVL172:
 3201 008c 044BA0E1 		mov	r4, r4, asl #22
 3202              	.LVL173:
 3203 0090 244BA0E1 		mov	r4, r4, lsr #22
 3204              	.LVL174:
 3205              	.L241:
 665:apps/rssi/main.c **** 		for (a = (ul_arfcn - 1) & 1023; a != (arfcn & 1023);
 3206              		.loc 2 665 0 discriminator 1
 3207 0094 020054E1 		cmp	r4, r2
 3208 0098 F7FFFF1A 		bne	.L242
 3209              	.LVL175:
 3210              	.L239:
 671:apps/rssi/main.c **** 	ul_arfcn = a;
 3211              		.loc 2 671 0
 3212 009c 14309FE5 		ldr	r3, .L243
 3213 00a0 B841C3E1 		strh	r4, [r3, #24]	@ movhi
 673:apps/rssi/main.c **** 	refresh_display();
 3214              		.loc 2 673 0
 3215 00a4 FEFFFFEB 		bl	refresh_display
 3216              	.LVL176:
 675:apps/rssi/main.c **** 	request_ul_levels(a);
 3217              		.loc 2 675 0
 3218 00a8 0400A0E1 		mov	r0, r4
 3219 00ac FEFFFFEB 		bl	request_ul_levels
 678:apps/rssi/main.c **** }
 3220              		.loc 2 678 0
 3221 00b0 0000A0E3 		mov	r0, #0
 3222 00b4 1080BDE8 		ldmfd	sp!, {r4, pc}
 3223              	.L244:
 3224              		.align	2
 3225              	.L243:
 3226 00b8 00000000 		.word	.LANCHOR0
 3227 00bc 00000000 		.word	freq
 3228              		.cfi_endproc
 3229              	.LFE114:
 3231              		.section	.text.toggle_up_down,"ax",%progbits
 3232              		.align	2
 3234              	toggle_up_down:
 3235              	.LFB116:
 687:apps/rssi/main.c **** {
 3236              		.loc 2 687 0
 3237              		.cfi_startproc
 3238              		@ args = 0, pretend = 0, frame = 0
 3239              		@ frame_needed = 0, uses_anonymous_args = 0
 3240 0000 10402DE9 		stmfd	sp!, {r4, lr}
 3241              	.LCFI13:
 3242              		.cfi_def_cfa_offset 8
 688:apps/rssi/main.c **** 	uplink = !uplink;
 3243              		.loc 2 688 0
 3244 0004 38409FE5 		ldr	r4, .L247
 3245              		.cfi_offset 14, -4
 3246              		.cfi_offset 4, -8
 3247 0008 0C3094E5 		ldr	r3, [r4, #12]
 3248 000c 013073E2 		rsbs	r3, r3, #1
 3249 0010 0030A033 		movcc	r3, #0
 3250 0014 0C3084E5 		str	r3, [r4, #12]
 689:apps/rssi/main.c **** 	refresh_display();
 3251              		.loc 2 689 0
 3252 0018 FEFFFFEB 		bl	refresh_display
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 3253              		.loc 2 691 0
 3254 001c 083094E5 		ldr	r3, [r4, #8]
 3255 0020 030053E3 		cmp	r3, #3
 3256 0024 1080BD18 		ldmnefd	sp!, {r4, pc}
 691:apps/rssi/main.c **** 	if (mode == MODE_SYNC && cursor < 0)
 3257              		.loc 2 691 0 is_stmt 0 discriminator 1
 3258 0028 18309FE5 		ldr	r3, .L247+4
 3259 002c 003093E5 		ldr	r3, [r3, #0]
 3260 0030 000053E3 		cmp	r3, #0
 3261 0034 1080BDA8 		ldmgefd	sp!, {r4, pc}
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 3262              		.loc 2 692 0 is_stmt 1
 3263 0038 B801D4E1 		ldrh	r0, [r4, #24]
 693:apps/rssi/main.c **** }
 3264              		.loc 2 693 0
 3265 003c 1040BDE8 		ldmfd	sp!, {r4, lr}
 692:apps/rssi/main.c **** 		request_ul_levels(ul_arfcn);
 3266              		.loc 2 692 0
 3267 0040 FEFFFFEA 		b	request_ul_levels
 3268              	.L248:
 3269              		.align	2
 3270              	.L247:
 3271 0044 00000000 		.word	.LANCHOR0
 3272 0048 00000000 		.word	cursor
 3273              		.cfi_endproc
 3274              	.LFE116:
 3276              		.section	.text.exit_rach,"ax",%progbits
 3277              		.align	2
 3279              	exit_rach:
 3280              	.LFB131:
1231:apps/rssi/main.c **** {
 3281              		.loc 2 1231 0
 3282              		.cfi_startproc
 3283              		@ args = 0, pretend = 0, frame = 0
 3284              		@ frame_needed = 0, uses_anonymous_args = 0
 3285 0000 10402DE9 		stmfd	sp!, {r4, lr}
 3286              	.LCFI14:
 3287              		.cfi_def_cfa_offset 8
1232:apps/rssi/main.c **** 	rach = 0;
 3288              		.loc 2 1232 0
 3289 0004 1C409FE5 		ldr	r4, .L250
 3290              		.cfi_offset 14, -4
 3291              		.cfi_offset 4, -8
 3292 0008 0030A0E3 		mov	r3, #0
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
 3293              		.loc 2 1234 0
 3294 000c B801D4E1 		ldrh	r0, [r4, #24]
1232:apps/rssi/main.c **** 	rach = 0;
 3295              		.loc 2 1232 0
 3296 0010 003084E5 		str	r3, [r4, #0]
1234:apps/rssi/main.c **** 	request_ul_levels(ul_arfcn);
 3297              		.loc 2 1234 0
 3298 0014 FEFFFFEB 		bl	request_ul_levels
1236:apps/rssi/main.c **** 	mode = MODE_SYNC;
 3299              		.loc 2 1236 0
 3300 0018 0330A0E3 		mov	r3, #3
 3301 001c 083084E5 		str	r3, [r4, #8]
1238:apps/rssi/main.c **** }
 3302              		.loc 2 1238 0
 3303 0020 1040BDE8 		ldmfd	sp!, {r4, lr}
1237:apps/rssi/main.c **** 	refresh_display();
 3304              		.loc 2 1237 0
 3305 0024 FEFFFFEA 		b	refresh_display
 3306              	.L251:
 3307              		.align	2
 3308              	.L250:
 3309 0028 00000000 		.word	.LANCHOR0
 3310              		.cfi_endproc
 3311              	.LFE131:
 3313              		.section	.text.exit_sync,"ax",%progbits
 3314              		.align	2
 3316              	exit_sync:
 3317              	.LFB126:
1038:apps/rssi/main.c **** {
 3318              		.loc 2 1038 0
 3319              		.cfi_startproc
 3320              		@ args = 0, pretend = 0, frame = 0
 3321              		@ frame_needed = 0, uses_anonymous_args = 0
 3322 0000 04E02DE5 		str	lr, [sp, #-4]!
 3323              	.LCFI15:
 3324              		.cfi_def_cfa_offset 4
1039:apps/rssi/main.c **** 	l1s_reset();
 3325              		.loc 2 1039 0
 3326              		.cfi_offset 14, -4
 3327 0004 FEFFFFEB 		bl	l1s_reset
1040:apps/rssi/main.c **** 	l1s_reset_hw();
 3328              		.loc 2 1040 0
 3329 0008 FEFFFFEB 		bl	l1s_reset_hw
1041:apps/rssi/main.c **** 	pm_count = 0;
 3330              		.loc 2 1041 0
 3331 000c 10309FE5 		ldr	r3, .L253
 3332 0010 0020A0E3 		mov	r2, #0
 3333 0014 202083E5 		str	r2, [r3, #32]
1042:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
 3334              		.loc 2 1042 0
 3335 0018 242083E5 		str	r2, [r3, #36]
1043:apps/rssi/main.c **** 	mode = MODE_MAIN;
 3336              		.loc 2 1043 0
 3337 001c 082083E5 		str	r2, [r3, #8]
1044:apps/rssi/main.c **** }
 3338              		.loc 2 1044 0
 3339 0020 04F09DE4 		ldr	pc, [sp], #4
 3340              	.L254:
 3341              		.align	2
 3342              	.L253:
 3343 0024 00000000 		.word	.LANCHOR0
 3344              		.cfi_endproc
 3345              	.LFE126:
 3347              		.section	.text.toggle_spectrum,"ax",%progbits
 3348              		.align	2
 3350              	toggle_spectrum:
 3351              	.LFB117:
 696:apps/rssi/main.c **** {
 3352              		.loc 2 696 0
 3353              		.cfi_startproc
 3354              		@ args = 0, pretend = 0, frame = 0
 3355              		@ frame_needed = 0, uses_anonymous_args = 0
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 3356              		.loc 2 697 0
 3357 0000 44309FE5 		ldr	r3, .L259
 3358 0004 082093E5 		ldr	r2, [r3, #8]
 3359 0008 000052E3 		cmp	r2, #0
 698:apps/rssi/main.c **** 		mode = MODE_SPECTRUM;
 3360              		.loc 2 698 0
 3361 000c 0110A003 		moveq	r1, #1
 696:apps/rssi/main.c **** {
 3362              		.loc 2 696 0
 3363 0010 04E02DE5 		str	lr, [sp, #-4]!
 3364              	.LCFI16:
 3365              		.cfi_def_cfa_offset 4
 698:apps/rssi/main.c **** 		mode = MODE_SPECTRUM;
 3366              		.loc 2 698 0
 3367 0014 08108305 		streq	r1, [r3, #8]
 697:apps/rssi/main.c **** 	if (mode == MODE_MAIN) {
 3368              		.loc 2 697 0
 3369 0018 0300000A 		beq	.L258
 3370              		.cfi_offset 14, -4
 700:apps/rssi/main.c **** 	} else if (mode == MODE_SPECTRUM) {
 3371              		.loc 2 700 0
 3372 001c 010052E3 		cmp	r2, #1
 3373 0020 0200001A 		bne	.L257
 701:apps/rssi/main.c **** 		mode = MODE_MAIN;
 3374              		.loc 2 701 0
 3375 0024 0020A0E3 		mov	r2, #0
 3376 0028 082083E5 		str	r2, [r3, #8]
 3377              	.L258:
 702:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 3378              		.loc 2 702 0
 3379 002c 242083E5 		str	r2, [r3, #36]
 3380              	.L257:
 704:apps/rssi/main.c **** 	l1s_reset();
 3381              		.loc 2 704 0
 3382 0030 FEFFFFEB 		bl	l1s_reset
 705:apps/rssi/main.c **** 	l1s_reset_hw();
 3383              		.loc 2 705 0
 3384 0034 FEFFFFEB 		bl	l1s_reset_hw
 706:apps/rssi/main.c **** 	pm_count = 0;
 3385              		.loc 2 706 0
 3386 0038 0C309FE5 		ldr	r3, .L259
 3387 003c 0020A0E3 		mov	r2, #0
 3388 0040 202083E5 		str	r2, [r3, #32]
 708:apps/rssi/main.c **** }
 3389              		.loc 2 708 0
 3390 0044 04E09DE4 		ldr	lr, [sp], #4
 707:apps/rssi/main.c **** 	refresh_display();
 3391              		.loc 2 707 0
 3392 0048 FEFFFFEA 		b	refresh_display
 3393              	.L260:
 3394              		.align	2
 3395              	.L259:
 3396 004c 00000000 		.word	.LANCHOR0
 3397              		.cfi_endproc
 3398              	.LFE117:
 3400              		.section	.text.l1a_l23_rx_cb,"ax",%progbits
 3401              		.align	2
 3403              	l1a_l23_rx_cb:
 3404              	.LFB141:
1482:apps/rssi/main.c **** {
 3405              		.loc 2 1482 0
 3406              		.cfi_startproc
 3407              		@ args = 0, pretend = 0, frame = 0
 3408              		@ frame_needed = 0, uses_anonymous_args = 0
 3409              	.LVL177:
 3410 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 3411              	.LCFI17:
 3412              		.cfi_def_cfa_offset 12
1482:apps/rssi/main.c **** {
 3413              		.loc 2 1482 0
 3414 0004 0150A0E1 		mov	r5, r1
 3415              		.cfi_offset 14, -4
 3416              		.cfi_offset 5, -8
 3417              		.cfi_offset 4, -12
 3418 0008 FF1000E2 		and	r1, r0, #255
 3419              	.LVL178:
1484:apps/rssi/main.c **** 	printf("l1a_l23_rx_cb (DLCI %d): ", dlci);
 3420              		.loc 2 1484 0
 3421 000c 34009FE5 		ldr	r0, .L264
 3422              	.LVL179:
 3423 0010 FEFFFFEB 		bl	printf
 3424              	.LVL180:
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
 3425              		.loc 2 1485 0
 3426 0014 0040A0E3 		mov	r4, #0
 3427 0018 040000EA 		b	.L262
 3428              	.LVL181:
 3429              	.L263:
1486:apps/rssi/main.c **** 		printf("%02x ", msg->data[i]);
 3430              		.loc 2 1486 0 discriminator 2
 3431 001c 403095E5 		ldr	r3, [r5, #64]
 3432 0020 24009FE5 		ldr	r0, .L264+4
 3433 0024 0410D3E7 		ldrb	r1, [r3, r4]	@ zero_extendqisi2
 3434 0028 FEFFFFEB 		bl	printf
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
 3435              		.loc 2 1485 0 discriminator 2
 3436 002c 014084E2 		add	r4, r4, #1
 3437              	.LVL182:
 3438              	.L262:
1485:apps/rssi/main.c **** 	for (i = 0; i < msg->len; i++)
 3439              		.loc 2 1485 0 is_stmt 0 discriminator 1
 3440 0030 B633D5E1 		ldrh	r3, [r5, #54]
 3441 0034 030054E1 		cmp	r4, r3
 3442 0038 F7FFFFBA 		blt	.L263
1487:apps/rssi/main.c **** 	puts("\n");
 3443              		.loc 2 1487 0 is_stmt 1
 3444 003c 0C009FE5 		ldr	r0, .L264+8
1488:apps/rssi/main.c **** }
 3445              		.loc 2 1488 0
 3446 0040 3040BDE8 		ldmfd	sp!, {r4, r5, lr}
1487:apps/rssi/main.c **** 	puts("\n");
 3447              		.loc 2 1487 0
 3448 0044 FEFFFFEA 		b	puts
 3449              	.L265:
 3450              		.align	2
 3451              	.L264:
 3452 0048 CD010000 		.word	.LC50
 3453 004c E7010000 		.word	.LC51
 3454 0050 ED010000 		.word	.LC52
 3455              		.cfi_endproc
 3456              	.LFE141:
 3458              		.section	.text.console_rx_cb,"ax",%progbits
 3459              		.align	2
 3461              	console_rx_cb:
 3462              	.LFB140:
1471:apps/rssi/main.c **** {
 3463              		.loc 2 1471 0
 3464              		.cfi_startproc
 3465              		@ args = 0, pretend = 0, frame = 0
 3466              		@ frame_needed = 0, uses_anonymous_args = 0
 3467              	.LVL183:
 3468 0000 10402DE9 		stmfd	sp!, {r4, lr}
 3469              	.LCFI18:
 3470              		.cfi_def_cfa_offset 8
1471:apps/rssi/main.c **** {
 3471              		.loc 2 1471 0
 3472 0004 0140A0E1 		mov	r4, r1
 3473              		.cfi_offset 14, -4
 3474              		.cfi_offset 4, -8
 3475 0008 FF1000E2 		and	r1, r0, #255
 3476              	.LVL184:
1472:apps/rssi/main.c **** 	if (dlci != SC_DLCI_CONSOLE) {
 3477              		.loc 2 1472 0
 3478 000c 0A0051E3 		cmp	r1, #10
 3479 0010 0200000A 		beq	.L267
1473:apps/rssi/main.c **** 		printf("Message for unknown DLCI %u\n", dlci);
 3480              		.loc 2 1473 0
 3481 0014 1C009FE5 		ldr	r0, .L268
 3482              	.LVL185:
1479:apps/rssi/main.c **** }
 3483              		.loc 2 1479 0
 3484 0018 1040BDE8 		ldmfd	sp!, {r4, lr}
1473:apps/rssi/main.c **** 		printf("Message for unknown DLCI %u\n", dlci);
 3485              		.loc 2 1473 0
 3486 001c FEFFFFEA 		b	printf
 3487              	.LVL186:
 3488              	.L267:
1477:apps/rssi/main.c **** 	printf("Message on console DLCI: '%s'\n", msg->data);
 3489              		.loc 2 1477 0
 3490 0020 401094E5 		ldr	r1, [r4, #64]
 3491 0024 10009FE5 		ldr	r0, .L268+4
 3492              	.LVL187:
 3493 0028 FEFFFFEB 		bl	printf
1478:apps/rssi/main.c **** 	msgb_free(msg);
 3494              		.loc 2 1478 0
 3495 002c 0400A0E1 		mov	r0, r4
1479:apps/rssi/main.c **** }
 3496              		.loc 2 1479 0
 3497 0030 1040BDE8 		ldmfd	sp!, {r4, lr}
1478:apps/rssi/main.c **** 	msgb_free(msg);
 3498              		.loc 2 1478 0
 3499 0034 FEFFFFEA 		b	msgb_free
 3500              	.L269:
 3501              		.align	2
 3502              	.L268:
 3503 0038 EF010000 		.word	.LC53
 3504 003c 0C020000 		.word	.LC54
 3505              		.cfi_endproc
 3506              	.LFE140:
 3508              		.section	.text.l1a_l23_tx,"ax",%progbits
 3509              		.align	2
 3511              	l1a_l23_tx:
 3512              	.LFB139:
1384:apps/rssi/main.c **** {
 3513              		.loc 2 1384 0
 3514              		.cfi_startproc
 3515              		@ args = 0, pretend = 0, frame = 16
 3516              		@ frame_needed = 0, uses_anonymous_args = 0
 3517              	.LVL188:
 3518 0000 FF472DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 3519              	.LCFI19:
 3520              		.cfi_def_cfa_offset 48
1385:apps/rssi/main.c **** 	struct l1ctl_hdr *l1h = (struct l1ctl_hdr *) msg->l1h;
 3521              		.loc 2 1385 0
 3522 0004 102090E5 		ldr	r2, [r0, #16]
 3523              		.cfi_offset 14, -4
 3524              		.cfi_offset 10, -8
 3525              		.cfi_offset 9, -12
 3526              		.cfi_offset 8, -16
 3527              		.cfi_offset 7, -20
 3528              		.cfi_offset 6, -24
 3529              		.cfi_offset 5, -28
 3530              		.cfi_offset 4, -32
 3531              		.cfi_offset 3, -36
 3532              		.cfi_offset 2, -40
 3533              		.cfi_offset 1, -44
 3534              		.cfi_offset 0, -48
 3535              	.LVL189:
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
 3536              		.loc 2 1393 0
 3537 0008 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 3538 000c 090053E3 		cmp	r3, #9
1384:apps/rssi/main.c **** {
 3539              		.loc 2 1384 0
 3540 0010 0040A0E1 		mov	r4, r0
1393:apps/rssi/main.c **** 	switch (l1h->msg_type) {
 3541              		.loc 2 1393 0
 3542 0014 0A00000A 		beq	.L274
 3543 0018 0400008A 		bhi	.L277
 3544 001c 020053E3 		cmp	r3, #2
 3545 0020 3D00000A 		beq	.L272
 3546 0024 030053E3 		cmp	r3, #3
 3547 0028 0C01001A 		bne	.L271
 3548 002c 450000EA 		b	.L314
 3549              	.L277:
 3550 0030 0C0053E3 		cmp	r3, #12
 3551 0034 E400000A 		beq	.L275
 3552 0038 1B0053E3 		cmp	r3, #27
 3553 003c 0701001A 		bne	.L271
 3554 0040 C20000EA 		b	.L315
 3555              	.L274:
1395:apps/rssi/main.c **** 		if (pm_mode == PM_SENT) {
 3556              		.loc 2 1395 0
 3557 0044 20349FE5 		ldr	r3, .L319
 3558 0048 241093E5 		ldr	r1, [r3, #36]
 3559 004c 010051E3 		cmp	r1, #1
 3560 0050 0700001A 		bne	.L278
1397:apps/rssi/main.c **** 			pm_meas[pm_count] = pmr->pm[0];
 3561              		.loc 2 1397 0
 3562 0054 201093E5 		ldr	r1, [r3, #32]
 3563 0058 06C0D2E5 		ldrb	ip, [r2, #6]	@ zero_extendqisi2
 3564 005c 0C049FE5 		ldr	r0, .L319+4
 3565              	.LVL190:
 3566 0060 01C180E7 		str	ip, [r0, r1, asl #2]
1398:apps/rssi/main.c **** 			pm_count++;
 3567              		.loc 2 1398 0
 3568 0064 011081E2 		add	r1, r1, #1
 3569 0068 201083E5 		str	r1, [r3, #32]
1399:apps/rssi/main.c **** 			pm_mode = PM_RESULT;
 3570              		.loc 2 1399 0
 3571 006c 0410A0E3 		mov	r1, #4
 3572 0070 241083E5 		str	r1, [r3, #36]
 3573              	.L278:
1401:apps/rssi/main.c **** 		if (pm_mode == PM_RANGE_SENT) {
 3574              		.loc 2 1401 0
 3575 0074 F0139FE5 		ldr	r1, .L319
 3576 0078 243091E5 		ldr	r3, [r1, #36]
 3577 007c 020053E3 		cmp	r3, #2
 3578 0080 2000001A 		bne	.L279
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3579              		.loc 2 1404 0
 3580 0084 10C091E5 		ldr	ip, [r1, #16]
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
 3581              		.loc 2 1402 0
 3582 0088 043082E2 		add	r3, r2, #4
 3583              	.LVL191:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3584              		.loc 2 1405 0
 3585 008c E0139FE5 		ldr	r1, .L319+8
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
 3586              		.loc 2 1402 0
 3587 0090 140000EA 		b	.L280
 3588              	.L283:
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3589              		.loc 2 1404 0
 3590 0094 00005CE3 		cmp	ip, #0
 3591 0098 0900000A 		beq	.L281
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3592              		.loc 2 1404 0 is_stmt 0 discriminator 1
 3593 009c 01E0D3E5 		ldrb	lr, [r3, #1]	@ zero_extendqisi2
 3594 00a0 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 3595 00a4 0E0480E1 		orr	r0, r0, lr, asl #8
 3596              	.LVL192:
 3597              	.LBB340:
 3598              	.LBB341:
 3599              		.loc 4 51 0 is_stmt 1 discriminator 1
 3600 00a8 20E4A0E1 		mov	lr, r0, lsr #8
 3601 00ac 00048EE1 		orr	r0, lr, r0, asl #8
 3602              	.LVL193:
 3603              	.LBE341:
 3604              	.LBE340:
1404:apps/rssi/main.c **** 				if (!max || pm_spectrum[ntohs(pmr->band_arfcn) & 1023] < pmr->pm[0])
 3605              		.loc 2 1404 0 discriminator 1
 3606 00b0 000BA0E1 		mov	r0, r0, asl #22
 3607 00b4 20EBD1E7 		ldrb	lr, [r1, r0, lsr #22]	@ zero_extendqisi2
 3608 00b8 0200D3E5 		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 3609 00bc 00005EE1 		cmp	lr, r0
 3610 00c0 0700002A 		bcs	.L282
 3611              	.L281:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3612              		.loc 2 1405 0
 3613 00c4 01E0D3E5 		ldrb	lr, [r3, #1]	@ zero_extendqisi2
 3614 00c8 0000D3E5 		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 3615 00cc 0E0480E1 		orr	r0, r0, lr, asl #8
 3616              	.LVL194:
 3617              	.LBB342:
 3618              	.LBB343:
 3619              		.loc 4 51 0
 3620 00d0 20E4A0E1 		mov	lr, r0, lsr #8
 3621 00d4 00048EE1 		orr	r0, lr, r0, asl #8
 3622              	.LVL195:
 3623              	.LBE343:
 3624              	.LBE342:
1405:apps/rssi/main.c **** 					pm_spectrum[ntohs(pmr->band_arfcn) & 1023] = pmr->pm[0];
 3625              		.loc 2 1405 0
 3626 00d8 02E0D3E5 		ldrb	lr, [r3, #2]	@ zero_extendqisi2
 3627 00dc 000BA0E1 		mov	r0, r0, asl #22
 3628 00e0 20EBC1E7 		strb	lr, [r1, r0, lsr #22]
 3629              	.L282:
1403:apps/rssi/main.c **** 				(uint8_t *) pmr < msg->tail; pmr++) {
 3630              		.loc 2 1403 0
 3631 00e4 043083E2 		add	r3, r3, #4
 3632              	.LVL196:
 3633              	.L280:
1402:apps/rssi/main.c **** 			for (pmr = (struct l1ctl_pm_conf *) l1h->data;
 3634              		.loc 2 1402 0 discriminator 1
 3635 00e8 3C0094E5 		ldr	r0, [r4, #60]
 3636 00ec 000053E1 		cmp	r3, r0
 3637 00f0 E7FFFF3A 		bcc	.L283
1407:apps/rssi/main.c **** 			if ((l1h->flags & L1CTL_F_DONE))
 3638              		.loc 2 1407 0
 3639 00f4 0130D2E5 		ldrb	r3, [r2, #1]	@ zero_extendqisi2
 3640              	.LVL197:
 3641 00f8 010013E3 		tst	r3, #1
1408:apps/rssi/main.c **** 				pm_mode = PM_RANGE_RESULT;
 3642              		.loc 2 1408 0
 3643 00fc 68339F15 		ldrne	r3, .L319
 3644 0100 0320A013 		movne	r2, #3
 3645 0104 24208315 		strne	r2, [r3, #36]
 3646              	.L279:
1410:apps/rssi/main.c **** 		l1s.tpu_offset_correction += 5000 / NUM_PM_UL;
 3647              		.loc 2 1410 0
 3648 0108 68339FE5 		ldr	r3, .L319+12
 3649 010c 442A93E5 		ldr	r2, [r3, #2628]
 3650 0110 7D2F82E2 		add	r2, r2, #500
 3651 0114 442A83E5 		str	r2, [r3, #2628]
1411:apps/rssi/main.c **** 		break;
 3652              		.loc 2 1411 0
 3653 0118 D00000EA 		b	.L271
 3654              	.L272:
1414:apps/rssi/main.c **** 		sb = (struct l1ctl_fbsb_conf *) dl->payload;
 3655              		.loc 2 1414 0
 3656 011c 102082E2 		add	r2, r2, #16
 3657              	.LVL198:
1415:apps/rssi/main.c **** 		if (sb->result == 0)
 3658              		.loc 2 1415 0
 3659 0120 0230D2E5 		ldrb	r3, [r2, #2]	@ zero_extendqisi2
 3660 0124 000053E3 		cmp	r3, #0
1416:apps/rssi/main.c **** 			sync_result = "ok";
 3661              		.loc 2 1416 0
 3662 0128 4C139F05 		ldreq	r1, .L319+16
 3663 012c 38339FE5 		ldr	r3, .L319
1418:apps/rssi/main.c **** 			sync_result = "error";
 3664              		.loc 2 1418 0
 3665 0130 48139F15 		ldrne	r1, .L319+20
1419:apps/rssi/main.c **** 		bsic = sb->bsic;
 3666              		.loc 2 1419 0
 3667 0134 0320D2E5 		ldrb	r2, [r2, #3]	@ zero_extendqisi2
 3668              	.LVL199:
1418:apps/rssi/main.c **** 			sync_result = "error";
 3669              		.loc 2 1418 0
 3670 0138 281083E5 		str	r1, [r3, #40]
1419:apps/rssi/main.c **** 		bsic = sb->bsic;
 3671              		.loc 2 1419 0
 3672 013c 40339FE5 		ldr	r3, .L319+24
 3673 0140 0020C3E5 		strb	r2, [r3, #0]
1420:apps/rssi/main.c **** 		break;
 3674              		.loc 2 1420 0
 3675 0144 C50000EA 		b	.L271
 3676              	.L314:
1423:apps/rssi/main.c **** 		msg->l2h = dl->payload;
 3677              		.loc 2 1423 0
 3678 0148 103082E2 		add	r3, r2, #16
 3679 014c 143080E5 		str	r3, [r0, #20]
1422:apps/rssi/main.c **** 		dl = (struct l1ctl_info_dl *) l1h->data;
 3680              		.loc 2 1422 0
 3681 0150 045082E2 		add	r5, r2, #4
 3682              	.LVL200:
1424:apps/rssi/main.c **** 		rsl_dec_chan_nr(dl->chan_nr, &chan_type, &chan_ss, &chan_ts);
 3683              		.loc 2 1424 0
 3684 0154 0400D2E5 		ldrb	r0, [r2, #4]	@ zero_extendqisi2
 3685 0158 0E308DE2 		add	r3, sp, #14
 3686 015c 0D208DE2 		add	r2, sp, #13
 3687 0160 0F108DE2 		add	r1, sp, #15
 3688 0164 FEFFFFEB 		bl	rsl_dec_chan_nr
 3689              	.LVL201:
1426:apps/rssi/main.c **** 		power = dl->rx_level;
 3690              		.loc 2 1426 0
 3691 0168 18339FE5 		ldr	r3, .L319+28
 3692 016c 0820D5E5 		ldrb	r2, [r5, #8]	@ zero_extendqisi2
 3693 0170 0020C3E5 		strb	r2, [r3, #0]
1427:apps/rssi/main.c **** 		if (dl->fire_crc >= 2) {
 3694              		.loc 2 1427 0
 3695 0174 0B30D5E5 		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 3696 0178 010053E3 		cmp	r3, #1
 3697              	.LVL202:
 3698 017c 0F30DDE5 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 3699              	.LVL203:
 3700 0180 0400009A 		bls	.L286
1428:apps/rssi/main.c **** 			if (chan_type == RSL_CHAN_BCCH)
 3701              		.loc 2 1428 0
 3702 0184 800053E3 		cmp	r3, #128
 3703              	.LVL204:
1429:apps/rssi/main.c **** 				si_new = 0x1ff; /* error frame indication */
 3704              		.loc 2 1429 0
 3705 0188 DC329F05 		ldreq	r3, .L319
 3706              	.LVL205:
 3707 018c FE2CE003 		mvneq	r2, #65024
 3708 0190 BC22C301 		streqh	r2, [r3, #44]	@ movhi
 3709 0194 B10000EA 		b	.L271
 3710              	.L286:
 3711              	.LVL206:
1433:apps/rssi/main.c **** 		switch (chan_type) {
 3712              		.loc 2 1433 0
 3713 0198 800053E3 		cmp	r3, #128
 3714 019c 0200000A 		beq	.L288
 3715 01a0 900053E3 		cmp	r3, #144
 3716 01a4 6500001A 		bne	.L287
 3717 01a8 280000EA 		b	.L316
 3718              	.L288:
1435:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
 3719              		.loc 2 1435 0
 3720 01ac 145094E5 		ldr	r5, [r4, #20]
 3721              	.LVL207:
 3722 01b0 185084E5 		str	r5, [r4, #24]
 3723              	.LVL208:
 3724              	.LBB344:
 3725              	.LBB345:
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
 3726              		.loc 2 1359 0
 3727 01b4 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3728              	.LVL209:
 3729 01b8 190053E3 		cmp	r3, #25
 3730 01bc 0D00000A 		beq	.L293
 3731 01c0 0400008A 		bhi	.L297
 3732 01c4 020053E3 		cmp	r3, #2
 3733 01c8 0D00000A 		beq	.L291
 3734 01cc 030053E3 		cmp	r3, #3
 3735 01d0 1900001A 		bne	.L290
 3736 01d4 0D0000EA 		b	.L317
 3737              	.L297:
 3738 01d8 1B0053E3 		cmp	r3, #27
 3739 01dc 0E00000A 		beq	.L295
 3740              	.LBB346:
 3741              	.LBB347:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3742              		.loc 3 128 0
 3743 01e0 3C209435 		ldrcc	r2, [r4, #60]
 3744              	.LBE347:
 3745              	.LBE346:
1364:apps/rssi/main.c **** 		memcpy(si_2, msgb_l3(msg), msgb_l3len(msg));
 3746              		.loc 2 1364 0
 3747 01e4 A0029F35 		ldrcc	r0, .L319+32
1359:apps/rssi/main.c **** 	switch (sih->system_information) {
 3748              		.loc 2 1359 0
 3749 01e8 1000003A 		bcc	.L312
 3750 01ec 1C0053E3 		cmp	r3, #28
 3751 01f0 1100001A 		bne	.L290
 3752 01f4 0B0000EA 		b	.L318
 3753              	.L293:
 3754              	.LVL210:
 3755              	.LBB348:
 3756              	.LBB349:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3757              		.loc 3 128 0
 3758 01f8 3C2094E5 		ldr	r2, [r4, #60]
 3759              	.LBE349:
 3760              	.LBE348:
1361:apps/rssi/main.c **** 		memcpy(si_1, msgb_l3(msg), msgb_l3len(msg));
 3761              		.loc 2 1361 0
 3762 01fc 8C029FE5 		ldr	r0, .L319+36
 3763 0200 0A0000EA 		b	.L312
 3764              	.LVL211:
 3765              	.L291:
 3766              	.LBB350:
 3767              	.LBB351:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3768              		.loc 3 128 0
 3769 0204 3C2094E5 		ldr	r2, [r4, #60]
 3770              	.LBE351:
 3771              	.LBE350:
1367:apps/rssi/main.c **** 		memcpy(si_2bis, msgb_l3(msg), msgb_l3len(msg));
 3772              		.loc 2 1367 0
 3773 0208 84029FE5 		ldr	r0, .L319+40
 3774 020c 070000EA 		b	.L312
 3775              	.LVL212:
 3776              	.L317:
 3777              	.LBB352:
 3778              	.LBB353:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3779              		.loc 3 128 0
 3780 0210 3C2094E5 		ldr	r2, [r4, #60]
 3781              	.LBE353:
 3782              	.LBE352:
1370:apps/rssi/main.c **** 		memcpy(si_2ter, msgb_l3(msg), msgb_l3len(msg));
 3783              		.loc 2 1370 0
 3784 0214 7C029FE5 		ldr	r0, .L319+44
 3785 0218 040000EA 		b	.L312
 3786              	.LVL213:
 3787              	.L295:
 3788              	.LBB354:
 3789              	.LBB355:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3790              		.loc 3 128 0
 3791 021c 3C2094E5 		ldr	r2, [r4, #60]
 3792              	.LBE355:
 3793              	.LBE354:
1373:apps/rssi/main.c **** 		memcpy(si_3, msgb_l3(msg), msgb_l3len(msg));
 3794              		.loc 2 1373 0
 3795 0220 74029FE5 		ldr	r0, .L319+48
 3796 0224 010000EA 		b	.L312
 3797              	.LVL214:
 3798              	.L318:
 3799              	.LBB356:
 3800              	.LBB357:
 128:../../shared/libosmocore/include/osmocom/core/msgb.h **** 	return msgb->tail - (uint8_t *)msgb_l3(msgb);
 3801              		.loc 3 128 0
 3802 0228 3C2094E5 		ldr	r2, [r4, #60]
 3803              	.LBE357:
 3804              	.LBE356:
1376:apps/rssi/main.c **** 		memcpy(si_4, msgb_l3(msg), msgb_l3len(msg));
 3805              		.loc 2 1376 0
 3806 022c 6C029FE5 		ldr	r0, .L319+52
 3807              	.LVL215:
 3808              	.L312:
 3809 0230 0510A0E1 		mov	r1, r5
 3810 0234 022065E0 		rsb	r2, r5, r2
 3811 0238 FEFFFFEB 		bl	memcpy
 3812              	.LVL216:
 3813              	.L290:
1379:apps/rssi/main.c **** 	si_new = sih->system_information | 0x100;
 3814              		.loc 2 1379 0
 3815 023c 0220D5E5 		ldrb	r2, [r5, #2]	@ zero_extendqisi2
 3816 0240 24329FE5 		ldr	r3, .L319
 3817 0244 012C82E3 		orr	r2, r2, #256
 3818 0248 BC22C3E1 		strh	r2, [r3, #44]	@ movhi
 3819              	.LBE345:
 3820              	.LBE344:
1437:apps/rssi/main.c **** 			break;
 3821              		.loc 2 1437 0
 3822 024c 3B0000EA 		b	.L287
 3823              	.LVL217:
 3824              	.L316:
1439:apps/rssi/main.c **** 			msg->l3h = msg->l2h;
 3825              		.loc 2 1439 0
 3826 0250 145094E5 		ldr	r5, [r4, #20]
 3827              	.LVL218:
 3828 0254 185084E5 		str	r5, [r4, #24]
 3829              	.LVL219:
 3830              	.LBB358:
 3831              	.LBB359:
1339:apps/rssi/main.c **** 	switch (sih->system_information) {
 3832              		.loc 2 1339 0
 3833 0258 0230D5E5 		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 3834              	.LVL220:
 3835 025c 390053E3 		cmp	r3, #57
 3836 0260 0D00000A 		beq	.L298
 3837 0264 3500003A 		bcc	.L287
 3838 0268 3A0053E3 		cmp	r3, #58
 3839 026c 2500000A 		beq	.L299
 3840 0270 3F0053E3 		cmp	r3, #63
 3841 0274 3100001A 		bne	.L287
 3842              	.LVL221:
 3843              	.LBB360:
 3844              	.LBB361:
1290:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref)) {
 3845              		.loc 2 1290 0
 3846 0278 070085E2 		add	r0, r5, #7
 3847 027c FEFFFFEB 		bl	gsm48_match_ra
 3848              	.LVL222:
 3849 0280 000050E3 		cmp	r0, #0
 3850 0284 2D00000A 		beq	.L287
1291:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3851              		.loc 2 1291 0
 3852 0288 14329FE5 		ldr	r3, .L319+56
 3853 028c 0220A0E3 		mov	r2, #2
 3854 0290 002083E5 		str	r2, [r3, #0]
1292:apps/rssi/main.c **** 		ta = ia->timing_advance;
 3855              		.loc 2 1292 0
 3856 0294 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 3857 0298 140000EA 		b	.L313
 3858              	.LVL223:
 3859              	.L298:
 3860              	.LBE361:
 3861              	.LBE360:
 3862              	.LBB362:
 3863              	.LBB363:
1302:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref1)) {
 3864              		.loc 2 1302 0
 3865 029c 070085E2 		add	r0, r5, #7
 3866 02a0 FEFFFFEB 		bl	gsm48_match_ra
 3867 02a4 000050E3 		cmp	r0, #0
 3868 02a8 0800000A 		beq	.L301
1303:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3869              		.loc 2 1303 0
 3870 02ac F0319FE5 		ldr	r3, .L319+56
 3871 02b0 0220A0E3 		mov	r2, #2
 3872 02b4 002083E5 		str	r2, [r3, #0]
1304:apps/rssi/main.c **** 		ta = ia->timing_advance1;
 3873              		.loc 2 1304 0
 3874 02b8 0A20D5E5 		ldrb	r2, [r5, #10]	@ zero_extendqisi2
 3875 02bc E4319FE5 		ldr	r3, .L319+60
 3876 02c0 0020C3E5 		strb	r2, [r3, #0]
1305:apps/rssi/main.c **** 		rach = 0;
 3877              		.loc 2 1305 0
 3878 02c4 A0319FE5 		ldr	r3, .L319
 3879 02c8 0020A0E3 		mov	r2, #0
 3880 02cc 002083E5 		str	r2, [r3, #0]
 3881              	.L301:
1307:apps/rssi/main.c **** 	if (gsm48_match_ra(&ia->req_ref2)) {
 3882              		.loc 2 1307 0
 3883 02d0 0E0085E2 		add	r0, r5, #14
 3884 02d4 FEFFFFEB 		bl	gsm48_match_ra
 3885 02d8 000050E3 		cmp	r0, #0
 3886 02dc 1700000A 		beq	.L287
1308:apps/rssi/main.c **** 		assign = ASSIGN_RESULT;
 3887              		.loc 2 1308 0
 3888 02e0 BC319FE5 		ldr	r3, .L319+56
 3889 02e4 0220A0E3 		mov	r2, #2
 3890 02e8 002083E5 		str	r2, [r3, #0]
1309:apps/rssi/main.c **** 		ta = ia->timing_advance2;
 3891              		.loc 2 1309 0
 3892 02ec 1120D5E5 		ldrb	r2, [r5, #17]	@ zero_extendqisi2
 3893              	.LVL224:
 3894              	.L313:
 3895 02f0 B0319FE5 		ldr	r3, .L319+60
 3896 02f4 0020C3E5 		strb	r2, [r3, #0]
1310:apps/rssi/main.c **** 		rach = 0;
 3897              		.loc 2 1310 0
 3898 02f8 6C319FE5 		ldr	r3, .L319
 3899 02fc 0020A0E3 		mov	r2, #0
 3900 0300 002083E5 		str	r2, [r3, #0]
 3901 0304 0D0000EA 		b	.L287
 3902              	.L299:
 3903              	.LVL225:
 3904              	.LBE363:
 3905              	.LBE362:
 3906              	.LBB364:
 3907              	.LBB365:
1317:apps/rssi/main.c **** 	struct gsm48_imm_ass_rej *ia = msgb_l3(msg);
 3908              		.loc 2 1317 0
 3909 0308 0060A0E3 		mov	r6, #0
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
 3910              		.loc 2 1326 0
 3911 030c 90919FE5 		ldr	r9, .L319+56
1327:apps/rssi/main.c **** 			rach = 0;
 3912              		.loc 2 1327 0
 3913 0310 54819FE5 		ldr	r8, .L319
1324:apps/rssi/main.c **** 			(((uint8_t *)&ia->req_ref1) + i * 4);
 3914              		.loc 2 1324 0
 3915 0314 045085E2 		add	r5, r5, #4
 3916              	.LVL226:
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
 3917              		.loc 2 1326 0
 3918 0318 03A0A0E3 		mov	sl, #3
1327:apps/rssi/main.c **** 			rach = 0;
 3919              		.loc 2 1327 0
 3920 031c 0670A0E1 		mov	r7, r6
 3921              	.LVL227:
 3922              	.L303:
1325:apps/rssi/main.c **** 		if (gsm48_match_ra(req_ref)) {
 3923              		.loc 2 1325 0
 3924 0320 060085E0 		add	r0, r5, r6
 3925 0324 FEFFFFEB 		bl	gsm48_match_ra
1327:apps/rssi/main.c **** 			rach = 0;
 3926              		.loc 2 1327 0
 3927 0328 046086E2 		add	r6, r6, #4
1325:apps/rssi/main.c **** 		if (gsm48_match_ra(req_ref)) {
 3928              		.loc 2 1325 0
 3929 032c 000050E3 		cmp	r0, #0
1326:apps/rssi/main.c **** 			assign = ASSIGN_REJECT;
 3930              		.loc 2 1326 0
 3931 0330 00A08915 		strne	sl, [r9, #0]
1327:apps/rssi/main.c **** 			rach = 0;
 3932              		.loc 2 1327 0
 3933 0334 00708815 		strne	r7, [r8, #0]
1321:apps/rssi/main.c **** 	for (i = 0; i < 4; i++) {
 3934              		.loc 2 1321 0
 3935 0338 100056E3 		cmp	r6, #16
 3936 033c F7FFFF1A 		bne	.L303
 3937              	.LVL228:
 3938              	.L287:
 3939              	.LBE365:
 3940              	.LBE364:
 3941              	.LBE359:
 3942              	.LBE358:
1443:apps/rssi/main.c **** 		sercomm_sendmsg(SC_DLCI_L1A_L23, msg);
 3943              		.loc 2 1443 0
 3944 0340 0500A0E3 		mov	r0, #5
 3945 0344 0410A0E1 		mov	r1, r4
 3946 0348 FEFFFFEB 		bl	sercomm_sendmsg
 3947              	.LVL229:
1444:apps/rssi/main.c **** 		return; /* msg is freed by sercom */
 3948              		.loc 2 1444 0
 3949 034c 450000EA 		b	.L270
 3950              	.LVL230:
 3951              	.L315:
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3952              		.loc 2 1450 0
 3953 0350 14319FE5 		ldr	r3, .L319
 3954 0354 10E093E5 		ldr	lr, [r3, #16]
 3955 0358 4C319FE5 		ldr	r3, .L319+64
1447:apps/rssi/main.c **** 			(uint8_t *) pm_ind < msg->tail; pm_ind++) {
 3956              		.loc 2 1447 0
 3957 035c 3C5090E5 		ldr	r5, [r0, #60]
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 3958              		.loc 2 1446 0
 3959 0360 042082E2 		add	r2, r2, #4
 3960              	.LVL231:
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3961              		.loc 2 1450 0
 3962 0364 B030D3E1 		ldrh	r3, [r3, #0]
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
 3963              		.loc 2 1448 0
 3964 0368 40119FE5 		ldr	r1, .L319+68
1451:apps/rssi/main.c **** 				ul_max[pm_ind->tn] = ul_levels[pm_ind->tn];
 3965              		.loc 2 1451 0
 3966 036c 40019FE5 		ldr	r0, .L319+72
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 3967              		.loc 2 1446 0
 3968 0370 100000EA 		b	.L305
 3969              	.L309:
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
 3970              		.loc 2 1448 0
 3971 0374 04C0D2E5 		ldrb	ip, [r2, #4]	@ zero_extendqisi2
 3972 0378 0260D2E5 		ldrb	r6, [r2, #2]	@ zero_extendqisi2
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3973              		.loc 2 1450 0
 3974 037c 00005EE3 		cmp	lr, #0
1448:apps/rssi/main.c **** 			ul_levels[pm_ind->tn] = pm_ind->pm[0];
 3975              		.loc 2 1448 0
 3976 0380 0C60C1E7 		strb	r6, [r1, ip]
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3977              		.loc 2 1450 0
 3978 0384 0400000A 		beq	.L306
1450:apps/rssi/main.c **** 			if (!max || ul_levels[pm_ind->tn] > ul_max[pm_ind->tn])
 3979              		.loc 2 1450 0 is_stmt 0 discriminator 1
 3980 0388 04C0D2E5 		ldrb	ip, [r2, #4]	@ zero_extendqisi2
 3981 038c 0C60D1E7 		ldrb	r6, [r1, ip]	@ zero_extendqisi2
 3982 0390 0CC0D0E7 		ldrb	ip, [r0, ip]	@ zero_extendqisi2
 3983 0394 0C0056E1 		cmp	r6, ip
 3984 0398 0200009A 		bls	.L307
 3985              	.L306:
1451:apps/rssi/main.c **** 				ul_max[pm_ind->tn] = ul_levels[pm_ind->tn];
 3986              		.loc 2 1451 0 is_stmt 1
 3987 039c 04C0D2E5 		ldrb	ip, [r2, #4]	@ zero_extendqisi2
 3988 03a0 0C60D1E7 		ldrb	r6, [r1, ip]	@ zero_extendqisi2
 3989 03a4 0C60C0E7 		strb	r6, [r0, ip]
 3990              	.L307:
1452:apps/rssi/main.c **** 			if (pm_ind->tn == 7)
 3991              		.loc 2 1452 0
 3992 03a8 04C0D2E5 		ldrb	ip, [r2, #4]	@ zero_extendqisi2
1453:apps/rssi/main.c **** 				ul_new = 1;
 3993              		.loc 2 1453 0
 3994 03ac 07005CE3 		cmp	ip, #7
 3995 03b0 0130A003 		moveq	r3, #1
1447:apps/rssi/main.c **** 			(uint8_t *) pm_ind < msg->tail; pm_ind++) {
 3996              		.loc 2 1447 0
 3997 03b4 062082E2 		add	r2, r2, #6
 3998              	.LVL232:
 3999              	.L305:
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 4000              		.loc 2 1446 0 discriminator 1
 4001 03b8 050052E1 		cmp	r2, r5
 4002 03bc ECFFFF3A 		bcc	.L309
1446:apps/rssi/main.c **** 		for (pm_ind = (struct l1ctl_neigh_pm_ind *) l1h->data;
 4003              		.loc 2 1446 0 is_stmt 0
 4004 03c0 E4209FE5 		ldr	r2, .L319+64
 4005              	.LVL233:
 4006 03c4 B030C2E1 		strh	r3, [r2, #0]	@ movhi
 4007 03c8 240000EA 		b	.L271
 4008              	.L275:
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
 4009              		.loc 2 1458 0 is_stmt 1
 4010 03cc 0910D2E5 		ldrb	r1, [r2, #9]	@ zero_extendqisi2
 4011 03d0 0830D2E5 		ldrb	r3, [r2, #8]	@ zero_extendqisi2
 4012 03d4 013483E1 		orr	r3, r3, r1, asl #8
 4013 03d8 0A10D2E5 		ldrb	r1, [r2, #10]	@ zero_extendqisi2
 4014 03dc 0B20D2E5 		ldrb	r2, [r2, #11]	@ zero_extendqisi2
 4015 03e0 013883E1 		orr	r3, r3, r1, asl #16
 4016 03e4 023C83E1 		orr	r3, r3, r2, asl #24
 4017              	.LVL234:
 4018              	.LBB366:
 4019              	.LBB367:
 4020              	.LBB368:
 4021              		.file 5 "include/asm/swab.h"
   1:include/asm/swab.h **** /*
   2:include/asm/swab.h ****  *  arch/arm/include/asm/byteorder.h
   3:include/asm/swab.h ****  *
   4:include/asm/swab.h ****  * ARM Endian-ness.  In little endian mode, the data bus is connected such
   5:include/asm/swab.h ****  * that byte accesses appear as:
   6:include/asm/swab.h ****  *  0 = d0...d7, 1 = d8...d15, 2 = d16...d23, 3 = d24...d31
   7:include/asm/swab.h ****  * and word accesses (data or instruction) appear as:
   8:include/asm/swab.h ****  *  d0...d31
   9:include/asm/swab.h ****  *
  10:include/asm/swab.h ****  * When in big endian mode, byte accesses appear as:
  11:include/asm/swab.h ****  *  0 = d24...d31, 1 = d16...d23, 2 = d8...d15, 3 = d0...d7
  12:include/asm/swab.h ****  * and word accesses (data or instruction) appear as:
  13:include/asm/swab.h ****  *  d0...d31
  14:include/asm/swab.h ****  */
  15:include/asm/swab.h **** #ifndef __ASM_ARM_SWAB_H
  16:include/asm/swab.h **** #define __ASM_ARM_SWAB_H
  17:include/asm/swab.h **** 
  18:include/asm/swab.h **** #include <stdint.h>
  19:include/asm/swab.h **** #include <defines.h>
  20:include/asm/swab.h **** 
  21:include/asm/swab.h **** static inline uint32_t __arch_swab32(uint32_t x)
  22:include/asm/swab.h **** {
  23:include/asm/swab.h **** 	uint32_t t;
  24:include/asm/swab.h **** 
  25:include/asm/swab.h **** #ifndef __thumb__
  26:include/asm/swab.h **** 	if (!__builtin_constant_p(x)) {
  27:include/asm/swab.h **** 		/*
  28:include/asm/swab.h **** 		 * The compiler needs a bit of a hint here to always do the
  29:include/asm/swab.h **** 		 * right thing and not screw it up to different degrees
  30:include/asm/swab.h **** 		 * depending on the gcc version.
  31:include/asm/swab.h **** 		 */
  32:include/asm/swab.h **** 		asm ("eor\t%0, %1, %1, ror #16" : "=r" (t) : "r" (x));
 4022              		.loc 5 32 0
 4023              	@ 32 "include/asm/swab.h" 1
 4024 03e8 631823E0 		eor	r1, r3, r3, ror #16
 4025              	@ 0 "" 2
 4026              	.LVL235:
  33:include/asm/swab.h **** 	} else
  34:include/asm/swab.h **** #endif
  35:include/asm/swab.h **** 		t = x ^ ((x << 16) | (x >> 16)); /* eor r1,r0,r0,ror #16 */
  36:include/asm/swab.h **** 
  37:include/asm/swab.h **** 	x = (x << 24) | (x >> 8);		/* mov r0,r0,ror #8      */
  38:include/asm/swab.h **** 	t &= ~0x00FF0000;			/* bic r1,r1,#0x00FF0000 */
 4027              		.loc 5 38 0
 4028 03ec FF18C1E3 		bic	r1, r1, #16711680
 4029              	.LVL236:
  39:include/asm/swab.h **** 	x ^= (t >> 8);				/* eor r0,r0,r1,lsr #8   */
 4030              		.loc 5 39 0
 4031 03f0 2114A0E1 		mov	r1, r1, lsr #8
 4032              	.LVL237:
 4033              	.LBE368:
 4034              	.LBE367:
 4035              	.LBE366:
1458:apps/rssi/main.c **** 		gsm_fn2gsmtime(&tm, ntohl(dl->frame_nr));
 4036              		.loc 2 1458 0
 4037 03f4 631421E0 		eor	r1, r1, r3, ror #8
 4038              	.LVL238:
 4039 03f8 0D00A0E1 		mov	r0, sp
 4040 03fc FEFFFFEB 		bl	gsm_fn2gsmtime
 4041              	.LVL239:
1459:apps/rssi/main.c **** 		rach_ref.t1 = tm.t1;
 4042              		.loc 2 1459 0
 4043 0400 B0309FE5 		ldr	r3, .L319+76
 4044 0404 B410DDE1 		ldrh	r1, [sp, #4]
 4045 0408 0120D3E5 		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 4046 040c 1F1001E2 		and	r1, r1, #31
 4047 0410 F820C2E3 		bic	r2, r2, #248
 4048 0414 812182E1 		orr	r2, r2, r1, asl #3
 4049 0418 0120C3E5 		strb	r2, [r3, #1]
1460:apps/rssi/main.c **** 		rach_ref.t2 = tm.t2;
 4050              		.loc 2 1460 0
 4051 041c 0220D3E5 		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 4052 0420 0610DDE5 		ldrb	r1, [sp, #6]	@ zero_extendqisi2
 4053 0424 1F20C2E3 		bic	r2, r2, #31
 4054 0428 1F1001E2 		and	r1, r1, #31
 4055 042c 022081E1 		orr	r2, r1, r2
 4056 0430 0220C3E5 		strb	r2, [r3, #2]
1461:apps/rssi/main.c **** 		rach_ref.t3_low = tm.t3 & 0x7;
 4057              		.loc 2 1461 0
 4058 0434 0720DDE5 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 4059 0438 0210D3E5 		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 4060 043c 070002E2 		and	r0, r2, #7
 4061 0440 E010C1E3 		bic	r1, r1, #224
 4062 0444 801281E1 		orr	r1, r1, r0, asl #5
 4063 0448 0210C3E5 		strb	r1, [r3, #2]
1462:apps/rssi/main.c **** 		rach_ref.t3_high = tm.t3 >> 3;
 4064              		.loc 2 1462 0
 4065 044c 0110D3E5 		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 4066 0450 022DA0E1 		mov	r2, r2, asl #26
 4067 0454 0710C1E3 		bic	r1, r1, #7
 4068 0458 A22E81E1 		orr	r2, r1, r2, lsr #29
 4069 045c 0120C3E5 		strb	r2, [r3, #1]
 4070              	.LVL240:
 4071              	.L271:
1466:apps/rssi/main.c **** 	msgb_free(msg);
 4072              		.loc 2 1466 0
 4073 0460 0400A0E1 		mov	r0, r4
 4074 0464 FEFFFFEB 		bl	msgb_free
 4075              	.LVL241:
 4076              	.L270:
1468:apps/rssi/main.c **** }
 4077              		.loc 2 1468 0
 4078 0468 FF87BDE8 		ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 4079              	.L320:
 4080              		.align	2
 4081              	.L319:
 4082 046c 00000000 		.word	.LANCHOR0
 4083 0470 00000000 		.word	pm_meas
 4084 0474 00000000 		.word	pm_spectrum
 4085 0478 00000000 		.word	l1s
 4086 047c 2B020000 		.word	.LC55
 4087 0480 2E020000 		.word	.LC56
 4088 0484 00000000 		.word	bsic
 4089 0488 00000000 		.word	power
 4090 048c 00000000 		.word	si_2
 4091 0490 00000000 		.word	si_1
 4092 0494 00000000 		.word	si_2bis
 4093 0498 00000000 		.word	si_2ter
 4094 049c 00000000 		.word	si_3
 4095 04a0 00000000 		.word	si_4
 4096 04a4 00000000 		.word	assign
 4097 04a8 00000000 		.word	ta
 4098 04ac 00000000 		.word	ul_new
 4099 04b0 00000000 		.word	ul_levels
 4100 04b4 00000000 		.word	ul_max
 4101 04b8 00000000 		.word	rach_ref
 4102              		.cfi_endproc
 4103              	.LFE139:
 4105              		.section	.text.gsm48_decode_lai,"ax",%progbits
 4106              		.align	2
 4107              		.global	gsm48_decode_lai
 4109              	gsm48_decode_lai:
 4110              	.LFB127:
1048:apps/rssi/main.c **** {
 4111              		.loc 2 1048 0
 4112              		.cfi_startproc
 4113              		@ args = 0, pretend = 0, frame = 0
 4114              		@ frame_needed = 0, uses_anonymous_args = 0
 4115              	.LVL242:
 4116 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 4117              	.LCFI20:
 4118              		.cfi_def_cfa_offset 12
1049:apps/rssi/main.c **** 	*_mcc = ((lai->digits[0] & 0x0f) << 8)
 4119              		.loc 2 1049 0
 4120 0004 00C0D0E5 		ldrb	ip, [r0, #0]	@ zero_extendqisi2
 4121 0008 0150D0E5 		ldrb	r5, [r0, #1]	@ zero_extendqisi2
 4122              		.cfi_offset 14, -4
 4123              		.cfi_offset 5, -8
 4124              		.cfi_offset 4, -12
 4125 000c F0400CE2 		and	r4, ip, #240
 4126 0010 0F5005E2 		and	r5, r5, #15
 4127 0014 044085E1 		orr	r4, r5, r4
 4128 0018 0FC00CE2 		and	ip, ip, #15
 4129 001c 0CC484E1 		orr	ip, r4, ip, asl #8
 4130 0020 B0C0C1E1 		strh	ip, [r1, #0]	@ movhi
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
 4131              		.loc 2 1052 0
 4132 0024 0210D0E5 		ldrb	r1, [r0, #2]	@ zero_extendqisi2
 4133              	.LVL243:
1054:apps/rssi/main.c **** 	 | ((lai->digits[1] & 0xf0) >> 4);
 4134              		.loc 2 1054 0
 4135 0028 0140D0E5 		ldrb	r4, [r0, #1]	@ zero_extendqisi2
1052:apps/rssi/main.c **** 	*_mnc = ((lai->digits[2] & 0x0f) << 8)
 4136              		.loc 2 1052 0
 4137 002c F0C001E2 		and	ip, r1, #240
 4138 0030 24C28CE1 		orr	ip, ip, r4, lsr #4
 4139 0034 0F1001E2 		and	r1, r1, #15
 4140 0038 01148CE1 		orr	r1, ip, r1, asl #8
 4141 003c B010C2E1 		strh	r1, [r2, #0]	@ movhi
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
 4142              		.loc 2 1055 0
 4143 0040 0410D0E5 		ldrb	r1, [r0, #4]	@ zero_extendqisi2
 4144 0044 0320D0E5 		ldrb	r2, [r0, #3]	@ zero_extendqisi2
 4145              	.LVL244:
 4146 0048 012482E1 		orr	r2, r2, r1, asl #8
 4147              	.LVL245:
 4148              	.LBB369:
 4149              	.LBB370:
 4150              		.loc 4 51 0
 4151 004c 2214A0E1 		mov	r1, r2, lsr #8
 4152 0050 022481E1 		orr	r2, r1, r2, asl #8
 4153              	.LVL246:
 4154              	.LBE370:
 4155              	.LBE369:
1055:apps/rssi/main.c **** 	*_lac = ntohs(lai->lac);
 4156              		.loc 2 1055 0
 4157 0054 B020C3E1 		strh	r2, [r3, #0]	@ movhi
1058:apps/rssi/main.c **** }
 4158              		.loc 2 1058 0
 4159 0058 0000A0E3 		mov	r0, #0
 4160              	.LVL247:
 4161 005c 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 4162              		.cfi_endproc
 4163              	.LFE127:
 4165              		.section	.text.main,"ax",%progbits
 4166              		.align	2
 4167              		.global	main
 4169              	main:
 4170              	.LFB143:
1505:apps/rssi/main.c **** }
1506:apps/rssi/main.c **** 
1507:apps/rssi/main.c **** int main(void)
1508:apps/rssi/main.c **** {
 4171              		.loc 2 1508 0
 4172              		.cfi_startproc
 4173              		@ args = 0, pretend = 0, frame = 8
 4174              		@ frame_needed = 0, uses_anonymous_args = 0
 4175 0000 F74F2DE9 		stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4176              	.LCFI21:
 4177              		.cfi_def_cfa_offset 48
1509:apps/rssi/main.c **** 	board_init(1);
1510:apps/rssi/main.c **** 
1511:apps/rssi/main.c **** 	puts("\n\nOsmocomBB Monitor Tool (revision " GIT_REVISION ")\n");
1512:apps/rssi/main.c **** 	puts(hr);
 4178              		.loc 2 1512 0
 4179 0004 FC4A9FE5 		ldr	r4, .L416
 4180              		.cfi_offset 14, -4
 4181              		.cfi_offset 11, -8
 4182              		.cfi_offset 10, -12
 4183              		.cfi_offset 9, -16
 4184              		.cfi_offset 8, -20
 4185              		.cfi_offset 7, -24
 4186              		.cfi_offset 6, -28
 4187              		.cfi_offset 5, -32
 4188              		.cfi_offset 4, -36
 4189              		.cfi_offset 2, -40
 4190              		.cfi_offset 1, -44
 4191              		.cfi_offset 0, -48
1509:apps/rssi/main.c **** 	board_init(1);
 4192              		.loc 2 1509 0
 4193 0008 0100A0E3 		mov	r0, #1
 4194 000c FEFFFFEB 		bl	board_init
1511:apps/rssi/main.c **** 	puts("\n\nOsmocomBB Monitor Tool (revision " GIT_REVISION ")\n");
 4195              		.loc 2 1511 0
 4196 0010 F40A9FE5 		ldr	r0, .L416+4
 4197 0014 FEFFFFEB 		bl	puts
 4198              		.loc 2 1512 0
 4199 0018 6C0094E5 		ldr	r0, [r4, #108]
 4200 001c FEFFFFEB 		bl	puts
1513:apps/rssi/main.c **** 
1514:apps/rssi/main.c **** 	/* Dump device identification */
1515:apps/rssi/main.c **** 	dump_dev_id();
 4201              		.loc 2 1515 0
 4202 0020 FEFFFFEB 		bl	dump_dev_id
1516:apps/rssi/main.c **** 	puts(hr);
 4203              		.loc 2 1516 0
 4204 0024 6C0094E5 		ldr	r0, [r4, #108]
 4205 0028 FEFFFFEB 		bl	puts
1517:apps/rssi/main.c **** 
1518:apps/rssi/main.c **** 	/* Dump clock config before PLL set */
1519:apps/rssi/main.c **** 	calypso_clk_dump();
 4206              		.loc 2 1519 0
 4207 002c FEFFFFEB 		bl	calypso_clk_dump
1520:apps/rssi/main.c **** 	puts(hr);
 4208              		.loc 2 1520 0
 4209 0030 6C0094E5 		ldr	r0, [r4, #108]
 4210 0034 FEFFFFEB 		bl	puts
1521:apps/rssi/main.c **** 
1522:apps/rssi/main.c **** 	keypad_set_handler(&key_handler);
 4211              		.loc 2 1522 0
 4212 0038 D00A9FE5 		ldr	r0, .L416+8
 4213 003c FEFFFFEB 		bl	keypad_set_handler
1523:apps/rssi/main.c **** 
1524:apps/rssi/main.c **** 	/* Dump clock config after PLL set */
1525:apps/rssi/main.c **** 	calypso_clk_dump();
 4214              		.loc 2 1525 0
 4215 0040 FEFFFFEB 		bl	calypso_clk_dump
1526:apps/rssi/main.c **** 	puts(hr);
 4216              		.loc 2 1526 0
 4217 0044 6C0094E5 		ldr	r0, [r4, #108]
 4218 0048 FEFFFFEB 		bl	puts
1527:apps/rssi/main.c **** 
1528:apps/rssi/main.c **** 	sercomm_register_rx_cb(SC_DLCI_CONSOLE, console_rx_cb);
 4219              		.loc 2 1528 0
 4220 004c C01A9FE5 		ldr	r1, .L416+12
 4221 0050 0A00A0E3 		mov	r0, #10
 4222 0054 FEFFFFEB 		bl	sercomm_register_rx_cb
1529:apps/rssi/main.c **** 	sercomm_register_rx_cb(SC_DLCI_L1A_L23, l1a_l23_rx_cb);
 4223              		.loc 2 1529 0
 4224 0058 B81A9FE5 		ldr	r1, .L416+16
 4225 005c 0500A0E3 		mov	r0, #5
 4226 0060 FEFFFFEB 		bl	sercomm_register_rx_cb
1530:apps/rssi/main.c **** 
1531:apps/rssi/main.c **** 	layer1_init();
 4227              		.loc 2 1531 0
 4228 0064 FEFFFFEB 		bl	layer1_init
1532:apps/rssi/main.c **** 	l1a_l23_tx_cb = l1a_l23_tx;
 4229              		.loc 2 1532 0
 4230 0068 AC3A9FE5 		ldr	r3, .L416+20
 4231 006c AC2A9FE5 		ldr	r2, .L416+24
1533:apps/rssi/main.c **** 
1534:apps/rssi/main.c **** //	display_unset_attr(DISP_ATTR_INVERT);
1535:apps/rssi/main.c **** 
1536:apps/rssi/main.c **** 	tpu_frame_irq_en(1, 1);
 4232              		.loc 2 1536 0
 4233 0070 0100A0E3 		mov	r0, #1
1532:apps/rssi/main.c **** 	l1a_l23_tx_cb = l1a_l23_tx;
 4234              		.loc 2 1532 0
 4235 0074 002083E5 		str	r2, [r3, #0]
 4236              		.loc 2 1536 0
 4237 0078 0010A0E1 		mov	r1, r0
 4238 007c FEFFFFEB 		bl	tpu_frame_irq_en
1537:apps/rssi/main.c **** 
1538:apps/rssi/main.c **** 	buzzer_mode_pwt(1);
 4239              		.loc 2 1538 0
 4240 0080 0100A0E3 		mov	r0, #1
 4241 0084 FEFFFFEB 		bl	buzzer_mode_pwt
1539:apps/rssi/main.c **** 	buzzer_volume(0);
 4242              		.loc 2 1539 0
 4243 0088 0000A0E3 		mov	r0, #0
 4244 008c FEFFFFEB 		bl	buzzer_volume
1540:apps/rssi/main.c **** 
1541:apps/rssi/main.c **** 	memset(pm_spectrum, 0, sizeof(pm_spectrum));
 4245              		.loc 2 1541 0
 4246 0090 0010A0E3 		mov	r1, #0
 4247 0094 012BA0E3 		mov	r2, #1024
 4248 0098 840A9FE5 		ldr	r0, .L416+28
 4249 009c FEFFFFEB 		bl	memset
1542:apps/rssi/main.c **** 	memset(ul_max, 0, sizeof(ul_max));
 4250              		.loc 2 1542 0
 4251 00a0 803A9FE5 		ldr	r3, .L416+32
 4252 00a4 0050A0E3 		mov	r5, #0
 4253 00a8 005083E5 		str	r5, [r3, #0]
 4254 00ac 045083E5 		str	r5, [r3, #4]
1543:apps/rssi/main.c **** 
1544:apps/rssi/main.c **** 	/* inc 0 to 1 and refresh */
1545:apps/rssi/main.c **** 	inc_dec_arfcn(1);
 4255              		.loc 2 1545 0
 4256 00b0 0100A0E3 		mov	r0, #1
 4257 00b4 FEFFFFEB 		bl	inc_dec_arfcn
 4258              	.LBB403:
 4259              	.LBB404:
 773:apps/rssi/main.c **** 	if (key_pressed) {
 4260              		.loc 2 773 0
 4261 00b8 6C4A9FE5 		ldr	r4, .L416+36
 4262              	.LBB410:
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 4263              		.loc 2 774 0
 4264 00bc 6C6A9FE5 		ldr	r6, .L416+40
 4265 00c0 6C8A9FE5 		ldr	r8, .L416+44
 4266              	.LBE410:
 4267              	.LBB405:
 4268              	.LBB406:
1026:apps/rssi/main.c **** 	si_3[2] = 0;
 4269              		.loc 2 1026 0
 4270 00c4 6C7A9FE5 		ldr	r7, .L416+48
 4271              	.L399:
 4272              	.LBE406:
 4273              	.LBE405:
 4274              	.LBE404:
 4275              	.LBE403:
1546:apps/rssi/main.c **** 
1547:apps/rssi/main.c **** 	while (1) {
1548:apps/rssi/main.c **** 		l1a_compl_execute();
 4276              		.loc 2 1548 0 discriminator 1
 4277 00c8 FEFFFFEB 		bl	l1a_compl_execute
1549:apps/rssi/main.c **** 		osmo_timers_update();
 4278              		.loc 2 1549 0 discriminator 1
 4279 00cc FEFFFFEB 		bl	osmo_timers_update
 4280              	.LBB420:
 4281              	.LBB419:
 773:apps/rssi/main.c **** 	if (key_pressed) {
 4282              		.loc 2 773 0 discriminator 1
 4283 00d0 043094E5 		ldr	r3, [r4, #4]
 4284 00d4 000053E3 		cmp	r3, #0
 4285 00d8 1000000A 		beq	.L324
 4286              	.LBB411:
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 4287              		.loc 2 774 0
 4288 00dc 003098E5 		ldr	r3, [r8, #0]
 4289 00e0 002096E5 		ldr	r2, [r6, #0]
 4290              	.LVL248:
 775:apps/rssi/main.c **** 		if (elapsed > key_pressed_delay) {
 4291              		.loc 2 775 0
 4292 00e4 501A9FE5 		ldr	r1, .L416+52
 774:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - key_pressed_when;
 4293              		.loc 2 774 0
 4294 00e8 022063E0 		rsb	r2, r3, r2
 4295              	.LVL249:
 775:apps/rssi/main.c **** 		if (elapsed > key_pressed_delay) {
 4296              		.loc 2 775 0
 4297 00ec 003091E5 		ldr	r3, [r1, #0]
 4298 00f0 030052E1 		cmp	r2, r3
 4299 00f4 0900009A 		bls	.L324
 776:apps/rssi/main.c **** 			key_pressed_when = jiffies;
 4300              		.loc 2 776 0
 4301 00f8 003096E5 		ldr	r3, [r6, #0]
 780:apps/rssi/main.c **** 			 || key_pressed_code == KEY_RIGHT)
 4302              		.loc 2 780 0
 4303 00fc 3C2A9FE5 		ldr	r2, .L416+56
 4304              	.LVL250:
 776:apps/rssi/main.c **** 			key_pressed_when = jiffies;
 4305              		.loc 2 776 0
 4306 0100 003088E5 		str	r3, [r8, #0]
 777:apps/rssi/main.c **** 			key_pressed_delay = HZ / 10;
 4307              		.loc 2 777 0
 4308 0104 0A30A0E3 		mov	r3, #10
 4309 0108 003081E5 		str	r3, [r1, #0]
 780:apps/rssi/main.c **** 			 || key_pressed_code == KEY_RIGHT)
 4310              		.loc 2 780 0
 4311 010c 003092E5 		ldr	r3, [r2, #0]
 4312 0110 112043E2 		sub	r2, r3, #17
 779:apps/rssi/main.c **** 			if (key_pressed_code == KEY_LEFT
 4313              		.loc 2 779 0
 4314 0114 010052E3 		cmp	r2, #1
 781:apps/rssi/main.c **** 				key_code = key_pressed_code;
 4315              		.loc 2 781 0
 4316 0118 E8299F95 		ldrls	r2, .L416
 4317 011c 00308295 		strls	r3, [r2, #0]
 4318              	.L324:
 4319              	.LBE411:
 785:apps/rssi/main.c **** 	if (key_code == KEY_INV)
 4320              		.loc 2 785 0
 4321 0120 E0399FE5 		ldr	r3, .L416
 4322 0124 000093E5 		ldr	r0, [r3, #0]
 4323 0128 FF0050E3 		cmp	r0, #255
 4324 012c 2501000A 		beq	.L325
 789:apps/rssi/main.c **** 	if (tone_on)
 4325              		.loc 2 789 0
 4326 0130 303094E5 		ldr	r3, [r4, #48]
 4327 0134 000053E3 		cmp	r3, #0
 4328 0138 2201001A 		bne	.L325
 792:apps/rssi/main.c **** 	switch (key_code) {
 4329              		.loc 2 792 0
 4330 013c 140050E3 		cmp	r0, #20
 4331 0140 00F19F97 		ldrls	pc, [pc, r0, asl #2]
 4332 0144 1C0100EA 		b	.L326
 4333              	.L338:
 4334 0148 9C010000 		.word	.L327
 4335 014c 9C010000 		.word	.L327
 4336 0150 9C010000 		.word	.L327
 4337 0154 9C010000 		.word	.L327
 4338 0158 9C010000 		.word	.L327
 4339 015c 9C010000 		.word	.L327
 4340 0160 9C010000 		.word	.L327
 4341 0164 9C010000 		.word	.L327
 4342 0168 9C010000 		.word	.L327
 4343 016c 9C010000 		.word	.L327
 4344 0170 AC050000 		.word	.L328
 4345 0174 BC050000 		.word	.L326
 4346 0178 44050000 		.word	.L329
 4347 017c 7C020000 		.word	.L330
 4348 0180 C4020000 		.word	.L331
 4349 0184 AC010000 		.word	.L332
 4350 0188 D4010000 		.word	.L333
 4351 018c 40020000 		.word	.L334
 4352 0190 10020000 		.word	.L335
 4353 0194 FC020000 		.word	.L336
 4354 0198 6C050000 		.word	.L337
 4355              	.L327:
 803:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM || mode == MODE_ARFCN)
 4356              		.loc 2 803 0
 4357 019c 083094E5 		ldr	r3, [r4, #8]
 4358 01a0 020053E3 		cmp	r3, #2
 4359 01a4 0401008A 		bhi	.L326
 4360 01a8 3E0000EA 		b	.L401
 4361              	.L332:
 807:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 4362              		.loc 2 807 0
 4363 01ac 080094E5 		ldr	r0, [r4, #8]
 4364 01b0 000050E3 		cmp	r0, #0
 808:apps/rssi/main.c **** 			tone_inc_dec(1);
 4365              		.loc 2 808 0
 4366 01b4 01008002 		addeq	r0, r0, #1
 807:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 4367              		.loc 2 807 0
 4368 01b8 0800000A 		beq	.L403
 809:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4369              		.loc 2 809 0
 4370 01bc 030050E3 		cmp	r0, #3
 810:apps/rssi/main.c **** 			inc_dec_neighbour(0);
 4371              		.loc 2 810 0
 4372 01c0 0000A003 		moveq	r0, #0
 809:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4373              		.loc 2 809 0
 4374 01c4 0A00000A 		beq	.L404
 811:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4375              		.loc 2 811 0
 4376 01c8 010050E3 		cmp	r0, #1
 4377 01cc FA00001A 		bne	.L326
 4378 01d0 0C0000EA 		b	.L405
 4379              	.L333:
 815:apps/rssi/main.c **** 		if (mode == MODE_MAIN)
 4380              		.loc 2 815 0
 4381 01d4 080094E5 		ldr	r0, [r4, #8]
 4382 01d8 000050E3 		cmp	r0, #0
 4383 01dc 0100001A 		bne	.L341
 4384              	.L403:
 816:apps/rssi/main.c **** 			tone_inc_dec(0);
 4385              		.loc 2 816 0
 4386 01e0 FEFFFFEB 		bl	tone_inc_dec
 4387 01e4 F40000EA 		b	.L326
 4388              	.L341:
 817:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4389              		.loc 2 817 0
 4390 01e8 030050E3 		cmp	r0, #3
 4391 01ec 0200001A 		bne	.L342
 818:apps/rssi/main.c **** 			inc_dec_neighbour(1);
 4392              		.loc 2 818 0
 4393 01f0 0100A0E3 		mov	r0, #1
 4394              	.L404:
 4395 01f4 FEFFFFEB 		bl	inc_dec_neighbour
 4396 01f8 EF0000EA 		b	.L326
 4397              	.L342:
 819:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4398              		.loc 2 819 0
 4399 01fc 010050E3 		cmp	r0, #1
 4400 0200 ED00001A 		bne	.L326
 820:apps/rssi/main.c **** 			inc_dec_spectrum(0);
 4401              		.loc 2 820 0
 4402 0204 0000A0E3 		mov	r0, #0
 4403              	.L405:
 4404 0208 FEFFFFEB 		bl	inc_dec_spectrum
 4405 020c EA0000EA 		b	.L326
 4406              	.L335:
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4407              		.loc 2 823 0
 4408 0210 083094E5 		ldr	r3, [r4, #8]
 4409 0214 010053E3 		cmp	r3, #1
 824:apps/rssi/main.c **** 			inc_dec_arfcn(1);
 4410              		.loc 2 824 0
 4411 0218 0100A093 		movls	r0, #1
 823:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4412              		.loc 2 823 0
 4413 021c 0B00009A 		bls	.L406
 825:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4414              		.loc 2 825 0
 4415 0220 030053E3 		cmp	r3, #3
 4416 0224 E400001A 		bne	.L326
 4417 0228 14399FE5 		ldr	r3, .L416+60
 4418 022c 003093E5 		ldr	r3, [r3, #0]
 4419 0230 000053E3 		cmp	r3, #0
 826:apps/rssi/main.c **** 			inc_dec_ul_arfcn(1);
 4420              		.loc 2 826 0
 4421 0234 0100A0B3 		movlt	r0, #1
 825:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4422              		.loc 2 825 0
 4423 0238 DF0000AA 		bge	.L326
 4424 023c 0C0000EA 		b	.L407
 4425              	.L334:
 829:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4426              		.loc 2 829 0
 4427 0240 083094E5 		ldr	r3, [r4, #8]
 4428 0244 010053E3 		cmp	r3, #1
 4429 0248 0200008A 		bhi	.L344
 830:apps/rssi/main.c **** 			inc_dec_arfcn(0);
 4430              		.loc 2 830 0
 4431 024c 0000A0E3 		mov	r0, #0
 4432              	.L406:
 4433 0250 FEFFFFEB 		bl	inc_dec_arfcn
 4434 0254 D80000EA 		b	.L326
 4435              	.L344:
 831:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4436              		.loc 2 831 0
 4437 0258 030053E3 		cmp	r3, #3
 4438 025c D600001A 		bne	.L326
 4439 0260 DC389FE5 		ldr	r3, .L416+60
 4440 0264 003093E5 		ldr	r3, [r3, #0]
 4441 0268 000053E3 		cmp	r3, #0
 4442 026c D20000AA 		bge	.L326
 832:apps/rssi/main.c **** 			inc_dec_ul_arfcn(0);
 4443              		.loc 2 832 0
 4444 0270 0000A0E3 		mov	r0, #0
 4445              	.L407:
 4446 0274 FEFFFFEB 		bl	inc_dec_ul_arfcn
 4447 0278 CF0000EA 		b	.L326
 4448              	.L330:
 835:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4449              		.loc 2 835 0
 4450 027c 083094E5 		ldr	r3, [r4, #8]
 4451 0280 010053E3 		cmp	r3, #1
 4452 0284 0400008A 		bhi	.L345
 4453              	.LBB412:
 4454              	.LBB413:
 682:apps/rssi/main.c **** 	pcs = !pcs;
 4455              		.loc 2 682 0
 4456 0288 143094E5 		ldr	r3, [r4, #20]
 4457 028c 013073E2 		rsbs	r3, r3, #1
 4458 0290 0030A033 		movcc	r3, #0
 4459 0294 143084E5 		str	r3, [r4, #20]
 4460 0298 B10000EA 		b	.L408
 4461              	.L345:
 4462              	.LBE413:
 4463              	.LBE412:
 837:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4464              		.loc 2 837 0
 4465 029c 020053E3 		cmp	r3, #2
 4466 02a0 0200001A 		bne	.L346
 838:apps/rssi/main.c **** 			enter_arfcn(key_code);
 4467              		.loc 2 838 0
 4468 02a4 0D00A0E3 		mov	r0, #13
 4469              	.L401:
 4470 02a8 FEFFFFEB 		bl	enter_arfcn
 4471 02ac C20000EA 		b	.L326
 4472              	.L346:
 839:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4473              		.loc 2 839 0
 4474 02b0 030053E3 		cmp	r3, #3
 4475 02b4 B300000A 		beq	.L409
 4476              	.L347:
 841:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 4477              		.loc 2 841 0
 4478 02b8 040053E3 		cmp	r3, #4
 4479 02bc BE00001A 		bne	.L326
 4480 02c0 B40000EA 		b	.L410
 4481              	.L331:
 845:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4482              		.loc 2 845 0
 4483 02c4 083094E5 		ldr	r3, [r4, #8]
 4484 02c8 010053E3 		cmp	r3, #1
 4485 02cc 0800009A 		bls	.L411
 4486              	.L348:
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4487              		.loc 2 847 0
 4488 02d0 020053E3 		cmp	r3, #2
 848:apps/rssi/main.c **** 			enter_arfcn(key_code);
 4489              		.loc 2 848 0
 4490 02d4 0E00A003 		moveq	r0, #14
 847:apps/rssi/main.c **** 		else if (mode == MODE_ARFCN)
 4491              		.loc 2 847 0
 4492 02d8 F2FFFF0A 		beq	.L401
 849:apps/rssi/main.c **** 		else if (mode == MODE_SYNC && cursor < 0)
 4493              		.loc 2 849 0
 4494 02dc 030053E3 		cmp	r3, #3
 4495 02e0 B500001A 		bne	.L326
 4496 02e4 58389FE5 		ldr	r3, .L416+60
 4497 02e8 003093E5 		ldr	r3, [r3, #0]
 4498 02ec 000053E3 		cmp	r3, #0
 4499 02f0 B10000AA 		bge	.L326
 4500              	.L411:
 850:apps/rssi/main.c **** 			toggle_up_down();
 4501              		.loc 2 850 0
 4502 02f4 FEFFFFEB 		bl	toggle_up_down
 4503 02f8 AF0000EA 		b	.L326
 4504              	.L336:
 853:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4505              		.loc 2 853 0
 4506 02fc 083094E5 		ldr	r3, [r4, #8]
 4507 0300 010053E3 		cmp	r3, #1
 4508 0304 5500008A 		bhi	.L350
 4509              	.LBB414:
 4510              	.LBB409:
 992:apps/rssi/main.c **** 	struct msgb *msg = l1ctl_msgb_alloc(L1CTL_FBSB_REQ);
 4511              		.loc 2 992 0
 4512 0308 0100A0E3 		mov	r0, #1
 4513 030c FEFFFFEB 		bl	l1ctl_msgb_alloc
 4514 0310 0090A0E1 		mov	r9, r0
 4515              	.LVL251:
 994:apps/rssi/main.c **** 	uint16_t a = arfcn;
 4516              		.loc 2 994 0
 4517 0314 BAA1D4E1 		ldrh	sl, [r4, #26]
 4518              	.LVL252:
 996:apps/rssi/main.c **** 	l1s_reset();
 4519              		.loc 2 996 0
 4520 0318 FEFFFFEB 		bl	l1s_reset
 4521              	.LVL253:
 997:apps/rssi/main.c **** 	l1s_reset_hw();
 4522              		.loc 2 997 0
 4523 031c FEFFFFEB 		bl	l1s_reset_hw
 998:apps/rssi/main.c **** 	pm_count = 0;
 4524              		.loc 2 998 0
 4525 0320 205084E5 		str	r5, [r4, #32]
 999:apps/rssi/main.c **** 	pm_mode = PM_IDLE;
 4526              		.loc 2 999 0
 4527 0324 245084E5 		str	r5, [r4, #36]
1001:apps/rssi/main.c **** 	req = (struct l1ctl_fbsb_req *) msgb_put(msg, sizeof(*req));
 4528              		.loc 2 1001 0
 4529 0328 0900A0E1 		mov	r0, r9
 4530 032c 0D10A0E3 		mov	r1, #13
 4531 0330 FEFFFFEB 		bl	msgb_put
 4532              	.LVL254:
1002:apps/rssi/main.c **** 	if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4533              		.loc 2 1002 0
 4534 0334 143094E5 		ldr	r3, [r4, #20]
 4535 0338 000053E3 		cmp	r3, #0
 4536 033c 0500000A 		beq	.L351
 4537 0340 BA31D4E1 		ldrh	r3, [r4, #26]
 4538 0344 020C53E3 		cmp	r3, #512
 4539 0348 0200003A 		bcc	.L351
 4540 034c F4279FE5 		ldr	r2, .L416+64
 4541 0350 020053E1 		cmp	r3, r2
1003:apps/rssi/main.c **** 		a |= ARFCN_PCS;
 4542              		.loc 2 1003 0
 4543 0354 02A98A93 		orrls	sl, sl, #32768
 4544              	.LVL255:
 4545              	.L351:
 4546              	.LBB407:
 4547              	.LBB408:
 4548              		.loc 4 51 0
 4549 0358 2A34A0E1 		mov	r3, sl, lsr #8
 4550 035c 0AA483E1 		orr	sl, r3, sl, asl #8
 4551              	.LVL256:
 4552              	.LBE408:
 4553              	.LBE407:
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
 4554              		.loc 2 1005 0
 4555 0360 6430A0E3 		mov	r3, #100
 4556 0364 0330C0E5 		strb	r3, [r0, #3]
1007:apps/rssi/main.c **** 	req->freq_err_thresh1 = htons(11000 - 1000);
 4557              		.loc 2 1007 0
 4558 0368 2730A0E3 		mov	r3, #39
 4559 036c 0430C0E5 		strb	r3, [r0, #4]
 4560 0370 1030A0E3 		mov	r3, #16
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
 4561              		.loc 2 1004 0
 4562 0374 00A0C0E5 		strb	sl, [r0, #0]
1007:apps/rssi/main.c **** 	req->freq_err_thresh1 = htons(11000 - 1000);
 4563              		.loc 2 1007 0
 4564 0378 0530C0E5 		strb	r3, [r0, #5]
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
 4565              		.loc 2 1004 0
 4566 037c 2AA4A0E1 		mov	sl, sl, lsr #8
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4567              		.loc 2 1009 0
 4568 0380 033083E0 		add	r3, r3, r3
1004:apps/rssi/main.c **** 	req->band_arfcn = htons(a);
 4569              		.loc 2 1004 0
 4570 0384 01A0C0E5 		strb	sl, [r0, #1]
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4571              		.loc 2 1009 0
 4572 0388 0730C0E5 		strb	r3, [r0, #7]
 4573 038c 03A0A0E3 		mov	sl, #3
1012:apps/rssi/main.c **** 	req->flags = L1CTL_FBSB_F_FB01SB;
 4574              		.loc 2 1012 0
 4575 0390 0730A0E3 		mov	r3, #7
 4576 0394 0930C0E5 		strb	r3, [r0, #9]
1005:apps/rssi/main.c **** 	req->timeout = htons(100);
 4577              		.loc 2 1005 0
 4578 0398 0250C0E5 		strb	r5, [r0, #2]
1009:apps/rssi/main.c **** 	req->freq_err_thresh2 = htons(1000 - 200);
 4579              		.loc 2 1009 0
 4580 039c 06A0C0E5 		strb	sl, [r0, #6]
1011:apps/rssi/main.c **** 	req->num_freqerr_avg = 3;
 4581              		.loc 2 1011 0
 4582 03a0 08A0C0E5 		strb	sl, [r0, #8]
1013:apps/rssi/main.c **** 	req->sync_info_idx = 0;
 4583              		.loc 2 1013 0
 4584 03a4 0A50C0E5 		strb	r5, [r0, #10]
1014:apps/rssi/main.c **** 	req->ccch_mode = CCCH_MODE_NONE;
 4585              		.loc 2 1014 0
 4586 03a8 0B50C0E5 		strb	r5, [r0, #11]
1015:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 4587              		.loc 2 1015 0
 4588 03ac 0910A0E1 		mov	r1, r9
 4589 03b0 0500A0E3 		mov	r0, #5
 4590              	.LVL257:
 4591 03b4 FEFFFFEB 		bl	l1a_l23_rx
1018:apps/rssi/main.c **** 	memset(ul_levels, 0, sizeof(ul_levels));
 4592              		.loc 2 1018 0
 4593 03b8 8C379FE5 		ldr	r3, .L416+68
 4594 03bc 005083E5 		str	r5, [r3, #0]
 4595 03c0 045083E5 		str	r5, [r3, #4]
1020:apps/rssi/main.c **** 	ul_new = 0;
 4596              		.loc 2 1020 0
 4597 03c4 84379FE5 		ldr	r3, .L416+72
 4598 03c8 B050C3E1 		strh	r5, [r3, #0]	@ movhi
1021:apps/rssi/main.c **** 	ul_arfcn = arfcn;
 4599              		.loc 2 1021 0
 4600 03cc BA31D4E1 		ldrh	r3, [r4, #26]
 4601 03d0 B831C4E1 		strh	r3, [r4, #24]	@ movhi
1022:apps/rssi/main.c **** 	si_1[2] = 0;
 4602              		.loc 2 1022 0
 4603 03d4 78379FE5 		ldr	r3, .L416+76
 4604 03d8 0010A0E3 		mov	r1, #0
 4605 03dc 0210C3E5 		strb	r1, [r3, #2]
1023:apps/rssi/main.c **** 	si_2[2] = 0;
 4606              		.loc 2 1023 0
 4607 03e0 70379FE5 		ldr	r3, .L416+80
 4608 03e4 0250C3E5 		strb	r5, [r3, #2]
1024:apps/rssi/main.c **** 	si_2bis[2] = 0;
 4609              		.loc 2 1024 0
 4610 03e8 6C379FE5 		ldr	r3, .L416+84
 4611 03ec 0250C3E5 		strb	r5, [r3, #2]
1025:apps/rssi/main.c **** 	si_2ter[2] = 0;
 4612              		.loc 2 1025 0
 4613 03f0 68379FE5 		ldr	r3, .L416+88
 4614 03f4 0250C3E5 		strb	r5, [r3, #2]
1027:apps/rssi/main.c **** 	si_4[2] = 0;
 4615              		.loc 2 1027 0
 4616 03f8 64379FE5 		ldr	r3, .L416+92
 4617 03fc 0250C3E5 		strb	r5, [r3, #2]
1028:apps/rssi/main.c **** 	mcc = mnc = lac = 0;
 4618              		.loc 2 1028 0
 4619 0400 60379FE5 		ldr	r3, .L416+96
 4620 0404 B050C3E1 		strh	r5, [r3, #0]	@ movhi
 4621 0408 5C379FE5 		ldr	r3, .L416+100
 4622 040c B050C3E1 		strh	r5, [r3, #0]	@ movhi
 4623 0410 58379FE5 		ldr	r3, .L416+104
 4624 0414 B050C3E1 		strh	r5, [r3, #0]	@ movhi
1029:apps/rssi/main.c **** 	ccch_conf = -1;
 4625              		.loc 2 1029 0
 4626 0418 54379FE5 		ldr	r3, .L416+108
 4627 041c 0020E0E3 		mvn	r2, #0
 4628 0420 002083E5 		str	r2, [r3, #0]
1017:apps/rssi/main.c **** 	mode = MODE_SYNC;
 4629              		.loc 2 1017 0
 4630 0424 08A084E5 		str	sl, [r4, #8]
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
 4631              		.loc 2 1030 0
 4632 0428 012BA0E3 		mov	r2, #1024
1019:apps/rssi/main.c **** 	si_new = 0;
 4633              		.loc 2 1019 0
 4634 042c BC52C4E1 		strh	r5, [r4, #44]	@ movhi
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
 4635              		.loc 2 1030 0
 4636 0430 40079FE5 		ldr	r0, .L416+112
 4637 0434 0510A0E1 		mov	r1, r5
1026:apps/rssi/main.c **** 	si_3[2] = 0;
 4638              		.loc 2 1026 0
 4639 0438 0250C7E5 		strb	r5, [r7, #2]
1030:apps/rssi/main.c **** 	memset(freq, 0, sizeof(freq));
 4640              		.loc 2 1030 0
 4641 043c FEFFFFEB 		bl	memset
1031:apps/rssi/main.c **** 	cursor = 0;
 4642              		.loc 2 1031 0
 4643 0440 FC369FE5 		ldr	r3, .L416+60
 4644 0444 005083E5 		str	r5, [r3, #0]
1032:apps/rssi/main.c **** 	nb_num = 0;
 4645              		.loc 2 1032 0
 4646 0448 2C379FE5 		ldr	r3, .L416+116
1033:apps/rssi/main.c **** 	sync_msg = "trying";
 4647              		.loc 2 1033 0
 4648 044c 2C279FE5 		ldr	r2, .L416+120
1032:apps/rssi/main.c **** 	nb_num = 0;
 4649              		.loc 2 1032 0
 4650 0450 005083E5 		str	r5, [r3, #0]
1033:apps/rssi/main.c **** 	sync_msg = "trying";
 4651              		.loc 2 1033 0
 4652 0454 AC369FE5 		ldr	r3, .L416
 4653 0458 042083E5 		str	r2, [r3, #4]
 4654 045c 400000EA 		b	.L408
 4655              	.LVL258:
 4656              	.L350:
 4657              	.LBE409:
 4658              	.LBE414:
 855:apps/rssi/main.c **** 		else if (mode == MODE_SYNC || mode == MODE_RACH)
 4659              		.loc 2 855 0
 4660 0460 033043E2 		sub	r3, r3, #3
 4661 0464 010053E3 		cmp	r3, #1
 4662 0468 5300008A 		bhi	.L326
 4663              	.LBB415:
 4664              	.LBB416:
1190:apps/rssi/main.c **** 	if (ccch_conf < 0)
 4665              		.loc 2 1190 0
 4666 046c 00B79FE5 		ldr	fp, .L416+108
 4667 0470 00309BE5 		ldr	r3, [fp, #0]
 4668 0474 000053E3 		cmp	r3, #0
 4669 0478 4F0000BA 		blt	.L326
1193:apps/rssi/main.c **** 	if (rach)
 4670              		.loc 2 1193 0
 4671 047c 00A094E5 		ldr	sl, [r4, #0]
 4672 0480 00005AE3 		cmp	sl, #0
 4673 0484 4C00001A 		bne	.L326
1201:apps/rssi/main.c **** 	struct msgb *msg1 = l1ctl_msgb_alloc(L1CTL_NEIGH_PM_REQ);
 4674              		.loc 2 1201 0
 4675 0488 1A00A0E3 		mov	r0, #26
 4676 048c FEFFFFEB 		bl	l1ctl_msgb_alloc
 4677 0490 08008DE5 		str	r0, [sp, #8]
 4678              	.LVL259:
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
 4679              		.loc 2 1202 0
 4680 0494 0400A0E3 		mov	r0, #4
 4681              	.LVL260:
 4682 0498 FEFFFFEB 		bl	l1ctl_msgb_alloc
1204:apps/rssi/main.c **** 			msgb_put(msg1, sizeof(*pm_req));
 4683              		.loc 2 1204 0
 4684 049c C210A0E3 		mov	r1, #194
1202:apps/rssi/main.c **** 	struct msgb *msg2 = l1ctl_msgb_alloc(L1CTL_RACH_REQ);
 4685              		.loc 2 1202 0
 4686 04a0 0090A0E1 		mov	r9, r0
 4687              	.LVL261:
1204:apps/rssi/main.c **** 			msgb_put(msg1, sizeof(*pm_req));
 4688              		.loc 2 1204 0
 4689 04a4 08009DE5 		ldr	r0, [sp, #8]
 4690              	.LVL262:
 4691 04a8 FEFFFFEB 		bl	msgb_put
1206:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*ul));;
 4692              		.loc 2 1206 0
 4693 04ac 0410A0E3 		mov	r1, #4
1204:apps/rssi/main.c **** 			msgb_put(msg1, sizeof(*pm_req));
 4694              		.loc 2 1204 0
 4695 04b0 0030A0E1 		mov	r3, r0
 4696              	.LVL263:
1206:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*ul));;
 4697              		.loc 2 1206 0
 4698 04b4 0900A0E1 		mov	r0, r9
 4699              	.LVL264:
 4700 04b8 04308DE5 		str	r3, [sp, #4]
 4701 04bc FEFFFFEB 		bl	msgb_put
 4702              	.LVL265:
1208:apps/rssi/main.c **** 			msgb_put(msg2, sizeof(*rach_req));
 4703              		.loc 2 1208 0
 4704 04c0 0410A0E3 		mov	r1, #4
 4705 04c4 0900A0E1 		mov	r0, r9
 4706 04c8 FEFFFFEB 		bl	msgb_put
 4707              	.LVL266:
1210:apps/rssi/main.c **** 	l1s.tx_power = 0;
 4708              		.loc 2 1210 0
 4709 04cc B0269FE5 		ldr	r2, .L416+124
 4710 04d0 49AAC2E5 		strb	sl, [r2, #2633]
1212:apps/rssi/main.c **** 	pm_req->n = 0; /* disable */
 4711              		.loc 2 1212 0
 4712 04d4 04309DE5 		ldr	r3, [sp, #4]
 4713 04d8 00A0C3E5 		strb	sl, [r3, #0]
1214:apps/rssi/main.c **** 	rach_ra = 0x00;
 4714              		.loc 2 1214 0
 4715 04dc A4369FE5 		ldr	r3, .L416+128
 4716 04e0 00A0C3E5 		strb	sl, [r3, #0]
1215:apps/rssi/main.c **** 	rach_req->ra = rach_ra;
 4717              		.loc 2 1215 0
 4718 04e4 00A0C0E5 		strb	sl, [r0, #0]
1216:apps/rssi/main.c **** 	rach_req->offset = 0;
 4719              		.loc 2 1216 0
 4720 04e8 02A0C0E5 		strb	sl, [r0, #2]
 4721 04ec 03A0C0E5 		strb	sl, [r0, #3]
1217:apps/rssi/main.c **** 	rach_req->combined = (ccch_conf == 1);
 4722              		.loc 2 1217 0
 4723 04f0 00309BE5 		ldr	r3, [fp, #0]
 4724 04f4 010053E3 		cmp	r3, #1
 4725 04f8 0030A013 		movne	r3, #0
 4726 04fc 0130A003 		moveq	r3, #1
 4727 0500 0130C0E5 		strb	r3, [r0, #1]
1219:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg1);
 4728              		.loc 2 1219 0
 4729 0504 08109DE5 		ldr	r1, [sp, #8]
 4730 0508 0500A0E3 		mov	r0, #5
 4731              	.LVL267:
 4732 050c FEFFFFEB 		bl	l1a_l23_rx
1220:apps/rssi/main.c **** 	l1a_l23_rx(SC_DLCI_L1A_L23, msg2);
 4733              		.loc 2 1220 0
 4734 0510 0500A0E3 		mov	r0, #5
 4735 0514 0910A0E1 		mov	r1, r9
 4736 0518 FEFFFFEB 		bl	l1a_l23_rx
1221:apps/rssi/main.c **** 	rach = 1;
 4737              		.loc 2 1221 0
 4738 051c 0130A0E3 		mov	r3, #1
 4739 0520 003084E5 		str	r3, [r4, #0]
1222:apps/rssi/main.c **** 	rach_when = jiffies;
 4740              		.loc 2 1222 0
 4741 0524 002096E5 		ldr	r2, [r6, #0]
 4742 0528 5C369FE5 		ldr	r3, .L416+132
 4743 052c 002083E5 		str	r2, [r3, #0]
1223:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
 4744              		.loc 2 1223 0
 4745 0530 58369FE5 		ldr	r3, .L416+136
 4746 0534 00A083E5 		str	sl, [r3, #0]
1224:apps/rssi/main.c **** 	mode = MODE_RACH;
 4747              		.loc 2 1224 0
 4748 0538 0430A0E3 		mov	r3, #4
 4749 053c 083084E5 		str	r3, [r4, #8]
 4750 0540 070000EA 		b	.L408
 4751              	.LVL268:
 4752              	.L329:
 4753              	.LBE416:
 4754              	.LBE415:
 4755              	.LBB417:
 4756              	.LBB418:
 725:apps/rssi/main.c **** 	max = !max;
 4757              		.loc 2 725 0
 4758 0544 103094E5 		ldr	r3, [r4, #16]
 4759 0548 013073E2 		rsbs	r3, r3, #1
 4760 054c 0030A033 		movcc	r3, #0
 4761 0550 103084E5 		str	r3, [r4, #16]
 726:apps/rssi/main.c **** 	max_power = power;
 4762              		.loc 2 726 0
 4763 0554 38369FE5 		ldr	r3, .L416+140
 4764 0558 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4765 055c 34369FE5 		ldr	r3, .L416+144
 4766 0560 0020C3E5 		strb	r2, [r3, #0]
 4767              	.L408:
 727:apps/rssi/main.c **** 	refresh_display();
 4768              		.loc 2 727 0
 4769 0564 FEFFFFEB 		bl	refresh_display
 4770 0568 130000EA 		b	.L326
 4771              	.L337:
 4772              	.LBE418:
 4773              	.LBE417:
 862:apps/rssi/main.c **** 		if (mode == MODE_ARFCN)
 4774              		.loc 2 862 0
 4775 056c 083094E5 		ldr	r3, [r4, #8]
 4776 0570 020053E3 		cmp	r3, #2
 4777 0574 0100001A 		bne	.L352
 863:apps/rssi/main.c **** 			exit_arfcn();
 4778              		.loc 2 863 0
 4779 0578 FEFFFFEB 		bl	exit_arfcn
 4780 057c 0E0000EA 		b	.L326
 4781              	.L352:
 864:apps/rssi/main.c **** 		else if (mode == MODE_SYNC)
 4782              		.loc 2 864 0
 4783 0580 030053E3 		cmp	r3, #3
 4784 0584 0100001A 		bne	.L353
 4785              	.L409:
 865:apps/rssi/main.c **** 			exit_sync();
 4786              		.loc 2 865 0
 4787 0588 FEFFFFEB 		bl	exit_sync
 4788 058c 0A0000EA 		b	.L326
 4789              	.L353:
 866:apps/rssi/main.c **** 		else if (mode == MODE_RACH)
 4790              		.loc 2 866 0
 4791 0590 040053E3 		cmp	r3, #4
 4792 0594 0100001A 		bne	.L354
 4793              	.L410:
 867:apps/rssi/main.c **** 			exit_rach();
 4794              		.loc 2 867 0
 4795 0598 FEFFFFEB 		bl	exit_rach
 4796 059c 060000EA 		b	.L326
 4797              	.L354:
 868:apps/rssi/main.c **** 		else if (mode == MODE_SPECTRUM)
 4798              		.loc 2 868 0
 4799 05a0 010053E3 		cmp	r3, #1
 4800 05a4 0400001A 		bne	.L326
 4801 05a8 020000EA 		b	.L402
 4802              	.L328:
 872:apps/rssi/main.c **** 		if (mode == MODE_MAIN || mode == MODE_SPECTRUM)
 4803              		.loc 2 872 0
 4804 05ac 083094E5 		ldr	r3, [r4, #8]
 4805 05b0 010053E3 		cmp	r3, #1
 4806 05b4 0000008A 		bhi	.L326
 4807              	.L402:
 873:apps/rssi/main.c **** 			toggle_spectrum();
 4808              		.loc 2 873 0
 4809 05b8 FEFFFFEB 		bl	toggle_spectrum
 4810              	.L326:
 879:apps/rssi/main.c **** 	key_code = KEY_INV;
 4811              		.loc 2 879 0
 4812 05bc 44359FE5 		ldr	r3, .L416
 4813 05c0 FF20A0E3 		mov	r2, #255
 4814 05c4 002083E5 		str	r2, [r3, #0]
 4815              	.L325:
 4816              	.LBE419:
 4817              	.LBE420:
1550:apps/rssi/main.c **** 		handle_key_code();
1551:apps/rssi/main.c **** 		l1a_l23_handler();
 4818              		.loc 2 1551 0 discriminator 1
 4819 05c8 FEFFFFEB 		bl	l1a_l23_handler
 4820              	.LBB421:
 4821              	.LBB422:
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 4822              		.loc 2 911 0 discriminator 1
 4823 05cc 24A094E5 		ldr	sl, [r4, #36]
 4824 05d0 00005AE3 		cmp	sl, #0
 4825 05d4 4900001A 		bne	.L355
 911:apps/rssi/main.c **** 	if (pm_mode == PM_IDLE && (mode == MODE_MAIN || mode == MODE_SPECTRUM)) {
 4826              		.loc 2 911 0 is_stmt 0
 4827 05d8 083094E5 		ldr	r3, [r4, #8]
 4828 05dc 010053E3 		cmp	r3, #1
 4829 05e0 8700008A 		bhi	.L356
 4830              	.LBB423:
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 4831              		.loc 2 912 0 is_stmt 1
 4832 05e4 0800A0E3 		mov	r0, #8
 4833 05e8 FEFFFFEB 		bl	l1ctl_msgb_alloc
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 4834              		.loc 2 916 0
 4835 05ec 0810A0E3 		mov	r1, #8
 912:apps/rssi/main.c **** 		struct msgb *msg = l1ctl_msgb_alloc(L1CTL_PM_REQ);
 4836              		.loc 2 912 0
 4837 05f0 0090A0E1 		mov	r9, r0
 4838              	.LVL269:
 916:apps/rssi/main.c **** 		pm = (struct l1ctl_pm_req *) msgb_put(msg, sizeof(*pm));
 4839              		.loc 2 916 0
 4840 05f4 FEFFFFEB 		bl	msgb_put
 4841              	.LVL270:
 917:apps/rssi/main.c **** 		pm->type = 1;
 4842              		.loc 2 917 0
 4843 05f8 0130A0E3 		mov	r3, #1
 4844 05fc 0030C0E5 		strb	r3, [r0, #0]
 918:apps/rssi/main.c **** 		if (mode == MODE_MAIN) {
 4845              		.loc 2 918 0
 4846 0600 083094E5 		ldr	r3, [r4, #8]
 4847 0604 000053E3 		cmp	r3, #0
 4848 0608 1100001A 		bne	.L357
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4849              		.loc 2 920 0
 4850 060c 142094E5 		ldr	r2, [r4, #20]
 4851 0610 000052E3 		cmp	r2, #0
 919:apps/rssi/main.c **** 			a = arfcn;
 4852              		.loc 2 919 0
 4853 0614 BA31D4E1 		ldrh	r3, [r4, #26]
 4854              	.LVL271:
 920:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX)
 4855              		.loc 2 920 0
 4856 0618 0400000A 		beq	.L358
 4857 061c 020C53E3 		cmp	r3, #512
 4858 0620 0200003A 		bcc	.L358
 4859 0624 1C259FE5 		ldr	r2, .L416+64
 4860 0628 020053E1 		cmp	r3, r2
 921:apps/rssi/main.c **** 				a |= ARFCN_PCS;
 4861              		.loc 2 921 0
 4862 062c 02398393 		orrls	r3, r3, #32768
 4863              	.LVL272:
 4864              	.L358:
 922:apps/rssi/main.c **** 			if (uplink)
 4865              		.loc 2 922 0
 4866 0630 0C2094E5 		ldr	r2, [r4, #12]
 4867 0634 000052E3 		cmp	r2, #0
 923:apps/rssi/main.c **** 				a |= ARFCN_UPLINK;
 4868              		.loc 2 923 0
 4869 0638 01398313 		orrne	r3, r3, #16384
 4870              	.LVL273:
 4871 063c 0338A011 		movne	r3, r3, asl #16
 4872 0640 2338A011 		movne	r3, r3, lsr #16
 4873              	.LVL274:
 925:apps/rssi/main.c **** 			pm_mode = PM_SENT;
 4874              		.loc 2 925 0
 4875 0644 0120A0E3 		mov	r2, #1
 4876 0648 242084E5 		str	r2, [r4, #36]
 4877 064c 03A0A0E1 		mov	sl, r3
 4878 0650 130000EA 		b	.L360
 4879              	.LVL275:
 4880              	.L357:
 927:apps/rssi/main.c **** 		if (mode == MODE_SPECTRUM) {
 4881              		.loc 2 927 0
 4882 0654 010053E3 		cmp	r3, #1
 4883 0658 0A30A011 		movne	r3, sl
 4884 065c 1000001A 		bne	.L360
 928:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 4885              		.loc 2 928 0
 4886 0660 143094E5 		ldr	r3, [r4, #20]
 4887 0664 000053E3 		cmp	r3, #0
 4888 0668 0700000A 		beq	.L361
 4889 066c BA31D4E1 		ldrh	r3, [r4, #26]
 4890 0670 020C53E3 		cmp	r3, #512
 4891 0674 0400003A 		bcc	.L361
 4892 0678 C8249FE5 		ldr	r2, .L416+64
 4893 067c 020053E1 		cmp	r3, r2
 930:apps/rssi/main.c **** 				e = PCS_MAX | ARFCN_PCS;
 4894              		.loc 2 930 0
 4895 0680 14A59F95 		ldrls	sl, .L416+148
 929:apps/rssi/main.c **** 				a = PCS_MIN | ARFCN_PCS;
 4896              		.loc 2 929 0
 4897 0684 823CA093 		movls	r3, #33280
 928:apps/rssi/main.c **** 			if (pcs && arfcn >= PCS_MIN && arfcn <= PCS_MAX) {
 4898              		.loc 2 928 0
 4899 0688 0300009A 		bls	.L362
 4900              	.L361:
 932:apps/rssi/main.c **** 				a = band->min;
 4901              		.loc 2 932 0
 4902 068c 0C359FE5 		ldr	r3, .L416+152
 4903 0690 002093E5 		ldr	r2, [r3, #0]
 4904 0694 B030D2E1 		ldrh	r3, [r2, #0]
 4905              	.LVL276:
 933:apps/rssi/main.c **** 				e = band->max;
 4906              		.loc 2 933 0
 4907 0698 B4A0D2E1 		ldrh	sl, [r2, #4]
 4908              	.LVL277:
 4909              	.L362:
 935:apps/rssi/main.c **** 			pm_mode = PM_RANGE_SENT;
 4910              		.loc 2 935 0
 4911 069c 0220A0E3 		mov	r2, #2
 4912 06a0 242084E5 		str	r2, [r4, #36]
 4913              	.LVL278:
 4914              	.L360:
 937:apps/rssi/main.c **** 		if (uplink) {
 4915              		.loc 2 937 0
 4916 06a4 0C2094E5 		ldr	r2, [r4, #12]
 4917 06a8 000052E3 		cmp	r2, #0
 4918 06ac 0500000A 		beq	.L363
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 4919              		.loc 2 938 0
 4920 06b0 013983E3 		orr	r3, r3, #16384
 4921              	.LVL279:
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 4922              		.loc 2 939 0
 4923 06b4 01A98AE3 		orr	sl, sl, #16384
 4924              	.LVL280:
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 4925              		.loc 2 938 0
 4926 06b8 0338A0E1 		mov	r3, r3, asl #16
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 4927              		.loc 2 939 0
 4928 06bc 0AA8A0E1 		mov	sl, sl, asl #16
 938:apps/rssi/main.c **** 			a |= ARFCN_UPLINK;
 4929              		.loc 2 938 0
 4930 06c0 2338A0E1 		mov	r3, r3, lsr #16
 4931              	.LVL281:
 939:apps/rssi/main.c **** 			e |= ARFCN_UPLINK;
 4932              		.loc 2 939 0
 4933 06c4 2AA8A0E1 		mov	sl, sl, lsr #16
 4934              	.LVL282:
 4935              	.L363:
 4936              	.LBB424:
 4937              	.LBB425:
 4938              		.loc 4 51 0
 4939 06c8 2324A0E1 		mov	r2, r3, lsr #8
 4940 06cc 033482E1 		orr	r3, r2, r3, asl #8
 4941              	.LVL283:
 4942              	.LBE425:
 4943              	.LBE424:
 941:apps/rssi/main.c **** 		pm->range.band_arfcn_from = htons(a);
 4944              		.loc 2 941 0
 4945 06d0 0430C0E5 		strb	r3, [r0, #4]
 4946 06d4 2334A0E1 		mov	r3, r3, lsr #8
 4947 06d8 0530C0E5 		strb	r3, [r0, #5]
 4948              	.LVL284:
 4949              	.LBB426:
 4950              	.LBB427:
 4951              		.loc 4 51 0
 4952 06dc 2A34A0E1 		mov	r3, sl, lsr #8
 4953 06e0 0AA483E1 		orr	sl, r3, sl, asl #8
 4954              	.LVL285:
 4955              	.LBE427:
 4956              	.LBE426:
 942:apps/rssi/main.c **** 		pm->range.band_arfcn_to = htons(e);
 4957              		.loc 2 942 0
 4958 06e4 06A0C0E5 		strb	sl, [r0, #6]
 4959 06e8 2AA4A0E1 		mov	sl, sl, lsr #8
 4960 06ec 07A0C0E5 		strb	sl, [r0, #7]
 944:apps/rssi/main.c **** 		l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 4961              		.loc 2 944 0
 4962 06f0 0910A0E1 		mov	r1, r9
 4963 06f4 0500A0E3 		mov	r0, #5
 4964              	.LVL286:
 4965 06f8 FEFFFFEB 		bl	l1a_l23_rx
 4966 06fc 400000EA 		b	.L356
 4967              	.LVL287:
 4968              	.L355:
 4969              	.LBE423:
 949:apps/rssi/main.c **** 	if (pm_mode == PM_RESULT) {
 4970              		.loc 2 949 0
 4971 0700 04005AE3 		cmp	sl, #4
 4972 0704 3100001A 		bne	.L364
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 4973              		.loc 2 951 0
 4974 0708 F8339FE5 		ldr	r3, .L416
 4975 070c 201094E5 		ldr	r1, [r4, #32]
 4976 0710 703093E5 		ldr	r3, [r3, #112]
 4977 0714 030051E1 		cmp	r1, r3
 950:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 4978              		.loc 2 950 0
 4979 0718 245084E5 		str	r5, [r4, #36]
 951:apps/rssi/main.c **** 		if (pm_count == pm_max) {
 4980              		.loc 2 951 0
 4981 071c 3800001A 		bne	.L356
 4982              	.LVL288:
 4983              	.LBB428:
 955:apps/rssi/main.c **** 			if (uplink) {
 4984              		.loc 2 955 0
 4985 0720 0CA094E5 		ldr	sl, [r4, #12]
 4986 0724 00005AE3 		cmp	sl, #0
 4987 0728 74249F05 		ldreq	r2, .L416+156
 4988 072c 0500A001 		moveq	r0, r5
 4989 0730 0530A001 		moveq	r3, r5
 4990 0734 0F00000A 		beq	.L366
 4991              	.L365:
 4992 0738 64049FE5 		ldr	r0, .L416+156
 4993 073c 0530A0E1 		mov	r3, r5
 4994 0740 0520A0E1 		mov	r2, r5
 4995 0744 030000EA 		b	.L367
 4996              	.LVL289:
 4997              	.L368:
 4998 0748 04C0B0E5 		ldr	ip, [r0, #4]!
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 4999              		.loc 2 957 0
 5000 074c 012082E2 		add	r2, r2, #1
 5001              	.LVL290:
 955:apps/rssi/main.c **** 			if (uplink) {
 5002              		.loc 2 955 0
 5003 0750 0C0053E1 		cmp	r3, ip
 5004 0754 0C30A0B1 		movlt	r3, ip
 5005              	.LVL291:
 5006              	.L367:
 957:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++) {
 5007              		.loc 2 957 0
 5008 0758 010052E1 		cmp	r2, r1
 5009 075c F9FFFFBA 		blt	.L368
 961:apps/rssi/main.c **** 				power = sum;
 5010              		.loc 2 961 0
 5011 0760 2C249FE5 		ldr	r2, .L416+140
 5012              	.LVL292:
 5013 0764 0030C2E5 		strb	r3, [r2, #0]
 5014 0768 070000EA 		b	.L369
 5015              	.LVL293:
 5016              	.L370:
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 5017              		.loc 2 964 0
 5018 076c 04C0B2E5 		ldr	ip, [r2, #4]!
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 5019              		.loc 2 963 0
 5020 0770 013083E2 		add	r3, r3, #1
 5021              	.LVL294:
 964:apps/rssi/main.c **** 					sum += pm_meas[i];
 5022              		.loc 2 964 0
 5023 0774 0C0080E0 		add	r0, r0, ip
 5024              	.LVL295:
 5025              	.L366:
 963:apps/rssi/main.c **** 				for (i = 0; i < pm_count; i++)
 5026              		.loc 2 963 0
 5027 0778 010053E1 		cmp	r3, r1
 5028 077c FAFFFFBA 		blt	.L370
 965:apps/rssi/main.c **** 				power = sum / pm_count;
 5029              		.loc 2 965 0
 5030 0780 FEFFFFEB 		bl	__divsi3
 5031              	.LVL296:
 5032 0784 08349FE5 		ldr	r3, .L416+140
 5033 0788 0000C3E5 		strb	r0, [r3, #0]
 5034              	.L369:
 967:apps/rssi/main.c **** 			if (power > max_power)
 5035              		.loc 2 967 0
 5036 078c 00349FE5 		ldr	r3, .L416+140
 5037 0790 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 5038 0794 FC339FE5 		ldr	r3, .L416+144
 5039 0798 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 5040 079c 020051E1 		cmp	r1, r2
 968:apps/rssi/main.c **** 				max_power = power;
 5041              		.loc 2 968 0
 5042 07a0 0020C335 		strccb	r2, [r3, #0]
 970:apps/rssi/main.c **** 			pm_max = (uplink) ? NUM_PM_UL : NUM_PM_DL;
 5043              		.loc 2 970 0
 5044 07a4 00005AE3 		cmp	sl, #0
 5045 07a8 58339FE5 		ldr	r3, .L416
 5046 07ac 02A0A003 		moveq	sl, #2
 5047 07b0 0AA0A013 		movne	sl, #10
 5048 07b4 70A083E5 		str	sl, [r3, #112]
 971:apps/rssi/main.c **** 			if (!tone_on)
 5049              		.loc 2 971 0
 5050 07b8 303094E5 		ldr	r3, [r4, #48]
 5051 07bc 000053E3 		cmp	r3, #0
 969:apps/rssi/main.c **** 			pm_count = 0;
 5052              		.loc 2 969 0
 5053 07c0 205084E5 		str	r5, [r4, #32]
 971:apps/rssi/main.c **** 			if (!tone_on)
 5054              		.loc 2 971 0
 5055 07c4 0E00001A 		bne	.L356
 972:apps/rssi/main.c **** 				refresh_display();
 5056              		.loc 2 972 0
 5057 07c8 FEFFFFEB 		bl	refresh_display
 5058 07cc 0C0000EA 		b	.L356
 5059              	.L364:
 5060              	.LBE428:
 977:apps/rssi/main.c **** 	if (pm_mode == PM_RANGE_RESULT) {
 5061              		.loc 2 977 0
 5062 07d0 03005AE3 		cmp	sl, #3
 5063 07d4 0A00001A 		bne	.L356
 978:apps/rssi/main.c **** 		pm_mode = PM_IDLE;
 5064              		.loc 2 978 0
 5065 07d8 245084E5 		str	r5, [r4, #36]
 979:apps/rssi/main.c **** 		refresh_display();
 5066              		.loc 2 979 0
 5067 07dc FEFFFFEB 		bl	refresh_display
 980:apps/rssi/main.c **** 		buzzer_volume(tone);
 5068              		.loc 2 980 0
 5069 07e0 1C00D4E5 		ldrb	r0, [r4, #28]	@ zero_extendqisi2
 5070 07e4 FEFFFFEB 		bl	buzzer_volume
 981:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5071              		.loc 2 981 0
 5072 07e8 1000A0E3 		mov	r0, #16
 5073 07ec FEFFFFEB 		bl	buzzer_note
 982:apps/rssi/main.c **** 		tone_time = jiffies;
 5074              		.loc 2 982 0
 5075 07f0 B0339FE5 		ldr	r3, .L416+160
 5076 07f4 002096E5 		ldr	r2, [r6, #0]
 5077 07f8 002083E5 		str	r2, [r3, #0]
 983:apps/rssi/main.c **** 		tone_on = 1;
 5078              		.loc 2 983 0
 5079 07fc 0130A0E3 		mov	r3, #1
 5080 0800 303084E5 		str	r3, [r4, #48]
 5081              	.L356:
 5082              	.LBE422:
 5083              	.LBE421:
 5084              	.LBB429:
 5085              	.LBB430:
1088:apps/rssi/main.c **** 	if (mode != MODE_SYNC)
 5086              		.loc 2 1088 0
 5087 0804 083094E5 		ldr	r3, [r4, #8]
 5088 0808 030053E3 		cmp	r3, #3
 5089 080c 8400001A 		bne	.L373
1092:apps/rssi/main.c **** 	if (sync_result) {
 5090              		.loc 2 1092 0
 5091 0810 283094E5 		ldr	r3, [r4, #40]
 5092 0814 000053E3 		cmp	r3, #0
 5093 0818 0B00000A 		beq	.L374
 5094              	.LBB431:
1095:apps/rssi/main.c **** 		sync_msg = sync_result;
 5095              		.loc 2 1095 0
 5096 081c E4A29FE5 		ldr	sl, .L416
1096:apps/rssi/main.c **** 		sync_result = NULL;
 5097              		.loc 2 1096 0
 5098 0820 285084E5 		str	r5, [r4, #40]
1095:apps/rssi/main.c **** 		sync_msg = sync_result;
 5099              		.loc 2 1095 0
 5100 0824 04308AE5 		str	r3, [sl, #4]
1093:apps/rssi/main.c **** 		uint16_t a = ul_arfcn;
 5101              		.loc 2 1093 0
 5102 0828 B891D4E1 		ldrh	r9, [r4, #24]
 5103              	.LVL297:
1097:apps/rssi/main.c **** 		refresh_display();
 5104              		.loc 2 1097 0
 5105 082c FEFFFFEB 		bl	refresh_display
1099:apps/rssi/main.c **** 		if (sync_msg[0] != 'o')
 5106              		.loc 2 1099 0
 5107 0830 04309AE5 		ldr	r3, [sl, #4]
 5108 0834 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5109 0838 6F0053E3 		cmp	r3, #111
 5110 083c 7800001A 		bne	.L373
1102:apps/rssi/main.c **** 		request_ul_levels(a);
 5111              		.loc 2 1102 0
 5112 0840 0900A0E1 		mov	r0, r9
 5113 0844 FEFFFFEB 		bl	request_ul_levels
 5114 0848 750000EA 		b	.L373
 5115              	.LVL298:
 5116              	.L374:
 5117              	.LBE431:
1107:apps/rssi/main.c **** 	if (tone_on)
 5118              		.loc 2 1107 0
 5119 084c 302094E5 		ldr	r2, [r4, #48]
 5120 0850 000052E3 		cmp	r2, #0
 5121 0854 7200001A 		bne	.L373
1111:apps/rssi/main.c **** 	if (!ul_new && !(si_new & 0x100))
 5122              		.loc 2 1111 0
 5123 0858 F0329FE5 		ldr	r3, .L416+72
 5124 085c B010D3E1 		ldrh	r1, [r3, #0]
 5125 0860 000051E3 		cmp	r1, #0
 5126 0864 0300001A 		bne	.L375
 5127 0868 BC32D4E1 		ldrh	r3, [r4, #44]
 5128 086c 010C13E3 		tst	r3, #256
 5129 0870 0700001A 		bne	.L400
 5130 0874 6A0000EA 		b	.L373
 5131              	.L375:
1116:apps/rssi/main.c **** 		ul_new = 0;
 5132              		.loc 2 1116 0
 5133 0878 B020C3E1 		strh	r2, [r3, #0]	@ movhi
1117:apps/rssi/main.c **** 		if (cursor < 0)
 5134              		.loc 2 1117 0
 5135 087c C0329FE5 		ldr	r3, .L416+60
 5136 0880 003093E5 		ldr	r3, [r3, #0]
 5137 0884 000053E3 		cmp	r3, #0
 5138 0888 650000AA 		bge	.L373
1118:apps/rssi/main.c **** 			refresh_display();
 5139              		.loc 2 1118 0
 5140 088c FEFFFFEB 		bl	refresh_display
 5141 0890 630000EA 		b	.L373
 5142              	.L400:
1123:apps/rssi/main.c **** 	switch (si_new & 0xff) {
 5143              		.loc 2 1123 0
 5144 0894 FF3003E2 		and	r3, r3, #255
 5145 0898 190053E3 		cmp	r3, #25
 5146 089c 0B00000A 		beq	.L380
 5147 08a0 040000CA 		bgt	.L384
 5148 08a4 020053E3 		cmp	r3, #2
 5149 08a8 1700000A 		beq	.L378
 5150 08ac 030053E3 		cmp	r3, #3
 5151 08b0 4900001A 		bne	.L377
 5152 08b4 1B0000EA 		b	.L414
 5153              	.L384:
 5154 08b8 1B0053E3 		cmp	r3, #27
 5155 08bc 1F00000A 		beq	.L382
 5156 08c0 090000BA 		blt	.L381
 5157 08c4 1C0053E3 		cmp	r3, #28
 5158 08c8 4300001A 		bne	.L377
 5159 08cc 3D0000EA 		b	.L415
 5160              	.L380:
 5161              	.LVL299:
1126:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si1->cell_channel_description,
 5162              		.loc 2 1126 0
 5163 08d0 0130A0E3 		mov	r3, #1
 5164 08d4 00308DE5 		str	r3, [sp, #0]
 5165 08d8 98029FE5 		ldr	r0, .L416+112
 5166 08dc C8129FE5 		ldr	r1, .L416+164
 5167 08e0 1020A0E3 		mov	r2, #16
 5168 08e4 CD3083E2 		add	r3, r3, #205
 5169 08e8 050000EA 		b	.L412
 5170              	.LVL300:
 5171              	.L381:
1132:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2->bcch_frequency_list,
 5172              		.loc 2 1132 0
 5173 08ec 0430A0E3 		mov	r3, #4
 5174 08f0 80029FE5 		ldr	r0, .L416+112
 5175 08f4 B4129FE5 		ldr	r1, .L416+168
 5176 08f8 00308DE5 		str	r3, [sp, #0]
 5177 08fc 1020A0E3 		mov	r2, #16
 5178 0900 CA3083E2 		add	r3, r3, #202
 5179              	.LVL301:
 5180              	.L412:
 5181 0904 FEFFFFEB 		bl	gsm48_decode_freq_list
 5182 0908 330000EA 		b	.L377
 5183              	.L378:
 5184              	.LVL302:
1138:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2bis->bcch_frequency_list,
 5185              		.loc 2 1138 0
 5186 090c 0830A0E3 		mov	r3, #8
 5187 0910 00308DE5 		str	r3, [sp, #0]
 5188 0914 5C029FE5 		ldr	r0, .L416+112
 5189 0918 94129FE5 		ldr	r1, .L416+172
 5190 091c 1020A0E3 		mov	r2, #16
 5191 0920 C63083E2 		add	r3, r3, #198
 5192 0924 F6FFFFEA 		b	.L412
 5193              	.LVL303:
 5194              	.L414:
1144:apps/rssi/main.c **** 		gsm48_decode_freq_list(freq, si2ter->ext_bcch_frequency_list,
 5195              		.loc 2 1144 0
 5196 0928 1020A0E3 		mov	r2, #16
 5197 092c 00208DE5 		str	r2, [sp, #0]
 5198 0930 40029FE5 		ldr	r0, .L416+112
 5199 0934 7C129FE5 		ldr	r1, .L416+176
 5200 0938 8E30A0E3 		mov	r3, #142
 5201 093c F0FFFFEA 		b	.L412
 5202              	.LVL304:
 5203              	.L382:
1150:apps/rssi/main.c **** 		gsm48_decode_lai(&si3->lai, &mcc, &mnc, &lac);
 5204              		.loc 2 1150 0
 5205 0940 24229FE5 		ldr	r2, .L416+100
 5206 0944 1C329FE5 		ldr	r3, .L416+96
 5207 0948 6C029FE5 		ldr	r0, .L416+180
 5208 094c 1C129FE5 		ldr	r1, .L416+104
 5209 0950 FEFFFFEB 		bl	gsm48_decode_lai
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
 5210              		.loc 2 1151 0
 5211 0954 0420D7E5 		ldrb	r2, [r7, #4]	@ zero_extendqisi2
 5212 0958 0330D7E5 		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5213 095c 023483E1 		orr	r3, r3, r2, asl #8
 5214              	.LVL305:
 5215              	.LBB432:
 5216              	.LBB433:
 5217              		.loc 4 51 0
 5218 0960 2324A0E1 		mov	r2, r3, lsr #8
 5219 0964 033482E1 		orr	r3, r2, r3, asl #8
 5220              	.LVL306:
 5221              	.LBE433:
 5222              	.LBE432:
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
 5223              		.loc 2 1152 0
 5224 0968 04A29FE5 		ldr	sl, .L416+108
1151:apps/rssi/main.c **** 		cell_id = ntohs(si3->cell_identity);
 5225              		.loc 2 1151 0
 5226 096c 4C229FE5 		ldr	r2, .L416+184
 5227 0970 B030C2E1 		strh	r3, [r2, #0]	@ movhi
1152:apps/rssi/main.c **** 		if (ccch_conf < 0) {
 5228              		.loc 2 1152 0
 5229 0974 00309AE5 		ldr	r3, [sl, #0]
 5230 0978 000053E3 		cmp	r3, #0
 5231 097c 160000AA 		bge	.L377
 5232              	.LBB434:
1153:apps/rssi/main.c **** 			struct msgb *msg =
 5233              		.loc 2 1153 0
 5234 0980 1000A0E3 		mov	r0, #16
 5235 0984 FEFFFFEB 		bl	l1ctl_msgb_alloc
1157:apps/rssi/main.c **** 					msgb_put(msg, sizeof(*req));
 5236              		.loc 2 1157 0
 5237 0988 0410A0E3 		mov	r1, #4
1153:apps/rssi/main.c **** 			struct msgb *msg =
 5238              		.loc 2 1153 0
 5239 098c 0090A0E1 		mov	r9, r0
 5240              	.LVL307:
1157:apps/rssi/main.c **** 					msgb_put(msg, sizeof(*req));
 5241              		.loc 2 1157 0
 5242 0990 FEFFFFEB 		bl	msgb_put
 5243              	.LVL308:
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
 5244              		.loc 2 1159 0
 5245 0994 0A10D7E5 		ldrb	r1, [r7, #10]	@ zero_extendqisi2
 5246 0998 071001E2 		and	r1, r1, #7
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
 5247              		.loc 2 1160 0
 5248 099c 010051E3 		cmp	r1, #1
 5249 09a0 0130A013 		movne	r3, #1
 5250 09a4 0230A003 		moveq	r3, #2
1159:apps/rssi/main.c **** 			ccch_conf = si3->control_channel_desc.ccch_conf;
 5251              		.loc 2 1159 0
 5252 09a8 00108AE5 		str	r1, [sl, #0]
1160:apps/rssi/main.c **** 			req->ccch_mode = (ccch_conf == 1)
 5253              		.loc 2 1160 0
 5254 09ac 0030C0E5 		strb	r3, [r0, #0]
1163:apps/rssi/main.c **** 			printf("ccch_mode=%d\n", ccch_conf);
 5255              		.loc 2 1163 0
 5256 09b0 0C029FE5 		ldr	r0, .L416+188
 5257              	.LVL309:
 5258 09b4 FEFFFFEB 		bl	printf
1165:apps/rssi/main.c **** 			l1a_l23_rx(SC_DLCI_L1A_L23, msg);
 5259              		.loc 2 1165 0
 5260 09b8 0500A0E3 		mov	r0, #5
 5261 09bc 0910A0E1 		mov	r1, r9
 5262 09c0 FEFFFFEB 		bl	l1a_l23_rx
 5263 09c4 040000EA 		b	.L377
 5264              	.LVL310:
 5265              	.L415:
 5266              	.LBE434:
1170:apps/rssi/main.c **** 		gsm48_decode_lai(&si4->lai, &mcc, &mnc, &lac);
 5267              		.loc 2 1170 0
 5268 09c8 F8019FE5 		ldr	r0, .L416+192
 5269 09cc 9C119FE5 		ldr	r1, .L416+104
 5270 09d0 94219FE5 		ldr	r2, .L416+100
 5271 09d4 8C319FE5 		ldr	r3, .L416+96
 5272 09d8 FEFFFFEB 		bl	gsm48_decode_lai
 5273              	.LVL311:
 5274              	.L377:
1174:apps/rssi/main.c **** 	if (cursor >= 0)
 5275              		.loc 2 1174 0
 5276 09dc 60319FE5 		ldr	r3, .L416+60
 5277 09e0 003093E5 		ldr	r3, [r3, #0]
 5278 09e4 000053E3 		cmp	r3, #0
1175:apps/rssi/main.c **** 		refresh_display();
 5279              		.loc 2 1175 0
 5280 09e8 FEFFFFAB 		blge	refresh_display
 5281              	.L386:
1178:apps/rssi/main.c **** 	buzzer_volume(tone);
 5282              		.loc 2 1178 0
 5283 09ec 1C00D4E5 		ldrb	r0, [r4, #28]	@ zero_extendqisi2
 5284 09f0 FEFFFFEB 		bl	buzzer_volume
1179:apps/rssi/main.c **** 	tone_time = jiffies;
 5285              		.loc 2 1179 0
 5286 09f4 002096E5 		ldr	r2, [r6, #0]
 5287 09f8 A8319FE5 		ldr	r3, .L416+160
 5288 09fc 002083E5 		str	r2, [r3, #0]
1180:apps/rssi/main.c **** 	tone_on = 1;
 5289              		.loc 2 1180 0
 5290 0a00 0130A0E3 		mov	r3, #1
 5291 0a04 303084E5 		str	r3, [r4, #48]
1181:apps/rssi/main.c **** 	if ((si_new & 0xff) == 0xff)
 5292              		.loc 2 1181 0
 5293 0a08 2C30D4E5 		ldrb	r3, [r4, #44]	@ zero_extendqisi2
 5294 0a0c FF0053E3 		cmp	r3, #255
1182:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_2));
 5295              		.loc 2 1182 0
 5296 0a10 1300A003 		moveq	r0, #19
1184:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5297              		.loc 2 1184 0
 5298 0a14 1000A013 		movne	r0, #16
 5299 0a18 FEFFFFEB 		bl	buzzer_note
1185:apps/rssi/main.c **** 	si_new = 0;
 5300              		.loc 2 1185 0
 5301 0a1c 0020A0E3 		mov	r2, #0	@ movhi
 5302 0a20 BC22C4E1 		strh	r2, [r4, #44]	@ movhi
 5303              	.L373:
 5304              	.LBE430:
 5305              	.LBE429:
 5306              	.LBB435:
 5307              	.LBB436:
1242:apps/rssi/main.c **** 	if (mode != MODE_RACH)
 5308              		.loc 2 1242 0 discriminator 1
 5309 0a24 081094E5 		ldr	r1, [r4, #8]
 5310 0a28 040051E3 		cmp	r1, #4
 5311 0a2c 1100001A 		bne	.L389
1245:apps/rssi/main.c **** 	if (assign == ASSIGN_NONE) {
 5312              		.loc 2 1245 0
 5313 0a30 58219FE5 		ldr	r2, .L416+136
 5314 0a34 003092E5 		ldr	r3, [r2, #0]
 5315 0a38 000053E3 		cmp	r3, #0
 5316 0a3c 0A00001A 		bne	.L390
 5317              	.LBB437:
1248:apps/rssi/main.c **** 		if (!rach)
 5318              		.loc 2 1248 0
 5319 0a40 00E094E5 		ldr	lr, [r4, #0]
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5320              		.loc 2 1246 0
 5321 0a44 40019FE5 		ldr	r0, .L416+132
1248:apps/rssi/main.c **** 		if (!rach)
 5322              		.loc 2 1248 0
 5323 0a48 00005EE3 		cmp	lr, #0
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5324              		.loc 2 1246 0
 5325 0a4c 00C096E5 		ldr	ip, [r6, #0]
 5326 0a50 000090E5 		ldr	r0, [r0, #0]
 5327              	.LVL312:
1248:apps/rssi/main.c **** 		if (!rach)
 5328              		.loc 2 1248 0
 5329 0a54 0700000A 		beq	.L389
1246:apps/rssi/main.c **** 		unsigned long elapsed = jiffies - rach_when;
 5330              		.loc 2 1246 0
 5331 0a58 0C0060E0 		rsb	r0, r0, ip
1250:apps/rssi/main.c **** 		if (elapsed < HZ * 2)
 5332              		.loc 2 1250 0
 5333 0a5c C70050E3 		cmp	r0, #199
 5334 0a60 0400009A 		bls	.L389
1252:apps/rssi/main.c **** 		assign = ASSIGN_TIMEOUT;
 5335              		.loc 2 1252 0
 5336 0a64 001082E5 		str	r1, [r2, #0]
1253:apps/rssi/main.c **** 		rach = 0;
 5337              		.loc 2 1253 0
 5338 0a68 003084E5 		str	r3, [r4, #0]
 5339              	.LVL313:
 5340              	.L390:
 5341              	.LBE437:
1256:apps/rssi/main.c **** 	refresh_display();
 5342              		.loc 2 1256 0
 5343 0a6c FEFFFFEB 		bl	refresh_display
1257:apps/rssi/main.c **** 	assign = ASSIGN_NONE;
 5344              		.loc 2 1257 0
 5345 0a70 18319FE5 		ldr	r3, .L416+136
 5346 0a74 005083E5 		str	r5, [r3, #0]
 5347              	.L389:
 5348              	.LBE436:
 5349              	.LBE435:
 5350              	.LBB438:
 5351              	.LBB439:
 884:apps/rssi/main.c **** 	unsigned long elapsed = jiffies - tone_time;
 5352              		.loc 2 884 0
 5353 0a78 28A19FE5 		ldr	sl, .L416+160
 5354 0a7c 002096E5 		ldr	r2, [r6, #0]
 5355 0a80 00309AE5 		ldr	r3, [sl, #0]
 5356 0a84 023063E0 		rsb	r3, r3, r2
 5357              	.LVL314:
 886:apps/rssi/main.c **** 	if (!tone_on) {
 5358              		.loc 2 886 0
 5359 0a88 302094E5 		ldr	r2, [r4, #48]
 5360 0a8c 000052E3 		cmp	r2, #0
 5361 0a90 1400001A 		bne	.L391
 887:apps/rssi/main.c **** 		if (!tone || mode != MODE_MAIN)
 5362              		.loc 2 887 0
 5363 0a94 1C0094E5 		ldr	r0, [r4, #28]
 5364 0a98 000050E3 		cmp	r0, #0
 5365 0a9c 89FDFF0A 		beq	.L399
 5366 0aa0 082094E5 		ldr	r2, [r4, #8]
 5367 0aa4 000052E3 		cmp	r2, #0
 5368 0aa8 86FDFF1A 		bne	.L399
 890:apps/rssi/main.c **** 		if (elapsed < (uint8_t)(63-power))
 5369              		.loc 2 890 0
 5370 0aac E0209FE5 		ldr	r2, .L416+140
 5371 0ab0 0020D2E5 		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 5372 0ab4 3F2062E2 		rsb	r2, r2, #63
 5373 0ab8 FF2002E2 		and	r2, r2, #255
 5374 0abc 020053E1 		cmp	r3, r2
 5375 0ac0 80FDFF3A 		bcc	.L399
 892:apps/rssi/main.c **** 		buzzer_volume(tone);
 5376              		.loc 2 892 0
 5377 0ac4 FF0000E2 		and	r0, r0, #255
 5378 0ac8 FEFFFFEB 		bl	buzzer_volume
 5379              	.LVL315:
 893:apps/rssi/main.c **** 		buzzer_note(NOTE(NOTE_C, OCTAVE_5));
 5380              		.loc 2 893 0
 5381 0acc 1000A0E3 		mov	r0, #16
 5382 0ad0 FEFFFFEB 		bl	buzzer_note
 894:apps/rssi/main.c **** 		tone_time = jiffies;
 5383              		.loc 2 894 0
 5384 0ad4 003096E5 		ldr	r3, [r6, #0]
 5385 0ad8 00308AE5 		str	r3, [sl, #0]
 895:apps/rssi/main.c **** 		tone_on = 1;
 5386              		.loc 2 895 0
 5387 0adc 0130A0E3 		mov	r3, #1
 5388 0ae0 303084E5 		str	r3, [r4, #48]
 5389 0ae4 77FDFFEA 		b	.L399
 5390              	.LVL316:
 5391              	.L391:
 899:apps/rssi/main.c **** 	if (elapsed >= TONE_JIFFIES) {
 5392              		.loc 2 899 0
 5393 0ae8 030053E3 		cmp	r3, #3
 5394 0aec 75FDFF9A 		bls	.L399
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 5395              		.loc 2 901 0
 5396 0af0 003096E5 		ldr	r3, [r6, #0]
 5397              	.LVL317:
 900:apps/rssi/main.c **** 		tone_on = 0;
 5398              		.loc 2 900 0
 5399 0af4 305084E5 		str	r5, [r4, #48]
 901:apps/rssi/main.c **** 		tone_time = jiffies;
 5400              		.loc 2 901 0
 5401 0af8 00308AE5 		str	r3, [sl, #0]
 902:apps/rssi/main.c **** 		buzzer_volume(0);
 5402              		.loc 2 902 0
 5403 0afc 0500A0E1 		mov	r0, r5
 5404 0b00 FEFFFFEB 		bl	buzzer_volume
 5405 0b04 6FFDFFEA 		b	.L399
 5406              	.L417:
 5407              		.align	2
 5408              	.L416:
 5409 0b08 00000000 		.word	.LANCHOR1
 5410 0b0c 34020000 		.word	.LC57
 5411 0b10 00000000 		.word	key_handler
 5412 0b14 00000000 		.word	console_rx_cb
 5413 0b18 00000000 		.word	l1a_l23_rx_cb
 5414 0b1c 00000000 		.word	l1a_l23_tx_cb
 5415 0b20 00000000 		.word	l1a_l23_tx
 5416 0b24 00000000 		.word	pm_spectrum
 5417 0b28 00000000 		.word	ul_max
 5418 0b2c 00000000 		.word	.LANCHOR0
 5419 0b30 00000000 		.word	jiffies
 5420 0b34 00000000 		.word	key_pressed_when
 5421 0b38 00000000 		.word	si_3
 5422 0b3c 00000000 		.word	key_pressed_delay
 5423 0b40 00000000 		.word	key_pressed_code
 5424 0b44 00000000 		.word	cursor
 5425 0b48 2A030000 		.word	810
 5426 0b4c 00000000 		.word	ul_levels
 5427 0b50 00000000 		.word	ul_new
 5428 0b54 00000000 		.word	si_1
 5429 0b58 00000000 		.word	si_2
 5430 0b5c 00000000 		.word	si_2bis
 5431 0b60 00000000 		.word	si_2ter
 5432 0b64 00000000 		.word	si_4
 5433 0b68 00000000 		.word	lac
 5434 0b6c 00000000 		.word	mnc
 5435 0b70 00000000 		.word	mcc
 5436 0b74 00000000 		.word	ccch_conf
 5437 0b78 00000000 		.word	freq
 5438 0b7c 00000000 		.word	nb_num
 5439 0b80 7F020000 		.word	.LC58
 5440 0b84 00000000 		.word	l1s
 5441 0b88 00000000 		.word	rach_ra
 5442 0b8c 00000000 		.word	rach_when
 5443 0b90 00000000 		.word	assign
 5444 0b94 00000000 		.word	power
 5445 0b98 00000000 		.word	max_power
 5446 0b9c 2A830000 		.word	33578
 5447 0ba0 00000000 		.word	band
 5448 0ba4 FCFFFFFF 		.word	pm_meas-4
 5449 0ba8 00000000 		.word	tone_time
 5450 0bac 03000000 		.word	si_1+3
 5451 0bb0 03000000 		.word	si_2+3
 5452 0bb4 03000000 		.word	si_2bis+3
 5453 0bb8 03000000 		.word	si_2ter+3
 5454 0bbc 05000000 		.word	si_3+5
 5455 0bc0 00000000 		.word	cell_id
 5456 0bc4 86020000 		.word	.LC59
 5457 0bc8 03000000 		.word	si_4+3
 5458              	.LBE439:
 5459              	.LBE438:
 5460              		.cfi_endproc
 5461              	.LFE143:
 5463              		.global	key_code
 5464              		.global	key_pressed
 5465              		.global	mode
 5466              		.global	pcs
 5467              		.global	uplink
 5468              		.global	max
 5469              		.global	sync_result
 5470              		.global	sync_msg
 5471              		.global	pm_mode
 5472              		.global	pm_count
 5473              		.global	pm_max
 5474              		.global	pm_scale
 5475              		.global	tone
 5476              		.global	tone_on
 5477              		.global	si_new
 5478              		.global	rach
 5479              		.global	hr
 5480              		.comm	key_pressed_code,4,4
 5481              		.comm	key_pressed_when,4,4
 5482              		.comm	key_pressed_delay,4,4
 5483              		.comm	last_mode,4,4
 5484              		.comm	power,1,1
 5485              		.comm	max_power,1,1
 5486              		.comm	input,5,4
 5487              		.comm	cursor,4,4
 5488              		.comm	band,4,4
 5489              		.comm	pm_meas,40,4
 5490              		.comm	pm_spectrum,1024,4
 5491              		.comm	tone_time,4,4
 5492              		.comm	bsic,1,1
 5493              		.comm	ul_levels,8,4
 5494              		.comm	ul_max,8,4
 5495              		.comm	si_1,23,4
 5496              		.comm	si_2,23,4
 5497              		.comm	si_2bis,23,4
 5498              		.comm	si_2ter,23,4
 5499              		.comm	si_3,23,4
 5500              		.comm	si_4,23,4
 5501              		.comm	ul_new,2,2
 5502              		.comm	mcc,2,2
 5503              		.comm	mnc,2,2
 5504              		.comm	lac,2,2
 5505              		.comm	cell_id,2,2
 5506              		.comm	ccch_conf,4,4
 5507              		.comm	nb_num,4,4
 5508              		.comm	freq,1024,4
 5509              		.comm	rach_ref,3,4
 5510              		.comm	rach_ra,1,1
 5511              		.comm	rach_when,4,4
 5512              		.comm	ta,1,1
 5513              		.comm	assign,4,4
 5514              		.section	.rodata.str1.1,"aMS",%progbits,1
 5515              	.LC0:
 5516 0000 64656C20 		.ascii	"del \000"
 5516      00
 5517              	.LC1:
 5518 0005 656E7465 		.ascii	"enter\000"
 5518      7200
 5519              	.LC2:
 5520 000b 6261636B 		.ascii	"back\000"
 5520      00
 5521              	.LC3:
 5522 0010 20202020 		.ascii	"     \000"
 5522      2000
 5523              	.LC4:
 5524 0016 554C00   		.ascii	"UL\000"
 5525              	.LC5:
 5526 0019 444C00   		.ascii	"DL\000"
 5527              	.LC6:
 5528 001c 50435300 		.ascii	"PCS\000"
 5529              	.LC7:
 5530 0020 44435300 		.ascii	"DCS\000"
 5531              	.LC8:
 5532 0024 4F736D6F 		.ascii	"Osmocom RSSI\000"
 5532      636F6D20 
 5532      52535349 
 5532      00
 5533              	.LC9:
 5534 0031 40484842 		.ascii	"@HHBC\000"
 5534      4300
 5535              	.LC10:
 5536 0037 40256325 		.ascii	"@%c%c%cC\000"
 5536      63256343 
 5536      00
 5537              	.LC11:
 5538 0040 25632563 		.ascii	"%c%cE%c%c\000"
 5538      45256325 
 5538      6300
 5539              	.LC12:
 5540 004a 52616368 		.ascii	"Rach sent...\000"
 5540      2073656E 
 5540      742E2E2E 
 5540      00
 5541              	.LC13:
 5542 0057 5441203D 		.ascii	"TA = %d\000"
 5542      20256400 
 5543              	.LC14:
 5544 005f 2825646D 		.ascii	"(%dm)\000"
 5544      2900
 5545              	.LC15:
 5546 0065 52656A65 		.ascii	"Rejected!\000"
 5546      63746564 
 5546      2100
 5547              	.LC16:
 5548 006f 54582064 		.ascii	"TX disabled\000"
 5548      69736162 
 5548      6C656400 
 5549              	.LC17:
 5550 007b 54696D65 		.ascii	"Timeout\000"
 5550      6F757400 
 5551              	.LC18:
 5552 0083 44656C61 		.ascii	"Delay:%ldms\000"
 5552      793A256C 
 5552      646D7300 
 5553              	.LC19:
 5554 008f 25303264 		.ascii	"%02d\000"
 5554      00
 5555              	.LC20:
 5556 0094 6D617800 		.ascii	"max\000"
 5557              	.LC21:
 5558 0098 25346450 		.ascii	"%4dP\000"
 5558      00
 5559              	.LC22:
 5560 009d 25346444 		.ascii	"%4dD\000"
 5560      00
 5561              	.LC23:
 5562 00a2 25346420 		.ascii	"%4d \000"
 5562      00
 5563              	.LC24:
 5564 00a7 42534943 		.ascii	"BSIC%d/%d %4d\000"
 5564      25642F25 
 5564      64202534 
 5564      6400
 5565              	.LC25:
 5566 00b5 53796E63 		.ascii	"Sync %s\000"
 5566      20257300 
 5567              	.LC26:
 5568 00bd 4D434320 		.ascii	"MCC MNC LAC \000"
 5568      4D4E4320 
 5568      4C414320 
 5568      00
 5569              	.LC27:
 5570 00ca 25337820 		.ascii	"%3x %02x  %04x\000"
 5570      25303278 
 5570      20202530 
 5570      347800
 5571              	.LC28:
 5572 00d9 25337820 		.ascii	"%3x %03x %04x\000"
 5572      25303378 
 5572      20253034 
 5572      7800
 5573              	.LC29:
 5574 00e7 2D2D2D20 		.ascii	"--- --- ----\000"
 5574      2D2D2D20 
 5574      2D2D2D2D 
 5574      00
 5575              	.LC30:
 5576 00f4 63656C6C 		.ascii	"cell id:%04x\000"
 5576      2069643A 
 5576      25303478 
 5576      00
 5577              	.LC31:
 5578 0101 63656C6C 		.ascii	"cell id:----\000"
 5578      2069643A 
 5578      2D2D2D2D 
 5578      00
 5579              	.LC32:
 5580 010e 533A2025 		.ascii	"S: %4d\000"
 5580      346400
 5581              	.LC33:
 5582 0115 20253464 		.ascii	" %4d\000"
 5582      00
 5583              	.LC34:
 5584 011a 4E3A2025 		.ascii	"N: %4d\000"
 5584      346400
 5585              	.LC35:
 5586 0121 41524643 		.ascii	"ARFCN %s\000"
 5586      4E202573 
 5586      00
 5587              	.LC36:
 5588 012a 41524643 		.ascii	"ARFCN %dPCS\000"
 5588      4E202564 
 5588      50435300 
 5589              	.LC37:
 5590 0136 41524643 		.ascii	"ARFCN %dDCS\000"
 5590      4E202564 
 5590      44435300 
 5591              	.LC38:
 5592 0142 41524643 		.ascii	"ARFCN %d\000"
 5592      4E202564 
 5592      00
 5593              	.LC39:
 5594 014b 2000     		.ascii	" \000"
 5595              	.LC40:
 5596 014d 46726571 		.ascii	"Freq. %d.%d\000"
 5596      2E202564 
 5596      2E256400 
 5597              	.LC41:
 5598 0159 506F7765 		.ascii	"Power %d\000"
 5598      72202564 
 5598      00
 5599              	.LC42:
 5600 0162 20202025 		.ascii	"   %4d\000"
 5600      346400
 5601              	.LC43:
 5602 0169 78256400 		.ascii	"x%d\000"
 5603              	.LC44:
 5604 016d 25732020 		.ascii	"%s   %s\000"
 5604      20257300 
 5605              	.LC45:
 5606 0175 25732020 		.ascii	"%s      %s\000"
 5606      20202020 
 5606      257300
 5607              	.LC46:
 5608 0180 25732020 		.ascii	"%s        \000"
 5608      20202020 
 5608      202000
 5609              	.LC47:
 5610 018b 25732020 		.ascii	"%s       %s\000"
 5610      20202020 
 5610      20257300 
 5611              	.LC48:
 5612 0197 256400   		.ascii	"%d\000"
 5613              	.LC49:
 5614 019a 6D736762 		.ascii	"msgb(%p): Not enough tailroom msgb_push (%u < %u)\012"
 5614      28257029 
 5614      3A204E6F 
 5614      7420656E 
 5614      6F756768 
 5615 01cc 00       		.ascii	"\000"
 5616              	.LC50:
 5617 01cd 6C31615F 		.ascii	"l1a_l23_rx_cb (DLCI %d): \000"
 5617      6C32335F 
 5617      72785F63 
 5617      62202844 
 5617      4C434920 
 5618              	.LC51:
 5619 01e7 25303278 		.ascii	"%02x \000"
 5619      2000
 5620              	.LC52:
 5621 01ed 0A00     		.ascii	"\012\000"
 5622              	.LC53:
 5623 01ef 4D657373 		.ascii	"Message for unknown DLCI %u\012\000"
 5623      61676520 
 5623      666F7220 
 5623      756E6B6E 
 5623      6F776E20 
 5624              	.LC54:
 5625 020c 4D657373 		.ascii	"Message on console DLCI: '%s'\012\000"
 5625      61676520 
 5625      6F6E2063 
 5625      6F6E736F 
 5625      6C652044 
 5626              	.LC55:
 5627 022b 6F6B00   		.ascii	"ok\000"
 5628              	.LC56:
 5629 022e 6572726F 		.ascii	"error\000"
 5629      7200
 5630              	.LC57:
 5631 0234 0A0A4F73 		.ascii	"\012\012OsmocomBB Monitor Tool (revision osmocon_v0"
 5631      6D6F636F 
 5631      6D424220 
 5631      4D6F6E69 
 5631      746F7220 
 5632 0261 2E302E30 		.ascii	".0.0-1754-gfc20a37-modified)\012\000"
 5632      2D313735 
 5632      342D6766 
 5632      63323061 
 5632      33372D6D 
 5633              	.LC58:
 5634 027f 74727969 		.ascii	"trying\000"
 5634      6E6700
 5635              	.LC59:
 5636 0286 63636368 		.ascii	"ccch_mode=%d\012\000"
 5636      5F6D6F64 
 5636      653D2564 
 5636      0A00
 5637              	.LC60:
 5638 0294 00       		.ascii	"\000"
 5639              	.LC61:
 5640 0295 3D3D3D3D 		.ascii	"==================================================="
 5640      3D3D3D3D 
 5640      3D3D3D3D 
 5640      3D3D3D3D 
 5640      3D3D3D3D 
 5641 02c8 3D3D3D3D 		.ascii	"===================\012\000"
 5641      3D3D3D3D 
 5641      3D3D3D3D 
 5641      3D3D3D3D 
 5641      3D3D3D0A 
 5642              		.data
 5643              		.align	2
 5644              		.set	.LANCHOR1,. + 0
 5647              	key_code:
 5648 0000 FF000000 		.word	255
 5651              	sync_msg:
 5652 0004 94020000 		.word	.LC60
 5655              	pm_scale:
 5656 0008 01000000 		.word	1
 5659              	bands:
 5660 000c 80000000 		.word	128
 5661 0010 FB000000 		.word	251
 5662 0014 7C000000 		.word	124
 5663 0018 00020000 		.word	512
 5664 001c 32200000 		.word	8242
 5665 0020 F4210000 		.word	8692
 5666 0024 BB030000 		.word	955
 5667 0028 7C000000 		.word	124
 5668 002c 75030000 		.word	885
 5669 0030 80000000 		.word	128
 5670 0034 3A220000 		.word	8762
 5671 0038 FC230000 		.word	9212
 5672 003c 00020000 		.word	512
 5673 0040 75030000 		.word	885
 5674 0044 FB000000 		.word	251
 5675 0048 BB030000 		.word	955
 5676 004c CE420000 		.word	17102
 5677 0050 84460000 		.word	18052
 5678 0054 00000000 		.word	0
 5679 0058 00000000 		.word	0
 5680 005c 00000000 		.word	0
 5681 0060 00000000 		.word	0
 5682 0064 00000000 		.word	0
 5683 0068 00000000 		.word	0
 5686              	hr:
 5687 006c 95020000 		.word	.LC61
 5690              	pm_max:
 5691 0070 02000000 		.word	2
 5692              		.bss
 5693              		.align	2
 5694              		.set	.LANCHOR0,. + 0
 5697              	rach:
 5698 0000 00000000 		.space	4
 5701              	key_pressed:
 5702 0004 00000000 		.space	4
 5705              	mode:
 5706 0008 00000000 		.space	4
 5709              	uplink:
 5710 000c 00000000 		.space	4
 5713              	max:
 5714 0010 00000000 		.space	4
 5717              	pcs:
 5718 0014 00000000 		.space	4
 5721              	ul_arfcn:
 5722 0018 0000     		.space	2
 5725              	arfcn:
 5726 001a 0000     		.space	2
 5729              	tone:
 5730 001c 00000000 		.space	4
 5733              	pm_count:
 5734 0020 00000000 		.space	4
 5737              	pm_mode:
 5738 0024 00000000 		.space	4
 5741              	sync_result:
 5742 0028 00000000 		.space	4
 5745              	si_new:
 5746 002c 0000     		.space	2
 5747 002e 0000     		.space	2
 5750              	tone_on:
 5751 0030 00000000 		.space	4
 5752              		.text
 5753              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBl22up.s:12     .text.fb_boxto:0000000000000000 $a
     /tmp/ccBl22up.s:14     .text.fb_boxto:0000000000000000 fb_boxto
     /tmp/ccBl22up.s:39     .text.fb_boxto:0000000000000018 $d
     /tmp/ccBl22up.s:44     .text.fb_putstr:0000000000000000 $a
     /tmp/ccBl22up.s:46     .text.fb_putstr:0000000000000000 fb_putstr
     /tmp/ccBl22up.s:70     .text.fb_putstr:0000000000000018 $d
     /tmp/ccBl22up.s:75     .text.fb_gotoxy:0000000000000000 $a
     /tmp/ccBl22up.s:77     .text.fb_gotoxy:0000000000000000 fb_gotoxy
     /tmp/ccBl22up.s:96     .text.fb_gotoxy:0000000000000014 $d
     /tmp/ccBl22up.s:101    .text.print_display:0000000000000000 $a
     /tmp/ccBl22up.s:103    .text.print_display:0000000000000000 print_display
     /tmp/ccBl22up.s:160    .text.print_display:000000000000006c $d
     /tmp/ccBl22up.s:165    .text.gsm48_match_ra:0000000000000000 $a
     /tmp/ccBl22up.s:167    .text.gsm48_match_ra:0000000000000000 gsm48_match_ra
     /tmp/ccBl22up.s:249    .text.gsm48_match_ra:000000000000009c $d
                            *COM*:0000000000000001 rach_ra
                            *COM*:0000000000000003 rach_ref
     /tmp/ccBl22up.s:256    .text.key_handler:0000000000000000 $a
     /tmp/ccBl22up.s:258    .text.key_handler:0000000000000000 key_handler
     /tmp/ccBl22up.s:301    .text.key_handler:0000000000000058 $d
                            *COM*:0000000000000004 key_pressed_when
                            *COM*:0000000000000004 key_pressed_code
                            *COM*:0000000000000004 key_pressed_delay
     /tmp/ccBl22up.s:314    .text.refresh_display:0000000000000000 $a
     /tmp/ccBl22up.s:316    .text.refresh_display:0000000000000000 refresh_display
     /tmp/ccBl22up.s:621    .text.refresh_display:000000000000022c $d
     /tmp/ccBl22up.s:628    .text.refresh_display:0000000000000240 $a
     /tmp/ccBl22up.s:2135   .text.refresh_display:0000000000000fd8 $d
                            *COM*:0000000000000004 cursor
                            *COM*:0000000000000001 power
                            *COM*:0000000000000004 rach_when
                            *COM*:0000000000000004 assign
                            *COM*:0000000000000001 ta
                            *COM*:0000000000000008 ul_max
                            *COM*:0000000000000008 ul_levels
                            *COM*:0000000000000001 bsic
                            *COM*:0000000000000017 si_1
                            *COM*:0000000000000017 si_2
                            *COM*:0000000000000017 si_2bis
                            *COM*:0000000000000017 si_2ter
                            *COM*:0000000000000017 si_3
                            *COM*:0000000000000017 si_4
                            *COM*:0000000000000002 mcc
                            *COM*:0000000000000002 mnc
                            *COM*:0000000000000002 lac
                            *COM*:0000000000000002 cell_id
                            *COM*:0000000000000400 freq
                            *COM*:0000000000000004 nb_num
                            *COM*:0000000000000005 input
                            *COM*:0000000000000004 band
                            *COM*:0000000000000001 max_power
                            *COM*:0000000000000400 pm_spectrum
     /tmp/ccBl22up.s:2224   .text.refresh_display:0000000000001134 $a
     /tmp/ccBl22up.s:2347   .text.inc_dec_arfcn:0000000000000000 $a
     /tmp/ccBl22up.s:2349   .text.inc_dec_arfcn:0000000000000000 inc_dec_arfcn
     /tmp/ccBl22up.s:2537   .text.inc_dec_arfcn:000000000000016c $d
     /tmp/ccBl22up.s:2545   .text.tone_inc_dec:0000000000000000 $a
     /tmp/ccBl22up.s:2547   .text.tone_inc_dec:0000000000000000 tone_inc_dec
     /tmp/ccBl22up.s:2584   .text.tone_inc_dec:0000000000000038 $d
     /tmp/ccBl22up.s:2589   .text.inc_dec_neighbour:0000000000000000 $a
     /tmp/ccBl22up.s:2591   .text.inc_dec_neighbour:0000000000000000 inc_dec_neighbour
     /tmp/ccBl22up.s:2661   .text.inc_dec_neighbour:0000000000000088 $d
     /tmp/ccBl22up.s:2668   .text.inc_dec_spectrum:0000000000000000 $a
     /tmp/ccBl22up.s:2670   .text.inc_dec_spectrum:0000000000000000 inc_dec_spectrum
     /tmp/ccBl22up.s:2723   .text.inc_dec_spectrum:0000000000000054 $d
     /tmp/ccBl22up.s:2728   .text.exit_arfcn:0000000000000000 $a
     /tmp/ccBl22up.s:2730   .text.exit_arfcn:0000000000000000 exit_arfcn
     /tmp/ccBl22up.s:2748   .text.exit_arfcn:0000000000000014 $d
                            *COM*:0000000000000004 last_mode
     /tmp/ccBl22up.s:2754   .text.enter_arfcn:0000000000000000 $a
     /tmp/ccBl22up.s:2756   .text.enter_arfcn:0000000000000000 enter_arfcn
     /tmp/ccBl22up.s:2942   .text.enter_arfcn:0000000000000174 $d
     /tmp/ccBl22up.s:2952   .text.msgb_put:0000000000000000 $a
     /tmp/ccBl22up.s:2954   .text.msgb_put:0000000000000000 msgb_put
     /tmp/ccBl22up.s:3019   .text.msgb_put:0000000000000054 $d
     /tmp/ccBl22up.s:3024   .text.request_ul_levels:0000000000000000 $a
     /tmp/ccBl22up.s:3026   .text.request_ul_levels:0000000000000000 request_ul_levels
     /tmp/ccBl22up.s:3122   .text.request_ul_levels:00000000000000b0 $d
     /tmp/ccBl22up.s:3128   .text.inc_dec_ul_arfcn:0000000000000000 $a
     /tmp/ccBl22up.s:3130   .text.inc_dec_ul_arfcn:0000000000000000 inc_dec_ul_arfcn
     /tmp/ccBl22up.s:3226   .text.inc_dec_ul_arfcn:00000000000000b8 $d
     /tmp/ccBl22up.s:3232   .text.toggle_up_down:0000000000000000 $a
     /tmp/ccBl22up.s:3234   .text.toggle_up_down:0000000000000000 toggle_up_down
     /tmp/ccBl22up.s:3271   .text.toggle_up_down:0000000000000044 $d
     /tmp/ccBl22up.s:3277   .text.exit_rach:0000000000000000 $a
     /tmp/ccBl22up.s:3279   .text.exit_rach:0000000000000000 exit_rach
     /tmp/ccBl22up.s:3309   .text.exit_rach:0000000000000028 $d
     /tmp/ccBl22up.s:3314   .text.exit_sync:0000000000000000 $a
     /tmp/ccBl22up.s:3316   .text.exit_sync:0000000000000000 exit_sync
     /tmp/ccBl22up.s:3343   .text.exit_sync:0000000000000024 $d
     /tmp/ccBl22up.s:3348   .text.toggle_spectrum:0000000000000000 $a
     /tmp/ccBl22up.s:3350   .text.toggle_spectrum:0000000000000000 toggle_spectrum
     /tmp/ccBl22up.s:3396   .text.toggle_spectrum:000000000000004c $d
     /tmp/ccBl22up.s:3401   .text.l1a_l23_rx_cb:0000000000000000 $a
     /tmp/ccBl22up.s:3403   .text.l1a_l23_rx_cb:0000000000000000 l1a_l23_rx_cb
     /tmp/ccBl22up.s:3452   .text.l1a_l23_rx_cb:0000000000000048 $d
     /tmp/ccBl22up.s:3459   .text.console_rx_cb:0000000000000000 $a
     /tmp/ccBl22up.s:3461   .text.console_rx_cb:0000000000000000 console_rx_cb
     /tmp/ccBl22up.s:3503   .text.console_rx_cb:0000000000000038 $d
     /tmp/ccBl22up.s:3509   .text.l1a_l23_tx:0000000000000000 $a
     /tmp/ccBl22up.s:3511   .text.l1a_l23_tx:0000000000000000 l1a_l23_tx
     /tmp/ccBl22up.s:4082   .text.l1a_l23_tx:000000000000046c $d
                            *COM*:0000000000000028 pm_meas
                            *COM*:0000000000000002 ul_new
     /tmp/ccBl22up.s:4106   .text.gsm48_decode_lai:0000000000000000 $a
     /tmp/ccBl22up.s:4109   .text.gsm48_decode_lai:0000000000000000 gsm48_decode_lai
     /tmp/ccBl22up.s:4166   .text.main:0000000000000000 $a
     /tmp/ccBl22up.s:4169   .text.main:0000000000000000 main
     /tmp/ccBl22up.s:4334   .text.main:0000000000000148 $d
     /tmp/ccBl22up.s:4357   .text.main:000000000000019c $a
     /tmp/ccBl22up.s:5409   .text.main:0000000000000b08 $d
                            *COM*:0000000000000004 ccch_conf
                            *COM*:0000000000000004 tone_time
     /tmp/ccBl22up.s:5647   .data:0000000000000000 key_code
     /tmp/ccBl22up.s:5701   .bss:0000000000000004 key_pressed
     /tmp/ccBl22up.s:5705   .bss:0000000000000008 mode
     /tmp/ccBl22up.s:5717   .bss:0000000000000014 pcs
     /tmp/ccBl22up.s:5709   .bss:000000000000000c uplink
     /tmp/ccBl22up.s:5713   .bss:0000000000000010 max
     /tmp/ccBl22up.s:5741   .bss:0000000000000028 sync_result
     /tmp/ccBl22up.s:5651   .data:0000000000000004 sync_msg
     /tmp/ccBl22up.s:5737   .bss:0000000000000024 pm_mode
     /tmp/ccBl22up.s:5733   .bss:0000000000000020 pm_count
     /tmp/ccBl22up.s:5690   .data:0000000000000070 pm_max
     /tmp/ccBl22up.s:5655   .data:0000000000000008 pm_scale
     /tmp/ccBl22up.s:5729   .bss:000000000000001c tone
     /tmp/ccBl22up.s:5750   .bss:0000000000000030 tone_on
     /tmp/ccBl22up.s:5745   .bss:000000000000002c si_new
     /tmp/ccBl22up.s:5697   .bss:0000000000000000 rach
     /tmp/ccBl22up.s:5686   .data:000000000000006c hr
     /tmp/ccBl22up.s:5643   .data:0000000000000000 $d
     /tmp/ccBl22up.s:5659   .data:000000000000000c bands
     /tmp/ccBl22up.s:5693   .bss:0000000000000000 $d
     /tmp/ccBl22up.s:5721   .bss:0000000000000018 ul_arfcn
     /tmp/ccBl22up.s:5725   .bss:000000000000001a arfcn
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
framebuffer
jiffies
__udivsi3
__divsi3
__modsi3
sprintf
battery_info
osmo_panic
l1ctl_msgb_alloc
l1a_l23_rx
l1s_reset
l1s_reset_hw
printf
puts
msgb_free
rsl_dec_chan_nr
memcpy
sercomm_sendmsg
gsm_fn2gsmtime
l1s
board_init
dump_dev_id
calypso_clk_dump
keypad_set_handler
sercomm_register_rx_cb
layer1_init
tpu_frame_irq_en
buzzer_mode_pwt
buzzer_volume
memset
l1a_compl_execute
osmo_timers_update
l1a_l23_handler
buzzer_note
gsm48_decode_freq_list
l1a_l23_tx_cb
