   1              		.file	"vsprintf.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.__toupper,"ax",%progbits
  12              		.align	2
  14              	__toupper:
  15              	.LFB1:
  16              		.file 1 "include/ctype.h"
   1:include/ctype.h **** #ifndef _LINUX_CTYPE_H
   2:include/ctype.h **** #define _LINUX_CTYPE_H
   3:include/ctype.h **** 
   4:include/ctype.h **** /*
   5:include/ctype.h ****  * NOTE! This ctype does not handle EOF like the standard C
   6:include/ctype.h ****  * library is required to.
   7:include/ctype.h ****  */
   8:include/ctype.h **** 
   9:include/ctype.h **** #define _U	0x01	/* upper */
  10:include/ctype.h **** #define _L	0x02	/* lower */
  11:include/ctype.h **** #define _D	0x04	/* digit */
  12:include/ctype.h **** #define _C	0x08	/* cntrl */
  13:include/ctype.h **** #define _P	0x10	/* punct */
  14:include/ctype.h **** #define _S	0x20	/* white space (space/lf/tab) */
  15:include/ctype.h **** #define _X	0x40	/* hex digit */
  16:include/ctype.h **** #define _SP	0x80	/* hard space (0x20) */
  17:include/ctype.h **** 
  18:include/ctype.h **** extern unsigned char _ctype[];
  19:include/ctype.h **** 
  20:include/ctype.h **** #define __ismask(x) (_ctype[(int)(unsigned char)(x)])
  21:include/ctype.h **** 
  22:include/ctype.h **** #define isalnum(c)	((__ismask(c)&(_U|_L|_D)) != 0)
  23:include/ctype.h **** #define isalpha(c)	((__ismask(c)&(_U|_L)) != 0)
  24:include/ctype.h **** #define iscntrl(c)	((__ismask(c)&(_C)) != 0)
  25:include/ctype.h **** #define isdigit(c)	((__ismask(c)&(_D)) != 0)
  26:include/ctype.h **** #define isgraph(c)	((__ismask(c)&(_P|_U|_L|_D)) != 0)
  27:include/ctype.h **** #define islower(c)	((__ismask(c)&(_L)) != 0)
  28:include/ctype.h **** #define isprint(c)	((__ismask(c)&(_P|_U|_L|_D|_SP)) != 0)
  29:include/ctype.h **** #define ispunct(c)	((__ismask(c)&(_P)) != 0)
  30:include/ctype.h **** #define isspace(c)	((__ismask(c)&(_S)) != 0)
  31:include/ctype.h **** #define isupper(c)	((__ismask(c)&(_U)) != 0)
  32:include/ctype.h **** #define isxdigit(c)	((__ismask(c)&(_D|_X)) != 0)
  33:include/ctype.h **** 
  34:include/ctype.h **** #define isascii(c) (((unsigned char)(c))<=0x7f)
  35:include/ctype.h **** #define toascii(c) (((unsigned char)(c))&0x7f)
  36:include/ctype.h **** 
  37:include/ctype.h **** static inline unsigned char __tolower(unsigned char c)
  38:include/ctype.h **** {
  39:include/ctype.h **** 	if (isupper(c))
  40:include/ctype.h **** 		c -= 'A'-'a';
  41:include/ctype.h **** 	return c;
  42:include/ctype.h **** }
  43:include/ctype.h **** 
  44:include/ctype.h **** static inline unsigned char __toupper(unsigned char c)
  45:include/ctype.h **** {
  17              		.loc 1 45 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
  46:include/ctype.h **** 	if (islower(c))
  23              		.loc 1 46 0
  24 0000 10309FE5 		ldr	r3, .L3
  25 0004 0030D3E7 		ldrb	r3, [r3, r0]	@ zero_extendqisi2
  26 0008 020013E3 		tst	r3, #2
  47:include/ctype.h **** 		c -= 'a'-'A';
  27              		.loc 1 47 0
  28 000c 20004012 		subne	r0, r0, #32
  29              	.LVL1:
  30 0010 FF000012 		andne	r0, r0, #255
  31              	.LVL2:
  48:include/ctype.h **** 	return c;
  49:include/ctype.h **** }
  32              		.loc 1 49 0
  33 0014 1EFF2FE1 		bx	lr
  34              	.L4:
  35              		.align	2
  36              	.L3:
  37 0018 00000000 		.word	_ctype
  38              		.cfi_endproc
  39              	.LFE1:
  41              		.section	.text.skip_atoi,"ax",%progbits
  42              		.align	2
  44              	skip_atoi:
  45              	.LFB6:
  46              		.file 2 "lib/vsprintf.c"
   1:lib/vsprintf.c **** /*
   2:lib/vsprintf.c ****  *  linux/lib/vsprintf.c
   3:lib/vsprintf.c ****  *
   4:lib/vsprintf.c ****  *  Copyright (C) 1991, 1992  Linus Torvalds
   5:lib/vsprintf.c ****  */
   6:lib/vsprintf.c **** 
   7:lib/vsprintf.c **** /* vsprintf.c -- Lars Wirzenius & Linus Torvalds. */
   8:lib/vsprintf.c **** /*
   9:lib/vsprintf.c ****  * Wirzenius wrote this portably, Torvalds fucked it up :-)
  10:lib/vsprintf.c ****  */
  11:lib/vsprintf.c **** 
  12:lib/vsprintf.c **** /* 
  13:lib/vsprintf.c ****  * Fri Jul 13 2001 Crutcher Dunnavant <crutcher+kernel@datastacks.com>
  14:lib/vsprintf.c ****  * - changed to provide snprintf and vsnprintf functions
  15:lib/vsprintf.c ****  * So Feb  1 16:51:32 CET 2004 Juergen Quade <quade@hsnr.de>
  16:lib/vsprintf.c ****  * - scnprintf and vscnprintf
  17:lib/vsprintf.c ****  */
  18:lib/vsprintf.c **** 
  19:lib/vsprintf.c **** #include <stdio.h>
  20:lib/vsprintf.c **** #include <limits.h>
  21:lib/vsprintf.c **** #include <stdarg.h>
  22:lib/vsprintf.c **** #include <sys/types.h>
  23:lib/vsprintf.c **** #include <string.h>
  24:lib/vsprintf.c **** #include <ctype.h>
  25:lib/vsprintf.c **** 
  26:lib/vsprintf.c **** #include <asm/div64.h>
  27:lib/vsprintf.c **** 
  28:lib/vsprintf.c **** /**
  29:lib/vsprintf.c ****  * strtoul - convert a string to an unsigned long
  30:lib/vsprintf.c ****  * @cp: The start of the string
  31:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  32:lib/vsprintf.c ****  * @base: The number base to use
  33:lib/vsprintf.c ****  */
  34:lib/vsprintf.c **** unsigned long strtoul(const char *cp,char **endp,unsigned int base)
  35:lib/vsprintf.c **** {
  36:lib/vsprintf.c **** 	unsigned long result = 0,value;
  37:lib/vsprintf.c **** 
  38:lib/vsprintf.c **** 	if (!base) {
  39:lib/vsprintf.c **** 		base = 10;
  40:lib/vsprintf.c **** 		if (*cp == '0') {
  41:lib/vsprintf.c **** 			base = 8;
  42:lib/vsprintf.c **** 			cp++;
  43:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
  44:lib/vsprintf.c **** 				cp++;
  45:lib/vsprintf.c **** 				base = 16;
  46:lib/vsprintf.c **** 			}
  47:lib/vsprintf.c **** 		}
  48:lib/vsprintf.c **** 	} else if (base == 16) {
  49:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
  50:lib/vsprintf.c **** 			cp += 2;
  51:lib/vsprintf.c **** 	}
  52:lib/vsprintf.c **** 	while (isxdigit(*cp) &&
  53:lib/vsprintf.c **** 	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
  54:lib/vsprintf.c **** 		result = result*base + value;
  55:lib/vsprintf.c **** 		cp++;
  56:lib/vsprintf.c **** 	}
  57:lib/vsprintf.c **** 	if (endp)
  58:lib/vsprintf.c **** 		*endp = (char *)cp;
  59:lib/vsprintf.c **** 	return result;
  60:lib/vsprintf.c **** }
  61:lib/vsprintf.c **** 
  62:lib/vsprintf.c **** 
  63:lib/vsprintf.c **** /**
  64:lib/vsprintf.c ****  * strtol - convert a string to a signed long
  65:lib/vsprintf.c ****  * @cp: The start of the string
  66:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  67:lib/vsprintf.c ****  * @base: The number base to use
  68:lib/vsprintf.c ****  */
  69:lib/vsprintf.c **** long strtol(const char *cp,char **endp,unsigned int base)
  70:lib/vsprintf.c **** {
  71:lib/vsprintf.c **** 	if(*cp=='-')
  72:lib/vsprintf.c **** 		return -strtoul(cp+1,endp,base);
  73:lib/vsprintf.c **** 	return strtoul(cp,endp,base);
  74:lib/vsprintf.c **** }
  75:lib/vsprintf.c **** 
  76:lib/vsprintf.c **** 
  77:lib/vsprintf.c **** /**
  78:lib/vsprintf.c ****  * strtoull - convert a string to an unsigned long long
  79:lib/vsprintf.c ****  * @cp: The start of the string
  80:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
  81:lib/vsprintf.c ****  * @base: The number base to use
  82:lib/vsprintf.c ****  */
  83:lib/vsprintf.c **** unsigned long long strtoull(const char *cp,char **endp,unsigned int base)
  84:lib/vsprintf.c **** {
  85:lib/vsprintf.c **** 	unsigned long long result = 0,value;
  86:lib/vsprintf.c **** 
  87:lib/vsprintf.c **** 	if (!base) {
  88:lib/vsprintf.c **** 		base = 10;
  89:lib/vsprintf.c **** 		if (*cp == '0') {
  90:lib/vsprintf.c **** 			base = 8;
  91:lib/vsprintf.c **** 			cp++;
  92:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
  93:lib/vsprintf.c **** 				cp++;
  94:lib/vsprintf.c **** 				base = 16;
  95:lib/vsprintf.c **** 			}
  96:lib/vsprintf.c **** 		}
  97:lib/vsprintf.c **** 	} else if (base == 16) {
  98:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
  99:lib/vsprintf.c **** 			cp += 2;
 100:lib/vsprintf.c **** 	}
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 102:lib/vsprintf.c **** 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
 103:lib/vsprintf.c **** 		result = result*base + value;
 104:lib/vsprintf.c **** 		cp++;
 105:lib/vsprintf.c **** 	}
 106:lib/vsprintf.c **** 	if (endp)
 107:lib/vsprintf.c **** 		*endp = (char *)cp;
 108:lib/vsprintf.c **** 	return result;
 109:lib/vsprintf.c **** }
 110:lib/vsprintf.c **** 
 111:lib/vsprintf.c **** 
 112:lib/vsprintf.c **** /**
 113:lib/vsprintf.c ****  * strtoll - convert a string to a signed long long
 114:lib/vsprintf.c ****  * @cp: The start of the string
 115:lib/vsprintf.c ****  * @endp: A pointer to the end of the parsed string will be placed here
 116:lib/vsprintf.c ****  * @base: The number base to use
 117:lib/vsprintf.c ****  */
 118:lib/vsprintf.c **** long long strtoll(const char *cp,char **endp,unsigned int base)
 119:lib/vsprintf.c **** {
 120:lib/vsprintf.c **** 	if(*cp=='-')
 121:lib/vsprintf.c **** 		return -strtoull(cp+1,endp,base);
 122:lib/vsprintf.c **** 	return strtoull(cp,endp,base);
 123:lib/vsprintf.c **** }
 124:lib/vsprintf.c **** 
 125:lib/vsprintf.c **** static int skip_atoi(const char **s)
 126:lib/vsprintf.c **** {
  47              		.loc 2 126 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              	.LVL3:
  52 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 12
 127:lib/vsprintf.c **** 	int i=0;
  55              		.loc 2 127 0
  56 0004 0030A0E3 		mov	r3, #0
 128:lib/vsprintf.c **** 
 129:lib/vsprintf.c **** 	while (isdigit(**s))
  57              		.loc 2 129 0
  58 0008 30409FE5 		ldr	r4, .L8
  59              		.cfi_offset 14, -4
  60              		.cfi_offset 5, -8
  61              		.cfi_offset 4, -12
 130:lib/vsprintf.c **** 		i = i*10 + *((*s)++) - '0';
  62              		.loc 2 130 0
  63 000c 0AC0A0E3 		mov	ip, #10
 129:lib/vsprintf.c **** 	while (isdigit(**s))
  64              		.loc 2 129 0
  65 0010 030000EA 		b	.L6
  66              	.LVL4:
  67              	.L7:
  68              		.loc 2 130 0
  69 0014 302042E2 		sub	r2, r2, #48
  70 0018 9C2323E0 		mla	r3, ip, r3, r2
  71              	.LVL5:
  72 001c 011081E2 		add	r1, r1, #1
  73 0020 001080E5 		str	r1, [r0, #0]
  74              	.LVL6:
  75              	.L6:
 129:lib/vsprintf.c **** 	while (isdigit(**s))
  76              		.loc 2 129 0 discriminator 1
  77 0024 001090E5 		ldr	r1, [r0, #0]
  78 0028 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
  79 002c 0250D4E7 		ldrb	r5, [r4, r2]	@ zero_extendqisi2
  80 0030 040015E3 		tst	r5, #4
  81 0034 F6FFFF1A 		bne	.L7
 131:lib/vsprintf.c **** 	return i;
 132:lib/vsprintf.c **** }
  82              		.loc 2 132 0
  83 0038 0300A0E1 		mov	r0, r3
  84              	.LVL7:
  85 003c 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
  86              	.L9:
  87              		.align	2
  88              	.L8:
  89 0040 00000000 		.word	_ctype
  90              		.cfi_endproc
  91              	.LFE6:
  93              		.section	.text.number,"ax",%progbits
  94              		.align	2
  96              	number:
  97              	.LFB7:
 133:lib/vsprintf.c **** 
 134:lib/vsprintf.c **** #define ZEROPAD	1		/* pad with zero */
 135:lib/vsprintf.c **** #define SIGN	2		/* unsigned/signed long */
 136:lib/vsprintf.c **** #define PLUS	4		/* show plus */
 137:lib/vsprintf.c **** #define SPACE	8		/* space if plus */
 138:lib/vsprintf.c **** #define LEFT	16		/* left justified */
 139:lib/vsprintf.c **** #define SPECIAL	32		/* 0x */
 140:lib/vsprintf.c **** #define LARGE	64		/* use 'ABCDEF' instead of 'abcdef' */
 141:lib/vsprintf.c **** 
 142:lib/vsprintf.c **** static char * number(char * buf, char * end, unsigned long long num, int base, int size, int precis
 143:lib/vsprintf.c **** {
  98              		.loc 2 143 0
  99              		.cfi_startproc
 100              		@ args = 16, pretend = 0, frame = 80
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              	.LVL8:
 103 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 104              	.LCFI1:
 105              		.cfi_def_cfa_offset 36
 106 0004 50D04DE2 		sub	sp, sp, #80
 107              	.LCFI2:
 108              		.cfi_def_cfa_offset 116
 109              		.loc 2 143 0
 110 0008 80709DE5 		ldr	r7, [sp, #128]
 111              		.cfi_offset 14, -4
 112              		.cfi_offset 11, -8
 113              		.cfi_offset 10, -12
 114              		.cfi_offset 9, -16
 115              		.cfi_offset 8, -20
 116              		.cfi_offset 7, -24
 117              		.cfi_offset 6, -28
 118              		.cfi_offset 5, -32
 119              		.cfi_offset 4, -36
 120 000c 0050A0E1 		mov	r5, r0
 121 0010 01A0A0E1 		mov	sl, r1
 144:lib/vsprintf.c **** 	char c,sign,tmp[66];
 145:lib/vsprintf.c **** 	const char *digits;
 146:lib/vsprintf.c **** 	static const char small_digits[] = "0123456789abcdefghijklmnopqrstuvwxyz";
 147:lib/vsprintf.c **** 	static const char large_digits[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 148:lib/vsprintf.c **** 	int i;
 149:lib/vsprintf.c **** 
 150:lib/vsprintf.c **** 	digits = (type & LARGE) ? large_digits : small_digits;
 122              		.loc 2 150 0
 123 0014 30029FE5 		ldr	r0, .L62
 124              	.LVL9:
 125 0018 30129FE5 		ldr	r1, .L62+4
 126              	.LVL10:
 127 001c 400017E3 		tst	r7, #64
 143:lib/vsprintf.c **** {
 128              		.loc 2 143 0
 129 0020 74B09DE5 		ldr	fp, [sp, #116]
 130              		.loc 2 150 0
 131 0024 0010A001 		moveq	r1, r0
 132 0028 00108DE5 		str	r1, [sp, #0]
 133              	.LVL11:
 151:lib/vsprintf.c **** 	if (type & LEFT)
 134              		.loc 2 151 0
 135 002c 100017E3 		tst	r7, #16
 152:lib/vsprintf.c **** 		type &= ~ZEROPAD;
 153:lib/vsprintf.c **** 	if (base < 2 || base > 36)
 136              		.loc 2 153 0
 137 0030 02104BE2 		sub	r1, fp, #2
 138              	.LVL12:
 152:lib/vsprintf.c **** 		type &= ~ZEROPAD;
 139              		.loc 2 152 0
 140 0034 0170C713 		bicne	r7, r7, #1
 141              	.LVL13:
 142              		.loc 2 153 0
 143 0038 220051E3 		cmp	r1, #34
 143:lib/vsprintf.c **** {
 144              		.loc 2 143 0
 145 003c 78609DE5 		ldr	r6, [sp, #120]
 146              		.loc 2 153 0
 147 0040 7D00008A 		bhi	.L48
 154:lib/vsprintf.c **** 		return NULL;
 155:lib/vsprintf.c **** 	c = (type & ZEROPAD) ? '0' : ' ';
 148              		.loc 2 155 0
 149 0044 010017E3 		tst	r7, #1
 150 0048 2000A003 		moveq	r0, #32
 151 004c 3000A013 		movne	r0, #48
 156:lib/vsprintf.c **** 	sign = 0;
 157:lib/vsprintf.c **** 	if (type & SIGN) {
 152              		.loc 2 157 0
 153 0050 029017E2 		ands	r9, r7, #2
 155:lib/vsprintf.c **** 	c = (type & ZEROPAD) ? '0' : ' ';
 154              		.loc 2 155 0
 155 0054 04008DE5 		str	r0, [sp, #4]
 156              	.LVL14:
 157              		.loc 2 157 0
 158 0058 0F00000A 		beq	.L15
 158:lib/vsprintf.c **** 		if ((signed long long) num < 0) {
 159              		.loc 2 158 0
 160 005c 000053E3 		cmp	r3, #0
 161 0060 020000BA 		blt	.L52
 159:lib/vsprintf.c **** 			sign = '-';
 160:lib/vsprintf.c **** 			num = - (signed long long) num;
 161:lib/vsprintf.c **** 			size--;
 162:lib/vsprintf.c **** 		} else if (type & PLUS) {
 162              		.loc 2 162 0
 163 0064 040017E3 		tst	r7, #4
 164 0068 0800000A 		beq	.L18
 165 006c 040000EA 		b	.L60
 166              	.L52:
 167              	.LVL15:
 160:lib/vsprintf.c **** 			num = - (signed long long) num;
 168              		.loc 2 160 0
 169 0070 002072E2 		rsbs	r2, r2, #0
 170 0074 0030E3E2 		rsc	r3, r3, #0
 171              	.LVL16:
 161:lib/vsprintf.c **** 			size--;
 172              		.loc 2 161 0
 173 0078 016046E2 		sub	r6, r6, #1
 174              	.LVL17:
 159:lib/vsprintf.c **** 			sign = '-';
 175              		.loc 2 159 0
 176 007c 2D90A0E3 		mov	r9, #45
 177 0080 050000EA 		b	.L15
 178              	.LVL18:
 179              	.L60:
 163:lib/vsprintf.c **** 			sign = '+';
 164:lib/vsprintf.c **** 			size--;
 180              		.loc 2 164 0
 181 0084 016046E2 		sub	r6, r6, #1
 182              	.LVL19:
 163:lib/vsprintf.c **** 			sign = '+';
 183              		.loc 2 163 0
 184 0088 2B90A0E3 		mov	r9, #43
 185 008c 020000EA 		b	.L15
 186              	.LVL20:
 187              	.L18:
 165:lib/vsprintf.c **** 		} else if (type & SPACE) {
 188              		.loc 2 165 0
 189 0090 089017E2 		ands	r9, r7, #8
 190              	.LVL21:
 166:lib/vsprintf.c **** 			sign = ' ';
 167:lib/vsprintf.c **** 			size--;
 191              		.loc 2 167 0
 192 0094 01604612 		subne	r6, r6, #1
 193              	.LVL22:
 166:lib/vsprintf.c **** 			sign = ' ';
 194              		.loc 2 166 0
 195 0098 2090A013 		movne	r9, #32
 196              	.LVL23:
 197              	.L15:
 168:lib/vsprintf.c **** 		}
 169:lib/vsprintf.c **** 	}
 170:lib/vsprintf.c **** 	if (type & SPECIAL) {
 198              		.loc 2 170 0
 199 009c 201017E2 		ands	r1, r7, #32
 200 00a0 08108DE5 		str	r1, [sp, #8]
 201 00a4 0400000A 		beq	.L19
 171:lib/vsprintf.c **** 		if (base == 16)
 202              		.loc 2 171 0
 203 00a8 10005BE3 		cmp	fp, #16
 172:lib/vsprintf.c **** 			size -= 2;
 204              		.loc 2 172 0
 205 00ac 02604602 		subeq	r6, r6, #2
 206              	.LVL24:
 171:lib/vsprintf.c **** 		if (base == 16)
 207              		.loc 2 171 0
 208 00b0 0100000A 		beq	.L19
 173:lib/vsprintf.c **** 		else if (base == 8)
 209              		.loc 2 173 0
 210 00b4 08005BE3 		cmp	fp, #8
 174:lib/vsprintf.c **** 			size--;
 211              		.loc 2 174 0
 212 00b8 01604602 		subeq	r6, r6, #1
 213              	.LVL25:
 214              	.L19:
 175:lib/vsprintf.c **** 	}
 176:lib/vsprintf.c **** 	i = 0;
 177:lib/vsprintf.c **** 	if (num == 0)
 215              		.loc 2 177 0
 216 00bc 03C092E1 		orrs	ip, r2, r3
 178:lib/vsprintf.c **** 		tmp[i++]='0';
 217              		.loc 2 178 0
 218 00c0 3030A003 		moveq	r3, #48
 219 00c4 0C30CD05 		streqb	r3, [sp, #12]
 220              	.LVL26:
 221 00c8 0180A003 		moveq	r8, #1
 177:lib/vsprintf.c **** 	if (num == 0)
 222              		.loc 2 177 0
 223 00cc 0B00000A 		beq	.L22
 224 00d0 0080A0E3 		mov	r8, #0
 225              	.LVL27:
 226              	.L23:
 227              	.LBB2:
 179:lib/vsprintf.c **** 	else while (num != 0)
 180:lib/vsprintf.c **** 		tmp[i++] = digits[do_div(num,base)];
 228              		.loc 2 180 0
 229 00d4 0200A0E1 		mov	r0, r2
 230              	.LVL28:
 231 00d8 0B40A0E1 		mov	r4, fp
 232              	.LVL29:
 233 00dc 0310A0E1 		mov	r1, r3
 234              	@ 180 "lib/vsprintf.c" 1
 235              		.ifnc r1,r1 ; .err ; .endif
 236              		.ifnc r2,r2 ; .err ; .endif
 237              		.ifnc r0,r0 ; .err ; .endif
 238              		.ifnc r4,r4 ; .err ; .endif
 239 00e0 FEFFFFEB 		bl	__do_div64
 240              	@ 0 "" 2
 241              	.LVL30:
 242              	.LBE2:
 243 00e4 00C09DE5 		ldr	ip, [sp, #0]
 244 00e8 0100DCE7 		ldrb	r0, [ip, r1]	@ zero_extendqisi2
 245              	.LVL31:
 246 00ec 0C108DE2 		add	r1, sp, #12
 247              	.LVL32:
 248 00f0 0800C1E7 		strb	r0, [r1, r8]
 179:lib/vsprintf.c **** 	else while (num != 0)
 249              		.loc 2 179 0
 250 00f4 030092E1 		orrs	r0, r2, r3
 251              		.loc 2 180 0
 252 00f8 018088E2 		add	r8, r8, #1
 253              	.LVL33:
 179:lib/vsprintf.c **** 	else while (num != 0)
 254              		.loc 2 179 0
 255 00fc F4FFFF1A 		bne	.L23
 256              	.LVL34:
 257              	.L22:
 258 0100 7C309DE5 		ldr	r3, [sp, #124]
 259 0104 030058E1 		cmp	r8, r3
 260 0108 0830A0A1 		movge	r3, r8
 261 010c 0330A0B1 		movlt	r3, r3
 262              	.LVL35:
 181:lib/vsprintf.c **** 	if (i > precision)
 182:lib/vsprintf.c **** 		precision = i;
 183:lib/vsprintf.c **** 	size -= precision;
 184:lib/vsprintf.c **** 	if (!(type&(ZEROPAD+LEFT))) {
 263              		.loc 2 184 0
 264 0110 110017E3 		tst	r7, #17
 183:lib/vsprintf.c **** 	size -= precision;
 265              		.loc 2 183 0
 266 0114 066063E0 		rsb	r6, r3, r6
 267              	.LVL36:
 268              		.loc 2 184 0
 269 0118 0900001A 		bne	.L24
 270 011c 030000EA 		b	.L61
 271              	.LVL37:
 272              	.L27:
 185:lib/vsprintf.c **** 		while(size-->0) {
 186:lib/vsprintf.c **** 			if (buf <= end)
 273              		.loc 2 186 0
 274 0120 0A0055E1 		cmp	r5, sl
 187:lib/vsprintf.c **** 				*buf = ' ';
 275              		.loc 2 187 0
 276 0124 0020C595 		strlsb	r2, [r5, #0]
 188:lib/vsprintf.c **** 			++buf;
 277              		.loc 2 188 0
 278 0128 015085E2 		add	r5, r5, #1
 279              	.LVL38:
 280 012c 000000EA 		b	.L58
 281              	.LVL39:
 282              	.L61:
 187:lib/vsprintf.c **** 				*buf = ' ';
 283              		.loc 2 187 0 discriminator 1
 284 0130 2020A0E3 		mov	r2, #32
 285              	.LVL40:
 286              	.L58:
 185:lib/vsprintf.c **** 		while(size-->0) {
 287              		.loc 2 185 0 discriminator 1
 288 0134 016046E2 		sub	r6, r6, #1
 289              	.LVL41:
 142:lib/vsprintf.c **** static char * number(char * buf, char * end, unsigned long long num, int base, int size, int precis
 290              		.loc 2 142 0 discriminator 1
 291 0138 011086E2 		add	r1, r6, #1
 185:lib/vsprintf.c **** 		while(size-->0) {
 292              		.loc 2 185 0 discriminator 1
 293 013c 000051E3 		cmp	r1, #0
 294 0140 F6FFFFCA 		bgt	.L27
 295              	.L24:
 189:lib/vsprintf.c **** 		}
 190:lib/vsprintf.c **** 	}
 191:lib/vsprintf.c **** 	if (sign) {
 296              		.loc 2 191 0
 297 0144 000059E3 		cmp	r9, #0
 298 0148 0200000A 		beq	.L28
 192:lib/vsprintf.c **** 		if (buf <= end)
 299              		.loc 2 192 0
 300 014c 0A0055E1 		cmp	r5, sl
 193:lib/vsprintf.c **** 			*buf = sign;
 301              		.loc 2 193 0
 302 0150 0090C595 		strlsb	r9, [r5, #0]
 194:lib/vsprintf.c **** 		++buf;
 303              		.loc 2 194 0
 304 0154 015085E2 		add	r5, r5, #1
 305              	.LVL42:
 306              	.L28:
 195:lib/vsprintf.c **** 	}
 196:lib/vsprintf.c **** 	if (type & SPECIAL) {
 307              		.loc 2 196 0
 308 0158 08109DE5 		ldr	r1, [sp, #8]
 309 015c 000051E3 		cmp	r1, #0
 310 0160 1100000A 		beq	.L30
 197:lib/vsprintf.c **** 		if (base==8) {
 311              		.loc 2 197 0
 312 0164 08005BE3 		cmp	fp, #8
 313 0168 0400001A 		bne	.L31
 198:lib/vsprintf.c **** 			if (buf <= end)
 314              		.loc 2 198 0
 315 016c 0A0055E1 		cmp	r5, sl
 199:lib/vsprintf.c **** 				*buf = '0';
 316              		.loc 2 199 0
 317 0170 3020A093 		movls	r2, #48
 318 0174 0020C595 		strlsb	r2, [r5, #0]
 200:lib/vsprintf.c **** 			++buf;
 319              		.loc 2 200 0
 320 0178 015085E2 		add	r5, r5, #1
 321              	.LVL43:
 322 017c 0A0000EA 		b	.L30
 323              	.L31:
 201:lib/vsprintf.c **** 		} else if (base==16) {
 324              		.loc 2 201 0
 325 0180 10005BE3 		cmp	fp, #16
 326 0184 0800001A 		bne	.L30
 202:lib/vsprintf.c **** 			if (buf <= end)
 327              		.loc 2 202 0
 328 0188 0A0055E1 		cmp	r5, sl
 203:lib/vsprintf.c **** 				*buf = '0';
 329              		.loc 2 203 0
 330 018c 3020A093 		movls	r2, #48
 331 0190 0020C595 		strlsb	r2, [r5, #0]
 204:lib/vsprintf.c **** 			++buf;
 332              		.loc 2 204 0
 333 0194 012085E2 		add	r2, r5, #1
 334              	.LVL44:
 205:lib/vsprintf.c **** 			if (buf <= end)
 335              		.loc 2 205 0
 336 0198 0A0052E1 		cmp	r2, sl
 206:lib/vsprintf.c **** 				*buf = digits[33];
 337              		.loc 2 206 0
 338 019c 00C09D95 		ldrls	ip, [sp, #0]
 339 01a0 2110DC95 		ldrlsb	r1, [ip, #33]	@ zero_extendqisi2
 340 01a4 0110C595 		strlsb	r1, [r5, #1]
 207:lib/vsprintf.c **** 			++buf;
 341              		.loc 2 207 0
 342 01a8 015082E2 		add	r5, r2, #1
 343              	.LVL45:
 344              	.L30:
 208:lib/vsprintf.c **** 		}
 209:lib/vsprintf.c **** 	}
 210:lib/vsprintf.c **** 	if (!(type & LEFT)) {
 345              		.loc 2 210 0
 346 01ac 100017E3 		tst	r7, #16
 347 01b0 0800001A 		bne	.L35
 348 01b4 030000EA 		b	.L59
 349              	.L38:
 211:lib/vsprintf.c **** 		while (size-- > 0) {
 212:lib/vsprintf.c **** 			if (buf <= end)
 350              		.loc 2 212 0
 351 01b8 0A0055E1 		cmp	r5, sl
 213:lib/vsprintf.c **** 				*buf = c;
 352              		.loc 2 213 0
 353 01bc 04009D95 		ldrls	r0, [sp, #4]
 354 01c0 0000C595 		strlsb	r0, [r5, #0]
 214:lib/vsprintf.c **** 			++buf;
 355              		.loc 2 214 0
 356 01c4 015085E2 		add	r5, r5, #1
 357              	.LVL46:
 358              	.L59:
 211:lib/vsprintf.c **** 		while (size-- > 0) {
 359              		.loc 2 211 0 discriminator 1
 360 01c8 016046E2 		sub	r6, r6, #1
 361              	.LVL47:
 142:lib/vsprintf.c **** static char * number(char * buf, char * end, unsigned long long num, int base, int size, int precis
 362              		.loc 2 142 0 discriminator 1
 363 01cc 012086E2 		add	r2, r6, #1
 211:lib/vsprintf.c **** 		while (size-- > 0) {
 364              		.loc 2 211 0 discriminator 1
 365 01d0 000052E3 		cmp	r2, #0
 366 01d4 F7FFFFCA 		bgt	.L38
 367              	.L35:
 215:lib/vsprintf.c **** 		}
 216:lib/vsprintf.c **** 	}
 217:lib/vsprintf.c **** 	while (i < precision--) {
 218:lib/vsprintf.c **** 		if (buf <= end)
 219:lib/vsprintf.c **** 			*buf = '0';
 368              		.loc 2 219 0 discriminator 1
 369 01d8 3020A0E3 		mov	r2, #48
 370 01dc 030000EA 		b	.L39
 371              	.LVL48:
 372              	.L41:
 218:lib/vsprintf.c **** 		if (buf <= end)
 373              		.loc 2 218 0
 374 01e0 0A0055E1 		cmp	r5, sl
 375              		.loc 2 219 0
 376 01e4 0020C595 		strlsb	r2, [r5, #0]
 220:lib/vsprintf.c **** 		++buf;
 377              		.loc 2 220 0
 378 01e8 013043E2 		sub	r3, r3, #1
 379 01ec 015085E2 		add	r5, r5, #1
 380              	.LVL49:
 381              	.L39:
 217:lib/vsprintf.c **** 	while (i < precision--) {
 382              		.loc 2 217 0 discriminator 1
 383 01f0 030058E1 		cmp	r8, r3
 384 01f4 F9FFFFBA 		blt	.L41
 385              	.LVL50:
 386              	.L53:
 221:lib/vsprintf.c **** 	}
 222:lib/vsprintf.c **** 	while (i-- > 0) {
 223:lib/vsprintf.c **** 		if (buf <= end)
 387              		.loc 2 223 0
 388 01f8 0A0055E1 		cmp	r5, sl
 224:lib/vsprintf.c **** 			*buf = tmp[i];
 389              		.loc 2 224 0
 390 01fc 0C308D92 		addls	r3, sp, #12
 222:lib/vsprintf.c **** 	while (i-- > 0) {
 391              		.loc 2 222 0
 392 0200 018048E2 		sub	r8, r8, #1
 393              		.loc 2 224 0
 394 0204 0830D397 		ldrlsb	r3, [r3, r8]	@ zero_extendqisi2
 395 0208 0030C595 		strlsb	r3, [r5, #0]
 222:lib/vsprintf.c **** 	while (i-- > 0) {
 396              		.loc 2 222 0
 397 020c 000058E3 		cmp	r8, #0
 225:lib/vsprintf.c **** 		++buf;
 398              		.loc 2 225 0
 399 0210 015085E2 		add	r5, r5, #1
 400              	.LVL51:
 222:lib/vsprintf.c **** 	while (i-- > 0) {
 401              		.loc 2 222 0
 402 0214 F7FFFFCA 		bgt	.L53
 226:lib/vsprintf.c **** 	}
 227:lib/vsprintf.c **** 	while (size-- > 0) {
 228:lib/vsprintf.c **** 		if (buf <= end)
 229:lib/vsprintf.c **** 			*buf = ' ';
 403              		.loc 2 229 0
 404 0218 2030A0E3 		mov	r3, #32
 405 021c 030000EA 		b	.L44
 406              	.LVL52:
 407              	.L46:
 228:lib/vsprintf.c **** 		if (buf <= end)
 408              		.loc 2 228 0
 409 0220 0A0055E1 		cmp	r5, sl
 410              		.loc 2 229 0
 411 0224 0030C595 		strlsb	r3, [r5, #0]
 230:lib/vsprintf.c **** 		++buf;
 412              		.loc 2 230 0
 413 0228 016046E2 		sub	r6, r6, #1
 414 022c 015085E2 		add	r5, r5, #1
 415              	.LVL53:
 416              	.L44:
 227:lib/vsprintf.c **** 	while (size-- > 0) {
 417              		.loc 2 227 0 discriminator 1
 418 0230 000056E3 		cmp	r6, #0
 419 0234 F9FFFFCA 		bgt	.L46
 420 0238 000000EA 		b	.L13
 421              	.LVL54:
 422              	.L48:
 154:lib/vsprintf.c **** 		return NULL;
 423              		.loc 2 154 0
 424 023c 0050A0E3 		mov	r5, #0
 425              	.LVL55:
 426              	.L13:
 231:lib/vsprintf.c **** 	}
 232:lib/vsprintf.c **** 	return buf;
 233:lib/vsprintf.c **** }
 427              		.loc 2 233 0
 428 0240 0500A0E1 		mov	r0, r5
 429 0244 50D08DE2 		add	sp, sp, #80
 430 0248 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 431              	.L63:
 432              		.align	2
 433              	.L62:
 434 024c 28000000 		.word	.LANCHOR0+40
 435 0250 00000000 		.word	.LANCHOR0
 436              		.cfi_endproc
 437              	.LFE7:
 439              		.section	.text.strtoul,"ax",%progbits
 440              		.align	2
 441              		.global	strtoul
 443              	strtoul:
 444              	.LFB2:
  35:lib/vsprintf.c **** {
 445              		.loc 2 35 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449              	.LVL56:
 450 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 451              	.LCFI3:
 452              		.cfi_def_cfa_offset 28
  38:lib/vsprintf.c **** 	if (!base) {
 453              		.loc 2 38 0
 454 0004 006052E2 		subs	r6, r2, #0
 455              		.cfi_offset 14, -4
 456              		.cfi_offset 10, -8
 457              		.cfi_offset 8, -12
 458              		.cfi_offset 7, -16
 459              		.cfi_offset 6, -20
 460              		.cfi_offset 5, -24
 461              		.cfi_offset 4, -28
  35:lib/vsprintf.c **** {
 462              		.loc 2 35 0
 463 0008 0040A0E1 		mov	r4, r0
 464 000c 0150A0E1 		mov	r5, r1
  38:lib/vsprintf.c **** 	if (!base) {
 465              		.loc 2 38 0
 466 0010 1100001A 		bne	.L65
 467              	.LVL57:
  40:lib/vsprintf.c **** 		if (*cp == '0') {
 468              		.loc 2 40 0
 469 0014 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 470 0018 300053E3 		cmp	r3, #48
  39:lib/vsprintf.c **** 		base = 10;
 471              		.loc 2 39 0
 472 001c 0A60A013 		movne	r6, #10
  40:lib/vsprintf.c **** 		if (*cp == '0') {
 473              		.loc 2 40 0
 474 0020 1600001A 		bne	.L66
 475              	.LVL58:
  43:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 476              		.loc 2 43 0
 477 0024 0100F4E5 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 478              	.LVL59:
 479 0028 FEFFFFEB 		bl	__toupper
 480              	.LVL60:
 481 002c 580050E3 		cmp	r0, #88
  41:lib/vsprintf.c **** 			base = 8;
 482              		.loc 2 41 0
 483 0030 0860A013 		movne	r6, #8
  43:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 484              		.loc 2 43 0
 485 0034 1100001A 		bne	.L66
  43:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 486              		.loc 2 43 0 is_stmt 0 discriminator 1
 487 0038 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 488 003c 8C209FE5 		ldr	r2, .L76
 489 0040 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 490 0044 443003E2 		and	r3, r3, #68
  41:lib/vsprintf.c **** 			base = 8;
 491              		.loc 2 41 0 is_stmt 1 discriminator 1
 492 0048 000053E3 		cmp	r3, #0
 493 004c 1060A013 		movne	r6, #16
 494 0050 0860A003 		moveq	r6, #8
 495 0054 01408412 		addne	r4, r4, #1
 496              	.LVL61:
 497 0058 080000EA 		b	.L66
 498              	.LVL62:
 499              	.L65:
  48:lib/vsprintf.c **** 	} else if (base == 16) {
 500              		.loc 2 48 0
 501 005c 100056E3 		cmp	r6, #16
 502 0060 0600001A 		bne	.L66
  49:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
 503              		.loc 2 49 0
 504 0064 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 505 0068 300053E3 		cmp	r3, #48
 506 006c 0300001A 		bne	.L66
  49:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
 507              		.loc 2 49 0 is_stmt 0 discriminator 1
 508 0070 0100D0E5 		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 509              	.LVL63:
 510 0074 FEFFFFEB 		bl	__toupper
 511              	.LVL64:
 512 0078 580050E3 		cmp	r0, #88
  50:lib/vsprintf.c **** 			cp += 2;
 513              		.loc 2 50 0 is_stmt 1 discriminator 1
 514 007c 02408402 		addeq	r4, r4, #2
 515              	.LVL65:
 516              	.L66:
  39:lib/vsprintf.c **** 		base = 10;
 517              		.loc 2 39 0 discriminator 1
 518 0080 0070A0E3 		mov	r7, #0
  52:lib/vsprintf.c **** 	while (isxdigit(*cp) &&
 519              		.loc 2 52 0 discriminator 1
 520 0084 44A09FE5 		ldr	sl, .L76
 521 0088 000000EA 		b	.L67
 522              	.LVL66:
 523              	.L71:
  54:lib/vsprintf.c **** 		result = result*base + value;
 524              		.loc 2 54 0
 525 008c 960727E0 		mla	r7, r6, r7, r0
 526              	.LVL67:
 527              	.L67:
  54:lib/vsprintf.c **** 		result = result*base + value;
 528              		.loc 2 54 0 is_stmt 0 discriminator 1
 529 0090 0480A0E1 		mov	r8, r4
 530              	.LVL68:
  52:lib/vsprintf.c **** 	while (isxdigit(*cp) &&
 531              		.loc 2 52 0 is_stmt 1 discriminator 1
 532 0094 0100D4E4 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 533              	.LVL69:
 534 0098 0030DAE7 		ldrb	r3, [sl, r0]	@ zero_extendqisi2
 535 009c 440013E3 		tst	r3, #68
 536 00a0 0600000A 		beq	.L68
  53:lib/vsprintf.c **** 	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
 537              		.loc 2 53 0
 538 00a4 040013E3 		tst	r3, #4
 539 00a8 30004012 		subne	r0, r0, #48
 540 00ac 0100001A 		bne	.L70
  53:lib/vsprintf.c **** 	       (value = isdigit(*cp) ? *cp-'0' : toupper(*cp)-'A'+10) < base) {
 541              		.loc 2 53 0 is_stmt 0 discriminator 2
 542 00b0 FEFFFFEB 		bl	__toupper
 543 00b4 370040E2 		sub	r0, r0, #55
 544              	.L70:
 545              	.LVL70:
  52:lib/vsprintf.c **** 	while (isxdigit(*cp) &&
 546              		.loc 2 52 0 is_stmt 1 discriminator 3
 547 00b8 060050E1 		cmp	r0, r6
 548 00bc F2FFFF3A 		bcc	.L71
 549              	.LVL71:
 550              	.L68:
  57:lib/vsprintf.c **** 	if (endp)
 551              		.loc 2 57 0
 552 00c0 000055E3 		cmp	r5, #0
  58:lib/vsprintf.c **** 		*endp = (char *)cp;
 553              		.loc 2 58 0
 554 00c4 00808515 		strne	r8, [r5, #0]
  60:lib/vsprintf.c **** }
 555              		.loc 2 60 0
 556 00c8 0700A0E1 		mov	r0, r7
 557 00cc F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 558              	.L77:
 559              		.align	2
 560              	.L76:
 561 00d0 00000000 		.word	_ctype
 562              		.cfi_endproc
 563              	.LFE2:
 565              		.section	.text.strtol,"ax",%progbits
 566              		.align	2
 567              		.global	strtol
 569              	strtol:
 570              	.LFB3:
  70:lib/vsprintf.c **** {
 571              		.loc 2 70 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              	.LVL72:
 576 0000 04E02DE5 		str	lr, [sp, #-4]!
 577              	.LCFI4:
 578              		.cfi_def_cfa_offset 4
  71:lib/vsprintf.c **** 	if(*cp=='-')
 579              		.loc 2 71 0
 580 0004 00C0D0E5 		ldrb	ip, [r0, #0]	@ zero_extendqisi2
 581 0008 2D005CE3 		cmp	ip, #45
 582 000c 0300001A 		bne	.L79
 583              		.cfi_offset 14, -4
  72:lib/vsprintf.c **** 		return -strtoul(cp+1,endp,base);
 584              		.loc 2 72 0
 585 0010 010080E2 		add	r0, r0, #1
 586              	.LVL73:
 587 0014 FEFFFFEB 		bl	strtoul
 588              	.LVL74:
  74:lib/vsprintf.c **** }
 589              		.loc 2 74 0
 590 0018 000060E2 		rsb	r0, r0, #0
 591 001c 04F09DE4 		ldr	pc, [sp], #4
 592              	.LVL75:
 593              	.L79:
 594 0020 04E09DE4 		ldr	lr, [sp], #4
  73:lib/vsprintf.c **** 	return strtoul(cp,endp,base);
 595              		.loc 2 73 0
 596 0024 FEFFFFEA 		b	strtoul
 597              		.cfi_endproc
 598              	.LFE3:
 600              		.section	.text.strtoull,"ax",%progbits
 601              		.align	2
 602              		.global	strtoull
 604              	strtoull:
 605              	.LFB4:
  84:lib/vsprintf.c **** {
 606              		.loc 2 84 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 0
 609              		@ frame_needed = 0, uses_anonymous_args = 0
 610              	.LVL76:
 611 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 612              	.LCFI5:
 613              		.cfi_def_cfa_offset 36
  87:lib/vsprintf.c **** 	if (!base) {
 614              		.loc 2 87 0
 615 0004 006052E2 		subs	r6, r2, #0
 616              		.cfi_offset 14, -4
 617              		.cfi_offset 11, -8
 618              		.cfi_offset 10, -12
 619              		.cfi_offset 9, -16
 620              		.cfi_offset 8, -20
 621              		.cfi_offset 7, -24
 622              		.cfi_offset 6, -28
 623              		.cfi_offset 5, -32
 624              		.cfi_offset 4, -36
  84:lib/vsprintf.c **** {
 625              		.loc 2 84 0
 626 0008 0040A0E1 		mov	r4, r0
 627 000c 0150A0E1 		mov	r5, r1
  87:lib/vsprintf.c **** 	if (!base) {
 628              		.loc 2 87 0
 629 0010 1100001A 		bne	.L82
 630              	.LVL77:
  89:lib/vsprintf.c **** 		if (*cp == '0') {
 631              		.loc 2 89 0
 632 0014 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 633 0018 300053E3 		cmp	r3, #48
  88:lib/vsprintf.c **** 		base = 10;
 634              		.loc 2 88 0
 635 001c 0A60A013 		movne	r6, #10
  89:lib/vsprintf.c **** 		if (*cp == '0') {
 636              		.loc 2 89 0
 637 0020 1600001A 		bne	.L83
 638              	.LVL78:
  92:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 639              		.loc 2 92 0
 640 0024 0100F4E5 		ldrb	r0, [r4, #1]!	@ zero_extendqisi2
 641              	.LVL79:
 642 0028 FEFFFFEB 		bl	__toupper
 643              	.LVL80:
 644 002c 580050E3 		cmp	r0, #88
  90:lib/vsprintf.c **** 			base = 8;
 645              		.loc 2 90 0
 646 0030 0860A013 		movne	r6, #8
  92:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 647              		.loc 2 92 0
 648 0034 1100001A 		bne	.L83
  92:lib/vsprintf.c **** 			if ((toupper(*cp) == 'X') && isxdigit(cp[1])) {
 649              		.loc 2 92 0 is_stmt 0 discriminator 1
 650 0038 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 651 003c B8209FE5 		ldr	r2, .L95
 652 0040 0330D2E7 		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 653 0044 443003E2 		and	r3, r3, #68
  90:lib/vsprintf.c **** 			base = 8;
 654              		.loc 2 90 0 is_stmt 1 discriminator 1
 655 0048 000053E3 		cmp	r3, #0
 656 004c 1060A013 		movne	r6, #16
 657 0050 0860A003 		moveq	r6, #8
 658 0054 01408412 		addne	r4, r4, #1
 659              	.LVL81:
 660 0058 080000EA 		b	.L83
 661              	.LVL82:
 662              	.L82:
  97:lib/vsprintf.c **** 	} else if (base == 16) {
 663              		.loc 2 97 0
 664 005c 100056E3 		cmp	r6, #16
 665 0060 0600001A 		bne	.L83
  98:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
 666              		.loc 2 98 0
 667 0064 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 668 0068 300053E3 		cmp	r3, #48
 669 006c 0300001A 		bne	.L83
  98:lib/vsprintf.c **** 		if (cp[0] == '0' && toupper(cp[1]) == 'X')
 670              		.loc 2 98 0 is_stmt 0 discriminator 1
 671 0070 0100D0E5 		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 672              	.LVL83:
 673 0074 FEFFFFEB 		bl	__toupper
 674              	.LVL84:
 675 0078 580050E3 		cmp	r0, #88
  99:lib/vsprintf.c **** 			cp += 2;
 676              		.loc 2 99 0 is_stmt 1 discriminator 1
 677 007c 02408402 		addeq	r4, r4, #2
 678              	.LVL85:
 679              	.L83:
  88:lib/vsprintf.c **** 		base = 10;
 680              		.loc 2 88 0 discriminator 1
 681 0080 0070A0E3 		mov	r7, #0
 682 0084 0080A0E3 		mov	r8, #0
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 683              		.loc 2 101 0 discriminator 1
 684 0088 6CB09FE5 		ldr	fp, .L95
 102:lib/vsprintf.c **** 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
 685              		.loc 2 102 0 discriminator 1
 686 008c 0090A0E3 		mov	r9, #0
 687 0090 030000EA 		b	.L84
 688              	.LVL86:
 689              	.L89:
 103:lib/vsprintf.c **** 		result = result*base + value;
 690              		.loc 2 103 0
 691 0094 970681E0 		umull	r0, r1, r7, r6
 692 0098 961821E0 		mla	r1, r6, r8, r1
 693 009c 007092E0 		adds	r7, r2, r0
 694              	.LVL87:
 695 00a0 0180A3E0 		adc	r8, r3, r1
 696              	.LVL88:
 697              	.L84:
 103:lib/vsprintf.c **** 		result = result*base + value;
 698              		.loc 2 103 0 is_stmt 0 discriminator 1
 699 00a4 04A0A0E1 		mov	sl, r4
 700              	.LVL89:
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 701              		.loc 2 101 0 is_stmt 1 discriminator 1
 702 00a8 0100D4E4 		ldrb	r0, [r4], #1	@ zero_extendqisi2
 703              	.LVL90:
 704 00ac 0030DBE7 		ldrb	r3, [fp, r0]	@ zero_extendqisi2
 705 00b0 440013E3 		tst	r3, #68
 706 00b4 0B00000A 		beq	.L85
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 707              		.loc 2 101 0 is_stmt 0 discriminator 2
 708 00b8 040013E3 		tst	r3, #4
 709 00bc 30004012 		subne	r0, r0, #48
 710 00c0 0200001A 		bne	.L87
 711 00c4 020013E3 		tst	r3, #2
 102:lib/vsprintf.c **** 	    ? toupper(*cp) : *cp)-'A'+10) < base) {
 712              		.loc 2 102 0 is_stmt 1
 713 00c8 FEFFFF1B 		blne	__toupper
 714              	.L88:
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 715              		.loc 2 101 0 discriminator 3
 716 00cc 370040E2 		sub	r0, r0, #55
 717              	.L87:
 101:lib/vsprintf.c **** 	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
 718              		.loc 2 101 0 is_stmt 0 discriminator 5
 719 00d0 0020A0E1 		mov	r2, r0
 720 00d4 C23FA0E1 		mov	r3, r2, asr #31
 721              	.LVL91:
 722 00d8 030059E1 		cmp	r9, r3
 723 00dc 0100001A 		bne	.L85
 724 00e0 000056E1 		cmp	r6, r0
 725 00e4 EAFFFF8A 		bhi	.L89
 726              	.LVL92:
 727              	.L85:
 106:lib/vsprintf.c **** 	if (endp)
 728              		.loc 2 106 0 is_stmt 1
 729 00e8 000055E3 		cmp	r5, #0
 107:lib/vsprintf.c **** 		*endp = (char *)cp;
 730              		.loc 2 107 0
 731 00ec 00A08515 		strne	sl, [r5, #0]
 109:lib/vsprintf.c **** }
 732              		.loc 2 109 0
 733 00f0 0700A0E1 		mov	r0, r7
 734 00f4 0810A0E1 		mov	r1, r8
 735 00f8 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 736              	.L96:
 737              		.align	2
 738              	.L95:
 739 00fc 00000000 		.word	_ctype
 740              		.cfi_endproc
 741              	.LFE4:
 743              		.section	.text.strtoll,"ax",%progbits
 744              		.align	2
 745              		.global	strtoll
 747              	strtoll:
 748              	.LFB5:
 119:lib/vsprintf.c **** {
 749              		.loc 2 119 0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              	.LVL93:
 754 0000 10402DE9 		stmfd	sp!, {r4, lr}
 755              	.LCFI6:
 756              		.cfi_def_cfa_offset 8
 120:lib/vsprintf.c **** 	if(*cp=='-')
 757              		.loc 2 120 0
 758 0004 00C0D0E5 		ldrb	ip, [r0, #0]	@ zero_extendqisi2
 759 0008 2D005CE3 		cmp	ip, #45
 760 000c 0600001A 		bne	.L98
 761              		.cfi_offset 14, -4
 762              		.cfi_offset 4, -8
 121:lib/vsprintf.c **** 		return -strtoull(cp+1,endp,base);
 763              		.loc 2 121 0
 764 0010 010080E2 		add	r0, r0, #1
 765              	.LVL94:
 766 0014 FEFFFFEB 		bl	strtoull
 767              	.LVL95:
 768 0018 003070E2 		rsbs	r3, r0, #0
 769 001c 0040E1E2 		rsc	r4, r1, #0
 123:lib/vsprintf.c **** }
 770              		.loc 2 123 0
 771 0020 0300A0E1 		mov	r0, r3
 772 0024 0410A0E1 		mov	r1, r4
 773 0028 1080BDE8 		ldmfd	sp!, {r4, pc}
 774              	.LVL96:
 775              	.L98:
 776 002c 1040BDE8 		ldmfd	sp!, {r4, lr}
 122:lib/vsprintf.c **** 	return strtoull(cp,endp,base);
 777              		.loc 2 122 0
 778 0030 FEFFFFEA 		b	strtoull
 779              		.cfi_endproc
 780              	.LFE5:
 782              		.section	.text.vsnprintf,"ax",%progbits
 783              		.align	2
 784              		.global	vsnprintf
 786              	vsnprintf:
 787              	.LFB8:
 234:lib/vsprintf.c **** 
 235:lib/vsprintf.c **** /**
 236:lib/vsprintf.c ****  * vsnprintf - Format a string and place it in a buffer
 237:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 238:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 239:lib/vsprintf.c ****  * @fmt: The format string to use
 240:lib/vsprintf.c ****  * @args: Arguments for the format string
 241:lib/vsprintf.c ****  *
 242:lib/vsprintf.c ****  * The return value is the number of characters which would
 243:lib/vsprintf.c ****  * be generated for the given input, excluding the trailing
 244:lib/vsprintf.c ****  * '\0', as per ISO C99. If you want to have the exact
 245:lib/vsprintf.c ****  * number of characters written into @buf as return value
 246:lib/vsprintf.c ****  * (not including the trailing '\0'), use vscnprintf. If the
 247:lib/vsprintf.c ****  * return is greater than or equal to @size, the resulting
 248:lib/vsprintf.c ****  * string is truncated.
 249:lib/vsprintf.c ****  *
 250:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 251:lib/vsprintf.c ****  * You probably want snprintf instead.
 252:lib/vsprintf.c ****  */
 253:lib/vsprintf.c **** int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)
 254:lib/vsprintf.c **** {
 788              		.loc 2 254 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 12
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              	.LVL97:
 793 0000 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 794              	.LCFI7:
 795              		.cfi_def_cfa_offset 36
 255:lib/vsprintf.c **** 	int len;
 256:lib/vsprintf.c **** 	unsigned long long num;
 257:lib/vsprintf.c **** 	int i, base;
 258:lib/vsprintf.c **** 	char *str, *end, c;
 259:lib/vsprintf.c **** 	const char *s;
 260:lib/vsprintf.c **** 
 261:lib/vsprintf.c **** 	int flags;		/* flags to number() */
 262:lib/vsprintf.c **** 
 263:lib/vsprintf.c **** 	int field_width;	/* width of output field */
 264:lib/vsprintf.c **** 	int precision;		/* min. # of digits for integers; max
 265:lib/vsprintf.c **** 				   number of chars for from string */
 266:lib/vsprintf.c **** 	int qualifier;		/* 'h', 'l', or 'L' for integer fields */
 267:lib/vsprintf.c **** 				/* 'z' support added 23/7/1999 S.H.    */
 268:lib/vsprintf.c **** 				/* 'z' changed to 'Z' --davidm 1/25/99 */
 269:lib/vsprintf.c **** 				/* 't' added for ptrdiff_t */
 270:lib/vsprintf.c **** 
 271:lib/vsprintf.c **** 	/* Reject out-of-range values early */
 272:lib/vsprintf.c **** 	if ((int) size < 0) {
 796              		.loc 2 272 0
 797 0004 000051E3 		cmp	r1, #0
 254:lib/vsprintf.c **** {
 798              		.loc 2 254 0
 799 0008 1CD04DE2 		sub	sp, sp, #28
 800              	.LCFI8:
 801              		.cfi_def_cfa_offset 64
 254:lib/vsprintf.c **** {
 802              		.loc 2 254 0
 803 000c 0050A0E1 		mov	r5, r0
 804              		.cfi_offset 14, -4
 805              		.cfi_offset 11, -8
 806              		.cfi_offset 10, -12
 807              		.cfi_offset 9, -16
 808              		.cfi_offset 8, -20
 809              		.cfi_offset 7, -24
 810              		.cfi_offset 6, -28
 811              		.cfi_offset 5, -32
 812              		.cfi_offset 4, -36
 813 0010 18208DE5 		str	r2, [sp, #24]
 814 0014 03A0A0E1 		mov	sl, r3
 815              		.loc 2 272 0
 816 0018 14108DE5 		str	r1, [sp, #20]
 273:lib/vsprintf.c **** 		return 0;
 817              		.loc 2 273 0
 818 001c 0000A0B3 		movlt	r0, #0
 819              	.LVL98:
 272:lib/vsprintf.c **** 	if ((int) size < 0) {
 820              		.loc 2 272 0
 821 0020 390100BA 		blt	.L101
 822              	.LVL99:
 274:lib/vsprintf.c **** 	}
 275:lib/vsprintf.c **** 
 276:lib/vsprintf.c **** 	str = buf;
 277:lib/vsprintf.c **** 	end = buf + size - 1;
 823              		.loc 2 277 0
 824 0024 014041E2 		sub	r4, r1, #1
 825 0028 044085E0 		add	r4, r5, r4
 826              	.LVL100:
 278:lib/vsprintf.c **** 
 279:lib/vsprintf.c **** 	if (end < buf - 1) {
 827              		.loc 2 279 0
 828 002c 013045E2 		sub	r3, r5, #1
 829              	.LVL101:
 830 0030 030054E1 		cmp	r4, r3
 831              	.LVL102:
 280:lib/vsprintf.c **** 		end = ((void *) -1);
 281:lib/vsprintf.c **** 		size = end - buf + 1;
 832              		.loc 2 281 0
 833 0034 00206532 		rsbcc	r2, r5, #0
 834              	.LVL103:
 835 0038 14208D35 		strcc	r2, [sp, #20]
 836              	.LVL104:
 280:lib/vsprintf.c **** 		end = ((void *) -1);
 837              		.loc 2 280 0
 838 003c 0040E033 		mvncc	r4, #0
 839              	.LBB3:
 282:lib/vsprintf.c **** 	}
 283:lib/vsprintf.c **** 
 284:lib/vsprintf.c **** 	for (; *fmt ; ++fmt) {
 285:lib/vsprintf.c **** 		if (*fmt != '%') {
 286:lib/vsprintf.c **** 			if (str <= end)
 287:lib/vsprintf.c **** 				*str = *fmt;
 288:lib/vsprintf.c **** 			++str;
 289:lib/vsprintf.c **** 			continue;
 290:lib/vsprintf.c **** 		}
 291:lib/vsprintf.c **** 
 292:lib/vsprintf.c **** 		/* process flags */
 293:lib/vsprintf.c **** 		flags = 0;
 294:lib/vsprintf.c **** 		repeat:
 295:lib/vsprintf.c **** 			++fmt;		/* this also skips first '%' */
 296:lib/vsprintf.c **** 			switch (*fmt) {
 297:lib/vsprintf.c **** 				case '-': flags |= LEFT; goto repeat;
 298:lib/vsprintf.c **** 				case '+': flags |= PLUS; goto repeat;
 299:lib/vsprintf.c **** 				case ' ': flags |= SPACE; goto repeat;
 300:lib/vsprintf.c **** 				case '#': flags |= SPECIAL; goto repeat;
 301:lib/vsprintf.c **** 				case '0': flags |= ZEROPAD; goto repeat;
 302:lib/vsprintf.c **** 			}
 303:lib/vsprintf.c **** 
 304:lib/vsprintf.c **** 		/* get field width */
 305:lib/vsprintf.c **** 		field_width = -1;
 306:lib/vsprintf.c **** 		if (isdigit(*fmt))
 307:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 308:lib/vsprintf.c **** 		else if (*fmt == '*') {
 309:lib/vsprintf.c **** 			++fmt;
 310:lib/vsprintf.c **** 			/* it's the next argument */
 311:lib/vsprintf.c **** 			field_width = va_arg(args, int);
 312:lib/vsprintf.c **** 			if (field_width < 0) {
 313:lib/vsprintf.c **** 				field_width = -field_width;
 314:lib/vsprintf.c **** 				flags |= LEFT;
 315:lib/vsprintf.c **** 			}
 316:lib/vsprintf.c **** 		}
 317:lib/vsprintf.c **** 
 318:lib/vsprintf.c **** 		/* get the precision */
 319:lib/vsprintf.c **** 		precision = -1;
 320:lib/vsprintf.c **** 		if (*fmt == '.') {
 321:lib/vsprintf.c **** 			++fmt;	
 322:lib/vsprintf.c **** 			if (isdigit(*fmt))
 323:lib/vsprintf.c **** 				precision = skip_atoi(&fmt);
 324:lib/vsprintf.c **** 			else if (*fmt == '*') {
 325:lib/vsprintf.c **** 				++fmt;
 326:lib/vsprintf.c **** 				/* it's the next argument */
 327:lib/vsprintf.c **** 				precision = va_arg(args, int);
 328:lib/vsprintf.c **** 			}
 329:lib/vsprintf.c **** 			if (precision < 0)
 330:lib/vsprintf.c **** 				precision = 0;
 331:lib/vsprintf.c **** 		}
 332:lib/vsprintf.c **** 
 333:lib/vsprintf.c **** 		/* get the conversion qualifier */
 334:lib/vsprintf.c **** 		qualifier = -1;
 335:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 336:lib/vsprintf.c **** 		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 337:lib/vsprintf.c **** 			qualifier = *fmt;
 338:lib/vsprintf.c **** 			++fmt;
 339:lib/vsprintf.c **** 			if (qualifier == 'l' && *fmt == 'l') {
 340:lib/vsprintf.c **** 				qualifier = 'L';
 341:lib/vsprintf.c **** 				++fmt;
 342:lib/vsprintf.c **** 			}
 343:lib/vsprintf.c **** 		}
 344:lib/vsprintf.c **** 
 345:lib/vsprintf.c **** 		/* default base */
 346:lib/vsprintf.c **** 		base = 10;
 347:lib/vsprintf.c **** 
 348:lib/vsprintf.c **** 		switch (*fmt) {
 349:lib/vsprintf.c **** 			case 'c':
 350:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 351:lib/vsprintf.c **** 					while (--field_width > 0) {
 352:lib/vsprintf.c **** 						if (str <= end)
 353:lib/vsprintf.c **** 							*str = ' ';
 354:lib/vsprintf.c **** 						++str;
 355:lib/vsprintf.c **** 					}
 356:lib/vsprintf.c **** 				}
 357:lib/vsprintf.c **** 				c = (unsigned char) va_arg(args, int);
 358:lib/vsprintf.c **** 				if (str <= end)
 359:lib/vsprintf.c **** 					*str = c;
 360:lib/vsprintf.c **** 				++str;
 361:lib/vsprintf.c **** 				while (--field_width > 0) {
 362:lib/vsprintf.c **** 					if (str <= end)
 363:lib/vsprintf.c **** 						*str = ' ';
 364:lib/vsprintf.c **** 					++str;
 365:lib/vsprintf.c **** 				}
 366:lib/vsprintf.c **** 				continue;
 367:lib/vsprintf.c **** 
 368:lib/vsprintf.c **** 			case 's':
 369:lib/vsprintf.c **** 				s = va_arg(args, char *);
 370:lib/vsprintf.c **** 
 371:lib/vsprintf.c **** 				len = strnlen(s, precision);
 372:lib/vsprintf.c **** 
 373:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 374:lib/vsprintf.c **** 					while (len < field_width--) {
 375:lib/vsprintf.c **** 						if (str <= end)
 376:lib/vsprintf.c **** 							*str = ' ';
 377:lib/vsprintf.c **** 						++str;
 378:lib/vsprintf.c **** 					}
 379:lib/vsprintf.c **** 				}
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 381:lib/vsprintf.c **** 					if (str <= end)
 382:lib/vsprintf.c **** 						*str = *s;
 383:lib/vsprintf.c **** 					++str; ++s;
 384:lib/vsprintf.c **** 				}
 385:lib/vsprintf.c **** 				while (len < field_width--) {
 386:lib/vsprintf.c **** 					if (str <= end)
 387:lib/vsprintf.c **** 						*str = ' ';
 388:lib/vsprintf.c **** 					++str;
 389:lib/vsprintf.c **** 				}
 390:lib/vsprintf.c **** 				continue;
 391:lib/vsprintf.c **** 
 392:lib/vsprintf.c **** 			case 'p':
 393:lib/vsprintf.c **** 				if (field_width == -1) {
 394:lib/vsprintf.c **** 					field_width = 2*sizeof(void *);
 395:lib/vsprintf.c **** 					flags |= ZEROPAD;
 396:lib/vsprintf.c **** 				}
 397:lib/vsprintf.c **** 				str = number(str, end,
 398:lib/vsprintf.c **** 						(unsigned long) va_arg(args, void *),
 399:lib/vsprintf.c **** 						16, field_width, precision, flags);
 400:lib/vsprintf.c **** 				continue;
 401:lib/vsprintf.c **** 
 402:lib/vsprintf.c **** 
 403:lib/vsprintf.c **** 			case 'n':
 404:lib/vsprintf.c **** 				/* FIXME:
 405:lib/vsprintf.c **** 				* What does C99 say about the overflow case here? */
 406:lib/vsprintf.c **** 				if (qualifier == 'l') {
 407:lib/vsprintf.c **** 					long * ip = va_arg(args, long *);
 408:lib/vsprintf.c **** 					*ip = (str - buf);
 409:lib/vsprintf.c **** 				} else if (qualifier == 'Z' || qualifier == 'z') {
 410:lib/vsprintf.c **** 					size_t * ip = va_arg(args, size_t *);
 411:lib/vsprintf.c **** 					*ip = (str - buf);
 412:lib/vsprintf.c **** 				} else {
 413:lib/vsprintf.c **** 					int * ip = va_arg(args, int *);
 840              		.loc 2 413 0
 841 0040 0580A0E1 		mov	r8, r5
 842              	.LBE3:
 376:lib/vsprintf.c **** 							*str = ' ';
 843              		.loc 2 376 0
 844 0044 2070A0E3 		mov	r7, #32
 845 0048 0A20A0E1 		mov	r2, sl
 846 004c 230100EA 		b	.L103
 847              	.LVL105:
 848              	.L168:
 285:lib/vsprintf.c **** 		if (*fmt != '%') {
 849              		.loc 2 285 0
 850 0050 250053E3 		cmp	r3, #37
 851 0054 0090A003 		moveq	r9, #0
 852 0058 0200000A 		beq	.L179
 286:lib/vsprintf.c **** 			if (str <= end)
 853              		.loc 2 286 0
 854 005c 040058E1 		cmp	r8, r4
 287:lib/vsprintf.c **** 				*str = *fmt;
 855              		.loc 2 287 0
 856 0060 0030C895 		strlsb	r3, [r8, #0]
 857 0064 E40000EA 		b	.L161
 858              	.L179:
 859              	.LVL106:
 295:lib/vsprintf.c **** 			++fmt;		/* this also skips first '%' */
 860              		.loc 2 295 0
 861 0068 18309DE5 		ldr	r3, [sp, #24]
 862 006c 011083E2 		add	r1, r3, #1
 863 0070 18108DE5 		str	r1, [sp, #24]
 296:lib/vsprintf.c **** 			switch (*fmt) {
 864              		.loc 2 296 0
 865 0074 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 866 0078 2B0053E3 		cmp	r3, #43
 867 007c 0C00000A 		beq	.L111
 868 0080 0400008A 		bhi	.L114
 869 0084 200053E3 		cmp	r3, #32
 870 0088 0B00000A 		beq	.L109
 871 008c 230053E3 		cmp	r3, #35
 872 0090 0F00001A 		bne	.L108
 873 0094 0A0000EA 		b	.L185
 874              	.L114:
 875 0098 2D0053E3 		cmp	r3, #45
 876 009c 0200000A 		beq	.L112
 877 00a0 300053E3 		cmp	r3, #48
 878 00a4 0A00001A 		bne	.L108
 879 00a8 070000EA 		b	.L186
 880              	.L112:
 297:lib/vsprintf.c **** 				case '-': flags |= LEFT; goto repeat;
 881              		.loc 2 297 0
 882 00ac 109089E3 		orr	r9, r9, #16
 883              	.LVL107:
 884 00b0 ECFFFFEA 		b	.L179
 885              	.L111:
 298:lib/vsprintf.c **** 				case '+': flags |= PLUS; goto repeat;
 886              		.loc 2 298 0
 887 00b4 049089E3 		orr	r9, r9, #4
 888              	.LVL108:
 889 00b8 EAFFFFEA 		b	.L179
 890              	.L109:
 299:lib/vsprintf.c **** 				case ' ': flags |= SPACE; goto repeat;
 891              		.loc 2 299 0
 892 00bc 089089E3 		orr	r9, r9, #8
 893              	.LVL109:
 894 00c0 E8FFFFEA 		b	.L179
 895              	.L185:
 300:lib/vsprintf.c **** 				case '#': flags |= SPECIAL; goto repeat;
 896              		.loc 2 300 0
 897 00c4 209089E3 		orr	r9, r9, #32
 898              	.LVL110:
 899 00c8 E6FFFFEA 		b	.L179
 900              	.L186:
 301:lib/vsprintf.c **** 				case '0': flags |= ZEROPAD; goto repeat;
 901              		.loc 2 301 0
 902 00cc 019089E3 		orr	r9, r9, #1
 903              	.LVL111:
 904 00d0 E4FFFFEA 		b	.L179
 905              	.L108:
 906              	.LVL112:
 306:lib/vsprintf.c **** 		if (isdigit(*fmt))
 907              		.loc 2 306 0
 908 00d4 38C49FE5 		ldr	ip, .L189
 909 00d8 0300DCE7 		ldrb	r0, [ip, r3]	@ zero_extendqisi2
 910 00dc 040010E3 		tst	r0, #4
 911 00e0 0500000A 		beq	.L116
 307:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 912              		.loc 2 307 0
 913 00e4 18008DE2 		add	r0, sp, #24
 914 00e8 10208DE5 		str	r2, [sp, #16]
 915 00ec FEFFFFEB 		bl	skip_atoi
 916              	.LVL113:
 917 00f0 10209DE5 		ldr	r2, [sp, #16]
 918 00f4 00B0A0E1 		mov	fp, r0
 919              	.LVL114:
 920 00f8 0A0000EA 		b	.L117
 921              	.LVL115:
 922              	.L116:
 308:lib/vsprintf.c **** 		else if (*fmt == '*') {
 923              		.loc 2 308 0
 924 00fc 2A0053E3 		cmp	r3, #42
 305:lib/vsprintf.c **** 		field_width = -1;
 925              		.loc 2 305 0
 926 0100 00B0E013 		mvnne	fp, #0
 308:lib/vsprintf.c **** 		else if (*fmt == '*') {
 927              		.loc 2 308 0
 928 0104 0700001A 		bne	.L117
 311:lib/vsprintf.c **** 			field_width = va_arg(args, int);
 929              		.loc 2 311 0
 930 0108 00B092E5 		ldr	fp, [r2, #0]
 309:lib/vsprintf.c **** 			++fmt;
 931              		.loc 2 309 0
 932 010c 011081E2 		add	r1, r1, #1
 312:lib/vsprintf.c **** 			if (field_width < 0) {
 933              		.loc 2 312 0
 934 0110 00005BE3 		cmp	fp, #0
 311:lib/vsprintf.c **** 			field_width = va_arg(args, int);
 935              		.loc 2 311 0
 936 0114 043082E2 		add	r3, r2, #4
 937              	.LVL116:
 309:lib/vsprintf.c **** 			++fmt;
 938              		.loc 2 309 0
 939 0118 18108DE5 		str	r1, [sp, #24]
 313:lib/vsprintf.c **** 				field_width = -field_width;
 940              		.loc 2 313 0
 941 011c 00B06BB2 		rsblt	fp, fp, #0
 942              	.LVL117:
 314:lib/vsprintf.c **** 				flags |= LEFT;
 943              		.loc 2 314 0
 944 0120 109089B3 		orrlt	r9, r9, #16
 945              	.LVL118:
 311:lib/vsprintf.c **** 			field_width = va_arg(args, int);
 946              		.loc 2 311 0
 947 0124 0320A0E1 		mov	r2, r3
 948              	.LVL119:
 949              	.L117:
 320:lib/vsprintf.c **** 		if (*fmt == '.') {
 950              		.loc 2 320 0
 951 0128 18309DE5 		ldr	r3, [sp, #24]
 952 012c 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 953 0130 2E0051E3 		cmp	r1, #46
 319:lib/vsprintf.c **** 		precision = -1;
 954              		.loc 2 319 0
 955 0134 0010E013 		mvnne	r1, #0
 320:lib/vsprintf.c **** 		if (*fmt == '.') {
 956              		.loc 2 320 0
 957 0138 1300001A 		bne	.L118
 321:lib/vsprintf.c **** 			++fmt;	
 958              		.loc 2 321 0
 959 013c 010083E2 		add	r0, r3, #1
 960 0140 18008DE5 		str	r0, [sp, #24]
 322:lib/vsprintf.c **** 			if (isdigit(*fmt))
 961              		.loc 2 322 0
 962 0144 C8C39FE5 		ldr	ip, .L189
 963 0148 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 964 014c 0310DCE7 		ldrb	r1, [ip, r3]	@ zero_extendqisi2
 965 0150 041011E2 		ands	r1, r1, #4
 966 0154 0500000A 		beq	.L119
 323:lib/vsprintf.c **** 				precision = skip_atoi(&fmt);
 967              		.loc 2 323 0
 968 0158 18008DE2 		add	r0, sp, #24
 969 015c 10208DE5 		str	r2, [sp, #16]
 970 0160 FEFFFFEB 		bl	skip_atoi
 971              	.LVL120:
 972 0164 10209DE5 		ldr	r2, [sp, #16]
 973 0168 0010A0E1 		mov	r1, r0
 974              	.LVL121:
 975 016c 050000EA 		b	.L120
 976              	.LVL122:
 977              	.L119:
 324:lib/vsprintf.c **** 			else if (*fmt == '*') {
 978              		.loc 2 324 0
 979 0170 2A0053E3 		cmp	r3, #42
 980 0174 0400001A 		bne	.L118
 981              	.LVL123:
 325:lib/vsprintf.c **** 				++fmt;
 982              		.loc 2 325 0
 983 0178 010080E2 		add	r0, r0, #1
 984 017c 18008DE5 		str	r0, [sp, #24]
 327:lib/vsprintf.c **** 				precision = va_arg(args, int);
 985              		.loc 2 327 0
 986 0180 001092E5 		ldr	r1, [r2, #0]
 987              	.LVL124:
 988 0184 042082E2 		add	r2, r2, #4
 989              	.LVL125:
 990              	.L120:
 330:lib/vsprintf.c **** 				precision = 0;
 991              		.loc 2 330 0
 992 0188 C11FC1E1 		bic	r1, r1, r1, asr #31
 993              	.LVL126:
 994              	.L118:
 335:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 995              		.loc 2 335 0
 996 018c 18009DE5 		ldr	r0, [sp, #24]
 997 0190 0030D0E5 		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 998 0194 680053E3 		cmp	r3, #104
 999 0198 6C005313 		cmpne	r3, #108
 1000 019c 0800000A 		beq	.L121
 335:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 1001              		.loc 2 335 0 is_stmt 0 discriminator 1
 1002 01a0 4C0053E3 		cmp	r3, #76
 1003 01a4 0600000A 		beq	.L121
 1004 01a8 5A0053E3 		cmp	r3, #90
 1005 01ac 0400000A 		beq	.L121
 336:lib/vsprintf.c **** 		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 1006              		.loc 2 336 0 is_stmt 1
 1007 01b0 7A0053E3 		cmp	r3, #122
 1008 01b4 0200000A 		beq	.L121
 336:lib/vsprintf.c **** 		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 1009              		.loc 2 336 0 is_stmt 0 discriminator 1
 1010 01b8 740053E3 		cmp	r3, #116
 334:lib/vsprintf.c **** 		qualifier = -1;
 1011              		.loc 2 334 0 is_stmt 1 discriminator 1
 1012 01bc 0030E013 		mvnne	r3, #0
 336:lib/vsprintf.c **** 		    *fmt =='Z' || *fmt == 'z' || *fmt == 't') {
 1013              		.loc 2 336 0 discriminator 1
 1014 01c0 0800001A 		bne	.L122
 1015              	.L121:
 1016              	.LVL127:
 338:lib/vsprintf.c **** 			++fmt;
 1017              		.loc 2 338 0
 1018 01c4 01C080E2 		add	ip, r0, #1
 339:lib/vsprintf.c **** 			if (qualifier == 'l' && *fmt == 'l') {
 1019              		.loc 2 339 0
 1020 01c8 6C0053E3 		cmp	r3, #108
 338:lib/vsprintf.c **** 			++fmt;
 1021              		.loc 2 338 0
 1022 01cc 18C08DE5 		str	ip, [sp, #24]
 339:lib/vsprintf.c **** 			if (qualifier == 'l' && *fmt == 'l') {
 1023              		.loc 2 339 0
 1024 01d0 0400001A 		bne	.L122
 339:lib/vsprintf.c **** 			if (qualifier == 'l' && *fmt == 'l') {
 1025              		.loc 2 339 0 is_stmt 0 discriminator 1
 1026 01d4 0100D0E5 		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1027 01d8 6C0050E3 		cmp	r0, #108
 1028              	.LVL128:
 341:lib/vsprintf.c **** 				++fmt;
 1029              		.loc 2 341 0 is_stmt 1 discriminator 1
 1030 01dc 01C08C02 		addeq	ip, ip, #1
 1031 01e0 18C08D05 		streq	ip, [sp, #24]
 340:lib/vsprintf.c **** 				qualifier = 'L';
 1032              		.loc 2 340 0 discriminator 1
 1033 01e4 4C30A003 		moveq	r3, #76
 1034              	.LVL129:
 1035              	.L122:
 348:lib/vsprintf.c **** 		switch (*fmt) {
 1036              		.loc 2 348 0
 1037 01e8 18009DE5 		ldr	r0, [sp, #24]
 1038 01ec 0000D0E5 		ldrb	r0, [r0, #0]	@ zero_extendqisi2
 1039 01f0 6E0050E3 		cmp	r0, #110
 1040 01f4 6000000A 		beq	.L128
 1041 01f8 0C00008A 		bhi	.L134
 1042 01fc 630050E3 		cmp	r0, #99
 1043 0200 1700000A 		beq	.L126
 1044 0204 0400008A 		bhi	.L135
 1045 0208 250050E3 		cmp	r0, #37
 1046 020c 6500000A 		beq	.L124
 1047 0210 580050E3 		cmp	r0, #88
 1048 0214 6C00001A 		bne	.L123
 1049 0218 670000EA 		b	.L187
 1050              	.L135:
 1051 021c 640050E3 		cmp	r0, #100
 1052 0220 6700000A 		beq	.L127
 1053 0224 690050E3 		cmp	r0, #105
 1054 0228 6700001A 		bne	.L123
 1055 022c 640000EA 		b	.L127
 1056              	.L134:
 1057 0230 730050E3 		cmp	r0, #115
 1058 0234 2000000A 		beq	.L131
 1059 0238 0400008A 		bhi	.L136
 1060 023c 6F0050E3 		cmp	r0, #111
 1061 0240 5B00000A 		beq	.L129
 1062 0244 700050E3 		cmp	r0, #112
 1063 0248 5F00001A 		bne	.L123
 1064 024c 3C0000EA 		b	.L188
 1065              	.L136:
 1066 0250 750050E3 		cmp	r0, #117
 1067 0254 6A00000A 		beq	.L132
 1068 0258 780050E3 		cmp	r0, #120
 1069 025c 5A00001A 		bne	.L123
 1070 0260 690000EA 		b	.L178
 1071              	.L126:
 350:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 1072              		.loc 2 350 0
 1073 0264 100019E3 		tst	r9, #16
 1074 0268 0600001A 		bne	.L137
 1075 026c 020000EA 		b	.L180
 1076              	.L140:
 352:lib/vsprintf.c **** 						if (str <= end)
 1077              		.loc 2 352 0
 1078 0270 040058E1 		cmp	r8, r4
 353:lib/vsprintf.c **** 							*str = ' ';
 1079              		.loc 2 353 0
 1080 0274 0070C895 		strlsb	r7, [r8, #0]
 354:lib/vsprintf.c **** 						++str;
 1081              		.loc 2 354 0
 1082 0278 018088E2 		add	r8, r8, #1
 1083              	.LVL130:
 1084              	.L180:
 351:lib/vsprintf.c **** 					while (--field_width > 0) {
 1085              		.loc 2 351 0 discriminator 1
 1086 027c 01B04BE2 		sub	fp, fp, #1
 1087              	.LVL131:
 1088 0280 00005BE3 		cmp	fp, #0
 1089 0284 F9FFFFCA 		bgt	.L140
 1090              	.L137:
 357:lib/vsprintf.c **** 				c = (unsigned char) va_arg(args, int);
 1091              		.loc 2 357 0
 1092 0288 043082E2 		add	r3, r2, #4
 1093              	.LVL132:
 1094 028c 002092E5 		ldr	r2, [r2, #0]
 1095              	.LVL133:
 358:lib/vsprintf.c **** 				if (str <= end)
 1096              		.loc 2 358 0
 1097 0290 040058E1 		cmp	r8, r4
 357:lib/vsprintf.c **** 				c = (unsigned char) va_arg(args, int);
 1098              		.loc 2 357 0
 1099 0294 0020C895 		strlsb	r2, [r8, #0]
 1100 0298 010000EA 		b	.L143
 1101              	.L144:
 362:lib/vsprintf.c **** 					if (str <= end)
 1102              		.loc 2 362 0
 1103 029c 040058E1 		cmp	r8, r4
 363:lib/vsprintf.c **** 						*str = ' ';
 1104              		.loc 2 363 0
 1105 02a0 0070C895 		strlsb	r7, [r8, #0]
 1106              	.L143:
 361:lib/vsprintf.c **** 				while (--field_width > 0) {
 1107              		.loc 2 361 0
 1108 02a4 01B04BE2 		sub	fp, fp, #1
 1109              	.LVL134:
 1110 02a8 00005BE3 		cmp	fp, #0
 364:lib/vsprintf.c **** 					++str;
 1111              		.loc 2 364 0
 1112 02ac 018088E2 		add	r8, r8, #1
 1113              	.LVL135:
 361:lib/vsprintf.c **** 				while (--field_width > 0) {
 1114              		.loc 2 361 0
 1115 02b0 F9FFFFCA 		bgt	.L144
 357:lib/vsprintf.c **** 				c = (unsigned char) va_arg(args, int);
 1116              		.loc 2 357 0
 1117 02b4 0320A0E1 		mov	r2, r3
 1118 02b8 850000EA 		b	.L107
 1119              	.LVL136:
 1120              	.L131:
 369:lib/vsprintf.c **** 				s = va_arg(args, char *);
 1121              		.loc 2 369 0
 1122 02bc 006092E5 		ldr	r6, [r2, #0]
 371:lib/vsprintf.c **** 				len = strnlen(s, precision);
 1123              		.loc 2 371 0
 1124 02c0 0600A0E1 		mov	r0, r6
 369:lib/vsprintf.c **** 				s = va_arg(args, char *);
 1125              		.loc 2 369 0
 1126 02c4 04A082E2 		add	sl, r2, #4
 1127              	.LVL137:
 371:lib/vsprintf.c **** 				len = strnlen(s, precision);
 1128              		.loc 2 371 0
 1129 02c8 FEFFFFEB 		bl	strnlen
 1130              	.LVL138:
 373:lib/vsprintf.c **** 				if (!(flags & LEFT)) {
 1131              		.loc 2 373 0
 1132 02cc 100019E3 		tst	r9, #16
 1133 02d0 0700001A 		bne	.L145
 1134 02d4 020000EA 		b	.L181
 1135              	.L148:
 375:lib/vsprintf.c **** 						if (str <= end)
 1136              		.loc 2 375 0
 1137 02d8 040058E1 		cmp	r8, r4
 376:lib/vsprintf.c **** 							*str = ' ';
 1138              		.loc 2 376 0
 1139 02dc 0070C895 		strlsb	r7, [r8, #0]
 377:lib/vsprintf.c **** 						++str;
 1140              		.loc 2 377 0
 1141 02e0 018088E2 		add	r8, r8, #1
 1142              	.LVL139:
 1143              	.L181:
 374:lib/vsprintf.c **** 					while (len < field_width--) {
 1144              		.loc 2 374 0 discriminator 1
 1145 02e4 01B04BE2 		sub	fp, fp, #1
 1146              	.LVL140:
 253:lib/vsprintf.c **** int vsnprintf(char *buf, size_t size, const char *fmt, va_list args)
 1147              		.loc 2 253 0 discriminator 1
 1148 02e8 01308BE2 		add	r3, fp, #1
 374:lib/vsprintf.c **** 					while (len < field_width--) {
 1149              		.loc 2 374 0 discriminator 1
 1150 02ec 030050E1 		cmp	r0, r3
 1151 02f0 F8FFFFBA 		blt	.L148
 1152              	.L145:
 1153              	.LVL141:
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 1154              		.loc 2 380 0
 1155 02f4 0820A0E1 		mov	r2, r8
 1156 02f8 0030A0E3 		mov	r3, #0
 1157 02fc 040000EA 		b	.L149
 1158              	.LVL142:
 1159              	.L151:
 381:lib/vsprintf.c **** 					if (str <= end)
 1160              		.loc 2 381 0
 1161 0300 040052E1 		cmp	r2, r4
 382:lib/vsprintf.c **** 						*str = *s;
 1162              		.loc 2 382 0
 1163 0304 0310D697 		ldrlsb	r1, [r6, r3]	@ zero_extendqisi2
 383:lib/vsprintf.c **** 					++str; ++s;
 1164              		.loc 2 383 0
 1165 0308 012082E2 		add	r2, r2, #1
 1166              	.LVL143:
 382:lib/vsprintf.c **** 						*str = *s;
 1167              		.loc 2 382 0
 1168 030c 0310C897 		strlsb	r1, [r8, r3]
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 1169              		.loc 2 380 0
 1170 0310 013083E2 		add	r3, r3, #1
 1171              	.LVL144:
 1172              	.L149:
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 1173              		.loc 2 380 0 is_stmt 0 discriminator 1
 1174 0314 000053E1 		cmp	r3, r0
 1175 0318 F8FFFFBA 		blt	.L151
 380:lib/vsprintf.c **** 				for (i = 0; i < len; ++i) {
 1176              		.loc 2 380 0
 1177 031c 0280A0E1 		mov	r8, r2
 1178 0320 030000EA 		b	.L152
 1179              	.LVL145:
 1180              	.L154:
 386:lib/vsprintf.c **** 					if (str <= end)
 1181              		.loc 2 386 0 is_stmt 1
 1182 0324 040058E1 		cmp	r8, r4
 387:lib/vsprintf.c **** 						*str = ' ';
 1183              		.loc 2 387 0
 1184 0328 0070C895 		strlsb	r7, [r8, #0]
 388:lib/vsprintf.c **** 					++str;
 1185              		.loc 2 388 0
 1186 032c 01B04BE2 		sub	fp, fp, #1
 1187 0330 018088E2 		add	r8, r8, #1
 1188              	.LVL146:
 1189              	.L152:
 385:lib/vsprintf.c **** 				while (len < field_width--) {
 1190              		.loc 2 385 0 discriminator 1
 1191 0334 0B0050E1 		cmp	r0, fp
 1192 0338 F9FFFFBA 		blt	.L154
 369:lib/vsprintf.c **** 				s = va_arg(args, char *);
 1193              		.loc 2 369 0
 1194 033c 0A20A0E1 		mov	r2, sl
 1195 0340 630000EA 		b	.L107
 1196              	.LVL147:
 1197              	.L188:
 393:lib/vsprintf.c **** 				if (field_width == -1) {
 1198              		.loc 2 393 0
 1199 0344 01007BE3 		cmn	fp, #1
 1200              	.LVL148:
 397:lib/vsprintf.c **** 				str = number(str, end,
 1201              		.loc 2 397 0
 1202 0348 1030A0E3 		mov	r3, #16
 1203              	.LVL149:
 395:lib/vsprintf.c **** 					flags |= ZEROPAD;
 1204              		.loc 2 395 0
 1205 034c 01908903 		orreq	r9, r9, #1
 1206              	.LVL150:
 394:lib/vsprintf.c **** 					field_width = 2*sizeof(void *);
 1207              		.loc 2 394 0
 1208 0350 09B08B02 		addeq	fp, fp, #9
 1209              	.LVL151:
 398:lib/vsprintf.c **** 						(unsigned long) va_arg(args, void *),
 1210              		.loc 2 398 0
 1211 0354 046082E2 		add	r6, r2, #4
 1212              	.LVL152:
 397:lib/vsprintf.c **** 				str = number(str, end,
 1213              		.loc 2 397 0
 1214 0358 0800A0E1 		mov	r0, r8
 1215 035c 002092E5 		ldr	r2, [r2, #0]
 1216 0360 00308DE5 		str	r3, [sp, #0]
 1217 0364 08108DE5 		str	r1, [sp, #8]
 1218 0368 04B08DE5 		str	fp, [sp, #4]
 1219 036c 0C908DE5 		str	r9, [sp, #12]
 1220 0370 0410A0E1 		mov	r1, r4
 1221              	.LVL153:
 1222 0374 0030A0E3 		mov	r3, #0
 1223 0378 520000EA 		b	.L184
 1224              	.LVL154:
 1225              	.L128:
 406:lib/vsprintf.c **** 				if (qualifier == 'l') {
 1226              		.loc 2 406 0
 1227 037c 6C0053E3 		cmp	r3, #108
 1228              	.LVL155:
 1229              	.LBB4:
 408:lib/vsprintf.c **** 					*ip = (str - buf);
 1230              		.loc 2 408 0
 1231 0380 00309205 		ldreq	r3, [r2, #0]
 1232              	.LVL156:
 1233 0384 08106500 		rsbeq	r1, r5, r8
 1234              	.LVL157:
 1235 0388 00108305 		streq	r1, [r3, #0]
 407:lib/vsprintf.c **** 					long * ip = va_arg(args, long *);
 1236              		.loc 2 407 0
 1237 038c 04208202 		addeq	r2, r2, #4
 1238              	.LVL158:
 1239 0390 4F00000A 		beq	.L107
 1240              	.LVL159:
 1241              	.L156:
 1242 0394 046082E2 		add	r6, r2, #4
 1243              	.LBE4:
 1244              	.LBB5:
 414:lib/vsprintf.c **** 					*ip = (str - buf);
 1245              		.loc 2 414 0
 1246 0398 002092E5 		ldr	r2, [r2, #0]
 1247              	.LVL160:
 1248 039c 083065E0 		rsb	r3, r5, r8
 1249              	.LVL161:
 1250 03a0 003082E5 		str	r3, [r2, #0]
 1251 03a4 490000EA 		b	.L183
 1252              	.LVL162:
 1253              	.L124:
 1254              	.LBE5:
 415:lib/vsprintf.c **** 				}
 416:lib/vsprintf.c **** 				continue;
 417:lib/vsprintf.c **** 
 418:lib/vsprintf.c **** 			case '%':
 419:lib/vsprintf.c **** 				if (str <= end)
 1255              		.loc 2 419 0
 1256 03a8 040058E1 		cmp	r8, r4
 420:lib/vsprintf.c **** 					*str = '%';
 1257              		.loc 2 420 0
 1258 03ac 0000C895 		strlsb	r0, [r8, #0]
 1259 03b0 110000EA 		b	.L161
 1260              	.L129:
 1261              	.LVL163:
 421:lib/vsprintf.c **** 				++str;
 422:lib/vsprintf.c **** 				continue;
 423:lib/vsprintf.c **** 
 424:lib/vsprintf.c **** 				/* integer number formats - set up the flags and "break" */
 425:lib/vsprintf.c **** 			case 'o':
 426:lib/vsprintf.c **** 				base = 8;
 1262              		.loc 2 426 0
 1263 03b4 0800A0E3 		mov	r0, #8
 427:lib/vsprintf.c **** 				break;
 1264              		.loc 2 427 0
 1265 03b8 140000EA 		b	.L133
 1266              	.LVL164:
 1267              	.L187:
 428:lib/vsprintf.c **** 
 429:lib/vsprintf.c **** 			case 'X':
 430:lib/vsprintf.c **** 				flags |= LARGE;
 1268              		.loc 2 430 0
 1269 03bc 409089E3 		orr	r9, r9, #64
 1270              	.LVL165:
 1271 03c0 110000EA 		b	.L178
 1272              	.L127:
 431:lib/vsprintf.c **** 			case 'x':
 432:lib/vsprintf.c **** 				base = 16;
 433:lib/vsprintf.c **** 				break;
 434:lib/vsprintf.c **** 
 435:lib/vsprintf.c **** 			case 'd':
 436:lib/vsprintf.c **** 			case 'i':
 437:lib/vsprintf.c **** 				flags |= SIGN;
 1273              		.loc 2 437 0
 1274 03c4 029089E3 		orr	r9, r9, #2
 1275              	.LVL166:
 1276 03c8 0D0000EA 		b	.L132
 1277              	.L123:
 438:lib/vsprintf.c **** 			case 'u':
 439:lib/vsprintf.c **** 				break;
 440:lib/vsprintf.c **** 
 441:lib/vsprintf.c **** 			default:
 442:lib/vsprintf.c **** 				if (str <= end)
 1278              		.loc 2 442 0
 1279 03cc 040058E1 		cmp	r8, r4
 443:lib/vsprintf.c **** 					*str = '%';
 1280              		.loc 2 443 0
 1281 03d0 25C0A093 		movls	ip, #37
 1282 03d4 00C0C895 		strlsb	ip, [r8, #0]
 444:lib/vsprintf.c **** 				++str;
 445:lib/vsprintf.c **** 				if (*fmt) {
 1283              		.loc 2 445 0
 1284 03d8 18309DE5 		ldr	r3, [sp, #24]
 1285              	.LVL167:
 1286 03dc 0010D3E5 		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 1287              	.LVL168:
 1288 03e0 000051E3 		cmp	r1, #0
 446:lib/vsprintf.c **** 					if (str <= end)
 447:lib/vsprintf.c **** 						*str = *fmt;
 448:lib/vsprintf.c **** 					++str;
 449:lib/vsprintf.c **** 				} else {
 450:lib/vsprintf.c **** 					--fmt;
 1289              		.loc 2 450 0
 1290 03e4 01304302 		subeq	r3, r3, #1
 444:lib/vsprintf.c **** 				++str;
 1291              		.loc 2 444 0
 1292 03e8 018088E2 		add	r8, r8, #1
 1293              	.LVL169:
 1294              		.loc 2 450 0
 1295 03ec 18308D05 		streq	r3, [sp, #24]
 445:lib/vsprintf.c **** 				if (*fmt) {
 1296              		.loc 2 445 0
 1297 03f0 3700000A 		beq	.L107
 446:lib/vsprintf.c **** 					if (str <= end)
 1298              		.loc 2 446 0
 1299 03f4 040058E1 		cmp	r8, r4
 447:lib/vsprintf.c **** 						*str = *fmt;
 1300              		.loc 2 447 0
 1301 03f8 0010C895 		strlsb	r1, [r8, #0]
 1302              	.LVL170:
 1303              	.L161:
 448:lib/vsprintf.c **** 					++str;
 1304              		.loc 2 448 0
 1305 03fc 018088E2 		add	r8, r8, #1
 1306              	.LVL171:
 1307 0400 330000EA 		b	.L107
 1308              	.LVL172:
 1309              	.L132:
 346:lib/vsprintf.c **** 		base = 10;
 1310              		.loc 2 346 0
 1311 0404 0A00A0E3 		mov	r0, #10
 1312 0408 000000EA 		b	.L133
 1313              	.L178:
 432:lib/vsprintf.c **** 				base = 16;
 1314              		.loc 2 432 0
 1315 040c 1000A0E3 		mov	r0, #16
 1316              	.LVL173:
 1317              	.L133:
 451:lib/vsprintf.c **** 				}
 452:lib/vsprintf.c **** 				continue;
 453:lib/vsprintf.c **** 		}
 454:lib/vsprintf.c **** 		if (qualifier == 'L')
 1318              		.loc 2 454 0
 1319 0410 4C0053E3 		cmp	r3, #76
 455:lib/vsprintf.c **** 			num = va_arg(args, long long);
 1320              		.loc 2 455 0
 1321 0414 08608202 		addeq	r6, r2, #8
 1322              	.LVL174:
 1323 0418 0C009208 		ldmeqia	r2, {r2-r3}
 1324              	.LVL175:
 1325 041c 2300000A 		beq	.L163
 1326              	.LVL176:
 1327              	.L162:
 456:lib/vsprintf.c **** 		else if (qualifier == 'l') {
 1328              		.loc 2 456 0
 1329 0420 6C0053E3 		cmp	r3, #108
 1330 0424 0500001A 		bne	.L164
 457:lib/vsprintf.c **** 			num = va_arg(args, unsigned long);
 1331              		.loc 2 457 0
 1332 0428 046082E2 		add	r6, r2, #4
 1333              	.LVL177:
 1334 042c 002092E5 		ldr	r2, [r2, #0]
 458:lib/vsprintf.c **** 			if (flags & SIGN)
 1335              		.loc 2 458 0
 1336 0430 020019E3 		tst	r9, #2
 457:lib/vsprintf.c **** 			num = va_arg(args, unsigned long);
 1337              		.loc 2 457 0
 1338 0434 0030A0E3 		mov	r3, #0
 1339              	.LVL178:
 1340              		.loc 2 458 0
 1341 0438 1C00000A 		beq	.L163
 1342 043c 1A0000EA 		b	.L182
 1343              	.LVL179:
 1344              	.L164:
 459:lib/vsprintf.c **** 				num = (signed long) num;
 460:lib/vsprintf.c **** 		} else if (qualifier == 'Z' || qualifier == 'z') {
 1345              		.loc 2 460 0
 1346 0440 5A0053E3 		cmp	r3, #90
 1347 0444 7A005313 		cmpne	r3, #122
 461:lib/vsprintf.c **** 			num = va_arg(args, size_t);
 1348              		.loc 2 461 0
 1349 0448 04608202 		addeq	r6, r2, #4
 1350              	.LVL180:
 1351 044c 00209205 		ldreq	r2, [r2, #0]
 1352 0450 0030A003 		moveq	r3, #0
 460:lib/vsprintf.c **** 		} else if (qualifier == 'Z' || qualifier == 'z') {
 1353              		.loc 2 460 0
 1354 0454 1500000A 		beq	.L163
 462:lib/vsprintf.c **** 		} else if (qualifier == 't') {
 1355              		.loc 2 462 0
 1356 0458 740053E3 		cmp	r3, #116
 463:lib/vsprintf.c **** 			num = va_arg(args, long);
 1357              		.loc 2 463 0
 1358 045c 04608202 		addeq	r6, r2, #4
 1359              	.LVL181:
 1360 0460 00209205 		ldreq	r2, [r2, #0]
 462:lib/vsprintf.c **** 		} else if (qualifier == 't') {
 1361              		.loc 2 462 0
 1362 0464 1000000A 		beq	.L182
 464:lib/vsprintf.c **** 		} else if (qualifier == 'h') {
 1363              		.loc 2 464 0
 1364 0468 680053E3 		cmp	r3, #104
 1365 046c 046082E2 		add	r6, r2, #4
 1366              	.LVL182:
 1367 0470 02C009E2 		and	ip, r9, #2
 1368 0474 002092E5 		ldr	r2, [r2, #0]
 1369 0478 0800001A 		bne	.L167
 1370              	.LVL183:
 465:lib/vsprintf.c **** 			num = (unsigned short) va_arg(args, int);
 1371              		.loc 2 465 0
 1372 047c 0228A0E1 		mov	r2, r2, asl #16
 1373 0480 22E8A0E1 		mov	lr, r2, lsr #16
 466:lib/vsprintf.c **** 			if (flags & SIGN)
 1374              		.loc 2 466 0
 1375 0484 00005CE3 		cmp	ip, #0
 465:lib/vsprintf.c **** 			num = (unsigned short) va_arg(args, int);
 1376              		.loc 2 465 0
 1377 0488 0E20A0E1 		mov	r2, lr
 1378 048c 0030A0E3 		mov	r3, #0
 1379              	.LVL184:
 467:lib/vsprintf.c **** 				num = (signed short) num;
 1380              		.loc 2 467 0
 1381 0490 0E28A011 		movne	r2, lr, asl #16
 1382              	.LVL185:
 1383 0494 4228A011 		movne	r2, r2, asr #16
 466:lib/vsprintf.c **** 			if (flags & SIGN)
 1384              		.loc 2 466 0
 1385 0498 0300001A 		bne	.L182
 1386 049c 030000EA 		b	.L163
 1387              	.LVL186:
 1388              	.L167:
 468:lib/vsprintf.c **** 		} else {
 469:lib/vsprintf.c **** 			num = va_arg(args, unsigned int);
 470:lib/vsprintf.c **** 			if (flags & SIGN)
 1389              		.loc 2 470 0
 1390 04a0 00005CE3 		cmp	ip, #0
 469:lib/vsprintf.c **** 			num = va_arg(args, unsigned int);
 1391              		.loc 2 469 0
 1392 04a4 0030A0E3 		mov	r3, #0
 1393              	.LVL187:
 1394              		.loc 2 470 0
 1395 04a8 0000000A 		beq	.L163
 1396              	.LVL188:
 1397              	.L182:
 471:lib/vsprintf.c **** 				num = (signed int) num;
 1398              		.loc 2 471 0
 1399 04ac C23FA0E1 		mov	r3, r2, asr #31
 1400              	.LVL189:
 1401              	.L163:
 472:lib/vsprintf.c **** 		}
 473:lib/vsprintf.c **** 		str = number(str, end, num, base,
 1402              		.loc 2 473 0
 1403 04b0 04B08DE5 		str	fp, [sp, #4]
 1404 04b4 0C908DE5 		str	r9, [sp, #12]
 1405 04b8 00008DE5 		str	r0, [sp, #0]
 1406 04bc 08108DE5 		str	r1, [sp, #8]
 1407 04c0 0800A0E1 		mov	r0, r8
 1408              	.LVL190:
 1409 04c4 0410A0E1 		mov	r1, r4
 1410              	.LVL191:
 1411              	.L184:
 1412 04c8 FEFFFFEB 		bl	number
 1413              	.LVL192:
 1414 04cc 0080A0E1 		mov	r8, r0
 1415              	.LVL193:
 1416              	.L183:
 1417 04d0 0620A0E1 		mov	r2, r6
 1418              	.LVL194:
 1419              	.L107:
 284:lib/vsprintf.c **** 	for (; *fmt ; ++fmt) {
 1420              		.loc 2 284 0
 1421 04d4 18309DE5 		ldr	r3, [sp, #24]
 1422 04d8 013083E2 		add	r3, r3, #1
 1423 04dc 18308DE5 		str	r3, [sp, #24]
 1424              	.LVL195:
 1425              	.L103:
 284:lib/vsprintf.c **** 	for (; *fmt ; ++fmt) {
 1426              		.loc 2 284 0 is_stmt 0 discriminator 1
 1427 04e0 18309DE5 		ldr	r3, [sp, #24]
 1428 04e4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1429 04e8 000053E3 		cmp	r3, #0
 1430 04ec D7FEFF1A 		bne	.L168
 474:lib/vsprintf.c **** 				field_width, precision, flags);
 475:lib/vsprintf.c **** 	}
 476:lib/vsprintf.c **** 	if (str <= end)
 1431              		.loc 2 476 0 is_stmt 1
 1432 04f0 040058E1 		cmp	r8, r4
 477:lib/vsprintf.c **** 		*str = '\0';
 1433              		.loc 2 477 0
 1434 04f4 0030C895 		strlsb	r3, [r8, #0]
 476:lib/vsprintf.c **** 	if (str <= end)
 1435              		.loc 2 476 0
 1436 04f8 0200009A 		bls	.L170
 478:lib/vsprintf.c **** 	else if (size > 0)
 1437              		.loc 2 478 0
 1438 04fc 14209DE5 		ldr	r2, [sp, #20]
 1439              	.LVL196:
 1440 0500 000052E3 		cmp	r2, #0
 479:lib/vsprintf.c **** 		/* don't write out a null byte if the buf size is zero */
 480:lib/vsprintf.c **** 		*end = '\0';
 1441              		.loc 2 480 0
 1442 0504 0030C415 		strneb	r3, [r4, #0]
 1443              	.L170:
 481:lib/vsprintf.c **** 	/* the trailing null byte doesn't count towards the total
 482:lib/vsprintf.c **** 	* ++str;
 483:lib/vsprintf.c **** 	*/
 484:lib/vsprintf.c **** 	return str-buf;
 1444              		.loc 2 484 0
 1445 0508 080065E0 		rsb	r0, r5, r8
 1446              	.LVL197:
 1447              	.L101:
 485:lib/vsprintf.c **** }
 1448              		.loc 2 485 0
 1449 050c 1CD08DE2 		add	sp, sp, #28
 1450 0510 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1451              	.L190:
 1452              		.align	2
 1453              	.L189:
 1454 0514 00000000 		.word	_ctype
 1455              		.cfi_endproc
 1456              	.LFE8:
 1458              		.section	.text.vscnprintf,"ax",%progbits
 1459              		.align	2
 1460              		.global	vscnprintf
 1462              	vscnprintf:
 1463              	.LFB9:
 486:lib/vsprintf.c **** 
 487:lib/vsprintf.c **** 
 488:lib/vsprintf.c **** /**
 489:lib/vsprintf.c ****  * vscnprintf - Format a string and place it in a buffer
 490:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 491:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 492:lib/vsprintf.c ****  * @fmt: The format string to use
 493:lib/vsprintf.c ****  * @args: Arguments for the format string
 494:lib/vsprintf.c ****  *
 495:lib/vsprintf.c ****  * The return value is the number of characters which have been written into
 496:lib/vsprintf.c ****  * the @buf not including the trailing '\0'. If @size is <= 0 the function
 497:lib/vsprintf.c ****  * returns 0.
 498:lib/vsprintf.c ****  *
 499:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 500:lib/vsprintf.c ****  * You probably want scnprintf instead.
 501:lib/vsprintf.c ****  */
 502:lib/vsprintf.c **** int vscnprintf(char *buf, size_t size, const char *fmt, va_list args)
 503:lib/vsprintf.c **** {
 1464              		.loc 2 503 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 0
 1467              		@ frame_needed = 0, uses_anonymous_args = 0
 1468              	.LVL198:
 1469 0000 10402DE9 		stmfd	sp!, {r4, lr}
 1470              	.LCFI9:
 1471              		.cfi_def_cfa_offset 8
 1472              		.loc 2 503 0
 1473 0004 0140A0E1 		mov	r4, r1
 1474              		.cfi_offset 14, -4
 1475              		.cfi_offset 4, -8
 504:lib/vsprintf.c **** 	unsigned int i;
 505:lib/vsprintf.c **** 
 506:lib/vsprintf.c **** 	i=vsnprintf(buf,size,fmt,args);
 1476              		.loc 2 506 0
 1477 0008 FEFFFFEB 		bl	vsnprintf
 1478              	.LVL199:
 507:lib/vsprintf.c **** 	return (i >= size) ? (size - 1) : i;
 1479              		.loc 2 507 0
 1480 000c 040050E1 		cmp	r0, r4
 1481 0010 01004422 		subcs	r0, r4, #1
 1482              	.LVL200:
 508:lib/vsprintf.c **** }
 1483              		.loc 2 508 0
 1484 0014 1080BDE8 		ldmfd	sp!, {r4, pc}
 1485              		.cfi_endproc
 1486              	.LFE9:
 1488              		.section	.text.snprintf,"ax",%progbits
 1489              		.align	2
 1490              		.global	snprintf
 1492              	snprintf:
 1493              	.LFB10:
 509:lib/vsprintf.c **** 
 510:lib/vsprintf.c **** 
 511:lib/vsprintf.c **** /**
 512:lib/vsprintf.c ****  * snprintf - Format a string and place it in a buffer
 513:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 514:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 515:lib/vsprintf.c ****  * @fmt: The format string to use
 516:lib/vsprintf.c ****  * @...: Arguments for the format string
 517:lib/vsprintf.c ****  *
 518:lib/vsprintf.c ****  * The return value is the number of characters which would be
 519:lib/vsprintf.c ****  * generated for the given input, excluding the trailing null,
 520:lib/vsprintf.c ****  * as per ISO C99.  If the return is greater than or equal to
 521:lib/vsprintf.c ****  * @size, the resulting string is truncated.
 522:lib/vsprintf.c ****  */
 523:lib/vsprintf.c **** int snprintf(char * buf, size_t size, const char *fmt, ...)
 524:lib/vsprintf.c **** {
 1494              		.loc 2 524 0
 1495              		.cfi_startproc
 1496              		@ args = 4, pretend = 8, frame = 4
 1497              		@ frame_needed = 0, uses_anonymous_args = 1
 1498              	.LVL201:
 1499 0000 0C002DE9 		stmfd	sp!, {r2, r3}
 1500              	.LCFI10:
 1501              		.cfi_def_cfa_offset 8
 1502 0004 01402DE9 		stmfd	sp!, {r0, lr}
 1503              	.LCFI11:
 1504              		.cfi_def_cfa_offset 16
 525:lib/vsprintf.c **** 	va_list args;
 526:lib/vsprintf.c **** 	int i;
 527:lib/vsprintf.c **** 
 528:lib/vsprintf.c **** 	va_start(args, fmt);
 529:lib/vsprintf.c **** 	i=vsnprintf(buf,size,fmt,args);
 1505              		.loc 2 529 0
 1506 0008 08209DE5 		ldr	r2, [sp, #8]
 1507              		.cfi_offset 14, -12
 1508              		.cfi_offset 0, -16
 1509              		.cfi_offset 3, -4
 1510              		.cfi_offset 2, -8
 528:lib/vsprintf.c **** 	va_start(args, fmt);
 1511              		.loc 2 528 0
 1512 000c 0C308DE2 		add	r3, sp, #12
 1513 0010 00308DE5 		str	r3, [sp, #0]
 1514              	.LVL202:
 1515              		.loc 2 529 0
 1516 0014 FEFFFFEB 		bl	vsnprintf
 1517              	.LVL203:
 530:lib/vsprintf.c **** 	va_end(args);
 531:lib/vsprintf.c **** 	return i;
 532:lib/vsprintf.c **** }
 1518              		.loc 2 532 0
 1519 0018 0840BDE8 		ldmfd	sp!, {r3, lr}
 1520 001c 08D08DE2 		add	sp, sp, #8
 1521 0020 1EFF2FE1 		bx	lr
 1522              		.cfi_endproc
 1523              	.LFE10:
 1525              		.section	.text.scnprintf,"ax",%progbits
 1526              		.align	2
 1527              		.global	scnprintf
 1529              	scnprintf:
 1530              	.LFB11:
 533:lib/vsprintf.c **** 
 534:lib/vsprintf.c **** 
 535:lib/vsprintf.c **** /**
 536:lib/vsprintf.c ****  * scnprintf - Format a string and place it in a buffer
 537:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 538:lib/vsprintf.c ****  * @size: The size of the buffer, including the trailing null space
 539:lib/vsprintf.c ****  * @fmt: The format string to use
 540:lib/vsprintf.c ****  * @...: Arguments for the format string
 541:lib/vsprintf.c ****  *
 542:lib/vsprintf.c ****  * The return value is the number of characters written into @buf not including
 543:lib/vsprintf.c ****  * the trailing '\0'. If @size is <= 0 the function returns 0. If the return is
 544:lib/vsprintf.c ****  * greater than or equal to @size, the resulting string is truncated.
 545:lib/vsprintf.c ****  */
 546:lib/vsprintf.c **** 
 547:lib/vsprintf.c **** int scnprintf(char * buf, size_t size, const char *fmt, ...)
 548:lib/vsprintf.c **** {
 1531              		.loc 2 548 0
 1532              		.cfi_startproc
 1533              		@ args = 4, pretend = 8, frame = 4
 1534              		@ frame_needed = 0, uses_anonymous_args = 1
 1535              	.LVL204:
 1536 0000 0C002DE9 		stmfd	sp!, {r2, r3}
 1537              	.LCFI12:
 1538              		.cfi_def_cfa_offset 8
 1539 0004 11402DE9 		stmfd	sp!, {r0, r4, lr}
 1540              	.LCFI13:
 1541              		.cfi_def_cfa_offset 20
 549:lib/vsprintf.c **** 	va_list args;
 550:lib/vsprintf.c **** 	unsigned int i;
 551:lib/vsprintf.c **** 
 552:lib/vsprintf.c **** 	va_start(args, fmt);
 553:lib/vsprintf.c **** 	i = vsnprintf(buf, size, fmt, args);
 1542              		.loc 2 553 0
 1543 0008 0C209DE5 		ldr	r2, [sp, #12]
 1544              		.cfi_offset 14, -12
 1545              		.cfi_offset 4, -16
 1546              		.cfi_offset 0, -20
 1547              		.cfi_offset 3, -4
 1548              		.cfi_offset 2, -8
 552:lib/vsprintf.c **** 	va_start(args, fmt);
 1549              		.loc 2 552 0
 1550 000c 10308DE2 		add	r3, sp, #16
 548:lib/vsprintf.c **** {
 1551              		.loc 2 548 0
 1552 0010 0140A0E1 		mov	r4, r1
 552:lib/vsprintf.c **** 	va_start(args, fmt);
 1553              		.loc 2 552 0
 1554 0014 00308DE5 		str	r3, [sp, #0]
 1555              	.LVL205:
 1556              		.loc 2 553 0
 1557 0018 FEFFFFEB 		bl	vsnprintf
 1558              	.LVL206:
 554:lib/vsprintf.c **** 	va_end(args);
 555:lib/vsprintf.c **** 	return (i >= size) ? (size - 1) : i;
 1559              		.loc 2 555 0
 1560 001c 040050E1 		cmp	r0, r4
 1561 0020 01004422 		subcs	r0, r4, #1
 1562              	.LVL207:
 556:lib/vsprintf.c **** }
 1563              		.loc 2 556 0
 1564 0024 1840BDE8 		ldmfd	sp!, {r3, r4, lr}
 1565 0028 08D08DE2 		add	sp, sp, #8
 1566 002c 1EFF2FE1 		bx	lr
 1567              		.cfi_endproc
 1568              	.LFE11:
 1570              		.section	.text.vsprintf,"ax",%progbits
 1571              		.align	2
 1572              		.global	vsprintf
 1574              	vsprintf:
 1575              	.LFB12:
 557:lib/vsprintf.c **** 
 558:lib/vsprintf.c **** /**
 559:lib/vsprintf.c ****  * vsprintf - Format a string and place it in a buffer
 560:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 561:lib/vsprintf.c ****  * @fmt: The format string to use
 562:lib/vsprintf.c ****  * @args: Arguments for the format string
 563:lib/vsprintf.c ****  *
 564:lib/vsprintf.c ****  * The function returns the number of characters written
 565:lib/vsprintf.c ****  * into @buf. Use vsnprintf or vscnprintf in order to avoid
 566:lib/vsprintf.c ****  * buffer overflows.
 567:lib/vsprintf.c ****  *
 568:lib/vsprintf.c ****  * Call this function if you are already dealing with a va_list.
 569:lib/vsprintf.c ****  * You probably want sprintf instead.
 570:lib/vsprintf.c ****  */
 571:lib/vsprintf.c **** int vsprintf(char *buf, const char *fmt, va_list args)
 572:lib/vsprintf.c **** {
 1576              		.loc 2 572 0
 1577              		.cfi_startproc
 1578              		@ args = 0, pretend = 0, frame = 0
 1579              		@ frame_needed = 0, uses_anonymous_args = 0
 1580              		@ link register save eliminated.
 1581              	.LVL208:
 1582              		.loc 2 572 0
 1583 0000 01C0A0E1 		mov	ip, r1
 1584 0004 0230A0E1 		mov	r3, r2
 573:lib/vsprintf.c **** 	return vsnprintf(buf, INT_MAX, fmt, args);
 1585              		.loc 2 573 0
 1586 0008 0211E0E3 		mvn	r1, #-2147483648
 1587              	.LVL209:
 1588 000c 0C20A0E1 		mov	r2, ip
 1589              	.LVL210:
 574:lib/vsprintf.c **** }
 1590              		.loc 2 574 0
 573:lib/vsprintf.c **** 	return vsnprintf(buf, INT_MAX, fmt, args);
 1591              		.loc 2 573 0
 1592 0010 FEFFFFEA 		b	vsnprintf
 1593              		.cfi_endproc
 1594              	.LFE12:
 1596              		.section	.text.sprintf,"ax",%progbits
 1597              		.align	2
 1598              		.global	sprintf
 1600              	sprintf:
 1601              	.LFB13:
 575:lib/vsprintf.c **** 
 576:lib/vsprintf.c **** 
 577:lib/vsprintf.c **** /**
 578:lib/vsprintf.c ****  * sprintf - Format a string and place it in a buffer
 579:lib/vsprintf.c ****  * @buf: The buffer to place the result into
 580:lib/vsprintf.c ****  * @fmt: The format string to use
 581:lib/vsprintf.c ****  * @...: Arguments for the format string
 582:lib/vsprintf.c ****  *
 583:lib/vsprintf.c ****  * The function returns the number of characters written
 584:lib/vsprintf.c ****  * into @buf. Use snprintf or scnprintf in order to avoid
 585:lib/vsprintf.c ****  * buffer overflows.
 586:lib/vsprintf.c ****  */
 587:lib/vsprintf.c **** int sprintf(char * buf, const char *fmt, ...)
 588:lib/vsprintf.c **** {
 1602              		.loc 2 588 0
 1603              		.cfi_startproc
 1604              		@ args = 4, pretend = 12, frame = 4
 1605              		@ frame_needed = 0, uses_anonymous_args = 1
 1606              	.LVL211:
 1607 0000 0E002DE9 		stmfd	sp!, {r1, r2, r3}
 1608              	.LCFI14:
 1609              		.cfi_def_cfa_offset 12
 1610 0004 01402DE9 		stmfd	sp!, {r0, lr}
 1611              	.LCFI15:
 1612              		.cfi_def_cfa_offset 20
 589:lib/vsprintf.c **** 	va_list args;
 590:lib/vsprintf.c **** 	int i;
 591:lib/vsprintf.c **** 
 592:lib/vsprintf.c **** 	va_start(args, fmt);
 593:lib/vsprintf.c **** 	i=vsnprintf(buf, INT_MAX, fmt, args);
 1613              		.loc 2 593 0
 1614 0008 0211E0E3 		mvn	r1, #-2147483648
 1615              		.cfi_offset 14, -16
 1616              		.cfi_offset 0, -20
 1617              		.cfi_offset 3, -4
 1618              		.cfi_offset 2, -8
 1619              		.cfi_offset 1, -12
 592:lib/vsprintf.c **** 	va_start(args, fmt);
 1620              		.loc 2 592 0
 1621 000c 0C308DE2 		add	r3, sp, #12
 1622              		.loc 2 593 0
 1623 0010 08209DE5 		ldr	r2, [sp, #8]
 592:lib/vsprintf.c **** 	va_start(args, fmt);
 1624              		.loc 2 592 0
 1625 0014 00308DE5 		str	r3, [sp, #0]
 1626              	.LVL212:
 1627              		.loc 2 593 0
 1628 0018 FEFFFFEB 		bl	vsnprintf
 1629              	.LVL213:
 594:lib/vsprintf.c **** 	va_end(args);
 595:lib/vsprintf.c **** 	return i;
 596:lib/vsprintf.c **** }
 1630              		.loc 2 596 0
 1631 001c 0840BDE8 		ldmfd	sp!, {r3, lr}
 1632 0020 0CD08DE2 		add	sp, sp, #12
 1633 0024 1EFF2FE1 		bx	lr
 1634              		.cfi_endproc
 1635              	.LFE13:
 1637              		.section	.text.vsscanf,"ax",%progbits
 1638              		.align	2
 1639              		.global	vsscanf
 1641              	vsscanf:
 1642              	.LFB14:
 597:lib/vsprintf.c **** 
 598:lib/vsprintf.c **** 
 599:lib/vsprintf.c **** /**
 600:lib/vsprintf.c ****  * vsscanf - Unformat a buffer into a list of arguments
 601:lib/vsprintf.c ****  * @buf:	input buffer
 602:lib/vsprintf.c ****  * @fmt:	format of buffer
 603:lib/vsprintf.c ****  * @args:	arguments
 604:lib/vsprintf.c ****  */
 605:lib/vsprintf.c **** int vsscanf(const char * buf, const char * fmt, va_list args)
 606:lib/vsprintf.c **** {
 1643              		.loc 2 606 0
 1644              		.cfi_startproc
 1645              		@ args = 0, pretend = 0, frame = 8
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 1647              	.LVL214:
 1648 0000 F34F2DE9 		stmfd	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1649              	.LCFI16:
 1650              		.cfi_def_cfa_offset 44
 1651              	.LVL215:
 607:lib/vsprintf.c **** 	const char *str = buf;
 608:lib/vsprintf.c **** 	char *next;
 609:lib/vsprintf.c **** 	char digit;
 610:lib/vsprintf.c **** 	int num = 0;
 1652              		.loc 2 610 0
 1653 0004 0080A0E3 		mov	r8, #0
 1654              		.cfi_offset 14, -4
 1655              		.cfi_offset 11, -8
 1656              		.cfi_offset 10, -12
 1657              		.cfi_offset 9, -16
 1658              		.cfi_offset 8, -20
 1659              		.cfi_offset 7, -24
 1660              		.cfi_offset 6, -28
 1661              		.cfi_offset 5, -32
 1662              		.cfi_offset 4, -36
 1663              		.cfi_offset 1, -40
 1664              		.cfi_offset 0, -44
 606:lib/vsprintf.c **** {
 1665              		.loc 2 606 0
 1666 0008 00A0A0E1 		mov	sl, r0
 1667              	.LVL216:
 1668 000c 00108DE5 		str	r1, [sp, #0]
 1669 0010 0290A0E1 		mov	r9, r2
 607:lib/vsprintf.c **** 	const char *str = buf;
 1670              		.loc 2 607 0
 1671 0014 0040A0E1 		mov	r4, r0
 611:lib/vsprintf.c **** 	int qualifier;
 612:lib/vsprintf.c **** 	int base;
 613:lib/vsprintf.c **** 	int field_width;
 614:lib/vsprintf.c **** 	int is_sign = 0;
 615:lib/vsprintf.c **** 
 616:lib/vsprintf.c **** 	while(*fmt && *str) {
 617:lib/vsprintf.c **** 		/* skip any white space in format */
 618:lib/vsprintf.c **** 		/* white space in format matchs any amount of
 619:lib/vsprintf.c **** 		 * white space, including none, in the input.
 620:lib/vsprintf.c **** 		 */
 621:lib/vsprintf.c **** 		if (isspace(*fmt)) {
 1672              		.loc 2 621 0
 1673 0018 C4549FE5 		ldr	r5, .L308
 622:lib/vsprintf.c **** 			while (isspace(*fmt))
 623:lib/vsprintf.c **** 				++fmt;
 624:lib/vsprintf.c **** 			while (isspace(*str))
 625:lib/vsprintf.c **** 				++str;
 626:lib/vsprintf.c **** 		}
 627:lib/vsprintf.c **** 
 628:lib/vsprintf.c **** 		/* anything that is not a conversion must match exactly */
 629:lib/vsprintf.c **** 		if (*fmt != '%' && *fmt) {
 630:lib/vsprintf.c **** 			if (*fmt++ != *str++)
 631:lib/vsprintf.c **** 				break;
 632:lib/vsprintf.c **** 			continue;
 633:lib/vsprintf.c **** 		}
 634:lib/vsprintf.c **** 
 635:lib/vsprintf.c **** 		if (!*fmt)
 636:lib/vsprintf.c **** 			break;
 637:lib/vsprintf.c **** 		++fmt;
 638:lib/vsprintf.c **** 		
 639:lib/vsprintf.c **** 		/* skip this conversion.
 640:lib/vsprintf.c **** 		 * advance both strings to next white space
 641:lib/vsprintf.c **** 		 */
 642:lib/vsprintf.c **** 		if (*fmt == '*') {
 643:lib/vsprintf.c **** 			while (!isspace(*fmt) && *fmt)
 644:lib/vsprintf.c **** 				fmt++;
 645:lib/vsprintf.c **** 			while (!isspace(*str) && *str)
 646:lib/vsprintf.c **** 				str++;
 647:lib/vsprintf.c **** 			continue;
 648:lib/vsprintf.c **** 		}
 649:lib/vsprintf.c **** 
 650:lib/vsprintf.c **** 		/* get field width */
 651:lib/vsprintf.c **** 		field_width = -1;
 652:lib/vsprintf.c **** 		if (isdigit(*fmt))
 653:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 654:lib/vsprintf.c **** 
 655:lib/vsprintf.c **** 		/* get conversion qualifier */
 656:lib/vsprintf.c **** 		qualifier = -1;
 657:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 658:lib/vsprintf.c **** 		    *fmt == 'Z' || *fmt == 'z') {
 659:lib/vsprintf.c **** 			qualifier = *fmt++;
 660:lib/vsprintf.c **** 			if (qualifier == *fmt) {
 661:lib/vsprintf.c **** 				if (qualifier == 'h') {
 662:lib/vsprintf.c **** 					qualifier = 'H';
 663:lib/vsprintf.c **** 					fmt++;
 664:lib/vsprintf.c **** 				} else if (qualifier == 'l') {
 665:lib/vsprintf.c **** 					qualifier = 'L';
 666:lib/vsprintf.c **** 					fmt++;
 667:lib/vsprintf.c **** 				}
 668:lib/vsprintf.c **** 			}
 669:lib/vsprintf.c **** 		}
 670:lib/vsprintf.c **** 		base = 10;
 671:lib/vsprintf.c **** 		is_sign = 0;
 1674              		.loc 2 671 0
 1675 001c 08B0A0E1 		mov	fp, r8
 1676              	.LBB6:
 672:lib/vsprintf.c **** 
 673:lib/vsprintf.c **** 		if (!*fmt || !*str)
 674:lib/vsprintf.c **** 			break;
 675:lib/vsprintf.c **** 
 676:lib/vsprintf.c **** 		switch(*fmt++) {
 677:lib/vsprintf.c **** 		case 'c':
 678:lib/vsprintf.c **** 		{
 679:lib/vsprintf.c **** 			char *s = (char *) va_arg(args,char*);
 680:lib/vsprintf.c **** 			if (field_width == -1)
 681:lib/vsprintf.c **** 				field_width = 1;
 682:lib/vsprintf.c **** 			do {
 683:lib/vsprintf.c **** 				*s++ = *str++;
 684:lib/vsprintf.c **** 			} while (--field_width > 0 && *str);
 685:lib/vsprintf.c **** 			num++;
 686:lib/vsprintf.c **** 		}
 687:lib/vsprintf.c **** 		continue;
 688:lib/vsprintf.c **** 		case 's':
 689:lib/vsprintf.c **** 		{
 690:lib/vsprintf.c **** 			char *s = (char *) va_arg(args, char *);
 691:lib/vsprintf.c **** 			if(field_width == -1)
 692:lib/vsprintf.c **** 				field_width = INT_MAX;
 693:lib/vsprintf.c **** 			/* first, skip leading white space in buffer */
 694:lib/vsprintf.c **** 			while (isspace(*str))
 695:lib/vsprintf.c **** 				str++;
 696:lib/vsprintf.c **** 
 697:lib/vsprintf.c **** 			/* now copy until next white space */
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 699:lib/vsprintf.c **** 				*s++ = *str++;
 700:lib/vsprintf.c **** 			}
 701:lib/vsprintf.c **** 			*s = '\0';
 702:lib/vsprintf.c **** 			num++;
 703:lib/vsprintf.c **** 		}
 704:lib/vsprintf.c **** 		continue;
 705:lib/vsprintf.c **** 		case 'n':
 706:lib/vsprintf.c **** 			/* return number of characters read so far */
 707:lib/vsprintf.c **** 		{
 708:lib/vsprintf.c **** 			int *i = (int *)va_arg(args,int*);
 709:lib/vsprintf.c **** 			*i = str - buf;
 710:lib/vsprintf.c **** 		}
 711:lib/vsprintf.c **** 		continue;
 712:lib/vsprintf.c **** 		case 'o':
 713:lib/vsprintf.c **** 			base = 8;
 714:lib/vsprintf.c **** 			break;
 715:lib/vsprintf.c **** 		case 'x':
 716:lib/vsprintf.c **** 		case 'X':
 717:lib/vsprintf.c **** 			base = 16;
 718:lib/vsprintf.c **** 			break;
 719:lib/vsprintf.c **** 		case 'i':
 720:lib/vsprintf.c ****                         base = 0;
 721:lib/vsprintf.c **** 		case 'd':
 722:lib/vsprintf.c **** 			is_sign = 1;
 723:lib/vsprintf.c **** 		case 'u':
 724:lib/vsprintf.c **** 			break;
 725:lib/vsprintf.c **** 		case '%':
 726:lib/vsprintf.c **** 			/* looking for '%' in str */
 727:lib/vsprintf.c **** 			if (*str++ != '%') 
 728:lib/vsprintf.c **** 				return num;
 729:lib/vsprintf.c **** 			continue;
 730:lib/vsprintf.c **** 		default:
 731:lib/vsprintf.c **** 			/* invalid format; stop here */
 732:lib/vsprintf.c **** 			return num;
 733:lib/vsprintf.c **** 		}
 734:lib/vsprintf.c **** 
 735:lib/vsprintf.c **** 		/* have some sort of integer conversion.
 736:lib/vsprintf.c **** 		 * first, skip white space in buffer.
 737:lib/vsprintf.c **** 		 */
 738:lib/vsprintf.c **** 		while (isspace(*str))
 739:lib/vsprintf.c **** 			str++;
 740:lib/vsprintf.c **** 
 741:lib/vsprintf.c **** 		digit = *str;
 742:lib/vsprintf.c **** 		if (is_sign && digit == '-')
 743:lib/vsprintf.c **** 			digit = *(str + 1);
 744:lib/vsprintf.c **** 
 745:lib/vsprintf.c **** 		if (!digit
 746:lib/vsprintf.c ****                     || (base == 16 && !isxdigit(digit))
 747:lib/vsprintf.c ****                     || (base == 10 && !isdigit(digit))
 748:lib/vsprintf.c ****                     || (base == 8 && (!isdigit(digit) || digit > '7'))
 749:lib/vsprintf.c ****                     || (base == 0 && !isdigit(digit)))
 750:lib/vsprintf.c **** 				break;
 751:lib/vsprintf.c **** 
 752:lib/vsprintf.c **** 		switch(qualifier) {
 753:lib/vsprintf.c **** 		case 'H':	/* that's 'hh' in format */
 754:lib/vsprintf.c **** 			if (is_sign) {
 755:lib/vsprintf.c **** 				signed char *s = (signed char *) va_arg(args,signed char *);
 756:lib/vsprintf.c **** 				*s = (signed char) strtol(str,&next,base);
 757:lib/vsprintf.c **** 			} else {
 758:lib/vsprintf.c **** 				unsigned char *s = (unsigned char *) va_arg(args, unsigned char *);
 759:lib/vsprintf.c **** 				*s = (unsigned char) strtoul(str, &next, base);
 760:lib/vsprintf.c **** 			}
 761:lib/vsprintf.c **** 			break;
 762:lib/vsprintf.c **** 		case 'h':
 763:lib/vsprintf.c **** 			if (is_sign) {
 764:lib/vsprintf.c **** 				short *s = (short *) va_arg(args,short *);
 765:lib/vsprintf.c **** 				*s = (short) strtol(str,&next,base);
 766:lib/vsprintf.c **** 			} else {
 767:lib/vsprintf.c **** 				unsigned short *s = (unsigned short *) va_arg(args, unsigned short *);
 768:lib/vsprintf.c **** 				*s = (unsigned short) strtoul(str, &next, base);
 769:lib/vsprintf.c **** 			}
 770:lib/vsprintf.c **** 			break;
 771:lib/vsprintf.c **** 		case 'l':
 772:lib/vsprintf.c **** 			if (is_sign) {
 773:lib/vsprintf.c **** 				long *l = (long *) va_arg(args,long *);
 774:lib/vsprintf.c **** 				*l = strtol(str,&next,base);
 775:lib/vsprintf.c **** 			} else {
 776:lib/vsprintf.c **** 				unsigned long *l = (unsigned long*) va_arg(args,unsigned long*);
 777:lib/vsprintf.c **** 				*l = strtoul(str,&next,base);
 778:lib/vsprintf.c **** 			}
 779:lib/vsprintf.c **** 			break;
 780:lib/vsprintf.c **** 		case 'L':
 781:lib/vsprintf.c **** 			if (is_sign) {
 782:lib/vsprintf.c **** 				long long *l = (long long*) va_arg(args,long long *);
 783:lib/vsprintf.c **** 				*l = strtoll(str,&next,base);
 784:lib/vsprintf.c **** 			} else {
 785:lib/vsprintf.c **** 				unsigned long long *l = (unsigned long long*) va_arg(args,unsigned long long*);
 786:lib/vsprintf.c **** 				*l = strtoull(str,&next,base);
 787:lib/vsprintf.c **** 			}
 788:lib/vsprintf.c **** 			break;
 789:lib/vsprintf.c **** 		case 'Z':
 790:lib/vsprintf.c **** 		case 'z':
 791:lib/vsprintf.c **** 		{
 792:lib/vsprintf.c **** 			size_t *s = (size_t*) va_arg(args,size_t*);
 793:lib/vsprintf.c **** 			*s = (size_t) strtoul(str,&next,base);
 1677              		.loc 2 793 0
 1678 0020 04608DE2 		add	r6, sp, #4
 1679              	.LBE6:
 616:lib/vsprintf.c **** 	while(*fmt && *str) {
 1680              		.loc 2 616 0
 1681 0024 250100EA 		b	.L272
 1682              	.LVL217:
 1683              	.L256:
 621:lib/vsprintf.c **** 		if (isspace(*fmt)) {
 1684              		.loc 2 621 0
 1685 0028 0330D5E7 		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1686 002c 200013E3 		tst	r3, #32
 1687 0030 0200001A 		bne	.L270
 1688 0034 0C0000EA 		b	.L201
 1689              	.L202:
 623:lib/vsprintf.c **** 				++fmt;
 1690              		.loc 2 623 0
 1691 0038 013083E2 		add	r3, r3, #1
 1692 003c 00308DE5 		str	r3, [sp, #0]
 1693              	.LVL218:
 1694              	.L270:
 622:lib/vsprintf.c **** 			while (isspace(*fmt))
 1695              		.loc 2 622 0 discriminator 1
 1696 0040 00309DE5 		ldr	r3, [sp, #0]
 1697 0044 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1698 0048 0220D5E7 		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 1699 004c 200012E3 		tst	r2, #32
 1700 0050 F8FFFF1A 		bne	.L202
 622:lib/vsprintf.c **** 			while (isspace(*fmt))
 1701              		.loc 2 622 0 is_stmt 0
 1702 0054 0430A0E1 		mov	r3, r4
 1703              	.L203:
 622:lib/vsprintf.c **** 			while (isspace(*fmt))
 1704              		.loc 2 622 0 discriminator 1
 1705 0058 0340A0E1 		mov	r4, r3
 1706              	.LVL219:
 624:lib/vsprintf.c **** 			while (isspace(*str))
 1707              		.loc 2 624 0 is_stmt 1 discriminator 1
 1708 005c 0120D3E4 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1709              	.LVL220:
 1710 0060 0220D5E7 		ldrb	r2, [r5, r2]	@ zero_extendqisi2
 1711 0064 200012E3 		tst	r2, #32
 1712 0068 FAFFFF1A 		bne	.L203
 1713              	.L201:
 629:lib/vsprintf.c **** 		if (*fmt != '%' && *fmt) {
 1714              		.loc 2 629 0
 1715 006c 00309DE5 		ldr	r3, [sp, #0]
 1716 0070 0020D3E5 		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1717 0074 000052E3 		cmp	r2, #0
 1718 0078 25005213 		cmpne	r2, #37
 1719 007c 0400000A 		beq	.L204
 630:lib/vsprintf.c **** 			if (*fmt++ != *str++)
 1720              		.loc 2 630 0
 1721 0080 0010D4E5 		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1722 0084 013083E2 		add	r3, r3, #1
 1723 0088 00308DE5 		str	r3, [sp, #0]
 1724              	.LVL221:
 1725 008c 010052E1 		cmp	r2, r1
 1726 0090 9D0000EA 		b	.L296
 1727              	.LVL222:
 1728              	.L204:
 635:lib/vsprintf.c **** 		if (!*fmt)
 1729              		.loc 2 635 0
 1730 0094 000052E3 		cmp	r2, #0
 1731 0098 0F01000A 		beq	.L205
 637:lib/vsprintf.c **** 		++fmt;
 1732              		.loc 2 637 0
 1733 009c 012083E2 		add	r2, r3, #1
 1734 00a0 00208DE5 		str	r2, [sp, #0]
 642:lib/vsprintf.c **** 		if (*fmt == '*') {
 1735              		.loc 2 642 0
 1736 00a4 0130D3E5 		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1737 00a8 2A0053E3 		cmp	r3, #42
 1738 00ac 1400001A 		bne	.L273
 1739 00b0 010000EA 		b	.L271
 1740              	.L211:
 644:lib/vsprintf.c **** 				fmt++;
 1741              		.loc 2 644 0
 1742 00b4 012082E2 		add	r2, r2, #1
 1743 00b8 00208DE5 		str	r2, [sp, #0]
 1744              	.L271:
 643:lib/vsprintf.c **** 			while (!isspace(*fmt) && *fmt)
 1745              		.loc 2 643 0 discriminator 1
 1746 00bc 00209DE5 		ldr	r2, [sp, #0]
 1747 00c0 0030D2E5 		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1748 00c4 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 1749 00c8 200011E3 		tst	r1, #32
 1750 00cc 0100000A 		beq	.L209
 1751              	.L212:
 1752 00d0 0430A0E1 		mov	r3, r4
 1753 00d4 020000EA 		b	.L210
 1754              	.L209:
 643:lib/vsprintf.c **** 			while (!isspace(*fmt) && *fmt)
 1755              		.loc 2 643 0 is_stmt 0 discriminator 2
 1756 00d8 000053E3 		cmp	r3, #0
 1757 00dc F4FFFF1A 		bne	.L211
 1758 00e0 FAFFFFEA 		b	.L212
 1759              	.L210:
 643:lib/vsprintf.c **** 			while (!isspace(*fmt) && *fmt)
 1760              		.loc 2 643 0 discriminator 1
 1761 00e4 0340A0E1 		mov	r4, r3
 1762              	.LVL223:
 645:lib/vsprintf.c **** 			while (!isspace(*str) && *str)
 1763              		.loc 2 645 0 is_stmt 1 discriminator 1
 1764 00e8 0120D3E4 		ldrb	r2, [r3], #1	@ zero_extendqisi2
 1765              	.LVL224:
 1766 00ec 0210D5E7 		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 1767 00f0 200011E3 		tst	r1, #32
 1768 00f4 F100001A 		bne	.L272
 645:lib/vsprintf.c **** 			while (!isspace(*str) && *str)
 1769              		.loc 2 645 0 is_stmt 0 discriminator 2
 1770 00f8 000052E3 		cmp	r2, #0
 1771 00fc F8FFFF1A 		bne	.L210
 1772 0100 EE0000EA 		b	.L272
 1773              	.L273:
 1774              	.LVL225:
 652:lib/vsprintf.c **** 		if (isdigit(*fmt))
 1775              		.loc 2 652 0 is_stmt 1
 1776 0104 0330D5E7 		ldrb	r3, [r5, r3]	@ zero_extendqisi2
 1777 0108 040013E3 		tst	r3, #4
 651:lib/vsprintf.c **** 		field_width = -1;
 1778              		.loc 2 651 0
 1779 010c 0000E003 		mvneq	r0, #0
 652:lib/vsprintf.c **** 		if (isdigit(*fmt))
 1780              		.loc 2 652 0
 653:lib/vsprintf.c **** 			field_width = skip_atoi(&fmt);
 1781              		.loc 2 653 0
 1782 0110 0D00A011 		movne	r0, sp
 1783 0114 FEFFFF1B 		blne	skip_atoi
 1784              	.LVL226:
 1785              	.L213:
 657:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 1786              		.loc 2 657 0
 1787 0118 00109DE5 		ldr	r1, [sp, #0]
 1788 011c 0030D1E5 		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 1789 0120 680053E3 		cmp	r3, #104
 1790 0124 6C005313 		cmpne	r3, #108
 1791 0128 0600000A 		beq	.L214
 657:lib/vsprintf.c **** 		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
 1792              		.loc 2 657 0 is_stmt 0 discriminator 1
 1793 012c 4C0053E3 		cmp	r3, #76
 1794 0130 0400000A 		beq	.L214
 1795 0134 5A0053E3 		cmp	r3, #90
 1796 0138 0200000A 		beq	.L214
 658:lib/vsprintf.c **** 		    *fmt == 'Z' || *fmt == 'z') {
 1797              		.loc 2 658 0 is_stmt 1
 1798 013c 7A0053E3 		cmp	r3, #122
 656:lib/vsprintf.c **** 		qualifier = -1;
 1799              		.loc 2 656 0
 1800 0140 0030E013 		mvnne	r3, #0
 658:lib/vsprintf.c **** 		    *fmt == 'Z' || *fmt == 'z') {
 1801              		.loc 2 658 0
 1802 0144 0D00001A 		bne	.L215
 1803              	.L214:
 1804              	.LVL227:
 659:lib/vsprintf.c **** 			qualifier = *fmt++;
 1805              		.loc 2 659 0
 1806 0148 012081E2 		add	r2, r1, #1
 1807 014c 00208DE5 		str	r2, [sp, #0]
 660:lib/vsprintf.c **** 			if (qualifier == *fmt) {
 1808              		.loc 2 660 0
 1809 0150 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2
 1810 0154 010053E1 		cmp	r3, r1
 1811 0158 0800001A 		bne	.L215
 661:lib/vsprintf.c **** 				if (qualifier == 'h') {
 1812              		.loc 2 661 0
 1813 015c 680053E3 		cmp	r3, #104
 663:lib/vsprintf.c **** 					fmt++;
 1814              		.loc 2 663 0
 1815 0160 01208202 		addeq	r2, r2, #1
 1816 0164 00208D05 		streq	r2, [sp, #0]
 662:lib/vsprintf.c **** 					qualifier = 'H';
 1817              		.loc 2 662 0
 1818 0168 4830A003 		moveq	r3, #72
 1819              	.LVL228:
 661:lib/vsprintf.c **** 				if (qualifier == 'h') {
 1820              		.loc 2 661 0
 1821 016c 0300000A 		beq	.L215
 664:lib/vsprintf.c **** 				} else if (qualifier == 'l') {
 1822              		.loc 2 664 0
 1823 0170 6C0053E3 		cmp	r3, #108
 1824              	.LVL229:
 666:lib/vsprintf.c **** 					fmt++;
 1825              		.loc 2 666 0
 1826 0174 01208202 		addeq	r2, r2, #1
 1827 0178 00208D05 		streq	r2, [sp, #0]
 665:lib/vsprintf.c **** 					qualifier = 'L';
 1828              		.loc 2 665 0
 1829 017c 4C30A003 		moveq	r3, #76
 1830              	.LVL230:
 1831              	.L215:
 673:lib/vsprintf.c **** 		if (!*fmt || !*str)
 1832              		.loc 2 673 0
 1833 0180 00109DE5 		ldr	r1, [sp, #0]
 1834 0184 0020D1E5 		ldrb	r2, [r1, #0]	@ zero_extendqisi2
 1835 0188 000052E3 		cmp	r2, #0
 1836 018c D200000A 		beq	.L205
 673:lib/vsprintf.c **** 		if (!*fmt || !*str)
 1837              		.loc 2 673 0 is_stmt 0 discriminator 1
 1838 0190 00C0D4E5 		ldrb	ip, [r4, #0]	@ zero_extendqisi2
 1839 0194 00005CE3 		cmp	ip, #0
 1840 0198 CF00000A 		beq	.L205
 676:lib/vsprintf.c **** 		switch(*fmt++) {
 1841              		.loc 2 676 0 is_stmt 1
 1842 019c 011081E2 		add	r1, r1, #1
 1843 01a0 6E0052E3 		cmp	r2, #110
 1844 01a4 00108DE5 		str	r1, [sp, #0]
 1845 01a8 4700000A 		beq	.L222
 1846 01ac 0B00008A 		bhi	.L226
 1847 01b0 630052E3 		cmp	r2, #99
 1848 01b4 1900000A 		beq	.L219
 1849 01b8 0300008A 		bhi	.L227
 1850 01bc 250052E3 		cmp	r2, #37
 1851 01c0 4F00000A 		beq	.L217
 1852 01c4 580052E3 		cmp	r2, #88
 1853 01c8 0D0000EA 		b	.L290
 1854              	.L227:
 1855 01cc 640052E3 		cmp	r2, #100
 1856 01d0 0F00000A 		beq	.L259
 1857 01d4 690052E3 		cmp	r2, #105
 1858 01d8 BF00001A 		bne	.L205
 1859 01dc 450000EA 		b	.L303
 1860              	.L226:
 1861 01e0 730052E3 		cmp	r2, #115
 1862 01e4 1F00000A 		beq	.L224
 1863 01e8 0200008A 		bhi	.L228
 1864 01ec 6F0052E3 		cmp	r2, #111
 1865 01f0 B900001A 		bne	.L205
 1866 01f4 390000EA 		b	.L304
 1867              	.L228:
 1868 01f8 750052E3 		cmp	r2, #117
 1869 01fc 0200000A 		beq	.L225
 1870 0200 780052E3 		cmp	r2, #120
 1871              	.L290:
 1872 0204 B400001A 		bne	.L205
 1873 0208 370000EA 		b	.L305
 1874              	.L225:
 671:lib/vsprintf.c **** 		is_sign = 0;
 1875              		.loc 2 671 0
 1876 020c 0010A0E3 		mov	r1, #0
 1877 0210 000000EA 		b	.L291
 1878              	.L259:
 722:lib/vsprintf.c **** 			is_sign = 1;
 1879              		.loc 2 722 0
 1880 0214 0110A0E3 		mov	r1, #1
 1881              	.L291:
 670:lib/vsprintf.c **** 		base = 10;
 1882              		.loc 2 670 0
 1883 0218 0A20A0E3 		mov	r2, #10
 1884 021c 3D0000EA 		b	.L229
 1885              	.L219:
 1886              	.LBB7:
 681:lib/vsprintf.c **** 				field_width = 1;
 1887              		.loc 2 681 0
 1888 0220 010070E3 		cmn	r0, #1
 679:lib/vsprintf.c **** 			char *s = (char *) va_arg(args,char*);
 1889              		.loc 2 679 0
 1890 0224 001099E5 		ldr	r1, [r9, #0]
 1891 0228 04C089E2 		add	ip, r9, #4
 1892              	.LVL231:
 681:lib/vsprintf.c **** 				field_width = 1;
 1893              		.loc 2 681 0
 1894 022c 0100A003 		moveq	r0, #1
 1895              	.LVL232:
 680:lib/vsprintf.c **** 			if (field_width == -1)
 1896              		.loc 2 680 0
 1897 0230 0430A0E1 		mov	r3, r4
 1898              	.LVL233:
 681:lib/vsprintf.c **** 				field_width = 1;
 1899              		.loc 2 681 0
 1900 0234 0420A0E1 		mov	r2, r4
 1901              	.LVL234:
 1902              	.L232:
 683:lib/vsprintf.c **** 				*s++ = *str++;
 1903              		.loc 2 683 0 discriminator 1
 1904 0238 0140D3E4 		ldrb	r4, [r3], #1	@ zero_extendqisi2
 684:lib/vsprintf.c **** 			} while (--field_width > 0 && *str);
 1905              		.loc 2 684 0 discriminator 1
 1906 023c 010040E2 		sub	r0, r0, #1
 1907              	.LVL235:
 1908 0240 000050E3 		cmp	r0, #0
 683:lib/vsprintf.c **** 				*s++ = *str++;
 1909              		.loc 2 683 0 discriminator 1
 1910 0244 0140C1E4 		strb	r4, [r1], #1
 1911              	.LVL236:
 1912 0248 0340A0E1 		mov	r4, r3
 1913              	.LVL237:
 684:lib/vsprintf.c **** 			} while (--field_width > 0 && *str);
 1914              		.loc 2 684 0 discriminator 1
 1915 024c 020000DA 		ble	.L231
 1916 0250 0170F2E5 		ldrb	r7, [r2, #1]!	@ zero_extendqisi2
 1917 0254 000057E3 		cmp	r7, #0
 1918 0258 F6FFFF1A 		bne	.L232
 1919              	.L231:
 685:lib/vsprintf.c **** 			num++;
 1920              		.loc 2 685 0
 1921 025c 018088E2 		add	r8, r8, #1
 1922              	.LVL238:
 1923              	.LBE7:
 679:lib/vsprintf.c **** 			char *s = (char *) va_arg(args,char*);
 1924              		.loc 2 679 0
 1925 0260 0C90A0E1 		mov	r9, ip
 687:lib/vsprintf.c **** 		continue;
 1926              		.loc 2 687 0
 1927 0264 950000EA 		b	.L272
 1928              	.LVL239:
 1929              	.L224:
 1930              	.LBB8:
 692:lib/vsprintf.c **** 				field_width = INT_MAX;
 1931              		.loc 2 692 0
 1932 0268 010070E3 		cmn	r0, #1
 690:lib/vsprintf.c **** 			char *s = (char *) va_arg(args, char *);
 1933              		.loc 2 690 0
 1934 026c 003099E5 		ldr	r3, [r9, #0]
 1935              	.LVL240:
 1936 0270 041089E2 		add	r1, r9, #4
 1937              	.LVL241:
 692:lib/vsprintf.c **** 				field_width = INT_MAX;
 1938              		.loc 2 692 0
 1939 0274 0201E003 		mvneq	r0, #-2147483648
 1940              	.LVL242:
 1941              	.L234:
 691:lib/vsprintf.c **** 			if(field_width == -1)
 1942              		.loc 2 691 0 discriminator 1
 1943 0278 0420A0E1 		mov	r2, r4
 1944              	.LVL243:
 694:lib/vsprintf.c **** 			while (isspace(*str))
 1945              		.loc 2 694 0 discriminator 1
 1946 027c 01C0D4E4 		ldrb	ip, [r4], #1	@ zero_extendqisi2
 1947              	.LVL244:
 1948 0280 0CC0D5E7 		ldrb	ip, [r5, ip]	@ zero_extendqisi2
 1949 0284 20001CE3 		tst	ip, #32
 1950 0288 FAFFFF1A 		bne	.L234
 1951 028c 010000EA 		b	.L235
 1952              	.LVL245:
 1953              	.L237:
 699:lib/vsprintf.c **** 				*s++ = *str++;
 1954              		.loc 2 699 0
 1955 0290 01C0C3E4 		strb	ip, [r3], #1
 1956              	.LVL246:
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 1957              		.loc 2 698 0
 1958 0294 010040E2 		sub	r0, r0, #1
 1959              	.LVL247:
 1960              	.L235:
 699:lib/vsprintf.c **** 				*s++ = *str++;
 1961              		.loc 2 699 0 discriminator 1
 1962 0298 0240A0E1 		mov	r4, r2
 1963              	.LVL248:
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 1964              		.loc 2 698 0 discriminator 1
 1965 029c 01C0D2E4 		ldrb	ip, [r2], #1	@ zero_extendqisi2
 1966              	.LVL249:
 1967 02a0 00005CE3 		cmp	ip, #0
 1968 02a4 0400000A 		beq	.L236
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 1969              		.loc 2 698 0 is_stmt 0 discriminator 2
 1970 02a8 0C70D5E7 		ldrb	r7, [r5, ip]	@ zero_extendqisi2
 1971 02ac 200017E3 		tst	r7, #32
 1972 02b0 0100001A 		bne	.L236
 1973              	.LVL250:
 698:lib/vsprintf.c **** 			while (*str && !isspace(*str) && field_width--) {
 1974              		.loc 2 698 0 discriminator 1
 1975 02b4 000050E3 		cmp	r0, #0
 1976 02b8 F4FFFF1A 		bne	.L237
 1977              	.LVL251:
 1978              	.L236:
 701:lib/vsprintf.c **** 			*s = '\0';
 1979              		.loc 2 701 0 is_stmt 1
 1980 02bc 00B0C3E5 		strb	fp, [r3, #0]
 702:lib/vsprintf.c **** 			num++;
 1981              		.loc 2 702 0
 1982 02c0 018088E2 		add	r8, r8, #1
 1983              	.LVL252:
 1984              	.LBE8:
 690:lib/vsprintf.c **** 			char *s = (char *) va_arg(args, char *);
 1985              		.loc 2 690 0
 1986 02c4 0190A0E1 		mov	r9, r1
 704:lib/vsprintf.c **** 		continue;
 1987              		.loc 2 704 0
 1988 02c8 7C0000EA 		b	.L272
 1989              	.LVL253:
 1990              	.L222:
 1991              	.LBB9:
 709:lib/vsprintf.c **** 			*i = str - buf;
 1992              		.loc 2 709 0
 1993 02cc 003099E5 		ldr	r3, [r9, #0]
 1994              	.LVL254:
 1995 02d0 04206AE0 		rsb	r2, sl, r4
 1996 02d4 002083E5 		str	r2, [r3, #0]
 1997              	.LBE9:
 708:lib/vsprintf.c **** 			int *i = (int *)va_arg(args,int*);
 1998              		.loc 2 708 0
 1999 02d8 049089E2 		add	r9, r9, #4
 2000              	.LVL255:
 711:lib/vsprintf.c **** 		continue;
 2001              		.loc 2 711 0
 2002 02dc 770000EA 		b	.L272
 2003              	.LVL256:
 2004              	.L304:
 671:lib/vsprintf.c **** 		is_sign = 0;
 2005              		.loc 2 671 0
 2006 02e0 0010A0E3 		mov	r1, #0
 713:lib/vsprintf.c **** 			base = 8;
 2007              		.loc 2 713 0
 2008 02e4 0820A0E3 		mov	r2, #8
 714:lib/vsprintf.c **** 			break;
 2009              		.loc 2 714 0
 2010 02e8 0A0000EA 		b	.L229
 2011              	.LVL257:
 2012              	.L305:
 671:lib/vsprintf.c **** 		is_sign = 0;
 2013              		.loc 2 671 0
 2014 02ec 0010A0E3 		mov	r1, #0
 717:lib/vsprintf.c **** 			base = 16;
 2015              		.loc 2 717 0
 2016 02f0 1020A0E3 		mov	r2, #16
 718:lib/vsprintf.c **** 			break;
 2017              		.loc 2 718 0
 2018 02f4 070000EA 		b	.L229
 2019              	.LVL258:
 2020              	.L303:
 722:lib/vsprintf.c **** 			is_sign = 1;
 2021              		.loc 2 722 0
 2022 02f8 0110A0E3 		mov	r1, #1
 720:lib/vsprintf.c ****                         base = 0;
 2023              		.loc 2 720 0
 2024 02fc 0020A0E3 		mov	r2, #0
 2025 0300 040000EA 		b	.L229
 2026              	.LVL259:
 2027              	.L217:
 727:lib/vsprintf.c **** 			if (*str++ != '%') 
 2028              		.loc 2 727 0
 2029 0304 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 2030              	.LVL260:
 2031 0308 250053E3 		cmp	r3, #37
 2032              	.LVL261:
 2033              	.L296:
 2034 030c 7200001A 		bne	.L205
 2035 0310 014084E2 		add	r4, r4, #1
 2036 0314 690000EA 		b	.L272
 2037              	.LVL262:
 2038              	.L229:
 738:lib/vsprintf.c **** 		while (isspace(*str))
 2039              		.loc 2 738 0 discriminator 1
 2040 0318 00C0D4E5 		ldrb	ip, [r4, #0]	@ zero_extendqisi2
 2041 031c 0C70D5E7 		ldrb	r7, [r5, ip]	@ zero_extendqisi2
 2042 0320 200017E3 		tst	r7, #32
 727:lib/vsprintf.c **** 			if (*str++ != '%') 
 2043              		.loc 2 727 0 discriminator 1
 2044 0324 0400A0E1 		mov	r0, r4
 2045              	.LVL263:
 738:lib/vsprintf.c **** 		while (isspace(*str))
 2046              		.loc 2 738 0 discriminator 1
 2047 0328 014084E2 		add	r4, r4, #1
 2048              	.LVL264:
 2049 032c F9FFFF1A 		bne	.L229
 2050              	.LVL265:
 742:lib/vsprintf.c **** 		if (is_sign && digit == '-')
 2051              		.loc 2 742 0
 2052 0330 2D005CE3 		cmp	ip, #45
 2053 0334 0040A013 		movne	r4, #0
 2054 0338 01400102 		andeq	r4, r1, #1
 2055 033c 000054E3 		cmp	r4, #0
 743:lib/vsprintf.c **** 			digit = *(str + 1);
 2056              		.loc 2 743 0
 2057 0340 01C0D015 		ldrneb	ip, [r0, #1]	@ zero_extendqisi2
 2058              	.LVL266:
 745:lib/vsprintf.c **** 		if (!digit
 2059              		.loc 2 745 0
 2060 0344 00005CE3 		cmp	ip, #0
 2061 0348 6300000A 		beq	.L205
 746:lib/vsprintf.c ****                     || (base == 16 && !isxdigit(digit))
 2062              		.loc 2 746 0
 2063 034c 100052E3 		cmp	r2, #16
 2064 0350 0200001A 		bne	.L239
 746:lib/vsprintf.c ****                     || (base == 16 && !isxdigit(digit))
 2065              		.loc 2 746 0 is_stmt 0 discriminator 1
 2066 0354 0CC0D5E7 		ldrb	ip, [r5, ip]	@ zero_extendqisi2
 2067              	.LVL267:
 2068 0358 44001CE3 		tst	ip, #68
 2069 035c 110000EA 		b	.L293
 2070              	.LVL268:
 2071              	.L239:
 747:lib/vsprintf.c ****                     || (base == 10 && !isdigit(digit))
 2072              		.loc 2 747 0 is_stmt 1
 2073 0360 0A0052E3 		cmp	r2, #10
 2074 0364 0D00000A 		beq	.L292
 2075              	.L241:
 748:lib/vsprintf.c ****                     || (base == 8 && (!isdigit(digit) || digit > '7'))
 2076              		.loc 2 748 0
 2077 0368 080052E3 		cmp	r2, #8
 2078 036c 0900001A 		bne	.L242
 748:lib/vsprintf.c ****                     || (base == 8 && (!isdigit(digit) || digit > '7'))
 2079              		.loc 2 748 0 is_stmt 0 discriminator 1
 2080 0370 0C40D5E7 		ldrb	r4, [r5, ip]	@ zero_extendqisi2
 2081 0374 040014E3 		tst	r4, #4
 2082 0378 0040A013 		movne	r4, #0
 2083 037c 0140A003 		moveq	r4, #1
 2084 0380 37005CE3 		cmp	ip, #55
 2085 0384 04C0A091 		movls	ip, r4
 2086 0388 01C08483 		orrhi	ip, r4, #1
 2087              	.LVL269:
 2088 038c 00005CE3 		cmp	ip, #0
 2089 0390 0500000A 		beq	.L240
 2090 0394 500000EA 		b	.L205
 2091              	.LVL270:
 2092              	.L242:
 749:lib/vsprintf.c ****                     || (base == 0 && !isdigit(digit)))
 2093              		.loc 2 749 0 is_stmt 1
 2094 0398 000052E3 		cmp	r2, #0
 2095 039c 0200001A 		bne	.L240
 2096              	.L292:
 749:lib/vsprintf.c ****                     || (base == 0 && !isdigit(digit)))
 2097              		.loc 2 749 0 is_stmt 0 discriminator 1
 2098 03a0 0CC0D5E7 		ldrb	ip, [r5, ip]	@ zero_extendqisi2
 2099              	.LVL271:
 2100 03a4 04001CE3 		tst	ip, #4
 2101              	.L293:
 2102 03a8 4B00000A 		beq	.L205
 2103              	.L240:
 752:lib/vsprintf.c **** 		switch(qualifier) {
 2104              		.loc 2 752 0 is_stmt 1
 2105 03ac 5A0053E3 		cmp	r3, #90
 2106 03b0 3000000A 		beq	.L246
 2107 03b4 040000CA 		bgt	.L249
 2108 03b8 480053E3 		cmp	r3, #72
 2109 03bc 0900000A 		beq	.L244
 2110 03c0 4C0053E3 		cmp	r3, #76
 2111 03c4 2D00001A 		bne	.L243
 2112 03c8 1E0000EA 		b	.L306
 2113              	.L249:
 2114 03cc 6C0053E3 		cmp	r3, #108
 2115 03d0 2A00000A 		beq	.L243
 2116 03d4 7A0053E3 		cmp	r3, #122
 2117 03d8 2600000A 		beq	.L246
 2118 03dc 680053E3 		cmp	r3, #104
 2119 03e0 2600001A 		bne	.L243
 2120 03e4 0B0000EA 		b	.L307
 2121              	.L244:
 754:lib/vsprintf.c **** 			if (is_sign) {
 2122              		.loc 2 754 0
 2123 03e8 000051E3 		cmp	r1, #0
 2124 03ec 047089E2 		add	r7, r9, #4
 2125 03f0 0300000A 		beq	.L250
 2126              	.LVL272:
 2127              	.LBB10:
 756:lib/vsprintf.c **** 				*s = (signed char) strtol(str,&next,base);
 2128              		.loc 2 756 0
 2129 03f4 0610A0E1 		mov	r1, r6
 2130              	.LVL273:
 755:lib/vsprintf.c **** 				signed char *s = (signed char *) va_arg(args,signed char *);
 2131              		.loc 2 755 0
 2132 03f8 004099E5 		ldr	r4, [r9, #0]
 2133              	.LVL274:
 756:lib/vsprintf.c **** 				*s = (signed char) strtol(str,&next,base);
 2134              		.loc 2 756 0
 2135 03fc FEFFFFEB 		bl	strtol
 2136              	.LVL275:
 2137 0400 020000EA 		b	.L297
 2138              	.LVL276:
 2139              	.L250:
 2140              	.LBE10:
 2141              	.LBB11:
 759:lib/vsprintf.c **** 				*s = (unsigned char) strtoul(str, &next, base);
 2142              		.loc 2 759 0
 2143 0404 0610A0E1 		mov	r1, r6
 2144              	.LVL277:
 758:lib/vsprintf.c **** 				unsigned char *s = (unsigned char *) va_arg(args, unsigned char *);
 2145              		.loc 2 758 0
 2146 0408 004099E5 		ldr	r4, [r9, #0]
 2147              	.LVL278:
 759:lib/vsprintf.c **** 				*s = (unsigned char) strtoul(str, &next, base);
 2148              		.loc 2 759 0
 2149 040c FEFFFFEB 		bl	strtoul
 2150              	.LVL279:
 2151              	.L297:
 2152 0410 0000C4E5 		strb	r0, [r4, #0]
 2153 0414 240000EA 		b	.L294
 2154              	.LVL280:
 2155              	.L307:
 2156              	.LBE11:
 763:lib/vsprintf.c **** 			if (is_sign) {
 2157              		.loc 2 763 0
 2158 0418 000051E3 		cmp	r1, #0
 2159 041c 047089E2 		add	r7, r9, #4
 2160 0420 0300000A 		beq	.L252
 2161              	.LVL281:
 2162              	.LBB12:
 765:lib/vsprintf.c **** 				*s = (short) strtol(str,&next,base);
 2163              		.loc 2 765 0
 2164 0424 0610A0E1 		mov	r1, r6
 2165              	.LVL282:
 764:lib/vsprintf.c **** 				short *s = (short *) va_arg(args,short *);
 2166              		.loc 2 764 0
 2167 0428 004099E5 		ldr	r4, [r9, #0]
 2168              	.LVL283:
 765:lib/vsprintf.c **** 				*s = (short) strtol(str,&next,base);
 2169              		.loc 2 765 0
 2170 042c FEFFFFEB 		bl	strtol
 2171              	.LVL284:
 2172 0430 020000EA 		b	.L300
 2173              	.LVL285:
 2174              	.L252:
 2175              	.LBE12:
 2176              	.LBB13:
 768:lib/vsprintf.c **** 				*s = (unsigned short) strtoul(str, &next, base);
 2177              		.loc 2 768 0
 2178 0434 0610A0E1 		mov	r1, r6
 2179              	.LVL286:
 767:lib/vsprintf.c **** 				unsigned short *s = (unsigned short *) va_arg(args, unsigned short *);
 2180              		.loc 2 767 0
 2181 0438 004099E5 		ldr	r4, [r9, #0]
 2182              	.LVL287:
 768:lib/vsprintf.c **** 				*s = (unsigned short) strtoul(str, &next, base);
 2183              		.loc 2 768 0
 2184 043c FEFFFFEB 		bl	strtoul
 2185              	.LVL288:
 2186              	.L300:
 2187 0440 B000C4E1 		strh	r0, [r4, #0]	@ movhi
 2188 0444 180000EA 		b	.L294
 2189              	.LVL289:
 2190              	.L306:
 2191              	.LBE13:
 781:lib/vsprintf.c **** 			if (is_sign) {
 2192              		.loc 2 781 0
 2193 0448 000051E3 		cmp	r1, #0
 2194 044c 047089E2 		add	r7, r9, #4
 2195 0450 0300000A 		beq	.L254
 2196              	.LVL290:
 2197              	.LBB14:
 783:lib/vsprintf.c **** 				*l = strtoll(str,&next,base);
 2198              		.loc 2 783 0
 2199 0454 0610A0E1 		mov	r1, r6
 2200              	.LVL291:
 782:lib/vsprintf.c **** 				long long *l = (long long*) va_arg(args,long long *);
 2201              		.loc 2 782 0
 2202 0458 004099E5 		ldr	r4, [r9, #0]
 2203              	.LVL292:
 783:lib/vsprintf.c **** 				*l = strtoll(str,&next,base);
 2204              		.loc 2 783 0
 2205 045c FEFFFFEB 		bl	strtoll
 2206              	.LVL293:
 2207 0460 020000EA 		b	.L299
 2208              	.LVL294:
 2209              	.L254:
 2210              	.LBE14:
 2211              	.LBB15:
 786:lib/vsprintf.c **** 				*l = strtoull(str,&next,base);
 2212              		.loc 2 786 0
 2213 0464 0610A0E1 		mov	r1, r6
 2214              	.LVL295:
 785:lib/vsprintf.c **** 				unsigned long long *l = (unsigned long long*) va_arg(args,unsigned long long*);
 2215              		.loc 2 785 0
 2216 0468 004099E5 		ldr	r4, [r9, #0]
 2217              	.LVL296:
 786:lib/vsprintf.c **** 				*l = strtoull(str,&next,base);
 2218              		.loc 2 786 0
 2219 046c FEFFFFEB 		bl	strtoull
 2220              	.LVL297:
 2221              	.L299:
 2222 0470 030084E8 		stmia	r4, {r0-r1}
 2223 0474 0C0000EA 		b	.L294
 2224              	.LVL298:
 2225              	.L246:
 2226              	.LBE15:
 2227              	.LBB16:
 792:lib/vsprintf.c **** 			size_t *s = (size_t*) va_arg(args,size_t*);
 2228              		.loc 2 792 0
 2229 0478 047089E2 		add	r7, r9, #4
 2230              	.LVL299:
 2231 047c 060000EA 		b	.L255
 2232              	.LVL300:
 2233              	.L243:
 2234              	.LBE16:
 794:lib/vsprintf.c **** 		}
 795:lib/vsprintf.c **** 		break;
 796:lib/vsprintf.c **** 		default:
 797:lib/vsprintf.c **** 			if (is_sign) {
 2235              		.loc 2 797 0
 2236 0480 000051E3 		cmp	r1, #0
 2237 0484 047089E2 		add	r7, r9, #4
 2238 0488 0300000A 		beq	.L255
 2239              	.LVL301:
 2240              	.LBB17:
 798:lib/vsprintf.c **** 				int *i = (int *) va_arg(args, int*);
 799:lib/vsprintf.c **** 				*i = (int) strtol(str,&next,base);
 2241              		.loc 2 799 0
 2242 048c 0610A0E1 		mov	r1, r6
 2243              	.LVL302:
 798:lib/vsprintf.c **** 				int *i = (int *) va_arg(args, int*);
 2244              		.loc 2 798 0
 2245 0490 004099E5 		ldr	r4, [r9, #0]
 2246              	.LVL303:
 2247              		.loc 2 799 0
 2248 0494 FEFFFFEB 		bl	strtol
 2249              	.LVL304:
 2250 0498 020000EA 		b	.L298
 2251              	.LVL305:
 2252              	.L255:
 2253              	.LBE17:
 2254              	.LBB18:
 800:lib/vsprintf.c **** 			} else {
 801:lib/vsprintf.c **** 				unsigned int *i = (unsigned int*) va_arg(args, unsigned int*);
 802:lib/vsprintf.c **** 				*i = (unsigned int) strtoul(str,&next,base);
 2255              		.loc 2 802 0
 2256 049c 0610A0E1 		mov	r1, r6
 2257              	.LVL306:
 801:lib/vsprintf.c **** 				unsigned int *i = (unsigned int*) va_arg(args, unsigned int*);
 2258              		.loc 2 801 0
 2259 04a0 004099E5 		ldr	r4, [r9, #0]
 2260              	.LVL307:
 2261              		.loc 2 802 0
 2262 04a4 FEFFFFEB 		bl	strtoul
 2263              	.LVL308:
 2264              	.L298:
 2265 04a8 000084E5 		str	r0, [r4, #0]
 2266              	.L294:
 2267              	.LBE18:
 803:lib/vsprintf.c **** 			}
 804:lib/vsprintf.c **** 			break;
 805:lib/vsprintf.c **** 		}
 806:lib/vsprintf.c **** 		num++;
 807:lib/vsprintf.c **** 
 808:lib/vsprintf.c **** 		if (!next)
 2268              		.loc 2 808 0
 2269 04ac 04409DE5 		ldr	r4, [sp, #4]
 2270 04b0 000054E3 		cmp	r4, #0
 2271              	.LBB19:
 801:lib/vsprintf.c **** 				unsigned int *i = (unsigned int*) va_arg(args, unsigned int*);
 2272              		.loc 2 801 0
 2273 04b4 0790A0E1 		mov	r9, r7
 2274              	.LBE19:
 806:lib/vsprintf.c **** 		num++;
 2275              		.loc 2 806 0
 2276 04b8 018088E2 		add	r8, r8, #1
 2277              	.LVL309:
 2278              		.loc 2 808 0
 2279 04bc 0600000A 		beq	.L205
 2280              	.LVL310:
 2281              	.L272:
 616:lib/vsprintf.c **** 	while(*fmt && *str) {
 2282              		.loc 2 616 0 discriminator 1
 2283 04c0 00309DE5 		ldr	r3, [sp, #0]
 2284 04c4 0030D3E5 		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 2285 04c8 000053E3 		cmp	r3, #0
 2286 04cc 0200000A 		beq	.L205
 616:lib/vsprintf.c **** 	while(*fmt && *str) {
 2287              		.loc 2 616 0 is_stmt 0 discriminator 2
 2288 04d0 0020D4E5 		ldrb	r2, [r4, #0]	@ zero_extendqisi2
 2289 04d4 000052E3 		cmp	r2, #0
 2290 04d8 D2FEFF1A 		bne	.L256
 2291              	.LVL311:
 2292              	.L205:
 809:lib/vsprintf.c **** 			break;
 810:lib/vsprintf.c **** 		str = next;
 811:lib/vsprintf.c **** 	}
 812:lib/vsprintf.c **** 	return num;
 813:lib/vsprintf.c **** }
 2293              		.loc 2 813 0 is_stmt 1
 2294 04dc 0800A0E1 		mov	r0, r8
 2295 04e0 FC8FBDE8 		ldmfd	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 2296              	.L309:
 2297              		.align	2
 2298              	.L308:
 2299 04e4 00000000 		.word	_ctype
 2300              		.cfi_endproc
 2301              	.LFE14:
 2303              		.section	.text.sscanf,"ax",%progbits
 2304              		.align	2
 2305              		.global	sscanf
 2307              	sscanf:
 2308              	.LFB15:
 814:lib/vsprintf.c **** 
 815:lib/vsprintf.c **** 
 816:lib/vsprintf.c **** /**
 817:lib/vsprintf.c ****  * sscanf - Unformat a buffer into a list of arguments
 818:lib/vsprintf.c ****  * @buf:	input buffer
 819:lib/vsprintf.c ****  * @fmt:	formatting of buffer
 820:lib/vsprintf.c ****  * @...:	resulting arguments
 821:lib/vsprintf.c ****  */
 822:lib/vsprintf.c **** int sscanf(const char * buf, const char * fmt, ...)
 823:lib/vsprintf.c **** {
 2309              		.loc 2 823 0
 2310              		.cfi_startproc
 2311              		@ args = 4, pretend = 12, frame = 4
 2312              		@ frame_needed = 0, uses_anonymous_args = 1
 2313              	.LVL312:
 2314 0000 0E002DE9 		stmfd	sp!, {r1, r2, r3}
 2315              	.LCFI17:
 2316              		.cfi_def_cfa_offset 12
 2317 0004 01402DE9 		stmfd	sp!, {r0, lr}
 2318              	.LCFI18:
 2319              		.cfi_def_cfa_offset 20
 824:lib/vsprintf.c **** 	va_list args;
 825:lib/vsprintf.c **** 	int i;
 826:lib/vsprintf.c **** 
 827:lib/vsprintf.c **** 	va_start(args,fmt);
 828:lib/vsprintf.c **** 	i = vsscanf(buf,fmt,args);
 2320              		.loc 2 828 0
 2321 0008 08109DE5 		ldr	r1, [sp, #8]
 2322              		.cfi_offset 14, -16
 2323              		.cfi_offset 0, -20
 2324              		.cfi_offset 3, -4
 2325              		.cfi_offset 2, -8
 2326              		.cfi_offset 1, -12
 827:lib/vsprintf.c **** 	va_start(args,fmt);
 2327              		.loc 2 827 0
 2328 000c 0C208DE2 		add	r2, sp, #12
 2329 0010 00208DE5 		str	r2, [sp, #0]
 2330              	.LVL313:
 2331              		.loc 2 828 0
 2332 0014 FEFFFFEB 		bl	vsscanf
 2333              	.LVL314:
 829:lib/vsprintf.c **** 	va_end(args);
 830:lib/vsprintf.c **** 	return i;
 831:lib/vsprintf.c **** }
 2334              		.loc 2 831 0
 2335 0018 0840BDE8 		ldmfd	sp!, {r3, lr}
 2336 001c 0CD08DE2 		add	sp, sp, #12
 2337 0020 1EFF2FE1 		bx	lr
 2338              		.cfi_endproc
 2339              	.LFE15:
 2341              		.section	.text.puts,"ax",%progbits
 2342              		.align	2
 2343              		.global	puts
 2345              	puts:
 2346              	.LFB16:
 832:lib/vsprintf.c **** 
 833:lib/vsprintf.c **** /* generic puts() implementation independent of who provides putchar() */
 834:lib/vsprintf.c **** int puts(const char *s)
 835:lib/vsprintf.c **** {
 2347              		.loc 2 835 0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 2351              		@ link register save eliminated.
 2352              	.LVL315:
 836:lib/vsprintf.c **** #ifdef ARCH_HAS_CONSOLE
 837:lib/vsprintf.c **** 	return _puts(s);
 838:lib/vsprintf.c **** #else
 839:lib/vsprintf.c **** 	while (1) {
 840:lib/vsprintf.c **** 		char c = *s++;
 841:lib/vsprintf.c **** 		if (c == 0)
 842:lib/vsprintf.c **** 			return;
 843:lib/vsprintf.c **** 		putchar(c);
 844:lib/vsprintf.c **** 	}
 845:lib/vsprintf.c **** 	return 0;
 846:lib/vsprintf.c **** #endif
 847:lib/vsprintf.c **** }
 2353              		.loc 2 847 0
 837:lib/vsprintf.c **** 	return _puts(s);
 2354              		.loc 2 837 0
 2355 0000 FEFFFFEA 		b	sercomm_puts
 2356              		.cfi_endproc
 2357              	.LFE16:
 2359              		.section	.rodata
 2360              		.align	2
 2361              		.set	.LANCHOR0,. + 0
 2364              	large_digits.1383:
 2365 0000 30313233 		.ascii	"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\000"
 2365      34353637 
 2365      38394142 
 2365      43444546 
 2365      4748494A 
 2366 0025 000000   		.space	3
 2369              	small_digits.1382:
 2370 0028 30313233 		.ascii	"0123456789abcdefghijklmnopqrstuvwxyz\000"
 2370      34353637 
 2370      38396162 
 2370      63646566 
 2370      6768696A 
 2371 004d 000000   		.text
 2372              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 vsprintf.c
     /tmp/ccmnkDR3.s:12     .text.__toupper:0000000000000000 $a
     /tmp/ccmnkDR3.s:14     .text.__toupper:0000000000000000 __toupper
     /tmp/ccmnkDR3.s:37     .text.__toupper:0000000000000018 $d
     /tmp/ccmnkDR3.s:42     .text.skip_atoi:0000000000000000 $a
     /tmp/ccmnkDR3.s:44     .text.skip_atoi:0000000000000000 skip_atoi
     /tmp/ccmnkDR3.s:89     .text.skip_atoi:0000000000000040 $d
     /tmp/ccmnkDR3.s:94     .text.number:0000000000000000 $a
     /tmp/ccmnkDR3.s:96     .text.number:0000000000000000 number
     /tmp/ccmnkDR3.s:434    .text.number:000000000000024c $d
     /tmp/ccmnkDR3.s:440    .text.strtoul:0000000000000000 $a
     /tmp/ccmnkDR3.s:443    .text.strtoul:0000000000000000 strtoul
     /tmp/ccmnkDR3.s:561    .text.strtoul:00000000000000d0 $d
     /tmp/ccmnkDR3.s:566    .text.strtol:0000000000000000 $a
     /tmp/ccmnkDR3.s:569    .text.strtol:0000000000000000 strtol
     /tmp/ccmnkDR3.s:601    .text.strtoull:0000000000000000 $a
     /tmp/ccmnkDR3.s:604    .text.strtoull:0000000000000000 strtoull
     /tmp/ccmnkDR3.s:739    .text.strtoull:00000000000000fc $d
     /tmp/ccmnkDR3.s:744    .text.strtoll:0000000000000000 $a
     /tmp/ccmnkDR3.s:747    .text.strtoll:0000000000000000 strtoll
     /tmp/ccmnkDR3.s:783    .text.vsnprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:786    .text.vsnprintf:0000000000000000 vsnprintf
     /tmp/ccmnkDR3.s:1454   .text.vsnprintf:0000000000000514 $d
     /tmp/ccmnkDR3.s:1459   .text.vscnprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1462   .text.vscnprintf:0000000000000000 vscnprintf
     /tmp/ccmnkDR3.s:1489   .text.snprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1492   .text.snprintf:0000000000000000 snprintf
     /tmp/ccmnkDR3.s:1526   .text.scnprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1529   .text.scnprintf:0000000000000000 scnprintf
     /tmp/ccmnkDR3.s:1571   .text.vsprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1574   .text.vsprintf:0000000000000000 vsprintf
     /tmp/ccmnkDR3.s:1597   .text.sprintf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1600   .text.sprintf:0000000000000000 sprintf
     /tmp/ccmnkDR3.s:1638   .text.vsscanf:0000000000000000 $a
     /tmp/ccmnkDR3.s:1641   .text.vsscanf:0000000000000000 vsscanf
     /tmp/ccmnkDR3.s:2299   .text.vsscanf:00000000000004e4 $d
     /tmp/ccmnkDR3.s:2304   .text.sscanf:0000000000000000 $a
     /tmp/ccmnkDR3.s:2307   .text.sscanf:0000000000000000 sscanf
     /tmp/ccmnkDR3.s:2342   .text.puts:0000000000000000 $a
     /tmp/ccmnkDR3.s:2345   .text.puts:0000000000000000 puts
     /tmp/ccmnkDR3.s:2360   .rodata:0000000000000000 $d
     /tmp/ccmnkDR3.s:2364   .rodata:0000000000000000 large_digits.1383
     /tmp/ccmnkDR3.s:2369   .rodata:0000000000000028 small_digits.1382
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
_ctype
__do_div64
strnlen
sercomm_puts
