   1              		.file	"async.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.l1a_txq_msgb_enq,"ax",%progbits
  12              		.align	2
  13              		.global	l1a_txq_msgb_enq
  15              	l1a_txq_msgb_enq:
  16              	.LFB39:
  17              		.file 1 "layer1/async.c"
   1:layer1/async.c **** /* Asynchronous part of GSM Layer 1 */
   2:layer1/async.c **** 
   3:layer1/async.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/async.c ****  *
   5:layer1/async.c ****  * All Rights Reserved
   6:layer1/async.c ****  *
   7:layer1/async.c ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/async.c ****  * it under the terms of the GNU General Public License as published by
   9:layer1/async.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/async.c ****  * (at your option) any later version.
  11:layer1/async.c ****  *
  12:layer1/async.c ****  * This program is distributed in the hope that it will be useful,
  13:layer1/async.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/async.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/async.c ****  * GNU General Public License for more details.
  16:layer1/async.c ****  *
  17:layer1/async.c ****  * You should have received a copy of the GNU General Public License along
  18:layer1/async.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/async.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/async.c ****  *
  21:layer1/async.c ****  */
  22:layer1/async.c **** 
  23:layer1/async.c **** #include <stdint.h>
  24:layer1/async.c **** 
  25:layer1/async.c **** #include <debug.h>
  26:layer1/async.c **** #include <arm.h>
  27:layer1/async.c **** #include <asm/system.h>
  28:layer1/async.c **** 
  29:layer1/async.c **** #include <osmocom/core/msgb.h>
  30:layer1/async.c **** #include <osmocom/gsm/protocol/gsm_04_08.h>
  31:layer1/async.c **** 
  32:layer1/async.c **** #include <layer1/sync.h>
  33:layer1/async.c **** #include <layer1/async.h>
  34:layer1/async.c **** #include <layer1/mframe_sched.h>
  35:layer1/async.c **** #include <layer1/sched_gsmtime.h>
  36:layer1/async.c **** #include <layer1/l23_api.h>
  37:layer1/async.c **** #include <calypso/l1_environment.h>
  38:layer1/async.c **** 
  39:layer1/async.c **** extern const struct tdma_sched_item rach_sched_set_ul[];
  40:layer1/async.c **** 
  41:layer1/async.c **** /* safely enable a message into the L1S TX queue */
  42:layer1/async.c **** void l1a_txq_msgb_enq(struct llist_head *queue, struct msgb *msg)
  43:layer1/async.c **** {
  18              		.loc 1 43 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22              	.LVL0:
  23 0000 10402DE9 		stmfd	sp!, {r4, lr}
  24              	.LCFI0:
  25              		.cfi_def_cfa_offset 8
  26              	.LBB7:
  44:layer1/async.c **** 	unsigned long flags;
  45:layer1/async.c **** 
  46:layer1/async.c **** 	local_firq_save(flags);
  27              		.loc 1 46 0
  28              	@ 46 "layer1/async.c" 1
  29 0004 00400FE1 		mrs	r4, cpsr		@ local_firq_save
  30 0008 C03084E3 		orr	r3, r4, #0xC0
  31 000c 03F021E1 		msr	cpsr_c, r3
  32              	@ 0 "" 2
  33              	.LBE7:
  47:layer1/async.c **** 	msgb_enqueue(queue, msg);
  34              		.loc 1 47 0
  35              		.cfi_offset 14, -4
  36              		.cfi_offset 4, -8
  37 0010 FEFFFFEB 		bl	msgb_enqueue
  38              	.LVL1:
  48:layer1/async.c **** 	local_irq_restore(flags);
  39              		.loc 1 48 0
  40              	@ 48 "layer1/async.c" 1
  41 0014 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
  42              	
  43              	@ 0 "" 2
  49:layer1/async.c **** }
  44              		.loc 1 49 0
  45 0018 1080BDE8 		ldmfd	sp!, {r4, pc}
  46              		.cfi_endproc
  47              	.LFE39:
  49              		.section	.text.l1a_meas_msgb_set,"ax",%progbits
  50              		.align	2
  51              		.global	l1a_meas_msgb_set
  53              	l1a_meas_msgb_set:
  54              	.LFB40:
  50:layer1/async.c **** 
  51:layer1/async.c **** void l1a_meas_msgb_set(struct msgb *msg)
  52:layer1/async.c **** {
  55              		.loc 1 52 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL2:
  60 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  61              	.LCFI1:
  62              		.cfi_def_cfa_offset 12
  63              		.loc 1 52 0
  64 0004 0050A0E1 		mov	r5, r0
  65              		.cfi_offset 14, -4
  66              		.cfi_offset 5, -8
  67              		.cfi_offset 4, -12
  68              	.LBB8:
  53:layer1/async.c **** 	unsigned long flags;
  54:layer1/async.c **** 
  55:layer1/async.c **** 	local_firq_save(flags);
  69              		.loc 1 55 0
  70              	@ 55 "layer1/async.c" 1
  71 0008 00400FE1 		mrs	r4, cpsr		@ local_firq_save
  72 000c C03084E3 		orr	r3, r4, #0xC0
  73 0010 03F021E1 		msr	cpsr_c, r3
  74              	@ 0 "" 2
  75              	.LVL3:
  76              	.LBE8:
  56:layer1/async.c **** 	if (l1s.tx_meas)
  77              		.loc 1 56 0
  78 0014 18309FE5 		ldr	r3, .L4
  79 0018 680A93E5 		ldr	r0, [r3, #2664]
  80              	.LVL4:
  81 001c 000050E3 		cmp	r0, #0
  57:layer1/async.c **** 		msgb_free(l1s.tx_meas);
  82              		.loc 1 57 0
  83 0020 FEFFFF1B 		blne	msgb_free
  84              	.L3:
  58:layer1/async.c **** 	l1s.tx_meas = msg;
  85              		.loc 1 58 0
  86 0024 08309FE5 		ldr	r3, .L4
  87 0028 685A83E5 		str	r5, [r3, #2664]
  59:layer1/async.c **** 	local_irq_restore(flags);
  88              		.loc 1 59 0
  89              	@ 59 "layer1/async.c" 1
  90 002c 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
  91              	
  92              	@ 0 "" 2
  60:layer1/async.c **** }
  93              		.loc 1 60 0
  94 0030 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
  95              	.L5:
  96              		.align	2
  97              	.L4:
  98 0034 00000000 		.word	l1s
  99              		.cfi_endproc
 100              	.LFE40:
 102              		.section	.text.l1a_txq_msgb_count,"ax",%progbits
 103              		.align	2
 104              		.global	l1a_txq_msgb_count
 106              	l1a_txq_msgb_count:
 107              	.LFB41:
  61:layer1/async.c **** 
  62:layer1/async.c **** /* safely count messages in the L1S TX queue */
  63:layer1/async.c **** int l1a_txq_msgb_count(struct llist_head *queue)
  64:layer1/async.c **** {
 108              		.loc 1 64 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113              	.LVL5:
 114              	.LBB9:
  65:layer1/async.c **** 	unsigned long flags;
  66:layer1/async.c **** 	int num = 0;
  67:layer1/async.c **** 	struct llist_head *le;
  68:layer1/async.c **** 
  69:layer1/async.c **** 	local_firq_save(flags);
 115              		.loc 1 69 0
 116              	@ 69 "layer1/async.c" 1
 117 0000 00100FE1 		mrs	r1, cpsr		@ local_firq_save
 118 0004 C03081E3 		orr	r3, r1, #0xC0
 119 0008 03F021E1 		msr	cpsr_c, r3
 120              	@ 0 "" 2
 121              	.LVL6:
 122              	.LBE9:
  66:layer1/async.c **** 	int num = 0;
 123              		.loc 1 66 0
 124 000c 0030A0E3 		mov	r3, #0
  70:layer1/async.c **** 	llist_for_each(le, queue)
 125              		.loc 1 70 0
 126 0010 002090E5 		ldr	r2, [r0, #0]
 127              	.LVL7:
 128 0014 010000EA 		b	.L7
 129              	.LVL8:
 130              	.L8:
 131              		.loc 1 70 0 is_stmt 0 discriminator 2
 132 0018 002092E5 		ldr	r2, [r2, #0]
 133              	.LVL9:
  71:layer1/async.c **** 		num++;
 134              		.loc 1 71 0 is_stmt 1 discriminator 2
 135 001c 013083E2 		add	r3, r3, #1
 136              	.LVL10:
 137              	.L7:
  70:layer1/async.c **** 	llist_for_each(le, queue)
 138              		.loc 1 70 0 discriminator 1
 139 0020 000052E1 		cmp	r2, r0
 140 0024 FBFFFF1A 		bne	.L8
  72:layer1/async.c **** 	local_irq_restore(flags);
 141              		.loc 1 72 0
 142              	@ 72 "layer1/async.c" 1
 143 0028 01F021E1 		msr	cpsr_c, r1		@ local_irq_restore
 144              	
 145              	@ 0 "" 2
  73:layer1/async.c **** 
  74:layer1/async.c **** 	return num;
  75:layer1/async.c **** }
 146              		.loc 1 75 0
 147 002c 0300A0E1 		mov	r0, r3
 148              	.LVL11:
 149 0030 1EFF2FE1 		bx	lr
 150              		.cfi_endproc
 151              	.LFE41:
 153              		.section	.text.l1a_txq_msgb_flush,"ax",%progbits
 154              		.align	2
 155              		.global	l1a_txq_msgb_flush
 157              	l1a_txq_msgb_flush:
 158              	.LFB42:
  76:layer1/async.c **** 
  77:layer1/async.c **** /* safely flush all pending msgb */
  78:layer1/async.c **** void l1a_txq_msgb_flush(struct llist_head *queue)
  79:layer1/async.c **** {
 159              		.loc 1 79 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              	.LVL12:
 164 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 12
 167              		.loc 1 79 0
 168 0004 0050A0E1 		mov	r5, r0
 169              		.cfi_offset 14, -4
 170              		.cfi_offset 5, -8
 171              		.cfi_offset 4, -12
 172              	.LBB10:
  80:layer1/async.c **** 	struct msgb *msg;
  81:layer1/async.c **** 	unsigned long flags;
  82:layer1/async.c **** 
  83:layer1/async.c **** 	local_firq_save(flags);
 173              		.loc 1 83 0
 174              	@ 83 "layer1/async.c" 1
 175 0008 00400FE1 		mrs	r4, cpsr		@ local_firq_save
 176 000c C03084E3 		orr	r3, r4, #0xC0
 177 0010 03F021E1 		msr	cpsr_c, r3
 178              	@ 0 "" 2
 179              	.LVL13:
 180              	.LBE10:
  84:layer1/async.c **** 	while ((msg = msgb_dequeue(queue)))
 181              		.loc 1 84 0
 182 0014 000000EA 		b	.L10
 183              	.LVL14:
 184              	.L11:
  85:layer1/async.c **** 		msgb_free(msg);
 185              		.loc 1 85 0
 186 0018 FEFFFFEB 		bl	msgb_free
 187              	.LVL15:
 188              	.L10:
  84:layer1/async.c **** 	while ((msg = msgb_dequeue(queue)))
 189              		.loc 1 84 0 discriminator 1
 190 001c 0500A0E1 		mov	r0, r5
 191 0020 FEFFFFEB 		bl	msgb_dequeue
 192              	.LVL16:
 193 0024 000050E3 		cmp	r0, #0
 194 0028 FAFFFF1A 		bne	.L11
  86:layer1/async.c **** 	local_irq_restore(flags);
 195              		.loc 1 86 0
 196              	@ 86 "layer1/async.c" 1
 197 002c 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
 198              	
 199              	@ 0 "" 2
  87:layer1/async.c **** }
 200              		.loc 1 87 0
 201 0030 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 202              		.cfi_endproc
 203              	.LFE42:
 205              		.section	.text.l1a_mftask_enable,"ax",%progbits
 206              		.align	2
 207              		.global	l1a_mftask_enable
 209              	l1a_mftask_enable:
 210              	.LFB43:
  88:layer1/async.c **** 
  89:layer1/async.c **** /* Enable a repeating multiframe task */
  90:layer1/async.c **** void l1a_mftask_enable(enum mframe_task task)
  91:layer1/async.c **** {
 211              		.loc 1 91 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216              	.LVL17:
  92:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
  93:layer1/async.c **** 	mframe_enable(task);
  94:layer1/async.c **** }
 217              		.loc 1 94 0
  93:layer1/async.c **** 	mframe_enable(task);
 218              		.loc 1 93 0
 219 0000 FEFFFFEA 		b	mframe_enable
 220              		.cfi_endproc
 221              	.LFE43:
 223              		.section	.text.l1a_mftask_disable,"ax",%progbits
 224              		.align	2
 225              		.global	l1a_mftask_disable
 227              	l1a_mftask_disable:
 228              	.LFB44:
  95:layer1/async.c **** 
  96:layer1/async.c **** /* Disable a repeating multiframe task */
  97:layer1/async.c **** void l1a_mftask_disable(enum mframe_task task)
  98:layer1/async.c **** {
 229              		.loc 1 98 0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233              		@ link register save eliminated.
 234              	.LVL18:
  99:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
 100:layer1/async.c **** 	mframe_disable(task);
 101:layer1/async.c **** }
 235              		.loc 1 101 0
 100:layer1/async.c **** 	mframe_disable(task);
 236              		.loc 1 100 0
 237 0000 FEFFFFEA 		b	mframe_disable
 238              		.cfi_endproc
 239              	.LFE44:
 241              		.section	.text.l1a_mftask_set,"ax",%progbits
 242              		.align	2
 243              		.global	l1a_mftask_set
 245              	l1a_mftask_set:
 246              	.LFB45:
 102:layer1/async.c **** 
 103:layer1/async.c **** /* Set the mask for repeating multiframe tasks */
 104:layer1/async.c **** void l1a_mftask_set(uint32_t tasks)
 105:layer1/async.c **** {
 247              		.loc 1 105 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              	.LVL19:
 106:layer1/async.c **** 	/* we don't need locking here as L1S only reads mframe.tasks */
 107:layer1/async.c **** 	mframe_set(tasks);
 108:layer1/async.c **** }
 253              		.loc 1 108 0
 107:layer1/async.c **** 	mframe_set(tasks);
 254              		.loc 1 107 0
 255 0000 FEFFFFEA 		b	mframe_set
 256              		.cfi_endproc
 257              	.LFE45:
 259              		.section	.text.l1a_tch_mode_set,"ax",%progbits
 260              		.align	2
 261              		.global	l1a_tch_mode_set
 263              	l1a_tch_mode_set:
 264              	.LFB46:
 109:layer1/async.c **** 
 110:layer1/async.c **** /* Set TCH mode */
 111:layer1/async.c **** uint8_t l1a_tch_mode_set(uint8_t mode)
 112:layer1/async.c **** {
 265              		.loc 1 112 0
 266              		.cfi_startproc
 267              		@ args = 0, pretend = 0, frame = 0
 268              		@ frame_needed = 0, uses_anonymous_args = 0
 269              		@ link register save eliminated.
 270              	.LVL20:
 271              		.loc 1 112 0
 272 0000 FF0000E2 		and	r0, r0, #255
 273              	.LVL21:
 113:layer1/async.c **** 	switch (mode) {
 274              		.loc 1 113 0
 275 0004 010050E3 		cmp	r0, #1
 276 0008 0100000A 		beq	.L17
 277 000c 210050E3 		cmp	r0, #33
 278 0010 0200001A 		bne	.L19
 279              	.L17:
 114:layer1/async.c **** 	case GSM48_CMODE_SPEECH_V1:
 115:layer1/async.c **** 	case GSM48_CMODE_SPEECH_EFR:
 116:layer1/async.c **** 		l1s.tch_mode = mode;
 280              		.loc 1 116 0
 281 0014 1C309FE5 		ldr	r3, .L20
 282 0018 4A0AC3E5 		strb	r0, [r3, #2634]
 117:layer1/async.c **** 		break;
 283              		.loc 1 117 0
 284 001c 020000EA 		b	.L18
 285              	.L19:
 118:layer1/async.c **** 	default:
 119:layer1/async.c **** 		l1s.tch_mode = GSM48_CMODE_SIGN;
 286              		.loc 1 119 0
 287 0020 10309FE5 		ldr	r3, .L20
 288 0024 0020A0E3 		mov	r2, #0
 289 0028 4A2AC3E5 		strb	r2, [r3, #2634]
 290              	.L18:
 120:layer1/async.c **** 	}
 121:layer1/async.c **** 
 122:layer1/async.c **** 	return l1s.tch_mode;
 123:layer1/async.c **** }
 291              		.loc 1 123 0
 292 002c 04309FE5 		ldr	r3, .L20
 293 0030 4A0AD3E5 		ldrb	r0, [r3, #2634]	@ zero_extendqisi2
 294 0034 1EFF2FE1 		bx	lr
 295              	.L21:
 296              		.align	2
 297              	.L20:
 298 0038 00000000 		.word	l1s
 299              		.cfi_endproc
 300              	.LFE46:
 302              		.section	.text.l1a_audio_mode_set,"ax",%progbits
 303              		.align	2
 304              		.global	l1a_audio_mode_set
 306              	l1a_audio_mode_set:
 307              	.LFB47:
 124:layer1/async.c **** 
 125:layer1/async.c **** /* Set Audio routing mode */
 126:layer1/async.c **** uint8_t l1a_audio_mode_set(uint8_t mode)
 127:layer1/async.c **** {
 308              		.loc 1 127 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL22:
 128:layer1/async.c **** 	l1s.audio_mode = mode;
 314              		.loc 1 128 0
 315 0000 08309FE5 		ldr	r3, .L23
 127:layer1/async.c **** {
 316              		.loc 1 127 0
 317 0004 FF0000E2 		and	r0, r0, #255
 318              	.LVL23:
 319              		.loc 1 128 0
 320 0008 4C0AC3E5 		strb	r0, [r3, #2636]
 129:layer1/async.c **** 	return mode;
 130:layer1/async.c **** }
 321              		.loc 1 130 0
 322 000c 1EFF2FE1 		bx	lr
 323              	.L24:
 324              		.align	2
 325              	.L23:
 326 0010 00000000 		.word	l1s
 327              		.cfi_endproc
 328              	.LFE47:
 330              		.section	.text.l1a_init,"ax",%progbits
 331              		.align	2
 332              		.global	l1a_init
 334              	l1a_init:
 335              	.LFB48:
 131:layer1/async.c **** 
 132:layer1/async.c **** /* Initialize asynchronous part of Layer1 */
 133:layer1/async.c **** void l1a_init(void)
 134:layer1/async.c **** {
 336              		.loc 1 134 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 135:layer1/async.c **** 	l1a_l23api_init();
 136:layer1/async.c **** }
 341              		.loc 1 136 0
 135:layer1/async.c **** 	l1a_l23api_init();
 342              		.loc 1 135 0
 343 0000 FEFFFFEA 		b	l1a_l23api_init
 344              		.cfi_endproc
 345              	.LFE48:
 347              		.section	.text.l1a_compl_execute,"ax",%progbits
 348              		.align	2
 349              		.global	l1a_compl_execute
 351              	l1a_compl_execute:
 352              	.LFB49:
 137:layer1/async.c **** 
 138:layer1/async.c **** /* Execute pending L1A completions */
 139:layer1/async.c **** void l1a_compl_execute(void)
 140:layer1/async.c **** {
 353              		.loc 1 140 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357 0000 F0402DE9 		stmfd	sp!, {r4, r5, r6, r7, lr}
 358              	.LCFI3:
 359              		.cfi_def_cfa_offset 20
 360              	.LBB11:
 141:layer1/async.c **** 	unsigned long flags;
 142:layer1/async.c **** 	unsigned int scheduled;
 143:layer1/async.c **** 	unsigned int i;
 144:layer1/async.c **** 
 145:layer1/async.c **** 	/* get and reset the currently scheduled tasks */
 146:layer1/async.c **** 	local_firq_save(flags);
 361              		.loc 1 146 0
 362              	@ 146 "layer1/async.c" 1
 363 0004 00300FE1 		mrs	r3, cpsr		@ local_firq_save
 364 0008 C02083E3 		orr	r2, r3, #0xC0
 365 000c 02F021E1 		msr	cpsr_c, r2
 366              	@ 0 "" 2
 367              	.LBE11:
 147:layer1/async.c **** 	scheduled = l1s.scheduled_compl;
 368              		.loc 1 147 0
 369 0010 34509FE5 		ldr	r5, .L30
 370              		.cfi_offset 14, -4
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 6, -12
 373              		.cfi_offset 5, -16
 374              		.cfi_offset 4, -20
 148:layer1/async.c **** 	l1s.scheduled_compl = 0;
 375              		.loc 1 148 0
 376 0014 0040A0E3 		mov	r4, #0
 147:layer1/async.c **** 	scheduled = l1s.scheduled_compl;
 377              		.loc 1 147 0
 378 0018 6C7A95E5 		ldr	r7, [r5, #2668]
 379              	.LVL24:
 380              		.loc 1 148 0
 381 001c 6C4A85E5 		str	r4, [r5, #2668]
 149:layer1/async.c **** 	local_irq_restore(flags);
 382              		.loc 1 149 0
 383              	@ 149 "layer1/async.c" 1
 384 0020 03F021E1 		msr	cpsr_c, r3		@ local_irq_restore
 385              	
 386              	@ 0 "" 2
 387              	.LVL25:
 150:layer1/async.c **** 
 151:layer1/async.c **** 	/* Iterate over list of scheduled completions, call their
 152:layer1/async.c **** 	 * respective completion handler */
 153:layer1/async.c **** 	for (i = 0; i < 32; i++) {
 154:layer1/async.c **** 		if (!(scheduled & (1 << i)))
 388              		.loc 1 154 0
 389 0024 0160A0E3 		mov	r6, #1
 390              	.LVL26:
 391              	.L28:
 392 0028 163417E0 		ands	r3, r7, r6, asl r4
 139:layer1/async.c **** void l1a_compl_execute(void)
 393              		.loc 1 139 0
 394 002c 04318510 		addne	r3, r5, r4, asl #2
 155:layer1/async.c **** 			continue;
 156:layer1/async.c **** 		/* call completion function */
 157:layer1/async.c **** 		l1s.completion[i](i);
 395              		.loc 1 157 0
 396 0030 0400A011 		movne	r0, r4
 397 0034 0FE0A011 		movne	lr, pc
 398 0038 70FA9315 		ldrne	pc, [r3, #2672]
 399              	.L27:
 153:layer1/async.c **** 	for (i = 0; i < 32; i++) {
 400              		.loc 1 153 0
 401 003c 014084E2 		add	r4, r4, #1
 402              	.LVL27:
 403 0040 200054E3 		cmp	r4, #32
 404 0044 F7FFFF1A 		bne	.L28
 158:layer1/async.c **** 	}
 159:layer1/async.c **** }
 405              		.loc 1 159 0
 406 0048 F080BDE8 		ldmfd	sp!, {r4, r5, r6, r7, pc}
 407              	.L31:
 408              		.align	2
 409              	.L30:
 410 004c 00000000 		.word	l1s
 411              		.cfi_endproc
 412              	.LFE49:
 414              		.text
 415              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 async.c
     /tmp/cc0tGPGv.s:12     .text.l1a_txq_msgb_enq:0000000000000000 $a
     /tmp/cc0tGPGv.s:15     .text.l1a_txq_msgb_enq:0000000000000000 l1a_txq_msgb_enq
     /tmp/cc0tGPGv.s:50     .text.l1a_meas_msgb_set:0000000000000000 $a
     /tmp/cc0tGPGv.s:53     .text.l1a_meas_msgb_set:0000000000000000 l1a_meas_msgb_set
     /tmp/cc0tGPGv.s:98     .text.l1a_meas_msgb_set:0000000000000034 $d
     /tmp/cc0tGPGv.s:103    .text.l1a_txq_msgb_count:0000000000000000 $a
     /tmp/cc0tGPGv.s:106    .text.l1a_txq_msgb_count:0000000000000000 l1a_txq_msgb_count
     /tmp/cc0tGPGv.s:154    .text.l1a_txq_msgb_flush:0000000000000000 $a
     /tmp/cc0tGPGv.s:157    .text.l1a_txq_msgb_flush:0000000000000000 l1a_txq_msgb_flush
     /tmp/cc0tGPGv.s:206    .text.l1a_mftask_enable:0000000000000000 $a
     /tmp/cc0tGPGv.s:209    .text.l1a_mftask_enable:0000000000000000 l1a_mftask_enable
     /tmp/cc0tGPGv.s:224    .text.l1a_mftask_disable:0000000000000000 $a
     /tmp/cc0tGPGv.s:227    .text.l1a_mftask_disable:0000000000000000 l1a_mftask_disable
     /tmp/cc0tGPGv.s:242    .text.l1a_mftask_set:0000000000000000 $a
     /tmp/cc0tGPGv.s:245    .text.l1a_mftask_set:0000000000000000 l1a_mftask_set
     /tmp/cc0tGPGv.s:260    .text.l1a_tch_mode_set:0000000000000000 $a
     /tmp/cc0tGPGv.s:263    .text.l1a_tch_mode_set:0000000000000000 l1a_tch_mode_set
     /tmp/cc0tGPGv.s:298    .text.l1a_tch_mode_set:0000000000000038 $d
     /tmp/cc0tGPGv.s:303    .text.l1a_audio_mode_set:0000000000000000 $a
     /tmp/cc0tGPGv.s:306    .text.l1a_audio_mode_set:0000000000000000 l1a_audio_mode_set
     /tmp/cc0tGPGv.s:326    .text.l1a_audio_mode_set:0000000000000010 $d
     /tmp/cc0tGPGv.s:331    .text.l1a_init:0000000000000000 $a
     /tmp/cc0tGPGv.s:334    .text.l1a_init:0000000000000000 l1a_init
     /tmp/cc0tGPGv.s:348    .text.l1a_compl_execute:0000000000000000 $a
     /tmp/cc0tGPGv.s:351    .text.l1a_compl_execute:0000000000000000 l1a_compl_execute
     /tmp/cc0tGPGv.s:410    .text.l1a_compl_execute:000000000000004c $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
msgb_enqueue
msgb_free
l1s
msgb_dequeue
mframe_enable
mframe_disable
mframe_set
l1a_l23api_init
