   1              		.file	"prim_rach.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.l1s_tx_rach_resp,"ax",%progbits
  12              		.align	2
  14              	l1s_tx_rach_resp:
  15              	.LFB66:
  16              		.file 1 "layer1/prim_rach.c"
   1:layer1/prim_rach.c **** /* Layer 1 Random Access Channel Burst */
   2:layer1/prim_rach.c **** 
   3:layer1/prim_rach.c **** /* (C) 2010 by Dieter Spaar <spaar@mirider.augusta.de>
   4:layer1/prim_rach.c ****  * (C) 2010 by Harald Welte <laforge@gnumonks.org>
   5:layer1/prim_rach.c ****  *
   6:layer1/prim_rach.c ****  * All Rights Reserved
   7:layer1/prim_rach.c ****  *
   8:layer1/prim_rach.c ****  * This program is free software; you can redistribute it and/or modify
   9:layer1/prim_rach.c ****  * it under the terms of the GNU General Public License as published by
  10:layer1/prim_rach.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:layer1/prim_rach.c ****  * (at your option) any later version.
  12:layer1/prim_rach.c ****  *
  13:layer1/prim_rach.c ****  * This program is distributed in the hope that it will be useful,
  14:layer1/prim_rach.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:layer1/prim_rach.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:layer1/prim_rach.c ****  * GNU General Public License for more details.
  17:layer1/prim_rach.c ****  *
  18:layer1/prim_rach.c ****  * You should have received a copy of the GNU General Public License along
  19:layer1/prim_rach.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:layer1/prim_rach.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:layer1/prim_rach.c ****  *
  22:layer1/prim_rach.c ****  */
  23:layer1/prim_rach.c **** 
  24:layer1/prim_rach.c **** #include <stdint.h>
  25:layer1/prim_rach.c **** #include <stdio.h>
  26:layer1/prim_rach.c **** #include <string.h>
  27:layer1/prim_rach.c **** #include <stdlib.h>
  28:layer1/prim_rach.c **** 
  29:layer1/prim_rach.c **** #include <defines.h>
  30:layer1/prim_rach.c **** #include <debug.h>
  31:layer1/prim_rach.c **** #include <memory.h>
  32:layer1/prim_rach.c **** #include <byteorder.h>
  33:layer1/prim_rach.c **** #include <osmocom/gsm/gsm_utils.h>
  34:layer1/prim_rach.c **** #include <osmocom/core/msgb.h>
  35:layer1/prim_rach.c **** #include <calypso/dsp_api.h>
  36:layer1/prim_rach.c **** #include <calypso/irq.h>
  37:layer1/prim_rach.c **** #include <calypso/tpu.h>
  38:layer1/prim_rach.c **** #include <calypso/tsp.h>
  39:layer1/prim_rach.c **** #include <calypso/dsp.h>
  40:layer1/prim_rach.c **** #include <calypso/timer.h>
  41:layer1/prim_rach.c **** #include <comm/sercomm.h>
  42:layer1/prim_rach.c **** #include <asm/system.h>
  43:layer1/prim_rach.c **** 
  44:layer1/prim_rach.c **** #include <layer1/sync.h>
  45:layer1/prim_rach.c **** #include <layer1/async.h>
  46:layer1/prim_rach.c **** #include <layer1/tdma_sched.h>
  47:layer1/prim_rach.c **** #include <layer1/tpu_window.h>
  48:layer1/prim_rach.c **** #include <layer1/l23_api.h>
  49:layer1/prim_rach.c **** #include <layer1/sched_gsmtime.h>
  50:layer1/prim_rach.c **** 
  51:layer1/prim_rach.c **** #include <l1ctl_proto.h>
  52:layer1/prim_rach.c **** 
  53:layer1/prim_rach.c **** struct {
  54:layer1/prim_rach.c **** 	uint32_t fn;
  55:layer1/prim_rach.c **** 	uint16_t band_arfcn;
  56:layer1/prim_rach.c **** } last_rach;
  57:layer1/prim_rach.c **** 
  58:layer1/prim_rach.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB */
  59:layer1/prim_rach.c **** static int l1s_tx_rach_cmd(__unused uint8_t p1, __unused uint8_t p2, __unused uint16_t p3)
  60:layer1/prim_rach.c **** {
  61:layer1/prim_rach.c **** 	int i;
  62:layer1/prim_rach.c **** 	uint16_t  *info_ptr;
  63:layer1/prim_rach.c **** 	uint16_t arfcn;
  64:layer1/prim_rach.c **** 	uint8_t data[2];
  65:layer1/prim_rach.c **** 
  66:layer1/prim_rach.c **** 	putchart('T');
  67:layer1/prim_rach.c **** 
  68:layer1/prim_rach.c **** 	l1s_tx_apc_helper(l1s.serving_cell.arfcn);
  69:layer1/prim_rach.c **** 
  70:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  71:layer1/prim_rach.c **** 	data[1] = l1s.rach.ra;
  72:layer1/prim_rach.c **** 
  73:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  74:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  75:layer1/prim_rach.c **** 
  76:layer1/prim_rach.c **** 	arfcn = l1s.serving_cell.arfcn;
  77:layer1/prim_rach.c **** 
  78:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = dsp_task_iq_swap(RACH_DSP_TASK, arfcn, 1);
  79:layer1/prim_rach.c **** 
  80:layer1/prim_rach.c **** 	l1s_tx_win_ctrl(arfcn | ARFCN_UPLINK, L1_TXWIN_AB, 0, 3);
  81:layer1/prim_rach.c **** 
  82:layer1/prim_rach.c **** 	return 0;
  83:layer1/prim_rach.c **** }
  84:layer1/prim_rach.c **** 
  85:layer1/prim_rach.c **** /* p1: type of operation (0: one NB, 1: one RACH burst, 2: four NB */
  86:layer1/prim_rach.c **** static int l1s_tx_rach_resp(__unused uint8_t p1, __unused uint8_t burst_id,
  87:layer1/prim_rach.c **** 			    __unused uint16_t p3)
  88:layer1/prim_rach.c **** {
  17              		.loc 1 88 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  89:layer1/prim_rach.c **** 	putchart('t');
  90:layer1/prim_rach.c **** 
  91:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  92:layer1/prim_rach.c **** 
  93:layer1/prim_rach.c **** 	/* schedule a confirmation back indicating the GSM time at which
  94:layer1/prim_rach.c **** 	 * the RACH burst was transmitted to the BTS */
  95:layer1/prim_rach.c **** 	last_rach.fn = l1s.current_time.fn - 1;
  22              		.loc 1 95 0
  23 0000 30209FE5 		ldr	r2, .L2
  24              	.LVL1:
  91:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  25              		.loc 1 91 0
  26 0004 30309FE5 		ldr	r3, .L2+4
  27 0008 0100A0E3 		mov	r0, #1
  28              	.LVL2:
  29              		.loc 1 95 0
  30 000c 001092E5 		ldr	r1, [r2, #0]
  31              	.LVL3:
  88:layer1/prim_rach.c **** {
  32              		.loc 1 88 0
  33 0010 04E02DE5 		str	lr, [sp, #-4]!
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  96:layer1/prim_rach.c **** 	last_rach.band_arfcn = l1s.serving_cell.arfcn;
  36              		.loc 1 96 0
  37 0014 B821D2E1 		ldrh	r2, [r2, #24]
  91:layer1/prim_rach.c **** 	dsp_api.r_page_used = 1;
  38              		.loc 1 91 0
  39 0018 180083E5 		str	r0, [r3, #24]
  95:layer1/prim_rach.c **** 	last_rach.fn = l1s.current_time.fn - 1;
  40              		.loc 1 95 0
  41 001c 1C309FE5 		ldr	r3, .L2+8
  42 0020 011041E2 		sub	r1, r1, #1
  43 0024 001083E5 		str	r1, [r3, #0]
  44              		.loc 1 96 0
  45 0028 B420C3E1 		strh	r2, [r3, #4]	@ movhi
  97:layer1/prim_rach.c **** 	l1s_compl_sched(L1_COMPL_RACH);
  46              		.loc 1 97 0
  47              		.cfi_offset 14, -4
  48 002c FEFFFFEB 		bl	l1s_compl_sched
  98:layer1/prim_rach.c **** 
  99:layer1/prim_rach.c **** 	return 0;
 100:layer1/prim_rach.c **** }
  49              		.loc 1 100 0
  50 0030 0000A0E3 		mov	r0, #0
  51 0034 04F09DE4 		ldr	pc, [sp], #4
  52              	.L3:
  53              		.align	2
  54              	.L2:
  55 0038 00000000 		.word	l1s
  56 003c 00000000 		.word	dsp_api
  57 0040 00000000 		.word	last_rach
  58              		.cfi_endproc
  59              	.LFE66:
  61              		.section	.text.l1s_tx_rach_cmd,"ax",%progbits
  62              		.align	2
  64              	l1s_tx_rach_cmd:
  65              	.LFB65:
  60:layer1/prim_rach.c **** {
  66              		.loc 1 60 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL4:
  71 0000 30402DE9 		stmfd	sp!, {r4, r5, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 12
  68:layer1/prim_rach.c **** 	l1s_tx_apc_helper(l1s.serving_cell.arfcn);
  74              		.loc 1 68 0
  75 0004 68409FE5 		ldr	r4, .L7
  76              		.cfi_offset 14, -4
  77              		.cfi_offset 5, -8
  78              		.cfi_offset 4, -12
  79 0008 B801D4E1 		ldrh	r0, [r4, #24]
  80              	.LVL5:
  81 000c FEFFFFEB 		bl	l1s_tx_apc_helper
  82              	.LVL6:
  70:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  83              		.loc 1 70 0
  84 0010 1A00D4E5 		ldrb	r0, [r4, #26]	@ zero_extendqisi2
  73:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  85              		.loc 1 73 0
  86 0014 5C309FE5 		ldr	r3, .L7+4
  74:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  87              		.loc 1 74 0
  88 0018 042BD4E5 		ldrb	r2, [r4, #2820]	@ zero_extendqisi2
  70:layer1/prim_rach.c **** 	data[0] = l1s.serving_cell.bsic << 2;
  89              		.loc 1 70 0
  90 001c 0001A0E1 		mov	r0, r0, asl #2
  73:layer1/prim_rach.c **** 	info_ptr = &dsp_api.ndb->d_rach;
  91              		.loc 1 73 0
  92 0020 001093E5 		ldr	r1, [r3, #0]
  76:layer1/prim_rach.c **** 	arfcn = l1s.serving_cell.arfcn;
  93              		.loc 1 76 0
  94 0024 B841D4E1 		ldrh	r4, [r4, #24]
  95              	.LVL7:
  74:layer1/prim_rach.c **** 	info_ptr[0] = ((uint16_t)(data[0])) | ((uint16_t)(data[1])<<8);
  96              		.loc 1 74 0
  97 0028 FF0000E2 		and	r0, r0, #255
  98 002c 020480E1 		orr	r0, r0, r2, asl #8
  99 0030 B32FA0E3 		mov	r2, #716
 100 0034 B20081E1 		strh	r0, [r1, r2]	@ movhi
 101              	.LBB4:
 102              	.LBB5:
 103              		.file 2 "include/calypso/dsp.h"
   1:include/calypso/dsp.h **** #ifndef _CALYPSO_DSP_H
   2:include/calypso/dsp.h **** #define _CALYPSO_DSP_H
   3:include/calypso/dsp.h **** 
   4:include/calypso/dsp.h **** #include <calypso/dsp_api.h>
   5:include/calypso/dsp.h **** #include <rffe.h>
   6:include/calypso/dsp.h **** 
   7:include/calypso/dsp.h **** #define CAL_DSP_TGT_BB_LVL	80
   8:include/calypso/dsp.h **** 
   9:include/calypso/dsp.h **** struct gsm_time;
  10:include/calypso/dsp.h **** 
  11:include/calypso/dsp.h **** struct dsp_api {
  12:include/calypso/dsp.h **** 	T_NDB_MCU_DSP *ndb;
  13:include/calypso/dsp.h **** 	T_DB_DSP_TO_MCU *db_r;
  14:include/calypso/dsp.h **** 	T_DB_MCU_TO_DSP *db_w;
  15:include/calypso/dsp.h **** 	T_PARAM_MCU_DSP *param;
  16:include/calypso/dsp.h **** 	int r_page;
  17:include/calypso/dsp.h **** 	int w_page;
  18:include/calypso/dsp.h **** 	int r_page_used;
  19:include/calypso/dsp.h **** 	int frame_ctr;
  20:include/calypso/dsp.h **** };
  21:include/calypso/dsp.h **** 
  22:include/calypso/dsp.h **** extern struct dsp_api dsp_api;
  23:include/calypso/dsp.h **** 
  24:include/calypso/dsp.h **** void dsp_power_on(void);
  25:include/calypso/dsp.h **** void dsp_dump_version(void);
  26:include/calypso/dsp.h **** void dsp_dump(void);
  27:include/calypso/dsp.h **** void dsp_checksum_task(void);
  28:include/calypso/dsp.h **** void dsp_api_memset(uint16_t *ptr, int octets);
  29:include/calypso/dsp.h **** void dsp_memcpy_to_api(volatile uint16_t *dsp_buf, const uint8_t *mcu_buf, int n, int be);
  30:include/calypso/dsp.h **** void dsp_memcpy_from_api(uint8_t *mcu_buf, const volatile uint16_t *dsp_buf, int n, int be);
  31:include/calypso/dsp.h **** void dsp_load_afc_dac(uint16_t afc);
  32:include/calypso/dsp.h **** void dsp_load_apc_dac(uint16_t apc);
  33:include/calypso/dsp.h **** void dsp_load_tch_param(struct gsm_time *next_time,
  34:include/calypso/dsp.h ****                         uint8_t chan_mode, uint8_t chan_type, uint8_t chan_sub,
  35:include/calypso/dsp.h ****                         uint8_t tch_loop, uint8_t sync_tch, uint8_t tn);
  36:include/calypso/dsp.h **** void dsp_load_ciph_param(int mode, uint8_t *key);
  37:include/calypso/dsp.h **** void dsp_end_scenario(void);
  38:include/calypso/dsp.h **** 
  39:include/calypso/dsp.h **** void dsp_load_rx_task(uint16_t task, uint8_t burst_id, uint8_t tsc);
  40:include/calypso/dsp.h **** void dsp_load_tx_task(uint16_t task, uint8_t burst_id, uint8_t tsc);
  41:include/calypso/dsp.h **** 
  42:include/calypso/dsp.h **** static inline uint16_t
  43:include/calypso/dsp.h **** dsp_task_iq_swap(uint16_t dsp_task, uint16_t band_arfcn, int tx)
  44:include/calypso/dsp.h **** {
  45:include/calypso/dsp.h **** 	if (rffe_iq_swapped(band_arfcn, tx))
 104              		.loc 2 45 0
 105 0038 0400A0E1 		mov	r0, r4
 106 003c 0110A0E3 		mov	r1, #1
 107              	.LBE5:
 108              	.LBE4:
  78:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = dsp_task_iq_swap(RACH_DSP_TASK, arfcn, 1);
 109              		.loc 1 78 0
 110 0040 085093E5 		ldr	r5, [r3, #8]
 111              	.LVL8:
 112              	.LBB7:
 113              	.LBB6:
 114              		.loc 2 45 0
 115 0044 FEFFFFEB 		bl	rffe_iq_swapped
 116              	.LVL9:
 117 0048 2C309FE5 		ldr	r3, .L7+8
 118 004c 000050E3 		cmp	r0, #0
 119 0050 0A30A003 		moveq	r3, #10
 120              	.LVL10:
 121              	.LBE6:
 122              	.LBE7:
  78:layer1/prim_rach.c **** 	dsp_api.db_w->d_task_ra = dsp_task_iq_swap(RACH_DSP_TASK, arfcn, 1);
 123              		.loc 1 78 0
 124 0054 BE30C5E1 		strh	r3, [r5, #14]	@ movhi
  80:layer1/prim_rach.c **** 	l1s_tx_win_ctrl(arfcn | ARFCN_UPLINK, L1_TXWIN_AB, 0, 3);
 125              		.loc 1 80 0
 126 0058 010984E3 		orr	r0, r4, #16384
 127 005c 0110A0E3 		mov	r1, #1
 128 0060 0020A0E3 		mov	r2, #0
 129 0064 0330A0E3 		mov	r3, #3
 130              	.LVL11:
 131 0068 FEFFFFEB 		bl	l1s_tx_win_ctrl
 132              	.LVL12:
  83:layer1/prim_rach.c **** }
 133              		.loc 1 83 0
 134 006c 0000A0E3 		mov	r0, #0
 135 0070 3080BDE8 		ldmfd	sp!, {r4, r5, pc}
 136              	.L8:
 137              		.align	2
 138              	.L7:
 139 0074 00000000 		.word	l1s
 140 0078 00000000 		.word	dsp_api
 141 007c 0A800000 		.word	32778
 142              		.cfi_endproc
 143              	.LFE65:
 145              		.section	.text.l1a_rach_compl,"ax",%progbits
 146              		.align	2
 148              	l1a_rach_compl:
 149              	.LFB67:
 101:layer1/prim_rach.c **** 
 102:layer1/prim_rach.c **** /* sched sets for uplink */
 103:layer1/prim_rach.c **** const struct tdma_sched_item rach_sched_set_ul[] = {
 104:layer1/prim_rach.c **** 	SCHED_ITEM_DT(l1s_tx_rach_cmd, 3, 1, 0),	SCHED_END_FRAME(),
 105:layer1/prim_rach.c **** 							SCHED_END_FRAME(),
 106:layer1/prim_rach.c **** 	SCHED_ITEM(l1s_tx_rach_resp, -4, 1, 0),		SCHED_END_FRAME(),
 107:layer1/prim_rach.c **** 	SCHED_END_SET()
 108:layer1/prim_rach.c **** };
 109:layer1/prim_rach.c **** 
 110:layer1/prim_rach.c **** /* Asynchronous completion handler for FB detection */
 111:layer1/prim_rach.c **** static void l1a_rach_compl(__unused enum l1_compl c)
 112:layer1/prim_rach.c **** {
 150              		.loc 1 112 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              	.LVL13:
 113:layer1/prim_rach.c **** 	struct msgb *msg;
 114:layer1/prim_rach.c **** 
 115:layer1/prim_rach.c **** 	msg = l1_create_l2_msg(L1CTL_RACH_CONF, last_rach.fn, 0,
 155              		.loc 1 115 0
 156 0000 1C309FE5 		ldr	r3, .L10
 112:layer1/prim_rach.c **** {
 157              		.loc 1 112 0
 158 0004 04E02DE5 		str	lr, [sp, #-4]!
 159              	.LCFI2:
 160              		.cfi_def_cfa_offset 4
 161              		.loc 1 115 0
 162 0008 001093E5 		ldr	r1, [r3, #0]
 163 000c 0020A0E3 		mov	r2, #0
 164 0010 B430D3E1 		ldrh	r3, [r3, #4]
 165 0014 0C00A0E3 		mov	r0, #12
 166              	.LVL14:
 167              		.cfi_offset 14, -4
 168 0018 FEFFFFEB 		bl	l1_create_l2_msg
 116:layer1/prim_rach.c **** 				last_rach.band_arfcn);
 117:layer1/prim_rach.c **** 	l1_queue_for_l2(msg);
 118:layer1/prim_rach.c **** }
 169              		.loc 1 118 0
 170 001c 04E09DE4 		ldr	lr, [sp], #4
 117:layer1/prim_rach.c **** 	l1_queue_for_l2(msg);
 171              		.loc 1 117 0
 172 0020 FEFFFFEA 		b	l1_queue_for_l2
 173              	.L11:
 174              		.align	2
 175              	.L10:
 176 0024 00000000 		.word	last_rach
 177              		.cfi_endproc
 178              	.LFE67:
 180              		.global	__udivsi3
 181              		.global	__umodsi3
 182              		.section	.text.l1a_rach_req,"ax",%progbits
 183              		.align	2
 184              		.global	l1a_rach_req
 186              	l1a_rach_req:
 187              	.LFB68:
 119:layer1/prim_rach.c **** 
 120:layer1/prim_rach.c **** static uint8_t t3_to_rach_comb[51] = {
 121:layer1/prim_rach.c **** 	 0,  0,  0,  0,
 122:layer1/prim_rach.c **** 	 0,  1,
 123:layer1/prim_rach.c **** 	 2,  2,  2,  2,  2,  2,  2,  2,
 124:layer1/prim_rach.c **** 	 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,
 125:layer1/prim_rach.c **** 	13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
 126:layer1/prim_rach.c **** 	25, 25, 25, 25, 25, 25, 25, 25,
 127:layer1/prim_rach.c **** 	25, 26,
 128:layer1/prim_rach.c **** 	27, 27, 27, 27};
 129:layer1/prim_rach.c **** static uint8_t rach_to_t3_comb[27] = {
 130:layer1/prim_rach.c **** 	 4,  5,
 131:layer1/prim_rach.c **** 	14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
 132:layer1/prim_rach.c **** 	25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36,
 133:layer1/prim_rach.c **** 	45, 46};
 134:layer1/prim_rach.c **** 
 135:layer1/prim_rach.c **** /* request a RACH request at the next multiframe T3 = fn51 */
 136:layer1/prim_rach.c **** void l1a_rach_req(uint16_t offset, uint8_t combined, uint8_t ra)
 137:layer1/prim_rach.c **** {
 188              		.loc 1 137 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              	.LVL15:
 193 0000 0008A0E1 		mov	r0, r0, asl #16
 194              	.LVL16:
 195 0004 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
 196              	.LCFI3:
 197              		.cfi_def_cfa_offset 28
 198              		.loc 1 137 0
 199 0008 FF7002E2 		and	r7, r2, #255
 200              		.cfi_offset 14, -4
 201              		.cfi_offset 10, -8
 202              		.cfi_offset 8, -12
 203              		.cfi_offset 7, -16
 204              		.cfi_offset 6, -20
 205              		.cfi_offset 5, -24
 206              		.cfi_offset 4, -28
 138:layer1/prim_rach.c **** 	uint32_t fn_sched;
 139:layer1/prim_rach.c **** 	unsigned long flags;
 140:layer1/prim_rach.c **** 
 141:layer1/prim_rach.c **** 	offset += 3;
 207              		.loc 1 141 0
 208 000c 032880E2 		add	r2, r0, #196608
 209              	.LVL17:
 137:layer1/prim_rach.c **** {
 210              		.loc 1 137 0
 211 0010 FF1001E2 		and	r1, r1, #255
 212              	.LVL18:
 213              		.loc 1 141 0
 214 0014 2228A0E1 		mov	r2, r2, lsr #16
 215              	.LVL19:
 216              	.LBB8:
 142:layer1/prim_rach.c **** 
 143:layer1/prim_rach.c **** 	local_firq_save(flags);
 217              		.loc 1 143 0
 218              	@ 143 "layer1/prim_rach.c" 1
 219 0018 00400FE1 		mrs	r4, cpsr		@ local_firq_save
 220 001c C03084E3 		orr	r3, r4, #0xC0
 221 0020 03F021E1 		msr	cpsr_c, r3
 222              	@ 0 "" 2
 223              	.LVL20:
 224 0024 90309FE5 		ldr	r3, .L15
 225              	.LBE8:
 144:layer1/prim_rach.c **** 	if (combined) {
 226              		.loc 1 144 0
 227 0028 000051E3 		cmp	r1, #0
 145:layer1/prim_rach.c **** 		/* add elapsed RACH slots to offset */
 146:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 147:layer1/prim_rach.c **** 		/* offset is the number of RACH slots in the future */
 148:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 149:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 150:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 151:layer1/prim_rach.c **** 	} else
 152:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn + offset;
 228              		.loc 1 152 0
 229 002c 00109305 		ldreq	r1, [r3, #0]
 230 0030 01108200 		addeq	r1, r2, r1
 144:layer1/prim_rach.c **** 	if (combined) {
 231              		.loc 1 144 0
 232 0034 1500000A 		beq	.L14
 146:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 233              		.loc 1 146 0
 234 0038 0700D3E5 		ldrb	r0, [r3, #7]	@ zero_extendqisi2
 235 003c 7C509FE5 		ldr	r5, .L15+4
 236 0040 0060D5E7 		ldrb	r6, [r5, r0]	@ zero_extendqisi2
 237 0044 066082E0 		add	r6, r2, r6
 148:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 238              		.loc 1 148 0
 239 0048 00A093E5 		ldr	sl, [r3, #0]
 146:layer1/prim_rach.c **** 		offset += t3_to_rach_comb[l1s.current_time.t3];
 240              		.loc 1 146 0
 241 004c 0668A0E1 		mov	r6, r6, asl #16
 242 0050 2668A0E1 		mov	r6, r6, lsr #16
 243              	.LVL21:
 148:layer1/prim_rach.c **** 		fn_sched = l1s.current_time.fn - l1s.current_time.t3;
 244              		.loc 1 148 0
 245 0054 0AA060E0 		rsb	sl, r0, sl
 246              	.LVL22:
 149:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 247              		.loc 1 149 0
 248 0058 1B10A0E3 		mov	r1, #27
 249 005c 0600A0E1 		mov	r0, r6
 250 0060 FEFFFFEB 		bl	__udivsi3
 251 0064 0088A0E1 		mov	r8, r0, asl #16
 252 0068 3330A0E3 		mov	r3, #51
 150:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 253              		.loc 1 150 0
 254 006c 1B10A0E3 		mov	r1, #27
 149:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 255              		.loc 1 149 0
 256 0070 2888A0E1 		mov	r8, r8, lsr #16
 150:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 257              		.loc 1 150 0
 258 0074 0600A0E1 		mov	r0, r6
 149:layer1/prim_rach.c **** 		fn_sched += offset / 27 * 51;
 259              		.loc 1 149 0
 260 0078 93A828E0 		mla	r8, r3, r8, sl
 261              	.LVL23:
 150:layer1/prim_rach.c **** 		fn_sched += rach_to_t3_comb[offset % 27];
 262              		.loc 1 150 0
 263 007c FEFFFFEB 		bl	__umodsi3
 264 0080 0008A0E1 		mov	r0, r0, asl #16
 265 0084 205885E0 		add	r5, r5, r0, lsr #16
 266 0088 3410D5E5 		ldrb	r1, [r5, #52]	@ zero_extendqisi2
 267 008c 011088E0 		add	r1, r8, r1
 268              	.LVL24:
 269              	.L14:
 153:layer1/prim_rach.c **** 	l1s.rach.ra = ra;
 270              		.loc 1 153 0
 271 0090 24309FE5 		ldr	r3, .L15
 154:layer1/prim_rach.c **** 	sched_gsmtime(rach_sched_set_ul, fn_sched, 0);
 272              		.loc 1 154 0
 273 0094 0020A0E3 		mov	r2, #0
 153:layer1/prim_rach.c **** 	l1s.rach.ra = ra;
 274              		.loc 1 153 0
 275 0098 047BC3E5 		strb	r7, [r3, #2820]
 276              		.loc 1 154 0
 277 009c 20009FE5 		ldr	r0, .L15+8
 278 00a0 FEFFFFEB 		bl	sched_gsmtime
 279              	.LVL25:
 155:layer1/prim_rach.c **** 	local_irq_restore(flags);
 280              		.loc 1 155 0
 281              	@ 155 "layer1/prim_rach.c" 1
 282 00a4 04F021E1 		msr	cpsr_c, r4		@ local_irq_restore
 283              	
 284              	@ 0 "" 2
 156:layer1/prim_rach.c **** 
 157:layer1/prim_rach.c **** 	memset(&last_rach, 0, sizeof(last_rach));
 285              		.loc 1 157 0
 286 00a8 18309FE5 		ldr	r3, .L15+12
 287 00ac 0020A0E3 		mov	r2, #0
 288 00b0 002083E5 		str	r2, [r3, #0]
 289 00b4 042083E5 		str	r2, [r3, #4]
 158:layer1/prim_rach.c **** }
 290              		.loc 1 158 0
 291 00b8 F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 292              	.L16:
 293              		.align	2
 294              	.L15:
 295 00bc 00000000 		.word	l1s
 296 00c0 00000000 		.word	.LANCHOR0
 297 00c4 50000000 		.word	.LANCHOR0+80
 298 00c8 00000000 		.word	last_rach
 299              		.cfi_endproc
 300              	.LFE68:
 302              		.section	.text.prim_rach_init,"ax",%progbits
 303              		.align	2
 305              	prim_rach_init:
 306              	.LFB69:
 159:layer1/prim_rach.c **** 
 160:layer1/prim_rach.c **** static __attribute__ ((constructor)) void prim_rach_init(void)
 161:layer1/prim_rach.c **** {
 307              		.loc 1 161 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 162:layer1/prim_rach.c **** 	l1s.completion[L1_COMPL_RACH] = &l1a_rach_compl;
 312              		.loc 1 162 0
 313 0000 08209FE5 		ldr	r2, .L18
 314 0004 08309FE5 		ldr	r3, .L18+4
 315 0008 742A83E5 		str	r2, [r3, #2676]
 163:layer1/prim_rach.c **** }
 316              		.loc 1 163 0
 317 000c 1EFF2FE1 		bx	lr
 318              	.L19:
 319              		.align	2
 320              	.L18:
 321 0010 00000000 		.word	l1a_rach_compl
 322 0014 00000000 		.word	l1s
 323              		.cfi_endproc
 324              	.LFE69:
 326              		.section	.ctors,"aw",%progbits
 327              		.align	2
 328 0000 00000000 		.word	prim_rach_init
 329              		.global	rach_sched_set_ul
 330              		.comm	last_rach,8,4
 331              		.section	.rodata
 332              		.align	2
 333              		.set	.LANCHOR0,. + 0
 336              	t3_to_rach_comb:
 337 0000 00       		.byte	0
 338 0001 00       		.byte	0
 339 0002 00       		.byte	0
 340 0003 00       		.byte	0
 341 0004 00       		.byte	0
 342 0005 01       		.byte	1
 343 0006 02       		.byte	2
 344 0007 02       		.byte	2
 345 0008 02       		.byte	2
 346 0009 02       		.byte	2
 347 000a 02       		.byte	2
 348 000b 02       		.byte	2
 349 000c 02       		.byte	2
 350 000d 02       		.byte	2
 351 000e 02       		.byte	2
 352 000f 03       		.byte	3
 353 0010 04       		.byte	4
 354 0011 05       		.byte	5
 355 0012 06       		.byte	6
 356 0013 07       		.byte	7
 357 0014 08       		.byte	8
 358 0015 09       		.byte	9
 359 0016 0A       		.byte	10
 360 0017 0B       		.byte	11
 361 0018 0C       		.byte	12
 362 0019 0D       		.byte	13
 363 001a 0E       		.byte	14
 364 001b 0F       		.byte	15
 365 001c 10       		.byte	16
 366 001d 11       		.byte	17
 367 001e 12       		.byte	18
 368 001f 13       		.byte	19
 369 0020 14       		.byte	20
 370 0021 15       		.byte	21
 371 0022 16       		.byte	22
 372 0023 17       		.byte	23
 373 0024 18       		.byte	24
 374 0025 19       		.byte	25
 375 0026 19       		.byte	25
 376 0027 19       		.byte	25
 377 0028 19       		.byte	25
 378 0029 19       		.byte	25
 379 002a 19       		.byte	25
 380 002b 19       		.byte	25
 381 002c 19       		.byte	25
 382 002d 19       		.byte	25
 383 002e 1A       		.byte	26
 384 002f 1B       		.byte	27
 385 0030 1B       		.byte	27
 386 0031 1B       		.byte	27
 387 0032 1B       		.byte	27
 388 0033 00       		.space	1
 391              	rach_to_t3_comb:
 392 0034 04       		.byte	4
 393 0035 05       		.byte	5
 394 0036 0E       		.byte	14
 395 0037 0F       		.byte	15
 396 0038 10       		.byte	16
 397 0039 11       		.byte	17
 398 003a 12       		.byte	18
 399 003b 13       		.byte	19
 400 003c 14       		.byte	20
 401 003d 15       		.byte	21
 402 003e 16       		.byte	22
 403 003f 17       		.byte	23
 404 0040 18       		.byte	24
 405 0041 19       		.byte	25
 406 0042 1A       		.byte	26
 407 0043 1B       		.byte	27
 408 0044 1C       		.byte	28
 409 0045 1D       		.byte	29
 410 0046 1E       		.byte	30
 411 0047 1F       		.byte	31
 412 0048 20       		.byte	32
 413 0049 21       		.byte	33
 414 004a 22       		.byte	34
 415 004b 23       		.byte	35
 416 004c 24       		.byte	36
 417 004d 2D       		.byte	45
 418 004e 2E       		.byte	46
 419 004f 00       		.space	1
 422              	rach_sched_set_ul:
 423 0050 00000000 		.word	l1s_tx_rach_cmd
 424 0054 01       		.byte	1
 425 0055 00       		.byte	0
 426 0056 0000     		.space	2
 427 0058 0300     		.short	3
 428 005a 0300     		.short	3
 429 005c 00000000 		.word	0
 430 0060 00       		.byte	0
 431 0061 00       		.byte	0
 432 0062 00000000 		.space	6
 432      0000
 433 0068 00000000 		.word	0
 434 006c 00       		.byte	0
 435 006d 00       		.byte	0
 436 006e 00000000 		.space	6
 436      0000
 437 0074 00000000 		.word	l1s_tx_rach_resp
 438 0078 01       		.byte	1
 439 0079 00       		.byte	0
 440 007a 0000     		.space	2
 441 007c FCFF     		.short	-4
 442 007e 0000     		.short	0
 443 0080 00000000 		.word	0
 444 0084 00       		.byte	0
 445 0085 00       		.byte	0
 446 0086 00000000 		.space	6
 446      0000
 447 008c 00000000 		.word	tdma_end_set
 448 0090 00       		.byte	0
 449 0091 00       		.byte	0
 450 0092 00000000 		.space	6
 450      0000
 451              		.text
 452              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prim_rach.c
     /tmp/ccjXQ5lW.s:12     .text.l1s_tx_rach_resp:0000000000000000 $a
     /tmp/ccjXQ5lW.s:14     .text.l1s_tx_rach_resp:0000000000000000 l1s_tx_rach_resp
     /tmp/ccjXQ5lW.s:55     .text.l1s_tx_rach_resp:0000000000000038 $d
                            *COM*:0000000000000008 last_rach
     /tmp/ccjXQ5lW.s:62     .text.l1s_tx_rach_cmd:0000000000000000 $a
     /tmp/ccjXQ5lW.s:64     .text.l1s_tx_rach_cmd:0000000000000000 l1s_tx_rach_cmd
     /tmp/ccjXQ5lW.s:139    .text.l1s_tx_rach_cmd:0000000000000074 $d
     /tmp/ccjXQ5lW.s:146    .text.l1a_rach_compl:0000000000000000 $a
     /tmp/ccjXQ5lW.s:148    .text.l1a_rach_compl:0000000000000000 l1a_rach_compl
     /tmp/ccjXQ5lW.s:176    .text.l1a_rach_compl:0000000000000024 $d
     /tmp/ccjXQ5lW.s:183    .text.l1a_rach_req:0000000000000000 $a
     /tmp/ccjXQ5lW.s:186    .text.l1a_rach_req:0000000000000000 l1a_rach_req
     /tmp/ccjXQ5lW.s:295    .text.l1a_rach_req:00000000000000bc $d
     /tmp/ccjXQ5lW.s:303    .text.prim_rach_init:0000000000000000 $a
     /tmp/ccjXQ5lW.s:305    .text.prim_rach_init:0000000000000000 prim_rach_init
     /tmp/ccjXQ5lW.s:321    .text.prim_rach_init:0000000000000010 $d
     /tmp/ccjXQ5lW.s:327    .ctors:0000000000000000 $d
     /tmp/ccjXQ5lW.s:422    .rodata:0000000000000050 rach_sched_set_ul
     /tmp/ccjXQ5lW.s:332    .rodata:0000000000000000 $d
     /tmp/ccjXQ5lW.s:336    .rodata:0000000000000000 t3_to_rach_comb
     /tmp/ccjXQ5lW.s:391    .rodata:0000000000000034 rach_to_t3_comb
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
l1s_compl_sched
l1s
dsp_api
l1s_tx_apc_helper
rffe_iq_swapped
l1s_tx_win_ctrl
l1_create_l2_msg
l1_queue_for_l2
__udivsi3
__umodsi3
sched_gsmtime
tdma_end_set
