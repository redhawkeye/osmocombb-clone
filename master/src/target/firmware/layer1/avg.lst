   1              		.file	"avg.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.runavg_input,"ax",%progbits
  12              		.align	2
  13              		.global	runavg_input
  15              	runavg_input:
  16              	.LFB0:
  17              		.file 1 "layer1/avg.c"
   1:layer1/avg.c  **** /* Averaging Implementation */
   2:layer1/avg.c  **** 
   3:layer1/avg.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/avg.c  ****  *
   5:layer1/avg.c  ****  * All Rights Reserved
   6:layer1/avg.c  ****  *
   7:layer1/avg.c  ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/avg.c  ****  * it under the terms of the GNU General Public License as published by
   9:layer1/avg.c  ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/avg.c  ****  * (at your option) any later version.
  11:layer1/avg.c  ****  *
  12:layer1/avg.c  ****  * This program is distributed in the hope that it will be useful,
  13:layer1/avg.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/avg.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/avg.c  ****  * GNU General Public License for more details.
  16:layer1/avg.c  ****  *
  17:layer1/avg.c  ****  * You should have received a copy of the GNU General Public License along
  18:layer1/avg.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/avg.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/avg.c  ****  *
  21:layer1/avg.c  ****  */
  22:layer1/avg.c  **** 
  23:layer1/avg.c  **** #include <stdint.h>
  24:layer1/avg.c  **** 
  25:layer1/avg.c  **** #include <layer1/avg.h>
  26:layer1/avg.c  **** 
  27:layer1/avg.c  **** /* input a new sample into the averaging process */
  28:layer1/avg.c  **** void runavg_input(struct running_avg *ravg, int32_t val, int valid)
  29:layer1/avg.c  **** {
  18              		.loc 1 29 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22              		@ link register save eliminated.
  23              	.LVL0:
  30:layer1/avg.c  **** 	ravg->num_samples++;
  24              		.loc 1 30 0
  25 0000 B830D0E1 		ldrh	r3, [r0, #8]
  31:layer1/avg.c  **** 	if (valid) {
  26              		.loc 1 31 0
  27 0004 000052E3 		cmp	r2, #0
  30:layer1/avg.c  **** 	ravg->num_samples++;
  28              		.loc 1 30 0
  29 0008 013083E2 		add	r3, r3, #1
  30 000c B830C0E1 		strh	r3, [r0, #8]	@ movhi
  31              		.loc 1 31 0
  32 0010 1EFF2F01 		bxeq	lr
  32:layer1/avg.c  **** 		ravg->acc_val += val;
  33              		.loc 1 32 0
  34 0014 043090E5 		ldr	r3, [r0, #4]
  35 0018 011083E0 		add	r1, r3, r1
  36              	.LVL1:
  33:layer1/avg.c  **** 		ravg->num_samples_valid++;
  37              		.loc 1 33 0
  38 001c BA30D0E1 		ldrh	r3, [r0, #10]
  39 0020 013083E2 		add	r3, r3, #1
  32:layer1/avg.c  **** 		ravg->acc_val += val;
  40              		.loc 1 32 0
  41 0024 041080E5 		str	r1, [r0, #4]
  42              		.loc 1 33 0
  43 0028 BA30C0E1 		strh	r3, [r0, #10]	@ movhi
  44 002c 1EFF2FE1 		bx	lr
  45              		.cfi_endproc
  46              	.LFE0:
  48              		.global	__divsi3
  49              		.section	.text.runavg_check_output,"ax",%progbits
  50              		.align	2
  51              		.global	runavg_check_output
  53              	runavg_check_output:
  54              	.LFB1:
  34:layer1/avg.c  **** 	}
  35:layer1/avg.c  **** }
  36:layer1/avg.c  **** 
  37:layer1/avg.c  **** /* check if sufficient samples have been obtained, and call outfn() */
  38:layer1/avg.c  **** int runavg_check_output(struct running_avg *ravg)
  39:layer1/avg.c  **** {
  55              		.loc 1 39 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              	.LVL2:
  40:layer1/avg.c  **** 	if (ravg->num_samples < ravg->period)
  60              		.loc 1 40 0
  61 0000 B820D0E1 		ldrh	r2, [r0, #8]
  62 0004 B030D0E1 		ldrh	r3, [r0, #0]
  63 0008 030052E1 		cmp	r2, r3
  39:layer1/avg.c  **** {
  64              		.loc 1 39 0
  65 000c 10402DE9 		stmfd	sp!, {r4, lr}
  66              	.LCFI0:
  67              		.cfi_def_cfa_offset 8
  39:layer1/avg.c  **** {
  68              		.loc 1 39 0
  69 0010 0040A0E1 		mov	r4, r0
  70              		.cfi_offset 14, -4
  71              		.cfi_offset 4, -8
  41:layer1/avg.c  **** 		return 0;
  72              		.loc 1 41 0
  73 0014 0000A033 		movcc	r0, #0
  74              	.LVL3:
  40:layer1/avg.c  **** 	if (ravg->num_samples < ravg->period)
  75              		.loc 1 40 0
  76 0018 1080BD38 		ldmccfd	sp!, {r4, pc}
  42:layer1/avg.c  **** 
  43:layer1/avg.c  **** 	if (ravg->num_samples_valid >= ravg->min_valid) {
  77              		.loc 1 43 0
  78 001c BA10D4E1 		ldrh	r1, [r4, #10]
  79 0020 B230D4E1 		ldrh	r3, [r4, #2]
  80 0024 010053E1 		cmp	r3, r1
  81 0028 0B00008A 		bhi	.L6
  82              	.LVL4:
  83              	.LBB2:
  44:layer1/avg.c  **** 		int32_t avg = ravg->acc_val / ravg->num_samples_valid;
  84              		.loc 1 44 0
  85 002c 040094E5 		ldr	r0, [r4, #4]
  86 0030 FEFFFFEB 		bl	__divsi3
  87              	.LVL5:
  88 0034 0010A0E1 		mov	r1, r0
  45:layer1/avg.c  **** 
  46:layer1/avg.c  **** 		ravg->outfn(ravg, avg);
  89              		.loc 1 46 0
  90 0038 0400A0E1 		mov	r0, r4
  91 003c 0FE0A0E1 		mov	lr, pc
  92 0040 0CF094E5 		ldr	pc, [r4, #12]
  47:layer1/avg.c  **** 
  48:layer1/avg.c  **** 		ravg->num_samples = ravg->num_samples_valid = 0;
  93              		.loc 1 48 0
  94 0044 0030A0E3 		mov	r3, #0
  95 0048 BA30C4E1 		strh	r3, [r4, #10]	@ movhi
  96 004c B830C4E1 		strh	r3, [r4, #8]	@ movhi
  49:layer1/avg.c  **** 		ravg->acc_val = 0;
  97              		.loc 1 49 0
  98 0050 043084E5 		str	r3, [r4, #4]
  50:layer1/avg.c  **** 
  51:layer1/avg.c  **** 		return 1;
  99              		.loc 1 51 0
 100 0054 0100A0E3 		mov	r0, #1
 101 0058 1080BDE8 		ldmfd	sp!, {r4, pc}
 102              	.L6:
 103              	.LBE2:
  52:layer1/avg.c  **** 	}
  53:layer1/avg.c  **** 
  54:layer1/avg.c  **** 	return 0;
 104              		.loc 1 54 0
 105 005c 0000A0E3 		mov	r0, #0
  55:layer1/avg.c  **** }
 106              		.loc 1 55 0
 107 0060 1080BDE8 		ldmfd	sp!, {r4, pc}
 108              		.cfi_endproc
 109              	.LFE1:
 111              		.text
 112              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 avg.c
     /tmp/ccnbaDU8.s:12     .text.runavg_input:0000000000000000 $a
     /tmp/ccnbaDU8.s:15     .text.runavg_input:0000000000000000 runavg_input
     /tmp/ccnbaDU8.s:50     .text.runavg_check_output:0000000000000000 $a
     /tmp/ccnbaDU8.s:53     .text.runavg_check_output:0000000000000000 runavg_check_output
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__divsi3
