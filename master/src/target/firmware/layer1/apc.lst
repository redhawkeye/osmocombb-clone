   1              		.file	"apc.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.apc_tx_dbm2auxapc,"ax",%progbits
  12              		.align	2
  13              		.global	apc_tx_dbm2auxapc
  15              	apc_tx_dbm2auxapc:
  16              	.LFB3:
  17              		.file 1 "layer1/apc.c"
   1:layer1/apc.c  **** /* APC (Automatic Power Control) Implementation */
   2:layer1/apc.c  **** 
   3:layer1/apc.c  **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:layer1/apc.c  ****  *
   5:layer1/apc.c  ****  * All Rights Reserved
   6:layer1/apc.c  ****  *
   7:layer1/apc.c  ****  * This program is free software; you can redistribute it and/or modify
   8:layer1/apc.c  ****  * it under the terms of the GNU General Public License as published by
   9:layer1/apc.c  ****  * the Free Software Foundation; either version 2 of the License, or
  10:layer1/apc.c  ****  * (at your option) any later version.
  11:layer1/apc.c  ****  *
  12:layer1/apc.c  ****  * This program is distributed in the hope that it will be useful,
  13:layer1/apc.c  ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:layer1/apc.c  ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:layer1/apc.c  ****  * GNU General Public License for more details.
  16:layer1/apc.c  ****  *
  17:layer1/apc.c  ****  * You should have received a copy of the GNU General Public License along
  18:layer1/apc.c  ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:layer1/apc.c  ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:layer1/apc.c  ****  *
  21:layer1/apc.c  ****  */
  22:layer1/apc.c  **** 
  23:layer1/apc.c  **** #include <errno.h>
  24:layer1/apc.c  **** 
  25:layer1/apc.c  **** #include <osmocom/core/utils.h>
  26:layer1/apc.c  **** #include <osmocom/gsm/gsm_utils.h>
  27:layer1/apc.c  **** 
  28:layer1/apc.c  **** #include <layer1/apc.h>
  29:layer1/apc.c  **** 
  30:layer1/apc.c  **** /* calibration table defined in board file */
  31:layer1/apc.c  **** extern const int16_t dbm2apc_gsm900[];
  32:layer1/apc.c  **** extern const int dbm2apc_gsm900_max;
  33:layer1/apc.c  **** 
  34:layer1/apc.c  **** 
  35:layer1/apc.c  **** /* determine the AUXAPC value by the Tx Power Level */
  36:layer1/apc.c  **** int16_t apc_tx_dbm2auxapc(enum gsm_band band, int8_t dbm)
  37:layer1/apc.c  **** {
  18              		.loc 1 37 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22              		@ link register save eliminated.
  23              	.LVL0:
  24              		.loc 1 37 0
  25 0000 011CA0E1 		mov	r1, r1, asl #24
  26              	.LVL1:
  38:layer1/apc.c  **** 	if (dbm < 0)
  27              		.loc 1 38 0
  28 0004 411CB0E1 		movs	r1, r1, asr #24
  39:layer1/apc.c  **** 		return -ERANGE;
  29              		.loc 1 39 0
  30 0008 2C009F45 		ldrmi	r0, .L5
  31              	.LVL2:
  38:layer1/apc.c  **** 	if (dbm < 0)
  32              		.loc 1 38 0
  33 000c 0700004A 		bmi	.L2
  40:layer1/apc.c  **** 
  41:layer1/apc.c  **** 	/* FIXME: offsets for different bands! */
  42:layer1/apc.c  **** 	if (dbm > dbm2apc_gsm900_max)
  34              		.loc 1 42 0
  35 0010 28309FE5 		ldr	r3, .L5+4
  36 0014 003093E5 		ldr	r3, [r3, #0]
  37 0018 030051E1 		cmp	r1, r3
  43:layer1/apc.c  **** 		dbm = dbm2apc_gsm900_max;
  38              		.loc 1 43 0
  39 001c 031CA0C1 		movgt	r1, r3, asl #24
  40 0020 411CA0C1 		movgt	r1, r1, asr #24
  41              	.LVL3:
  44:layer1/apc.c  **** 
  45:layer1/apc.c  **** 	return dbm2apc_gsm900[dbm];
  42              		.loc 1 45 0
  43 0024 18309FE5 		ldr	r3, .L5+8
  44 0028 8110A0E1 		mov	r1, r1, asl #1
  45              	.LVL4:
  46 002c B10093E1 		ldrh	r0, [r3, r1]
  47              	.L2:
  48 0030 0008A0E1 		mov	r0, r0, asl #16
  46:layer1/apc.c  **** }
  49              		.loc 1 46 0
  50 0034 4008A0E1 		mov	r0, r0, asr #16
  51 0038 1EFF2FE1 		bx	lr
  52              	.L6:
  53              		.align	2
  54              	.L5:
  55 003c DEFF0000 		.word	65502
  56 0040 00000000 		.word	dbm2apc_gsm900_max
  57 0044 00000000 		.word	dbm2apc_gsm900
  58              		.cfi_endproc
  59              	.LFE3:
  61              		.section	.text.apc_tx_pwrlvl2auxapc,"ax",%progbits
  62              		.align	2
  63              		.global	apc_tx_pwrlvl2auxapc
  65              	apc_tx_pwrlvl2auxapc:
  66              	.LFB4:
  47:layer1/apc.c  **** 
  48:layer1/apc.c  **** /* determine the AUXAPC value by the Tx Power Level */
  49:layer1/apc.c  **** int16_t apc_tx_pwrlvl2auxapc(enum gsm_band band, uint8_t lvl)
  50:layer1/apc.c  **** {
  67              		.loc 1 50 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL5:
  72 0000 10402DE9 		stmfd	sp!, {r4, lr}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 8
  75              		.loc 1 50 0
  76 0004 FF1001E2 		and	r1, r1, #255
  77              	.LVL6:
  78 0008 0040A0E1 		mov	r4, r0
  79              		.cfi_offset 14, -4
  80              		.cfi_offset 4, -8
  51:layer1/apc.c  **** 	/* convert tx power level to dBm */
  52:layer1/apc.c  **** 	int dbm = ms_pwr_dbm(band, lvl);
  81              		.loc 1 52 0
  82 000c FEFFFFEB 		bl	ms_pwr_dbm
  83              	.LVL7:
  53:layer1/apc.c  **** 	if (dbm < 0)
  84              		.loc 1 53 0
  85 0010 001050E2 		subs	r1, r0, #0
  86 0014 020000AA 		bge	.L8
  54:layer1/apc.c  **** 		return dbm;
  55:layer1/apc.c  **** 
  56:layer1/apc.c  **** 	return apc_tx_dbm2auxapc(band, dbm);
  87              		.loc 1 56 0
  88 0018 0118A0E1 		mov	r1, r1, asl #16
  57:layer1/apc.c  **** }
  89              		.loc 1 57 0
  90 001c 4108A0E1 		mov	r0, r1, asr #16
  91              	.LVL8:
  92 0020 1080BDE8 		ldmfd	sp!, {r4, pc}
  93              	.LVL9:
  94              	.L8:
  56:layer1/apc.c  **** 	return apc_tx_dbm2auxapc(band, dbm);
  95              		.loc 1 56 0
  96 0024 011CA0E1 		mov	r1, r1, asl #24
  97 0028 0400A0E1 		mov	r0, r4
  98              	.LVL10:
  99 002c 411CA0E1 		mov	r1, r1, asr #24
 100              		.loc 1 57 0
 101 0030 1040BDE8 		ldmfd	sp!, {r4, lr}
  56:layer1/apc.c  **** 	return apc_tx_dbm2auxapc(band, dbm);
 102              		.loc 1 56 0
 103 0034 FEFFFFEA 		b	apc_tx_dbm2auxapc
 104              		.cfi_endproc
 105              	.LFE4:
 107              		.text
 108              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 apc.c
     /tmp/cczDbc1G.s:12     .text.apc_tx_dbm2auxapc:0000000000000000 $a
     /tmp/cczDbc1G.s:15     .text.apc_tx_dbm2auxapc:0000000000000000 apc_tx_dbm2auxapc
     /tmp/cczDbc1G.s:55     .text.apc_tx_dbm2auxapc:000000000000003c $d
     /tmp/cczDbc1G.s:62     .text.apc_tx_pwrlvl2auxapc:0000000000000000 $a
     /tmp/cczDbc1G.s:65     .text.apc_tx_pwrlvl2auxapc:0000000000000000 apc_tx_pwrlvl2auxapc
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
dbm2apc_gsm900_max
dbm2apc_gsm900
ms_pwr_dbm
