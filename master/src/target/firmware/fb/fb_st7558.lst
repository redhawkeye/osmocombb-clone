   1              		.file	"fb_st7558.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.fb_st7558_flush,"ax",%progbits
  12              		.align	2
  14              	fb_st7558_flush:
  15              	.LFB13:
  16              		.file 1 "fb/fb_st7558.c"
   1:fb/fb_st7558.c **** /* Framebuffer implementation - ST1783 LCD driver for C123 */
   2:fb/fb_st7558.c **** /* Based on st7558.c by Harald Welte */
   3:fb/fb_st7558.c **** 
   4:fb/fb_st7558.c **** /* (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   5:fb/fb_st7558.c ****  *
   6:fb/fb_st7558.c ****  * All Rights Reserved
   7:fb/fb_st7558.c ****  *
   8:fb/fb_st7558.c ****  * This program is free software; you can redistribute it and/or modify
   9:fb/fb_st7558.c ****  * it under the terms of the GNU General Public License as published by
  10:fb/fb_st7558.c ****  * the Free Software Foundation; either version 2 of the License, or
  11:fb/fb_st7558.c ****  * (at your option) any later version.
  12:fb/fb_st7558.c ****  *
  13:fb/fb_st7558.c ****  * This program is distributed in the hope that it will be useful,
  14:fb/fb_st7558.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:fb/fb_st7558.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:fb/fb_st7558.c ****  * GNU General Public License for more details.
  17:fb/fb_st7558.c ****  *
  18:fb/fb_st7558.c ****  * You should have received a copy of the GNU General Public License along
  19:fb/fb_st7558.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  20:fb/fb_st7558.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  21:fb/fb_st7558.c ****  *
  22:fb/fb_st7558.c ****  */
  23:fb/fb_st7558.c **** 
  24:fb/fb_st7558.c **** #include <fb/framebuffer.h>
  25:fb/fb_st7558.c **** #include <fb/fb_bw8.h>
  26:fb/fb_st7558.c **** 
  27:fb/fb_st7558.c **** #include <i2c.h>
  28:fb/fb_st7558.c **** #include <calypso/clock.h>
  29:fb/fb_st7558.c **** #include <delay.h>
  30:fb/fb_st7558.c **** 
  31:fb/fb_st7558.c **** #include <stdio.h>
  32:fb/fb_st7558.c **** 
  33:fb/fb_st7558.c **** /* Sitronix ST7558 LCD Driver for OSMOCOM framebuffer interface. */
  34:fb/fb_st7558.c **** /* (c) 2010 Christian Vogel <vogelchr@vogel.cx> */
  35:fb/fb_st7558.c **** /* Based on the initial LCD driver by Harald Welte */
  36:fb/fb_st7558.c **** 
  37:fb/fb_st7558.c **** #define CONTROL_RS_CMD
  38:fb/fb_st7558.c **** 
  39:fb/fb_st7558.c **** #define ST7558_SLAVE_ADDR	0x3c
  40:fb/fb_st7558.c **** #define ST7558_CMD_ADDR		0x00
  41:fb/fb_st7558.c **** #define ST7558_RAM_ADDR		0x40
  42:fb/fb_st7558.c **** 
  43:fb/fb_st7558.c **** #define ST7558_WIDTH		96	/* in pixels */
  44:fb/fb_st7558.c **** #define ST7558_HEIGHT		65
  45:fb/fb_st7558.c **** 
  46:fb/fb_st7558.c **** #define I2C_MAX_TRANSFER 16
  47:fb/fb_st7558.c **** 
  48:fb/fb_st7558.c **** static uint8_t
  49:fb/fb_st7558.c **** fb_st7558_mem[ST7558_WIDTH * ((ST7558_HEIGHT+7)/8)];
  50:fb/fb_st7558.c **** 
  51:fb/fb_st7558.c **** /* setup as initially proposed by Harald in st7558.c */
  52:fb/fb_st7558.c **** static const uint8_t st7558_setup[] = {
  53:fb/fb_st7558.c **** 	0x2e,	/* ext. display control, set mirror X, set mirror Y*/
  54:fb/fb_st7558.c **** 	0x21,	/* function set, enable extended instruction mode */
  55:fb/fb_st7558.c **** 	0x12,	/* bias system BS[2,1,0] = [0,1,0] */
  56:fb/fb_st7558.c **** 	0xc0,	/* set V_OP (V_OP6 = 1, V_OP[5:0] = 0) */
  57:fb/fb_st7558.c **** 	0x0b,	/* booster stages PC1=1, PC0=1 */
  58:fb/fb_st7558.c **** 	0x20,	/* function set, disable extended instruction mode */
  59:fb/fb_st7558.c **** 	0x11,	/* V_LCD L/H select, PRS=1 */
  60:fb/fb_st7558.c **** 	0x00,	/* NOP */
  61:fb/fb_st7558.c **** 	0x0c,	/* normal video mode */
  62:fb/fb_st7558.c **** 	0x40,	/* set X address to 0 */
  63:fb/fb_st7558.c **** 	0x80	/* set Y address to 0 */
  64:fb/fb_st7558.c **** };
  65:fb/fb_st7558.c **** 
  66:fb/fb_st7558.c **** 
  67:fb/fb_st7558.c **** static void
  68:fb/fb_st7558.c **** fb_st7558_init(){
  69:fb/fb_st7558.c **** 	calypso_reset_set(RESET_EXT, 0);
  70:fb/fb_st7558.c **** 	i2c_init(0,0);
  71:fb/fb_st7558.c **** 
  72:fb/fb_st7558.c **** 	/* initialize controller */
  73:fb/fb_st7558.c **** 	i2c_write(ST7558_SLAVE_ADDR,ST7558_CMD_ADDR,1,
  74:fb/fb_st7558.c **** 		  st7558_setup,sizeof(st7558_setup));
  75:fb/fb_st7558.c **** }
  76:fb/fb_st7558.c **** 
  77:fb/fb_st7558.c **** static void
  78:fb/fb_st7558.c **** fb_st7558_flush(){
  17              		.loc 1 78 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 8
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21 0000 F74F2DE9 		stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  22              	.LCFI0:
  23              		.cfi_def_cfa_offset 48
  79:fb/fb_st7558.c **** 	uint16_t x;
  80:fb/fb_st7558.c **** 	int page,chunksize,nbytes;
  81:fb/fb_st7558.c **** 	uint8_t *p;
  82:fb/fb_st7558.c **** 	uint8_t cmd[2];
  83:fb/fb_st7558.c **** 
  84:fb/fb_st7558.c **** 	if(fb_bw8->damage_y1 == fb_bw8->damage_y2 ||
  24              		.loc 1 84 0
  25 0004 F4A09FE5 		ldr	sl, .L7
  26              		.cfi_offset 14, -4
  27              		.cfi_offset 11, -8
  28              		.cfi_offset 10, -12
  29              		.cfi_offset 9, -16
  30              		.cfi_offset 8, -20
  31              		.cfi_offset 7, -24
  32              		.cfi_offset 6, -28
  33              		.cfi_offset 5, -32
  34              		.cfi_offset 4, -36
  35              		.cfi_offset 2, -40
  36              		.cfi_offset 1, -44
  37              		.cfi_offset 0, -48
  38 0008 00309AE5 		ldr	r3, [sl, #0]
  39 000c B640D3E1 		ldrh	r4, [r3, #6]
  40 0010 BA20D3E1 		ldrh	r2, [r3, #10]
  41 0014 040052E1 		cmp	r2, r4
  42 0018 3700000A 		beq	.L1
  43              		.loc 1 84 0 is_stmt 0 discriminator 1
  44 001c B420D3E1 		ldrh	r2, [r3, #4]
  45 0020 B830D3E1 		ldrh	r3, [r3, #8]
  46 0024 030052E1 		cmp	r2, r3
  85:fb/fb_st7558.c **** 		fb_bw8->damage_x1 == fb_bw8->damage_x2)
  86:fb/fb_st7558.c **** 			return; /* nothing to update */
  87:fb/fb_st7558.c **** 
  88:fb/fb_st7558.c **** 	/* update display in stripes of 8 rows, called "pages" */
  89:fb/fb_st7558.c **** 	for(page=fb_bw8->damage_y1 >> 3;page <= fb_bw8->damage_y2>>3;page++){
  47              		.loc 1 89 0 is_stmt 1 discriminator 1
  48 0028 A441A011 		movne	r4, r4, lsr #3
  49              	.LVL0:
  90:fb/fb_st7558.c **** 		/* base offset in RAM framebuffer */
  91:fb/fb_st7558.c **** 		x = fb_bw8->damage_x1;
  92:fb/fb_st7558.c **** 		nbytes = fb_bw8->damage_x2 - fb_bw8->damage_x1;
  93:fb/fb_st7558.c **** 		p = fb_bw8->mem + (page * framebuffer->width + x);
  94:fb/fb_st7558.c **** 
  95:fb/fb_st7558.c **** 		/* i2c fifo can only handle a maximum of 16 bytes */
  96:fb/fb_st7558.c **** 		while(nbytes){
  97:fb/fb_st7558.c **** 			cmd[0]=0x40 | page; /* Set Y address of RAM. */
  98:fb/fb_st7558.c **** 			cmd[1]=0x80 | x;
  99:fb/fb_st7558.c **** 			chunksize = nbytes > I2C_MAX_TRANSFER ? I2C_MAX_TRANSFER : nbytes;
 100:fb/fb_st7558.c **** 
 101:fb/fb_st7558.c **** 			i2c_write(ST7558_SLAVE_ADDR,ST7558_CMD_ADDR,1,cmd,sizeof(cmd));
  50              		.loc 1 101 0 discriminator 1
  51 002c 08B08D12 		addne	fp, sp, #8
  52 0030 02C0A013 		movne	ip, #2
  84:fb/fb_st7558.c **** 	if(fb_bw8->damage_y1 == fb_bw8->damage_y2 ||
  53              		.loc 1 84 0 discriminator 1
  54 0034 2700001A 		bne	.L3
  55 0038 2F0000EA 		b	.L1
  56              	.L6:
  93:fb/fb_st7558.c **** 		p = fb_bw8->mem + (page * framebuffer->width + x);
  57              		.loc 1 93 0
  58 003c 04209AE5 		ldr	r2, [sl, #4]
  91:fb/fb_st7558.c **** 		x = fb_bw8->damage_x1;
  59              		.loc 1 91 0
  60 0040 B450D3E1 		ldrh	r5, [r3, #4]
  61              	.LVL1:
  93:fb/fb_st7558.c **** 		p = fb_bw8->mem + (page * framebuffer->width + x);
  62              		.loc 1 93 0
  63 0044 B082D2E1 		ldrh	r8, [r2, #32]
  64 0048 945828E0 		mla	r8, r4, r8, r5
  92:fb/fb_st7558.c **** 		nbytes = fb_bw8->damage_x2 - fb_bw8->damage_x1;
  65              		.loc 1 92 0
  66 004c B860D3E1 		ldrh	r6, [r3, #8]
  93:fb/fb_st7558.c **** 		p = fb_bw8->mem + (page * framebuffer->width + x);
  67              		.loc 1 93 0
  68 0050 003093E5 		ldr	r3, [r3, #0]
  92:fb/fb_st7558.c **** 		nbytes = fb_bw8->damage_x2 - fb_bw8->damage_x1;
  69              		.loc 1 92 0
  70 0054 066065E0 		rsb	r6, r5, r6
  71              	.LVL2:
  93:fb/fb_st7558.c **** 		p = fb_bw8->mem + (page * framebuffer->width + x);
  72              		.loc 1 93 0
  73 0058 088083E0 		add	r8, r3, r8
  74              	.LVL3:
  97:fb/fb_st7558.c **** 			cmd[0]=0x40 | page; /* Set Y address of RAM. */
  75              		.loc 1 97 0
  76 005c 409084E3 		orr	r9, r4, #64
  96:fb/fb_st7558.c **** 		while(nbytes){
  77              		.loc 1 96 0
  78 0060 190000EA 		b	.L4
  79              	.L5:
  98:fb/fb_st7558.c **** 			cmd[1]=0x80 | x;
  80              		.loc 1 98 0
  81 0064 853CE0E1 		mvn	r3, r5, asl #25
  82 0068 A33CE0E1 		mvn	r3, r3, lsr #25
  83 006c 0930CDE5 		strb	r3, [sp, #9]
  84              		.loc 1 101 0
  85 0070 0010A0E3 		mov	r1, #0
  86 0074 0120A0E3 		mov	r2, #1
  87 0078 0B30A0E1 		mov	r3, fp
  88 007c 3C00A0E3 		mov	r0, #60
  89 0080 00C08DE5 		str	ip, [sp, #0]
  90 0084 04C08DE5 		str	ip, [sp, #4]
  99:fb/fb_st7558.c **** 			chunksize = nbytes > I2C_MAX_TRANSFER ? I2C_MAX_TRANSFER : nbytes;
  91              		.loc 1 99 0
  92 0088 100056E3 		cmp	r6, #16
  93 008c 0670A0B1 		movlt	r7, r6
  94 0090 1070A0A3 		movge	r7, #16
  95              	.LVL4:
  97:fb/fb_st7558.c **** 			cmd[0]=0x40 | page; /* Set Y address of RAM. */
  96              		.loc 1 97 0
  97 0094 0890CDE5 		strb	r9, [sp, #8]
 102:fb/fb_st7558.c **** 			i2c_write(ST7558_SLAVE_ADDR,ST7558_RAM_ADDR,1,p,chunksize);
 103:fb/fb_st7558.c **** 
 104:fb/fb_st7558.c **** 			nbytes -= chunksize;
 105:fb/fb_st7558.c **** 			p+=I2C_MAX_TRANSFER;
 106:fb/fb_st7558.c **** 			x+=I2C_MAX_TRANSFER;
  98              		.loc 1 106 0
  99 0098 105085E2 		add	r5, r5, #16
 100              	.LVL5:
 101:fb/fb_st7558.c **** 			i2c_write(ST7558_SLAVE_ADDR,ST7558_CMD_ADDR,1,cmd,sizeof(cmd));
 101              		.loc 1 101 0
 102 009c FEFFFFEB 		bl	i2c_write
 102:fb/fb_st7558.c **** 			i2c_write(ST7558_SLAVE_ADDR,ST7558_RAM_ADDR,1,p,chunksize);
 103              		.loc 1 102 0
 104 00a0 0830A0E1 		mov	r3, r8
 105 00a4 3C00A0E3 		mov	r0, #60
 106 00a8 4010A0E3 		mov	r1, #64
 107 00ac 0120A0E3 		mov	r2, #1
 108 00b0 00708DE5 		str	r7, [sp, #0]
 109              		.loc 1 106 0
 110 00b4 0558A0E1 		mov	r5, r5, asl #16
 111              	.LVL6:
 102:fb/fb_st7558.c **** 			i2c_write(ST7558_SLAVE_ADDR,ST7558_RAM_ADDR,1,p,chunksize);
 112              		.loc 1 102 0
 113 00b8 FEFFFFEB 		bl	i2c_write
 114              		.loc 1 106 0
 115 00bc 04C09DE5 		ldr	ip, [sp, #4]
 104:fb/fb_st7558.c **** 			nbytes -= chunksize;
 116              		.loc 1 104 0
 117 00c0 066067E0 		rsb	r6, r7, r6
 118              	.LVL7:
 105:fb/fb_st7558.c **** 			p+=I2C_MAX_TRANSFER;
 119              		.loc 1 105 0
 120 00c4 108088E2 		add	r8, r8, #16
 121              	.LVL8:
 122              		.loc 1 106 0
 123 00c8 2558A0E1 		mov	r5, r5, lsr #16
 124              	.LVL9:
 125              	.L4:
  96:fb/fb_st7558.c **** 		while(nbytes){
 126              		.loc 1 96 0 discriminator 1
 127 00cc 000056E3 		cmp	r6, #0
 128 00d0 E3FFFF1A 		bne	.L5
  89:fb/fb_st7558.c **** 	for(page=fb_bw8->damage_y1 >> 3;page <= fb_bw8->damage_y2>>3;page++){
 129              		.loc 1 89 0
 130 00d4 014084E2 		add	r4, r4, #1
 131              	.LVL10:
 132              	.L3:
  89:fb/fb_st7558.c **** 	for(page=fb_bw8->damage_y1 >> 3;page <= fb_bw8->damage_y2>>3;page++){
 133              		.loc 1 89 0 is_stmt 0 discriminator 1
 134 00d8 00309AE5 		ldr	r3, [sl, #0]
 135 00dc BA20D3E1 		ldrh	r2, [r3, #10]
 136 00e0 A20154E1 		cmp	r4, r2, lsr #3
 137 00e4 D4FFFFDA 		ble	.L6
 107:fb/fb_st7558.c **** 		}
 108:fb/fb_st7558.c **** 	}
 109:fb/fb_st7558.c **** 
 110:fb/fb_st7558.c **** 	/* mark current buffer as unmodified! */
 111:fb/fb_st7558.c **** 	fb_bw8->damage_x1 = fb_bw8->damage_x2 = 0;
 138              		.loc 1 111 0 is_stmt 1
 139 00e8 0020A0E3 		mov	r2, #0	@ movhi
 140 00ec B820C3E1 		strh	r2, [r3, #8]	@ movhi
 141 00f0 B420C3E1 		strh	r2, [r3, #4]	@ movhi
 112:fb/fb_st7558.c **** 	fb_bw8->damage_y1 = fb_bw8->damage_y2 = 0;
 142              		.loc 1 112 0
 143 00f4 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 144 00f8 B620C3E1 		strh	r2, [r3, #6]	@ movhi
 145              	.LVL11:
 146              	.L1:
 113:fb/fb_st7558.c **** }
 147              		.loc 1 113 0
 148 00fc FE8FBDE8 		ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 149              	.L8:
 150              		.align	2
 151              	.L7:
 152 0100 00000000 		.word	.LANCHOR0
 153              		.cfi_endproc
 154              	.LFE13:
 156              		.section	.text.fb_st7558_init,"ax",%progbits
 157              		.align	2
 159              	fb_st7558_init:
 160              	.LFB12:
  68:fb/fb_st7558.c **** fb_st7558_init(){
 161              		.loc 1 68 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 0
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165 0000 01402DE9 		stmfd	sp!, {r0, lr}
 166              	.LCFI1:
 167              		.cfi_def_cfa_offset 8
  69:fb/fb_st7558.c **** 	calypso_reset_set(RESET_EXT, 0);
 168              		.loc 1 69 0
 169 0004 0010A0E3 		mov	r1, #0
 170 0008 0400A0E3 		mov	r0, #4
 171              		.cfi_offset 14, -4
 172              		.cfi_offset 0, -8
 173 000c FEFFFFEB 		bl	calypso_reset_set
  70:fb/fb_st7558.c **** 	i2c_init(0,0);
 174              		.loc 1 70 0
 175 0010 0000A0E3 		mov	r0, #0
 176 0014 0010A0E1 		mov	r1, r0
 177 0018 FEFFFFEB 		bl	i2c_init
  73:fb/fb_st7558.c **** 	i2c_write(ST7558_SLAVE_ADDR,ST7558_CMD_ADDR,1,
 178              		.loc 1 73 0
 179 001c 0B30A0E3 		mov	r3, #11
 180 0020 00308DE5 		str	r3, [sp, #0]
 181 0024 0010A0E3 		mov	r1, #0
 182 0028 0120A0E3 		mov	r2, #1
 183 002c 08309FE5 		ldr	r3, .L10
 184 0030 3C00A0E3 		mov	r0, #60
 185 0034 FEFFFFEB 		bl	i2c_write
  75:fb/fb_st7558.c **** }
 186              		.loc 1 75 0
 187 0038 0880BDE8 		ldmfd	sp!, {r3, pc}
 188              	.L11:
 189              		.align	2
 190              	.L10:
 191 003c 00000000 		.word	.LANCHOR1
 192              		.cfi_endproc
 193              	.LFE12:
 195              		.global	framebuffer
 196              		.global	fb_bw8
 197              		.section	.rodata
 198              		.align	2
 199              		.set	.LANCHOR1,. + 0
 202              	st7558_setup:
 203 0000 2E       		.byte	46
 204 0001 21       		.byte	33
 205 0002 12       		.byte	18
 206 0003 C0       		.byte	-64
 207 0004 0B       		.byte	11
 208 0005 20       		.byte	32
 209 0006 11       		.byte	17
 210 0007 00       		.byte	0
 211 0008 0C       		.byte	12
 212 0009 40       		.byte	64
 213 000a 80       		.byte	-128
 214 000b 00       		.data
 215              		.align	2
 216              		.set	.LANCHOR0,. + 0
 219              	fb_bw8:
 220 0000 3C000000 		.word	fb_st7558_bw8
 223              	framebuffer:
 224 0004 08000000 		.word	fb_st7558_framebuffer
 227              	fb_st7558_framebuffer:
 228 0008 73743735 		.ascii	"st7558\000"
 228      353800
 229 000f 00       		.space	1
 230 0010 00000000 		.word	fb_st7558_init
 231 0014 00000000 		.word	fb_bw8_clear
 232 0018 00000000 		.word	fb_bw8_boxto
 233 001c 00000000 		.word	fb_bw8_lineto
 234 0020 00000000 		.word	fb_bw8_putstr
 235 0024 00000000 		.word	fb_st7558_flush
 236 0028 6000     		.short	96
 237 002a 4100     		.short	65
 238 002c 00000000 		.space	16
 238      00000000 
 238      00000000 
 238      00000000 
 241              	fb_st7558_bw8:
 242 003c 00000000 		.word	fb_st7558_mem
 243 0040 00000000 		.space	8
 243      00000000 
 244              		.bss
 245              		.align	2
 248              	fb_st7558_mem:
 249 0000 00000000 		.space	864
 249      00000000 
 249      00000000 
 249      00000000 
 249      00000000 
 250              		.text
 251              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_st7558.c
     /tmp/ccvmH1gj.s:12     .text.fb_st7558_flush:0000000000000000 $a
     /tmp/ccvmH1gj.s:14     .text.fb_st7558_flush:0000000000000000 fb_st7558_flush
     /tmp/ccvmH1gj.s:152    .text.fb_st7558_flush:0000000000000100 $d
     /tmp/ccvmH1gj.s:157    .text.fb_st7558_init:0000000000000000 $a
     /tmp/ccvmH1gj.s:159    .text.fb_st7558_init:0000000000000000 fb_st7558_init
     /tmp/ccvmH1gj.s:191    .text.fb_st7558_init:000000000000003c $d
     /tmp/ccvmH1gj.s:223    .data:0000000000000004 framebuffer
     /tmp/ccvmH1gj.s:219    .data:0000000000000000 fb_bw8
     /tmp/ccvmH1gj.s:198    .rodata:0000000000000000 $d
     /tmp/ccvmH1gj.s:202    .rodata:0000000000000000 st7558_setup
     /tmp/ccvmH1gj.s:215    .data:0000000000000000 $d
     /tmp/ccvmH1gj.s:241    .data:000000000000003c fb_st7558_bw8
     /tmp/ccvmH1gj.s:227    .data:0000000000000008 fb_st7558_framebuffer
     /tmp/ccvmH1gj.s:248    .bss:0000000000000000 fb_st7558_mem
     /tmp/ccvmH1gj.s:245    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
i2c_write
calypso_reset_set
i2c_init
fb_bw8_clear
fb_bw8_boxto
fb_bw8_lineto
fb_bw8_putstr
