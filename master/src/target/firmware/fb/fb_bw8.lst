   1              		.file	"fb_bw8.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.fb_limit_fb_range,"ax",%progbits
  12              		.align	2
  14              	fb_limit_fb_range:
  15              	.LFB10:
  16              		.file 1 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
  52:include/fb/framebuffer.h **** }
  53:include/fb/framebuffer.h **** 
  54:include/fb/framebuffer.h **** static inline void
  55:include/fb/framebuffer.h **** fb_clear(){
  56:include/fb/framebuffer.h **** 	framebuffer->clear();
  57:include/fb/framebuffer.h **** }
  58:include/fb/framebuffer.h **** 
  59:include/fb/framebuffer.h **** static inline void
  60:include/fb/framebuffer.h **** fb_boxto(uint16_t x,uint16_t y){
  61:include/fb/framebuffer.h **** 	framebuffer->boxto(x,y);
  62:include/fb/framebuffer.h **** }
  63:include/fb/framebuffer.h **** 
  64:include/fb/framebuffer.h **** static inline void
  65:include/fb/framebuffer.h **** fb_lineto(uint16_t x,uint16_t y){
  66:include/fb/framebuffer.h **** 	framebuffer->lineto(x,y);
  67:include/fb/framebuffer.h **** }
  68:include/fb/framebuffer.h **** 
  69:include/fb/framebuffer.h **** static inline int
  70:include/fb/framebuffer.h **** fb_putstr(char *str,int maxwidth){
  71:include/fb/framebuffer.h **** 	return framebuffer->putstr(str,maxwidth);
  72:include/fb/framebuffer.h **** }
  73:include/fb/framebuffer.h **** 
  74:include/fb/framebuffer.h **** static inline void
  75:include/fb/framebuffer.h **** fb_flush(){
  76:include/fb/framebuffer.h **** 	framebuffer->flush();
  77:include/fb/framebuffer.h **** }
  78:include/fb/framebuffer.h **** 
  79:include/fb/framebuffer.h **** static inline void
  80:include/fb/framebuffer.h **** fb_gotoxy(uint16_t x,uint16_t y){
  81:include/fb/framebuffer.h **** 	framebuffer->cursor_x = x;
  82:include/fb/framebuffer.h **** 	framebuffer->cursor_y = y;
  83:include/fb/framebuffer.h **** }
  84:include/fb/framebuffer.h **** 
  85:include/fb/framebuffer.h **** static inline void
  86:include/fb/framebuffer.h **** fb_setfg(uint32_t color){
  87:include/fb/framebuffer.h **** 	framebuffer->fg_color = color;
  88:include/fb/framebuffer.h **** }
  89:include/fb/framebuffer.h **** 
  90:include/fb/framebuffer.h **** static inline void
  91:include/fb/framebuffer.h **** fb_setbg(uint32_t color){
  92:include/fb/framebuffer.h **** 	framebuffer->bg_color = color;
  93:include/fb/framebuffer.h **** }
  94:include/fb/framebuffer.h **** 
  95:include/fb/framebuffer.h **** static inline void
  96:include/fb/framebuffer.h **** fb_setfont(enum fb_font_id fid){
  97:include/fb/framebuffer.h **** 	framebuffer->font = fid;
  98:include/fb/framebuffer.h **** }
  99:include/fb/framebuffer.h **** 
 100:include/fb/framebuffer.h **** /* utility function: limit coordinates to area of framebuffer */
 101:include/fb/framebuffer.h **** static inline void
 102:include/fb/framebuffer.h **** fb_limit_fb_range(uint16_t *x,uint16_t *y){
  17              		.loc 1 102 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 0
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              		@ link register save eliminated.
  22              	.LVL0:
 103:include/fb/framebuffer.h **** 	if(*x >= framebuffer->width)
  23              		.loc 1 103 0
  24 0000 2C309FE5 		ldr	r3, .L4
  25 0004 003093E5 		ldr	r3, [r3, #0]
  26 0008 B0C0D0E1 		ldrh	ip, [r0, #0]
  27 000c B022D3E1 		ldrh	r2, [r3, #32]
  28 0010 02005CE1 		cmp	ip, r2
 104:include/fb/framebuffer.h **** 		*x = framebuffer->width - 1;
  29              		.loc 1 104 0
  30 0014 01204222 		subcs	r2, r2, #1
  31 0018 B020C021 		strcsh	r2, [r0, #0]	@ movhi
 105:include/fb/framebuffer.h **** 	if(*y >= framebuffer->height)
  32              		.loc 1 105 0
  33 001c B232D3E1 		ldrh	r3, [r3, #34]
  34 0020 B020D1E1 		ldrh	r2, [r1, #0]
  35 0024 030052E1 		cmp	r2, r3
 106:include/fb/framebuffer.h **** 		*y = framebuffer->height - 1;
  36              		.loc 1 106 0
  37 0028 01304322 		subcs	r3, r3, #1
  38 002c B030C121 		strcsh	r3, [r1, #0]	@ movhi
  39 0030 1EFF2FE1 		bx	lr
  40              	.L5:
  41              		.align	2
  42              	.L4:
  43 0034 00000000 		.word	framebuffer
  44              		.cfi_endproc
  45              	.LFE10:
  47              		.section	.text.fb_bw8_update_damage,"ax",%progbits
  48              		.align	2
  50              	fb_bw8_update_damage:
  51              	.LFB13:
  52              		.file 2 "fb/fb_bw8.c"
   1:fb/fb_bw8.c   **** /* utility functions for a black-and-white framebuffer organized
   2:fb/fb_bw8.c   ****    as 8-vertically-stacked-pixels per byte. This matches the
   3:fb/fb_bw8.c   ****    ST7558 LC Display Controller used on the Motorola C123 */
   4:fb/fb_bw8.c   **** 
   5:fb/fb_bw8.c   **** /* (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   6:fb/fb_bw8.c   ****  *
   7:fb/fb_bw8.c   ****  * All Rights Reserved
   8:fb/fb_bw8.c   ****  *
   9:fb/fb_bw8.c   ****  * This program is free software; you can redistribute it and/or modify
  10:fb/fb_bw8.c   ****  * it under the terms of the GNU General Public License as published by
  11:fb/fb_bw8.c   ****  * the Free Software Foundation; either version 2 of the License, or
  12:fb/fb_bw8.c   ****  * (at your option) any later version.
  13:fb/fb_bw8.c   ****  *
  14:fb/fb_bw8.c   ****  * This program is distributed in the hope that it will be useful,
  15:fb/fb_bw8.c   ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:fb/fb_bw8.c   ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:fb/fb_bw8.c   ****  * GNU General Public License for more details.
  18:fb/fb_bw8.c   ****  *
  19:fb/fb_bw8.c   ****  * You should have received a copy of the GNU General Public License along
  20:fb/fb_bw8.c   ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  21:fb/fb_bw8.c   ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  22:fb/fb_bw8.c   ****  *
  23:fb/fb_bw8.c   ****  */
  24:fb/fb_bw8.c   **** 
  25:fb/fb_bw8.c   **** #include <fb/framebuffer.h>
  26:fb/fb_bw8.c   **** #include <fb/fb_bw8.h>
  27:fb/fb_bw8.c   **** 
  28:fb/fb_bw8.c   **** #include <stdio.h> // debugging
  29:fb/fb_bw8.c   **** 
  30:fb/fb_bw8.c   **** void fb_bw8_clear(){
  31:fb/fb_bw8.c   **** 	int i,n;
  32:fb/fb_bw8.c   **** 
  33:fb/fb_bw8.c   **** 	/* bytes to clear */
  34:fb/fb_bw8.c   **** 	n = (framebuffer->height+7)/8 * framebuffer->width;
  35:fb/fb_bw8.c   **** 	for(i=0;i<n;i++)
  36:fb/fb_bw8.c   **** 		fb_bw8->mem[i]=0;
  37:fb/fb_bw8.c   **** 
  38:fb/fb_bw8.c   **** 	/* mark everything as dirty */
  39:fb/fb_bw8.c   **** 	fb_bw8->damage_x1 = 0;
  40:fb/fb_bw8.c   **** 	fb_bw8->damage_x2 = framebuffer->width;
  41:fb/fb_bw8.c   **** 	fb_bw8->damage_y1 = 0;
  42:fb/fb_bw8.c   **** 	fb_bw8->damage_y2 = framebuffer->height;
  43:fb/fb_bw8.c   **** }
  44:fb/fb_bw8.c   **** 
  45:fb/fb_bw8.c   **** /* update damage rectangle to include the area
  46:fb/fb_bw8.c   ****    x1,y1 (upper left) to x2,y2 (lower right)
  47:fb/fb_bw8.c   ****    Note that all pixels *including* x1y2 and x2y2 are
  48:fb/fb_bw8.c   ****    marked as dirty */
  49:fb/fb_bw8.c   **** static void fb_bw8_update_damage(
  50:fb/fb_bw8.c   **** 	uint16_t x1,uint16_t y1, /* left upper corner (inclusive) */
  51:fb/fb_bw8.c   **** 	uint16_t x2,uint16_t y2  /* right lower corner (inclusive) */
  52:fb/fb_bw8.c   **** ){
  53              		.loc 2 52 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 16
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              	.LVL1:
  58 0000 7F402DE9 		stmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
  59              	.LCFI0:
  60              		.cfi_def_cfa_offset 32
  61              	.LVL2:
  62              		.loc 2 52 0
  63 0004 BC00CDE1 		strh	r0, [sp, #12]	@ movhi
  64              	.LVL3:
  65 0008 B810CDE1 		strh	r1, [sp, #8]	@ movhi
  66              	.LBB30:
  67              	.LBB32:
 107:include/fb/framebuffer.h **** }
 108:include/fb/framebuffer.h **** 
 109:include/fb/framebuffer.h **** /* utility function: limit box coordinates to area of framebuffer
 110:include/fb/framebuffer.h ****    and make sure that x1y1 is left upper edge, x2y2 is right lower */
 111:include/fb/framebuffer.h **** static inline void
 112:include/fb/framebuffer.h **** fb_sanitize_box(uint16_t *x1,uint16_t *y1,uint16_t *x2,uint16_t *y2){
 113:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
  68              		.loc 1 113 0
  69 000c 0C008DE2 		add	r0, sp, #12
  70              		.cfi_offset 14, -4
  71              		.cfi_offset 6, -8
  72              		.cfi_offset 5, -12
  73              		.cfi_offset 4, -16
  74              		.cfi_offset 3, -20
  75              		.cfi_offset 2, -24
  76              		.cfi_offset 1, -28
  77              		.cfi_offset 0, -32
  78              	.LVL4:
  79 0010 08108DE2 		add	r1, sp, #8
  80              	.LVL5:
  81              	.LBE32:
  82              	.LBE30:
  83              		.loc 2 52 0
  84 0014 B420CDE1 		strh	r2, [sp, #4]	@ movhi
  85              	.LVL6:
  86 0018 B030CDE1 		strh	r3, [sp, #0]	@ movhi
  87              	.LBB37:
  88              	.LBB31:
  89              		.loc 1 113 0
  90 001c FEFFFFEB 		bl	fb_limit_fb_range
  91              	.LVL7:
 114:include/fb/framebuffer.h **** 	fb_limit_fb_range(x2,y2);
  92              		.loc 1 114 0
  93 0020 0D10A0E1 		mov	r1, sp
  94 0024 04008DE2 		add	r0, sp, #4
  95 0028 FEFFFFEB 		bl	fb_limit_fb_range
 115:include/fb/framebuffer.h **** 	if(*x1 > *x2){
  96              		.loc 1 115 0
  97 002c B420DDE1 		ldrh	r2, [sp, #4]
  98 0030 BC30DDE1 		ldrh	r3, [sp, #12]
  99 0034 020053E1 		cmp	r3, r2
 100              	.LVL8:
 101              	.LBB34:
 116:include/fb/framebuffer.h **** 		uint16_t tmp = *x1;
 117:include/fb/framebuffer.h **** 		*x1 = *x2;
 118:include/fb/framebuffer.h **** 		*x2 = tmp;
 102              		.loc 1 118 0
 103 0038 B430CD81 		strhih	r3, [sp, #4]	@ movhi
 117:include/fb/framebuffer.h **** 		*x1 = *x2;
 104              		.loc 1 117 0
 105 003c BC20CD81 		strhih	r2, [sp, #12]	@ movhi
 106              	.LBE34:
 119:include/fb/framebuffer.h **** 	}
 120:include/fb/framebuffer.h **** 	if(*y1 > *y2){
 107              		.loc 1 120 0
 108 0040 B830DDE1 		ldrh	r3, [sp, #8]
 109              	.LVL9:
 110 0044 B020DDE1 		ldrh	r2, [sp, #0]
 111 0048 020053E1 		cmp	r3, r2
 112              	.LVL10:
 113              	.LBB33:
 121:include/fb/framebuffer.h **** 		uint16_t tmp = *y1;
 122:include/fb/framebuffer.h **** 		*y1 = *y2;
 123:include/fb/framebuffer.h **** 		*y2 = tmp;
 114              		.loc 1 123 0
 115 004c B030CD81 		strhih	r3, [sp, #0]	@ movhi
 116              	.LBE33:
 117              	.LBE31:
 118              	.LBE37:
  53:fb/fb_bw8.c   **** 	fb_sanitize_box(&x1,&y1,&x2,&y2);
  54:fb/fb_bw8.c   **** 	
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
  56:fb/fb_bw8.c   **** 	y2++;
  57:fb/fb_bw8.c   **** 
  58:fb/fb_bw8.c   **** 	/* maybe currently everything is clean? */
  59:fb/fb_bw8.c   **** 	if(fb_bw8->damage_x1 == fb_bw8->damage_x2 ||
 119              		.loc 2 59 0
 120 0050 94309FE5 		ldr	r3, .L16
 121              	.LVL11:
 122              	.LBB38:
 123              	.LBB36:
 124              	.LBB35:
 122:include/fb/framebuffer.h **** 		*y1 = *y2;
 125              		.loc 1 122 0
 126 0054 B820CD81 		strhih	r2, [sp, #8]	@ movhi
 127              	.LBE35:
 128              	.LBE36:
 129              	.LBE38:
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
 130              		.loc 2 55 0
 131 0058 B410DDE1 		ldrh	r1, [sp, #4]
 132              	.LVL12:
  56:fb/fb_bw8.c   **** 	y2++;
 133              		.loc 2 56 0
 134 005c B020DDE1 		ldrh	r2, [sp, #0]
 135              	.LVL13:
 136              		.loc 2 59 0
 137 0060 003093E5 		ldr	r3, [r3, #0]
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
 138              		.loc 2 55 0
 139 0064 011081E2 		add	r1, r1, #1
 140              	.LVL14:
  56:fb/fb_bw8.c   **** 	y2++;
 141              		.loc 2 56 0
 142 0068 012082E2 		add	r2, r2, #1
 143              	.LVL15:
 144              		.loc 2 59 0
 145 006c B460D3E1 		ldrh	r6, [r3, #4]
 146 0070 B8C0D3E1 		ldrh	ip, [r3, #8]
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
 147              		.loc 2 55 0
 148 0074 0118A0E1 		mov	r1, r1, asl #16
  56:fb/fb_bw8.c   **** 	y2++;
 149              		.loc 2 56 0
 150 0078 0228A0E1 		mov	r2, r2, asl #16
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
 151              		.loc 2 55 0
 152 007c 2118A0E1 		mov	r1, r1, lsr #16
 153              	.LVL16:
  56:fb/fb_bw8.c   **** 	y2++;
 154              		.loc 2 56 0
 155 0080 2228A0E1 		mov	r2, r2, lsr #16
 156              	.LVL17:
 157              		.loc 2 59 0
 158 0084 0C0056E1 		cmp	r6, ip
 159              	.LVL18:
  55:fb/fb_bw8.c   **** 	x2++; /* see definition of fb_bw8->damage_x2/y2 */
 160              		.loc 2 55 0
 161 0088 B410CDE1 		strh	r1, [sp, #4]	@ movhi
 162              	.LVL19:
  56:fb/fb_bw8.c   **** 	y2++;
 163              		.loc 2 56 0
 164 008c B020CDE1 		strh	r2, [sp, #0]	@ movhi
 165              		.loc 2 59 0
 166 0090 0300000A 		beq	.L9
  60:fb/fb_bw8.c   **** 		fb_bw8->damage_y1 == fb_bw8->damage_y2){
 167              		.loc 2 60 0 discriminator 1
 168 0094 B650D3E1 		ldrh	r5, [r3, #6]
 169 0098 BA00D3E1 		ldrh	r0, [r3, #10]
  59:fb/fb_bw8.c   **** 	if(fb_bw8->damage_x1 == fb_bw8->damage_x2 ||
 170              		.loc 2 59 0 discriminator 1
 171 009c 000055E1 		cmp	r5, r0
 172 00a0 0500001A 		bne	.L10
 173              	.L9:
  61:fb/fb_bw8.c   **** 			fb_bw8->damage_x1 = x1;
 174              		.loc 2 61 0
 175 00a4 BC00DDE1 		ldrh	r0, [sp, #12]
 176 00a8 B400C3E1 		strh	r0, [r3, #4]	@ movhi
  62:fb/fb_bw8.c   **** 			fb_bw8->damage_y1 = y1;
 177              		.loc 2 62 0
 178 00ac B800DDE1 		ldrh	r0, [sp, #8]
  63:fb/fb_bw8.c   **** 			fb_bw8->damage_x2 = x2;
 179              		.loc 2 63 0
 180 00b0 B810C3E1 		strh	r1, [r3, #8]	@ movhi
  62:fb/fb_bw8.c   **** 			fb_bw8->damage_y1 = y1;
 181              		.loc 2 62 0
 182 00b4 B600C3E1 		strh	r0, [r3, #6]	@ movhi
 183 00b8 090000EA 		b	.L15
 184              	.L10:
  64:fb/fb_bw8.c   **** 			fb_bw8->damage_y2 = y2;
  65:fb/fb_bw8.c   **** /*
  66:fb/fb_bw8.c   **** 		printf("%s: was clean! damage now %d %d %d %d\n",
  67:fb/fb_bw8.c   **** 			__FUNCTION__,fb_bw8->damage_x1,fb_bw8->damage_y1,
  68:fb/fb_bw8.c   **** 			fb_bw8->damage_x2,fb_bw8->damage_y2);
  69:fb/fb_bw8.c   **** */
  70:fb/fb_bw8.c   **** 			return;
  71:fb/fb_bw8.c   **** 	}
  72:fb/fb_bw8.c   **** 
  73:fb/fb_bw8.c   **** 	/* grow damage box */
  74:fb/fb_bw8.c   **** 	if(x1 < fb_bw8->damage_x1)
 185              		.loc 2 74 0
 186 00bc BC40DDE1 		ldrh	r4, [sp, #12]
 187 00c0 060054E1 		cmp	r4, r6
  75:fb/fb_bw8.c   **** 		fb_bw8->damage_x1 = x1;
 188              		.loc 2 75 0
 189 00c4 B440C331 		strcch	r4, [r3, #4]	@ movhi
  76:fb/fb_bw8.c   **** 	if(y1 < fb_bw8->damage_y1)
 190              		.loc 2 76 0
 191 00c8 B840DDE1 		ldrh	r4, [sp, #8]
 192 00cc 050054E1 		cmp	r4, r5
  77:fb/fb_bw8.c   **** 		fb_bw8->damage_y1 = y1;
 193              		.loc 2 77 0
 194 00d0 B640C331 		strcch	r4, [r3, #6]	@ movhi
  78:fb/fb_bw8.c   **** 	if(x2 > fb_bw8->damage_x2)
 195              		.loc 2 78 0
 196 00d4 0C0051E1 		cmp	r1, ip
  79:fb/fb_bw8.c   **** 		fb_bw8->damage_x2 = x2;
 197              		.loc 2 79 0
 198 00d8 B810C381 		strhih	r1, [r3, #8]	@ movhi
  80:fb/fb_bw8.c   **** 	if(y2 > fb_bw8->damage_y2)
 199              		.loc 2 80 0
 200 00dc 000052E1 		cmp	r2, r0
 201 00e0 0000009A 		bls	.L6
 202              	.L15:
  81:fb/fb_bw8.c   **** 		fb_bw8->damage_y2 = y2;
 203              		.loc 2 81 0
 204 00e4 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 205              	.L6:
  82:fb/fb_bw8.c   **** #if 0
  83:fb/fb_bw8.c   **** 	printf("%s: damage now %d %d %d %d\n",
  84:fb/fb_bw8.c   **** 	       __FUNCTION__,fb_bw8->damage_x1,fb_bw8->damage_y1,
  85:fb/fb_bw8.c   **** 	       fb_bw8->damage_x2,fb_bw8->damage_y2);
  86:fb/fb_bw8.c   **** #endif
  87:fb/fb_bw8.c   **** }
 206              		.loc 2 87 0
 207 00e8 7F80BDE8 		ldmfd	sp!, {r0, r1, r2, r3, r4, r5, r6, pc}
 208              	.L17:
 209              		.align	2
 210              	.L16:
 211 00ec 00000000 		.word	fb_bw8
 212              		.cfi_endproc
 213              	.LFE13:
 215              		.section	.text.set_fg_pixel,"ax",%progbits
 216              		.align	2
 218              	set_fg_pixel:
 219              	.LFB17:
  88:fb/fb_bw8.c   **** 
  89:fb/fb_bw8.c   **** static void fb_bw8_line(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2){
  90:fb/fb_bw8.c   **** 	fb_sanitize_box(&x1,&y1,&x2,&y2);
  91:fb/fb_bw8.c   **** 	/* FIXME : this is currently unimplemented! */
  92:fb/fb_bw8.c   **** }
  93:fb/fb_bw8.c   **** 
  94:fb/fb_bw8.c   **** void fb_bw8_lineto(uint16_t x,uint16_t y){
  95:fb/fb_bw8.c   **** 	fb_bw8_line(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
  96:fb/fb_bw8.c   **** 	framebuffer->cursor_x = x;
  97:fb/fb_bw8.c   **** 	framebuffer->cursor_y = y;	
  98:fb/fb_bw8.c   **** }
  99:fb/fb_bw8.c   **** 
 100:fb/fb_bw8.c   **** /* depending on color set (add to or_mask) or clear
 101:fb/fb_bw8.c   ****    (remove from and_mask) bit number bitnum */
 102:fb/fb_bw8.c   **** static void set_pixel(uint8_t *and_mask,
 103:fb/fb_bw8.c   **** 		      uint8_t *or_mask,
 104:fb/fb_bw8.c   **** 		      int bitnum,
 105:fb/fb_bw8.c   **** 		      uint32_t color
 106:fb/fb_bw8.c   **** ){
 107:fb/fb_bw8.c   **** 	if(color == FB_COLOR_TRANSP)
 108:fb/fb_bw8.c   **** 		return;
 109:fb/fb_bw8.c   **** 	if(color == FB_COLOR_WHITE)
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 111:fb/fb_bw8.c   **** 	else
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 113:fb/fb_bw8.c   **** }
 114:fb/fb_bw8.c   **** 
 115:fb/fb_bw8.c   **** static void set_fg_pixel(uint8_t *and_mask,uint8_t *or_mask,int bitnum){
 220              		.loc 2 115 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              		@ link register save eliminated.
 225              	.LVL20:
 116:fb/fb_bw8.c   **** 	set_pixel(and_mask,or_mask,bitnum,framebuffer->fg_color);
 226              		.loc 2 116 0
 227 0000 3C309FE5 		ldr	r3, .L21
 228 0004 003093E5 		ldr	r3, [r3, #0]
 229 0008 283093E5 		ldr	r3, [r3, #40]
 230              	.LVL21:
 231              	.LBB39:
 232              	.LBB40:
 107:fb/fb_bw8.c   **** 	if(color == FB_COLOR_TRANSP)
 233              		.loc 2 107 0
 234 000c FEC4E0E3 		mvn	ip, #-33554432
 235 0010 0C0053E1 		cmp	r3, ip
 236 0014 1EFF2F01 		bxeq	lr
 109:fb/fb_bw8.c   **** 	if(color == FB_COLOR_WHITE)
 237              		.loc 2 109 0
 238 0018 FFC48CE2 		add	ip, ip, #-16777216
 239 001c 0C0053E1 		cmp	r3, ip
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 240              		.loc 2 110 0
 241 0020 0030D005 		ldreqb	r3, [r0, #0]	@ zero_extendqisi2
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 242              		.loc 2 112 0
 243 0024 0030D115 		ldrneb	r3, [r1, #0]	@ zero_extendqisi2
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 244              		.loc 2 110 0
 245 0028 0110A003 		moveq	r1, #1
 246              	.LVL22:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 247              		.loc 2 112 0
 248 002c 0100A013 		movne	r0, #1
 249              	.LVL23:
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 250              		.loc 2 110 0
 251 0030 1122C301 		biceq	r2, r3, r1, asl r2
 252              	.LVL24:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 253              		.loc 2 112 0
 254 0034 10228311 		orrne	r2, r3, r0, asl r2
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 255              		.loc 2 110 0
 256 0038 0020C005 		streqb	r2, [r0, #0]
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 257              		.loc 2 112 0
 258 003c 0020C115 		strneb	r2, [r1, #0]
 259 0040 1EFF2FE1 		bx	lr
 260              	.L22:
 261              		.align	2
 262              	.L21:
 263 0044 00000000 		.word	framebuffer
 264              	.LBE40:
 265              	.LBE39:
 266              		.cfi_endproc
 267              	.LFE17:
 269              		.section	.text.fb_bw8_clear,"ax",%progbits
 270              		.align	2
 271              		.global	fb_bw8_clear
 273              	fb_bw8_clear:
 274              	.LFB12:
  30:fb/fb_bw8.c   **** void fb_bw8_clear(){
 275              		.loc 2 30 0
 276              		.cfi_startproc
 277              		@ args = 0, pretend = 0, frame = 0
 278              		@ frame_needed = 0, uses_anonymous_args = 0
 279              		@ link register save eliminated.
  34:fb/fb_bw8.c   **** 	n = (framebuffer->height+7)/8 * framebuffer->width;
 280              		.loc 2 34 0
 281 0000 70309FE5 		ldr	r3, .L26
 282 0004 003093E5 		ldr	r3, [r3, #0]
 283 0008 B202D3E1 		ldrh	r0, [r3, #34]
 284 000c B032D3E1 		ldrh	r3, [r3, #32]
 285 0010 070080E2 		add	r0, r0, #7
 286 0014 C001A0E1 		mov	r0, r0, asr #3
 287 0018 930000E0 		mul	r0, r3, r0
 288              	.LVL25:
  35:fb/fb_bw8.c   **** 	for(i=0;i<n;i++)
 289              		.loc 2 35 0
 290 001c 0030A0E3 		mov	r3, #0
 291 0020 54109FE5 		ldr	r1, .L26+4
  36:fb/fb_bw8.c   **** 		fb_bw8->mem[i]=0;
 292              		.loc 2 36 0
 293 0024 0320A0E1 		mov	r2, r3
  35:fb/fb_bw8.c   **** 	for(i=0;i<n;i++)
 294              		.loc 2 35 0
 295 0028 030000EA 		b	.L24
 296              	.LVL26:
 297              	.L25:
  36:fb/fb_bw8.c   **** 		fb_bw8->mem[i]=0;
 298              		.loc 2 36 0 discriminator 2
 299 002c 00C091E5 		ldr	ip, [r1, #0]
 300 0030 00C09CE5 		ldr	ip, [ip, #0]
 301 0034 0320CCE7 		strb	r2, [ip, r3]
  35:fb/fb_bw8.c   **** 	for(i=0;i<n;i++)
 302              		.loc 2 35 0 discriminator 2
 303 0038 013083E2 		add	r3, r3, #1
 304              	.LVL27:
 305              	.L24:
  35:fb/fb_bw8.c   **** 	for(i=0;i<n;i++)
 306              		.loc 2 35 0 is_stmt 0 discriminator 1
 307 003c 000053E1 		cmp	r3, r0
 308 0040 F9FFFFBA 		blt	.L25
  39:fb/fb_bw8.c   **** 	fb_bw8->damage_x1 = 0;
 309              		.loc 2 39 0 is_stmt 1
 310 0044 30309FE5 		ldr	r3, .L26+4
 311              	.LVL28:
  40:fb/fb_bw8.c   **** 	fb_bw8->damage_x2 = framebuffer->width;
 312              		.loc 2 40 0
 313 0048 28209FE5 		ldr	r2, .L26
  39:fb/fb_bw8.c   **** 	fb_bw8->damage_x1 = 0;
 314              		.loc 2 39 0
 315 004c 003093E5 		ldr	r3, [r3, #0]
  40:fb/fb_bw8.c   **** 	fb_bw8->damage_x2 = framebuffer->width;
 316              		.loc 2 40 0
 317 0050 002092E5 		ldr	r2, [r2, #0]
  39:fb/fb_bw8.c   **** 	fb_bw8->damage_x1 = 0;
 318              		.loc 2 39 0
 319 0054 0010A0E3 		mov	r1, #0	@ movhi
 320 0058 B410C3E1 		strh	r1, [r3, #4]	@ movhi
  40:fb/fb_bw8.c   **** 	fb_bw8->damage_x2 = framebuffer->width;
 321              		.loc 2 40 0
 322 005c B012D2E1 		ldrh	r1, [r2, #32]
  42:fb/fb_bw8.c   **** 	fb_bw8->damage_y2 = framebuffer->height;
 323              		.loc 2 42 0
 324 0060 B222D2E1 		ldrh	r2, [r2, #34]
  40:fb/fb_bw8.c   **** 	fb_bw8->damage_x2 = framebuffer->width;
 325              		.loc 2 40 0
 326 0064 B810C3E1 		strh	r1, [r3, #8]	@ movhi
  41:fb/fb_bw8.c   **** 	fb_bw8->damage_y1 = 0;
 327              		.loc 2 41 0
 328 0068 0010A0E3 		mov	r1, #0	@ movhi
 329 006c B610C3E1 		strh	r1, [r3, #6]	@ movhi
  42:fb/fb_bw8.c   **** 	fb_bw8->damage_y2 = framebuffer->height;
 330              		.loc 2 42 0
 331 0070 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
  43:fb/fb_bw8.c   **** }
 332              		.loc 2 43 0
 333 0074 1EFF2FE1 		bx	lr
 334              	.L27:
 335              		.align	2
 336              	.L26:
 337 0078 00000000 		.word	framebuffer
 338 007c 00000000 		.word	fb_bw8
 339              		.cfi_endproc
 340              	.LFE12:
 342              		.section	.text.fb_bw8_lineto,"ax",%progbits
 343              		.align	2
 344              		.global	fb_bw8_lineto
 346              	fb_bw8_lineto:
 347              	.LFB15:
  94:fb/fb_bw8.c   **** void fb_bw8_lineto(uint16_t x,uint16_t y){
 348              		.loc 2 94 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              	.LVL29:
 353 0000 73402DE9 		stmfd	sp!, {r0, r1, r4, r5, r6, lr}
 354              	.LCFI1:
 355              		.cfi_def_cfa_offset 24
  95:fb/fb_bw8.c   **** 	fb_bw8_line(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
 356              		.loc 2 95 0
 357 0004 50609FE5 		ldr	r6, .L29
 358              		.cfi_offset 14, -4
 359              		.cfi_offset 6, -8
 360              		.cfi_offset 5, -12
 361              		.cfi_offset 4, -16
 362              		.cfi_offset 1, -20
 363              		.cfi_offset 0, -24
 364 0008 003096E5 		ldr	r3, [r6, #0]
  94:fb/fb_bw8.c   **** void fb_bw8_lineto(uint16_t x,uint16_t y){
 365              		.loc 2 94 0
 366 000c 0008A0E1 		mov	r0, r0, asl #16
 367              	.LVL30:
  95:fb/fb_bw8.c   **** 	fb_bw8_line(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
 368              		.loc 2 95 0
 369 0010 B622D3E1 		ldrh	r2, [r3, #38]
  94:fb/fb_bw8.c   **** void fb_bw8_lineto(uint16_t x,uint16_t y){
 370              		.loc 2 94 0
 371 0014 0118A0E1 		mov	r1, r1, asl #16
 372              	.LVL31:
  95:fb/fb_bw8.c   **** 	fb_bw8_line(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
 373              		.loc 2 95 0
 374 0018 B432D3E1 		ldrh	r3, [r3, #36]
  94:fb/fb_bw8.c   **** void fb_bw8_lineto(uint16_t x,uint16_t y){
 375              		.loc 2 94 0
 376 001c 2058A0E1 		mov	r5, r0, lsr #16
 377 0020 2148A0E1 		mov	r4, r1, lsr #16
 378              	.LBB41:
 379              	.LBB42:
 380              	.LBB43:
 113:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
 381              		.loc 1 113 0
 382 0024 06008DE2 		add	r0, sp, #6
 383 0028 04108DE2 		add	r1, sp, #4
 384              	.LBE43:
 385              	.LBE42:
 386              	.LBE41:
  95:fb/fb_bw8.c   **** 	fb_bw8_line(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
 387              		.loc 2 95 0
 388 002c B630CDE1 		strh	r3, [sp, #6]	@ movhi
 389              	.LVL32:
 390 0030 B420CDE1 		strh	r2, [sp, #4]	@ movhi
 391              	.LVL33:
 392 0034 B250CDE1 		strh	r5, [sp, #2]	@ movhi
 393              	.LVL34:
 394 0038 B040CDE1 		strh	r4, [sp, #0]	@ movhi
 395              	.LVL35:
 396              	.LBB46:
 397              	.LBB45:
 398              	.LBB44:
 113:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
 399              		.loc 1 113 0
 400 003c FEFFFFEB 		bl	fb_limit_fb_range
 401              	.LVL36:
 114:include/fb/framebuffer.h **** 	fb_limit_fb_range(x2,y2);
 402              		.loc 1 114 0
 403 0040 02008DE2 		add	r0, sp, #2
 404 0044 0D10A0E1 		mov	r1, sp
 405 0048 FEFFFFEB 		bl	fb_limit_fb_range
 406              	.LBE44:
 407              	.LBE45:
 408              	.LBE46:
  96:fb/fb_bw8.c   **** 	framebuffer->cursor_x = x;
 409              		.loc 2 96 0
 410 004c 003096E5 		ldr	r3, [r6, #0]
 411 0050 B452C3E1 		strh	r5, [r3, #36]	@ movhi
  97:fb/fb_bw8.c   **** 	framebuffer->cursor_y = y;	
 412              		.loc 2 97 0
 413 0054 B642C3E1 		strh	r4, [r3, #38]	@ movhi
  98:fb/fb_bw8.c   **** }
 414              		.loc 2 98 0
 415 0058 7C80BDE8 		ldmfd	sp!, {r2, r3, r4, r5, r6, pc}
 416              	.L30:
 417              		.align	2
 418              	.L29:
 419 005c 00000000 		.word	framebuffer
 420              		.cfi_endproc
 421              	.LFE15:
 423              		.section	.text.fb_bw8_boxto,"ax",%progbits
 424              		.align	2
 425              		.global	fb_bw8_boxto
 427              	fb_bw8_boxto:
 428              	.LFB20:
 117:fb/fb_bw8.c   **** }
 118:fb/fb_bw8.c   **** 
 119:fb/fb_bw8.c   **** static void set_bg_pixel(uint8_t *and_mask,uint8_t *or_mask,int bitnum){
 120:fb/fb_bw8.c   **** 	set_pixel(and_mask,or_mask,bitnum,framebuffer->bg_color);
 121:fb/fb_bw8.c   **** }
 122:fb/fb_bw8.c   **** 
 123:fb/fb_bw8.c   **** static void fb_bw8_box(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
 124:fb/fb_bw8.c   **** {
 125:fb/fb_bw8.c   **** 	uint16_t y,w;
 126:fb/fb_bw8.c   **** 	uint8_t *p;
 127:fb/fb_bw8.c   **** 
 128:fb/fb_bw8.c   **** 	uint8_t and_mask,or_mask;	// filling
 129:fb/fb_bw8.c   **** 	uint8_t and_mask_side,or_mask_side; // left and right side
 130:fb/fb_bw8.c   **** 
 131:fb/fb_bw8.c   **** 	fb_sanitize_box(&x1,&y1,&x2,&y2);
 132:fb/fb_bw8.c   **** 	fb_bw8_update_damage(x1,y1,x2,y2);
 133:fb/fb_bw8.c   **** 
 134:fb/fb_bw8.c   **** 	for(y=y1&0xfff8;y<=y2;y+=8){
 135:fb/fb_bw8.c   **** 		/* don't clear any pixels (white) */
 136:fb/fb_bw8.c   **** 		and_mask = and_mask_side = 0xff;
 137:fb/fb_bw8.c   **** 		or_mask = or_mask_side = 0;
 138:fb/fb_bw8.c   **** 
 139:fb/fb_bw8.c   **** 		for(w=0;w<8;w++){ /* check which pixels are affected */
 140:fb/fb_bw8.c   **** 			if(y+w >= y1 && y+w <= y2){
 141:fb/fb_bw8.c   **** 				set_bg_pixel(&and_mask,&or_mask,w);
 142:fb/fb_bw8.c   **** 				set_fg_pixel(&and_mask_side,&or_mask_side,w);
 143:fb/fb_bw8.c   **** 			}
 144:fb/fb_bw8.c   **** 
 145:fb/fb_bw8.c   **** 			if(y+w == y1 || y+w == y2){ /* top and bottom line */
 146:fb/fb_bw8.c   **** 				set_fg_pixel(&and_mask,&or_mask,w);
 147:fb/fb_bw8.c   **** 			}
 148:fb/fb_bw8.c   **** 		}
 149:fb/fb_bw8.c   **** 
 150:fb/fb_bw8.c   **** 		p = fb_bw8->mem + (y/8)*framebuffer->width + x1;
 151:fb/fb_bw8.c   **** 		for(w=x1;w<=x2;w++){
 152:fb/fb_bw8.c   **** 			if(w == x1 || w == x2)
 153:fb/fb_bw8.c   **** 				*p = (*p & and_mask_side)|or_mask_side;
 154:fb/fb_bw8.c   **** 			else
 155:fb/fb_bw8.c   **** 				*p = (*p & and_mask)|or_mask;
 156:fb/fb_bw8.c   **** 			p++;
 157:fb/fb_bw8.c   **** 		}
 158:fb/fb_bw8.c   **** 	}
 159:fb/fb_bw8.c   **** }
 160:fb/fb_bw8.c   **** 
 161:fb/fb_bw8.c   **** /* draw box from cursor to (x,y) */
 162:fb/fb_bw8.c   **** void
 163:fb/fb_bw8.c   **** fb_bw8_boxto(uint16_t x,uint16_t y){
 429              		.loc 2 163 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 12
 432              		@ frame_needed = 0, uses_anonymous_args = 0
 433              	.LVL37:
 434 0000 F74F2DE9 		stmfd	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 435              	.LCFI2:
 436              		.cfi_def_cfa_offset 48
 164:fb/fb_bw8.c   **** 	fb_bw8_box(framebuffer->cursor_x,framebuffer->cursor_y,x,y);
 437              		.loc 2 164 0
 438 0004 F0319FE5 		ldr	r3, .L50
 439 0008 003093E5 		ldr	r3, [r3, #0]
 163:fb/fb_bw8.c   **** fb_bw8_boxto(uint16_t x,uint16_t y){
 440              		.loc 2 163 0
 441 000c 0008A0E1 		mov	r0, r0, asl #16
 442              		.cfi_offset 14, -4
 443              		.cfi_offset 11, -8
 444              		.cfi_offset 10, -12
 445              		.cfi_offset 9, -16
 446              		.cfi_offset 8, -20
 447              		.cfi_offset 7, -24
 448              		.cfi_offset 6, -28
 449              		.cfi_offset 5, -32
 450              		.cfi_offset 4, -36
 451              		.cfi_offset 2, -40
 452              		.cfi_offset 1, -44
 453              		.cfi_offset 0, -48
 454              	.LVL38:
 455              		.loc 2 164 0
 456 0010 B622D3E1 		ldrh	r2, [r3, #38]
 163:fb/fb_bw8.c   **** fb_bw8_boxto(uint16_t x,uint16_t y){
 457              		.loc 2 163 0
 458 0014 0118A0E1 		mov	r1, r1, asl #16
 459              	.LVL39:
 460              		.loc 2 164 0
 461 0018 B432D3E1 		ldrh	r3, [r3, #36]
 163:fb/fb_bw8.c   **** fb_bw8_boxto(uint16_t x,uint16_t y){
 462              		.loc 2 163 0
 463 001c 2048A0E1 		mov	r4, r0, lsr #16
 464 0020 2198A0E1 		mov	r9, r1, lsr #16
 465              	.LBB57:
 466              	.LBB58:
 467              	.LBB59:
 468              	.LBB60:
 113:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
 469              		.loc 1 113 0
 470 0024 06008DE2 		add	r0, sp, #6
 471 0028 04108DE2 		add	r1, sp, #4
 472              	.LBE60:
 473              	.LBE59:
 474              	.LBE58:
 475              	.LBE57:
 476              		.loc 2 164 0
 477 002c B630CDE1 		strh	r3, [sp, #6]	@ movhi
 478              	.LVL40:
 479 0030 B420CDE1 		strh	r2, [sp, #4]	@ movhi
 480              	.LVL41:
 481 0034 B240CDE1 		strh	r4, [sp, #2]	@ movhi
 482              	.LVL42:
 483 0038 B090CDE1 		strh	r9, [sp, #0]	@ movhi
 484              	.LVL43:
 485              	.LBB76:
 486              	.LBB75:
 487              	.LBB64:
 488              	.LBB63:
 113:include/fb/framebuffer.h **** 	fb_limit_fb_range(x1,y1);
 489              		.loc 1 113 0
 490 003c FEFFFFEB 		bl	fb_limit_fb_range
 491              	.LVL44:
 114:include/fb/framebuffer.h **** 	fb_limit_fb_range(x2,y2);
 492              		.loc 1 114 0
 493 0040 02008DE2 		add	r0, sp, #2
 494 0044 0D10A0E1 		mov	r1, sp
 495 0048 FEFFFFEB 		bl	fb_limit_fb_range
 115:include/fb/framebuffer.h **** 	if(*x1 > *x2){
 496              		.loc 1 115 0
 497 004c B630DDE1 		ldrh	r3, [sp, #6]
 498 0050 B220DDE1 		ldrh	r2, [sp, #2]
 499 0054 020053E1 		cmp	r3, r2
 500              	.LVL45:
 501              	.LBB61:
 117:include/fb/framebuffer.h **** 		*x1 = *x2;
 502              		.loc 1 117 0
 503 0058 B620CD81 		strhih	r2, [sp, #6]	@ movhi
 118:include/fb/framebuffer.h **** 		*x2 = tmp;
 504              		.loc 1 118 0
 505 005c B230CD81 		strhih	r3, [sp, #2]	@ movhi
 506              	.LBE61:
 120:include/fb/framebuffer.h **** 	if(*y1 > *y2){
 507              		.loc 1 120 0
 508 0060 B020DDE1 		ldrh	r2, [sp, #0]
 509 0064 B430DDE1 		ldrh	r3, [sp, #4]
 510              	.LVL46:
 511 0068 020053E1 		cmp	r3, r2
 512              	.LVL47:
 513              	.LBB62:
 122:include/fb/framebuffer.h **** 		*y1 = *y2;
 514              		.loc 1 122 0
 515 006c B420CD81 		strhih	r2, [sp, #4]	@ movhi
 516              		.loc 1 123 0
 517 0070 B030CD81 		strhih	r3, [sp, #0]	@ movhi
 518              	.LBE62:
 519              	.LBE63:
 520              	.LBE64:
 132:fb/fb_bw8.c   **** 	fb_bw8_update_damage(x1,y1,x2,y2);
 521              		.loc 2 132 0
 522 0074 B600DDE1 		ldrh	r0, [sp, #6]
 523 0078 B410DDE1 		ldrh	r1, [sp, #4]
 524 007c B220DDE1 		ldrh	r2, [sp, #2]
 525 0080 B030DDE1 		ldrh	r3, [sp, #0]
 526              	.LVL48:
 527 0084 FEFFFFEB 		bl	fb_bw8_update_damage
 134:fb/fb_bw8.c   **** 	for(y=y1&0xfff8;y<=y2;y+=8){
 528              		.loc 2 134 0
 529 0088 B470DDE1 		ldrh	r7, [sp, #4]
 530              	.LVL49:
 531              	.LBB65:
 532              	.LBB67:
 120:fb/fb_bw8.c   **** 	set_pixel(and_mask,or_mask,bitnum,framebuffer->bg_color);
 533              		.loc 2 120 0
 534 008c 68819FE5 		ldr	r8, .L50
 535              	.LBE67:
 536              	.LBE65:
 134:fb/fb_bw8.c   **** 	for(y=y1&0xfff8;y<=y2;y+=8){
 537              		.loc 2 134 0
 538 0090 0770C7E3 		bic	r7, r7, #7
 539              	.LVL50:
 540 0094 500000EA 		b	.L34
 541              	.LVL51:
 542              	.L46:
 136:fb/fb_bw8.c   **** 		and_mask = and_mask_side = 0xff;
 543              		.loc 2 136 0
 544 0098 0030E0E3 		mvn	r3, #0
 545              	.LVL52:
 137:fb/fb_bw8.c   **** 		or_mask = or_mask_side = 0;
 546              		.loc 2 137 0
 547 009c 0050A0E3 		mov	r5, #0
 136:fb/fb_bw8.c   **** 		and_mask = and_mask_side = 0xff;
 548              		.loc 2 136 0
 549 00a0 0930CDE5 		strb	r3, [sp, #9]
 550 00a4 0B30CDE5 		strb	r3, [sp, #11]
 137:fb/fb_bw8.c   **** 		or_mask = or_mask_side = 0;
 551              		.loc 2 137 0
 552 00a8 0850CDE5 		strb	r5, [sp, #8]
 553 00ac 0A50CDE5 		strb	r5, [sp, #10]
 554              	.LVL53:
 555 00b0 0760A0E1 		mov	r6, r7
 556              	.LBB73:
 557              	.LBB66:
 558              	.LBB68:
 559              	.LBB69:
 107:fb/fb_bw8.c   **** 	if(color == FB_COLOR_TRANSP)
 560              		.loc 2 107 0
 561 00b4 FEB4E0E3 		mvn	fp, #-33554432
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 562              		.loc 2 112 0
 563 00b8 01A0A0E3 		mov	sl, #1
 564              	.LVL54:
 565              	.L40:
 566              	.LBE69:
 567              	.LBE68:
 568              	.LBE66:
 569              	.LBE73:
 140:fb/fb_bw8.c   **** 			if(y+w >= y1 && y+w <= y2){
 570              		.loc 2 140 0
 571 00bc B430DDE1 		ldrh	r3, [sp, #4]
 572              	.LVL55:
 573 00c0 030056E1 		cmp	r6, r3
 574              	.LVL56:
 575 00c4 120000BA 		blt	.L35
 576              	.LVL57:
 577 00c8 B030DDE1 		ldrh	r3, [sp, #0]
 578              	.LVL58:
 579 00cc 030056E1 		cmp	r6, r3
 580              	.LVL59:
 581 00d0 0F0000CA 		bgt	.L35
 582              	.LVL60:
 583              	.LBB74:
 584              	.LBB72:
 120:fb/fb_bw8.c   **** 	set_pixel(and_mask,or_mask,bitnum,framebuffer->bg_color);
 585              		.loc 2 120 0
 586 00d4 003098E5 		ldr	r3, [r8, #0]
 587              	.LVL61:
 588 00d8 2C3093E5 		ldr	r3, [r3, #44]
 589              	.LVL62:
 590              	.LBB71:
 591              	.LBB70:
 107:fb/fb_bw8.c   **** 	if(color == FB_COLOR_TRANSP)
 592              		.loc 2 107 0
 593 00dc 0B0053E1 		cmp	r3, fp
 594 00e0 0700000A 		beq	.L36
 109:fb/fb_bw8.c   **** 	if(color == FB_COLOR_WHITE)
 595              		.loc 2 109 0
 596 00e4 FF24E0E3 		mvn	r2, #-16777216
 597 00e8 020053E1 		cmp	r3, r2
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 598              		.loc 2 110 0
 599 00ec 0B30DD05 		ldreqb	r3, [sp, #11]	@ zero_extendqisi2
 600              	.LVL63:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 601              		.loc 2 112 0
 602 00f0 0A30DD15 		ldrneb	r3, [sp, #10]	@ zero_extendqisi2
 603              	.LVL64:
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 604              		.loc 2 110 0
 605 00f4 1A35C301 		biceq	r3, r3, sl, asl r5
 606              	.LVL65:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 607              		.loc 2 112 0
 608 00f8 1A358311 		orrne	r3, r3, sl, asl r5
 609              	.LVL66:
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 610              		.loc 2 110 0
 611 00fc 0B30CD05 		streqb	r3, [sp, #11]
 612              	.LVL67:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 613              		.loc 2 112 0
 614 0100 0A30CD15 		strneb	r3, [sp, #10]
 615              	.LVL68:
 616              	.L36:
 617              	.LBE70:
 618              	.LBE71:
 619              	.LBE72:
 620              	.LBE74:
 142:fb/fb_bw8.c   **** 				set_fg_pixel(&and_mask_side,&or_mask_side,w);
 621              		.loc 2 142 0
 622 0104 09008DE2 		add	r0, sp, #9
 623 0108 08108DE2 		add	r1, sp, #8
 624 010c 0520A0E1 		mov	r2, r5
 625 0110 FEFFFFEB 		bl	set_fg_pixel
 626              	.LVL69:
 627              	.L35:
 145:fb/fb_bw8.c   **** 			if(y+w == y1 || y+w == y2){ /* top and bottom line */
 628              		.loc 2 145 0
 629 0114 B430DDE1 		ldrh	r3, [sp, #4]
 630              	.LVL70:
 631 0118 030056E1 		cmp	r6, r3
 632              	.LVL71:
 633 011c 0200000A 		beq	.L38
 634              	.LVL72:
 635 0120 B030DDE1 		ldrh	r3, [sp, #0]
 636              	.LVL73:
 637 0124 030056E1 		cmp	r6, r3
 638              	.LVL74:
 639 0128 0300001A 		bne	.L39
 640              	.LVL75:
 641              	.L38:
 146:fb/fb_bw8.c   **** 				set_fg_pixel(&and_mask,&or_mask,w);
 642              		.loc 2 146 0
 643 012c 0B008DE2 		add	r0, sp, #11
 644 0130 0A108DE2 		add	r1, sp, #10
 645 0134 0520A0E1 		mov	r2, r5
 646 0138 FEFFFFEB 		bl	set_fg_pixel
 647              	.LVL76:
 648              	.L39:
 649 013c 015085E2 		add	r5, r5, #1
 139:fb/fb_bw8.c   **** 		for(w=0;w<8;w++){ /* check which pixels are affected */
 650              		.loc 2 139 0
 651 0140 080055E3 		cmp	r5, #8
 146:fb/fb_bw8.c   **** 				set_fg_pixel(&and_mask,&or_mask,w);
 652              		.loc 2 146 0
 653 0144 016086E2 		add	r6, r6, #1
 139:fb/fb_bw8.c   **** 		for(w=0;w<8;w++){ /* check which pixels are affected */
 654              		.loc 2 139 0
 655 0148 DBFFFF1A 		bne	.L40
 150:fb/fb_bw8.c   **** 		p = fb_bw8->mem + (y/8)*framebuffer->width + x1;
 656              		.loc 2 150 0
 657 014c 000098E5 		ldr	r0, [r8, #0]
 658 0150 A8309FE5 		ldr	r3, .L50+4
 659              	.LVL77:
 660 0154 B620DDE1 		ldrh	r2, [sp, #6]
 661              	.LVL78:
 662 0158 B002D0E1 		ldrh	r0, [r0, #32]
 663 015c 001093E5 		ldr	r1, [r3, #0]
 664 0160 A731A0E1 		mov	r3, r7, lsr #3
 665 0164 902323E0 		mla	r3, r0, r3, r2
 666 0168 001091E5 		ldr	r1, [r1, #0]
 667 016c 033081E0 		add	r3, r1, r3
 668 0170 120000EA 		b	.L49
 669              	.LVL79:
 670              	.L45:
 152:fb/fb_bw8.c   **** 			if(w == x1 || w == x2)
 671              		.loc 2 152 0
 672 0174 B600DDE1 		ldrh	r0, [sp, #6]
 673              	.LVL80:
 674 0178 020050E1 		cmp	r0, r2
 675              	.LVL81:
 676 017c 0100000A 		beq	.L42
 677 0180 010052E1 		cmp	r2, r1
 678 0184 0400001A 		bne	.L43
 679              	.L42:
 153:fb/fb_bw8.c   **** 				*p = (*p & and_mask_side)|or_mask_side;
 680              		.loc 2 153 0
 681 0188 0900DDE5 		ldrb	r0, [sp, #9]	@ zero_extendqisi2
 682              	.LVL82:
 683 018c 011053E5 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 684 0190 011000E0 		and	r1, r0, r1
 685              	.LVL83:
 686 0194 0800DDE5 		ldrb	r0, [sp, #8]	@ zero_extendqisi2
 687              	.LVL84:
 688 0198 030000EA 		b	.L48
 689              	.LVL85:
 690              	.L43:
 155:fb/fb_bw8.c   **** 				*p = (*p & and_mask)|or_mask;
 691              		.loc 2 155 0
 692 019c 0B00DDE5 		ldrb	r0, [sp, #11]	@ zero_extendqisi2
 693              	.LVL86:
 694 01a0 011053E5 		ldrb	r1, [r3, #-1]	@ zero_extendqisi2
 695 01a4 011000E0 		and	r1, r0, r1
 696              	.LVL87:
 697 01a8 0A00DDE5 		ldrb	r0, [sp, #10]	@ zero_extendqisi2
 698              	.LVL88:
 699              	.L48:
 700 01ac 001081E1 		orr	r1, r1, r0
 151:fb/fb_bw8.c   **** 		for(w=x1;w<=x2;w++){
 701              		.loc 2 151 0
 702 01b0 012082E2 		add	r2, r2, #1
 703              	.LVL89:
 704 01b4 0228A0E1 		mov	r2, r2, asl #16
 705              	.LVL90:
 155:fb/fb_bw8.c   **** 				*p = (*p & and_mask)|or_mask;
 706              		.loc 2 155 0
 707 01b8 011043E5 		strb	r1, [r3, #-1]
 151:fb/fb_bw8.c   **** 		for(w=x1;w<=x2;w++){
 708              		.loc 2 151 0
 709 01bc 2228A0E1 		mov	r2, r2, lsr #16
 710              	.LVL91:
 711              	.L49:
 712 01c0 B210DDE1 		ldrh	r1, [sp, #2]
 713 01c4 010052E1 		cmp	r2, r1
 714 01c8 013083E2 		add	r3, r3, #1
 715 01cc E8FFFF9A 		bls	.L45
 134:fb/fb_bw8.c   **** 	for(y=y1&0xfff8;y<=y2;y+=8){
 716              		.loc 2 134 0
 717 01d0 087087E2 		add	r7, r7, #8
 718              	.LVL92:
 719 01d4 0778A0E1 		mov	r7, r7, asl #16
 720              	.LVL93:
 721 01d8 2778A0E1 		mov	r7, r7, lsr #16
 722              	.LVL94:
 723              	.L34:
 724 01dc B030DDE1 		ldrh	r3, [sp, #0]
 725              	.LVL95:
 726 01e0 070053E1 		cmp	r3, r7
 727              	.LVL96:
 728 01e4 ABFFFF2A 		bcs	.L46
 729              	.LBE75:
 730              	.LBE76:
 165:fb/fb_bw8.c   **** 	framebuffer->cursor_x = x;
 731              		.loc 2 165 0
 732 01e8 0C309FE5 		ldr	r3, .L50
 733              	.LVL97:
 734 01ec 003093E5 		ldr	r3, [r3, #0]
 735 01f0 B442C3E1 		strh	r4, [r3, #36]	@ movhi
 166:fb/fb_bw8.c   **** 	framebuffer->cursor_y = y;
 736              		.loc 2 166 0
 737 01f4 B692C3E1 		strh	r9, [r3, #38]	@ movhi
 167:fb/fb_bw8.c   **** }
 738              		.loc 2 167 0
 739 01f8 FE8FBDE8 		ldmfd	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 740              	.L51:
 741              		.align	2
 742              	.L50:
 743 01fc 00000000 		.word	framebuffer
 744 0200 00000000 		.word	fb_bw8
 745              		.cfi_endproc
 746              	.LFE20:
 748              		.section	.text.fb_bw8_putstr,"ax",%progbits
 749              		.align	2
 750              		.global	fb_bw8_putstr
 752              	fb_bw8_putstr:
 753              	.LFB21:
 168:fb/fb_bw8.c   **** 
 169:fb/fb_bw8.c   **** /* this is the most ridiculous function ever, because it has to
 170:fb/fb_bw8.c   ****    fiddle with two braindead bitmaps at once, both being
 171:fb/fb_bw8.c   ****    organized differently */
 172:fb/fb_bw8.c   **** 
 173:fb/fb_bw8.c   **** /* draw text at current position, with current font and colours up
 174:fb/fb_bw8.c   ****    to a width of maxwidth pixels, return pixelwidth consumed */
 175:fb/fb_bw8.c   **** 
 176:fb/fb_bw8.c   **** int
 177:fb/fb_bw8.c   **** fb_bw8_putstr(char *str,int maxwidth){
 754              		.loc 2 177 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 48
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              	.LVL98:
 178:fb/fb_bw8.c   **** 	const struct fb_font *font = fb_fonts[framebuffer->font];
 759              		.loc 2 178 0
 760 0000 6C339FE5 		ldr	r3, .L74
 177:fb/fb_bw8.c   **** fb_bw8_putstr(char *str,int maxwidth){
 761              		.loc 2 177 0
 762 0004 F04F2DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 763              	.LCFI3:
 764              		.cfi_def_cfa_offset 36
 765              		.loc 2 178 0
 766 0008 003093E5 		ldr	r3, [r3, #0]
 767 000c 302093E5 		ldr	r2, [r3, #48]
 768 0010 60339FE5 		ldr	r3, .L74+4
 179:fb/fb_bw8.c   **** 	const struct fb_char *fchr;
 180:fb/fb_bw8.c   **** 
 181:fb/fb_bw8.c   **** 	int x1,y1,x2,y2; 		// will become bounding box
 182:fb/fb_bw8.c   **** 	int w;				// 0..7 while building bits per byte
 183:fb/fb_bw8.c   **** 	int y;				// coordinates in display
 184:fb/fb_bw8.c   **** 	int char_x,char_y;		// coordinates in font character
 185:fb/fb_bw8.c   **** 	int bitmap_x,bitmap_y;		// coordinates in character's bitmap
 186:fb/fb_bw8.c   **** 	int byte_per_line;		// depending on character width in font
 187:fb/fb_bw8.c   **** 	int bitmap_offs,bitmap_bit;	// offset inside bitmap, bit number of pixel
 188:fb/fb_bw8.c   **** 	int fb8_offs;			// offset to current pixel in framebuffer
 189:fb/fb_bw8.c   **** 	uint8_t and_mask,or_mask;	// to draw on framebuffer
 190:fb/fb_bw8.c   **** 	uint8_t *p;			// pointer into framebuffer memorya
 191:fb/fb_bw8.c   **** 	int total_w;			// total width
 192:fb/fb_bw8.c   **** 
 193:fb/fb_bw8.c   **** 	/* center, if maxwidth < 0 */
 194:fb/fb_bw8.c   **** 	if (maxwidth < 0) {
 769              		.loc 2 194 0
 770 0014 000051E3 		cmp	r1, #0
 177:fb/fb_bw8.c   **** fb_bw8_putstr(char *str,int maxwidth){
 771              		.loc 2 177 0
 772 0018 30D04DE2 		sub	sp, sp, #48
 773              	.LCFI4:
 774              		.cfi_def_cfa_offset 84
 177:fb/fb_bw8.c   **** fb_bw8_putstr(char *str,int maxwidth){
 775              		.loc 2 177 0
 776 001c 0050A0E1 		mov	r5, r0
 777              		.cfi_offset 14, -4
 778              		.cfi_offset 11, -8
 779              		.cfi_offset 10, -12
 780              		.cfi_offset 9, -16
 781              		.cfi_offset 8, -20
 782              		.cfi_offset 7, -24
 783              		.cfi_offset 6, -28
 784              		.cfi_offset 5, -32
 785              		.cfi_offset 4, -36
 178:fb/fb_bw8.c   **** 	const struct fb_font *font = fb_fonts[framebuffer->font];
 786              		.loc 2 178 0
 787 0020 026193E7 		ldr	r6, [r3, r2, asl #2]
 788              	.LVL99:
 789              		.loc 2 194 0
 790 0024 0070A0B1 		movlt	r7, r0
 791 0028 0040A0B3 		movlt	r4, #0
 792 002c 120000AA 		bge	.L53
 793 0030 070000EA 		b	.L54
 794              	.LVL100:
 795              	.L56:
 195:fb/fb_bw8.c   **** 		total_w = 0;
 196:fb/fb_bw8.c   **** 		/* count width of string */
 197:fb/fb_bw8.c   **** 		for(p=(uint8_t *)str;*p;p++){
 198:fb/fb_bw8.c   **** 			fchr = fb_font_get_char(font,*p);
 796              		.loc 2 198 0
 797 0034 0600A0E1 		mov	r0, r6
 798 0038 FEFFFFEB 		bl	fb_font_get_char
 799              	.LVL101:
 199:fb/fb_bw8.c   **** 			if(!fchr)  /* FIXME: Does '?' exist in every font? */
 800              		.loc 2 199 0
 801 003c 000050E3 		cmp	r0, #0
 200:fb/fb_bw8.c   **** 				fchr = fb_font_get_char(font,'?');
 802              		.loc 2 200 0
 803 0040 0600A001 		moveq	r0, r6
 804              	.LVL102:
 805 0044 3F10A003 		moveq	r1, #63
 806 0048 FEFFFF0B 		bleq	fb_font_get_char
 807              	.LVL103:
 808              	.L55:
 201:fb/fb_bw8.c   **** 			total_w += fchr->width;
 809              		.loc 2 201 0
 810 004c D030D0E1 		ldrsb	r3, [r0, #0]
 811 0050 034084E0 		add	r4, r4, r3
 812              	.LVL104:
 813              	.L54:
 197:fb/fb_bw8.c   **** 		for(p=(uint8_t *)str;*p;p++){
 814              		.loc 2 197 0 discriminator 1
 815 0054 0110D7E4 		ldrb	r1, [r7], #1	@ zero_extendqisi2
 816 0058 000051E3 		cmp	r1, #0
 817 005c F4FFFF1A 		bne	.L56
 202:fb/fb_bw8.c   **** 
 203:fb/fb_bw8.c   **** 		} // str
 204:fb/fb_bw8.c   **** 		if (total_w <= framebuffer->width)
 818              		.loc 2 204 0
 819 0060 0C339FE5 		ldr	r3, .L74
 820 0064 003093E5 		ldr	r3, [r3, #0]
 821 0068 B012D3E1 		ldrh	r1, [r3, #32]
 822 006c 010054E1 		cmp	r4, r1
 205:fb/fb_bw8.c   **** 			framebuffer->cursor_x =
 206:fb/fb_bw8.c   **** 				(framebuffer->width - total_w) >> 1;
 823              		.loc 2 206 0
 824 0070 014064D0 		rsble	r4, r4, r1
 825              	.LVL105:
 826 0074 C440A0D1 		movle	r4, r4, asr #1
 205:fb/fb_bw8.c   **** 			framebuffer->cursor_x =
 827              		.loc 2 205 0
 828 0078 B442C3D1 		strleh	r4, [r3, #36]	@ movhi
 829              	.LVL106:
 830              	.L53:
 207:fb/fb_bw8.c   **** 		maxwidth = framebuffer->width;
 208:fb/fb_bw8.c   **** 	}
 209:fb/fb_bw8.c   **** 
 210:fb/fb_bw8.c   **** 	x1 = framebuffer->cursor_x;	// first col (incl!)
 831              		.loc 2 210 0
 832 007c F0329FE5 		ldr	r3, .L74
 833 0080 003093E5 		ldr	r3, [r3, #0]
 834 0084 B402D3E1 		ldrh	r0, [r3, #36]
 211:fb/fb_bw8.c   **** 	x2 = x1 + maxwidth - 1;		// last col (incl!)
 835              		.loc 2 211 0
 836 0088 012040E2 		sub	r2, r0, #1
 837 008c 012082E0 		add	r2, r2, r1
 838 0090 00208DE5 		str	r2, [sp, #0]
 212:fb/fb_bw8.c   **** 	if(x2 >= framebuffer->width)
 839              		.loc 2 212 0
 840 0094 00109DE5 		ldr	r1, [sp, #0]
 841              	.LVL107:
 842 0098 B022D3E1 		ldrh	r2, [r3, #32]
 843 009c 020051E1 		cmp	r1, r2
 213:fb/fb_bw8.c   **** 		x2 = framebuffer->width - 1;
 844              		.loc 2 213 0
 845 00a0 012042A2 		subge	r2, r2, #1
 846 00a4 00208DA5 		strge	r2, [sp, #0]
 214:fb/fb_bw8.c   **** 
 215:fb/fb_bw8.c   **** 	y1 = framebuffer->cursor_y - font->ascent + 1; // first row
 847              		.loc 2 215 0
 848 00a8 B622D3E1 		ldrh	r2, [r3, #38]
 849 00ac D110D6E1 		ldrsb	r1, [r6, #1]
 216:fb/fb_bw8.c   **** 	y2 = y1 + font->height - 1;	// last row
 850              		.loc 2 216 0
 851 00b0 D0B0D6E1 		ldrsb	fp, [r6, #0]
 215:fb/fb_bw8.c   **** 	y1 = framebuffer->cursor_y - font->ascent + 1; // first row
 852              		.loc 2 215 0
 853 00b4 012082E2 		add	r2, r2, #1
 217:fb/fb_bw8.c   **** 
 218:fb/fb_bw8.c   **** #if 0
 219:fb/fb_bw8.c   **** 	printf("%s: %d %d %d %d\n",__FUNCTION__,x1,y1,x2,y2);
 220:fb/fb_bw8.c   **** #endif
 221:fb/fb_bw8.c   **** 
 222:fb/fb_bw8.c   **** 	if(y1 < 0)			// sanitize in case of overflow
 223:fb/fb_bw8.c   **** 		y1 = 0;
 224:fb/fb_bw8.c   **** 	if(y2 >= framebuffer->height)
 854              		.loc 2 224 0
 855 00b8 B232D3E1 		ldrh	r3, [r3, #34]
 215:fb/fb_bw8.c   **** 	y1 = framebuffer->cursor_y - font->ascent + 1; // first row
 856              		.loc 2 215 0
 857 00bc 022061E0 		rsb	r2, r1, r2
 216:fb/fb_bw8.c   **** 	y2 = y1 + font->height - 1;	// last row
 858              		.loc 2 216 0
 859 00c0 01B04BE2 		sub	fp, fp, #1
 860 00c4 02B08BE0 		add	fp, fp, r2
 861 00c8 C22FC2E1 		bic	r2, r2, r2, asr #31
 862 00cc 04208DE5 		str	r2, [sp, #4]
 863              		.loc 2 224 0
 864 00d0 03005BE1 		cmp	fp, r3
 225:fb/fb_bw8.c   **** 		y2 = framebuffer->height - 1;
 865              		.loc 2 225 0
 866 00d4 01B043A2 		subge	fp, r3, #1
 226:fb/fb_bw8.c   **** 
 227:fb/fb_bw8.c   **** 	fb8_offs = x1 + (y1 & 0xfff8)/8;
 228:fb/fb_bw8.c   **** 
 229:fb/fb_bw8.c   **** 	/* iterate over all characters */
 230:fb/fb_bw8.c   **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 231:fb/fb_bw8.c   **** 		fchr = fb_font_get_char(font,*str);
 232:fb/fb_bw8.c   **** 		if(!fchr)  /* FIXME: Does '?' exist in every font? */
 233:fb/fb_bw8.c   **** 			fchr = fb_font_get_char(font,'?');
 234:fb/fb_bw8.c   **** 
 235:fb/fb_bw8.c   **** 		byte_per_line = (fchr->bbox_w+7)/8;;
 236:fb/fb_bw8.c   **** 
 237:fb/fb_bw8.c   **** 		/* character pixels, left to right */
 238:fb/fb_bw8.c   **** 		for(char_x=0;
 239:fb/fb_bw8.c   **** 		    char_x<fchr->width && char_x + framebuffer->cursor_x <= x2;
 240:fb/fb_bw8.c   **** 		    char_x++
 241:fb/fb_bw8.c   **** 		){
 242:fb/fb_bw8.c   **** 			/* character pixels, top to bottom, in stripes
 243:fb/fb_bw8.c   **** 			   of 8 to match LCD RAM organisation */
 244:fb/fb_bw8.c   **** 			for(y=y1&0xfff8;y<=y2;y+=8){ // display lines
 867              		.loc 2 244 0
 868 00d8 9C229FE5 		ldr	r2, .L74+8
 869 00dc 04309DE5 		ldr	r3, [sp, #4]
 870 00e0 022003E0 		and	r2, r3, r2
 210:fb/fb_bw8.c   **** 	x1 = framebuffer->cursor_x;	// first col (incl!)
 871              		.loc 2 210 0
 872 00e4 08008DE5 		str	r0, [sp, #8]
 873              	.LVL108:
 225:fb/fb_bw8.c   **** 		y2 = framebuffer->height - 1;
 874              		.loc 2 225 0
 875 00e8 18508DE5 		str	r5, [sp, #24]
 230:fb/fb_bw8.c   **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 876              		.loc 2 230 0
 877 00ec 80A29FE5 		ldr	sl, .L74
 878              		.loc 2 244 0
 879 00f0 0C208DE5 		str	r2, [sp, #12]
 880 00f4 0690A0E1 		mov	r9, r6
 230:fb/fb_bw8.c   **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 881              		.loc 2 230 0
 882 00f8 840000EA 		b	.L60
 883              	.LVL109:
 884              	.L73:
 231:fb/fb_bw8.c   **** 		fchr = fb_font_get_char(font,*str);
 885              		.loc 2 231 0
 886 00fc 0900A0E1 		mov	r0, r9
 887 0100 FEFFFFEB 		bl	fb_font_get_char
 888              	.LVL110:
 232:fb/fb_bw8.c   **** 		if(!fchr)  /* FIXME: Does '?' exist in every font? */
 889              		.loc 2 232 0
 890 0104 004050E2 		subs	r4, r0, #0
 891 0108 0300001A 		bne	.L61
 233:fb/fb_bw8.c   **** 			fchr = fb_font_get_char(font,'?');
 892              		.loc 2 233 0
 893 010c 0900A0E1 		mov	r0, r9
 894              	.LVL111:
 895 0110 3F10A0E3 		mov	r1, #63
 896 0114 FEFFFFEB 		bl	fb_font_get_char
 897 0118 0040A0E1 		mov	r4, r0
 898              	.LVL112:
 899              	.L61:
 235:fb/fb_bw8.c   **** 		byte_per_line = (fchr->bbox_w+7)/8;;
 900              		.loc 2 235 0
 901 011c D130D4E1 		ldrsb	r3, [r4, #1]
 902 0120 072093E2 		adds	r2, r3, #7
 903 0124 0E308342 		addmi	r3, r3, #14
 904 0128 0230A051 		movpl	r3, r2
 905 012c C331A0E1 		mov	r3, r3, asr #3
 906 0130 10308DE5 		str	r3, [sp, #16]
 907              	.LVL113:
 238:fb/fb_bw8.c   **** 		for(char_x=0;
 908              		.loc 2 238 0
 909 0134 0050A0E3 		mov	r5, #0
 910 0138 20908DE5 		str	r9, [sp, #32]
 911 013c 650000EA 		b	.L62
 912              	.LVL114:
 913              	.L71:
 914              		.loc 2 244 0
 915 0140 0C609DE5 		ldr	r6, [sp, #12]
 916              	.LVL115:
 917 0144 600000EA 		b	.L63
 918              	.LVL116:
 919              	.L69:
 245:fb/fb_bw8.c   **** 				/* bitmap coordinates, X= left to right */
 246:fb/fb_bw8.c   **** 				bitmap_x = char_x - fchr->bbox_x;
 247:fb/fb_bw8.c   **** 				/* character coords. Y increases from
 248:fb/fb_bw8.c   **** 				   cursor upwards */
 249:fb/fb_bw8.c   **** 				char_y = framebuffer->cursor_y-y;
 920              		.loc 2 249 0
 921 0148 00209AE5 		ldr	r2, [sl, #0]
 250:fb/fb_bw8.c   **** 				/* bitmap index = height-(bitmap coords)-1 */
 251:fb/fb_bw8.c   **** 				bitmap_y = fchr->bbox_h -
 252:fb/fb_bw8.c   **** 					(char_y - fchr->bbox_y) - 1;
 922              		.loc 2 252 0
 923 014c D410D4E1 		ldrsb	r1, [r4, #4]
 251:fb/fb_bw8.c   **** 				bitmap_y = fchr->bbox_h -
 924              		.loc 2 251 0
 925 0150 D280D4E1 		ldrsb	r8, [r4, #2]
 926              		.loc 2 252 0
 927 0154 018088E0 		add	r8, r8, r1
 249:fb/fb_bw8.c   **** 				char_y = framebuffer->cursor_y-y;
 928              		.loc 2 249 0
 929 0158 B612D2E1 		ldrh	r1, [r2, #38]
 251:fb/fb_bw8.c   **** 				bitmap_y = fchr->bbox_h -
 930              		.loc 2 251 0
 931 015c 018048E2 		sub	r8, r8, #1
 249:fb/fb_bw8.c   **** 				char_y = framebuffer->cursor_y-y;
 932              		.loc 2 249 0
 933 0160 011066E0 		rsb	r1, r6, r1
 251:fb/fb_bw8.c   **** 				bitmap_y = fchr->bbox_h -
 934              		.loc 2 251 0
 935 0164 088061E0 		rsb	r8, r1, r8
 246:fb/fb_bw8.c   **** 				bitmap_x = char_x - fchr->bbox_x;
 936              		.loc 2 246 0
 937 0168 D330D4E1 		ldrsb	r3, [r4, #3]
 253:fb/fb_bw8.c   **** 
 254:fb/fb_bw8.c   **** 				fb8_offs = framebuffer->cursor_x + 
 938              		.loc 2 254 0
 939 016c B412D2E1 		ldrh	r1, [r2, #36]
 255:fb/fb_bw8.c   **** 					char_x + (y/8)*framebuffer->width;
 940              		.loc 2 255 0
 941 0170 B022D2E1 		ldrh	r2, [r2, #32]
 246:fb/fb_bw8.c   **** 				bitmap_x = char_x - fchr->bbox_x;
 942              		.loc 2 246 0
 943 0174 053063E0 		rsb	r3, r3, r5
 944              	.LVL117:
 254:fb/fb_bw8.c   **** 				fb8_offs = framebuffer->cursor_x + 
 945              		.loc 2 254 0
 946 0178 011085E0 		add	r1, r5, r1
 947              		.loc 2 255 0
 948 017c C601A0E1 		mov	r0, r6, asr #3
 254:fb/fb_bw8.c   **** 				fb8_offs = framebuffer->cursor_x + 
 949              		.loc 2 254 0
 950 0180 92102CE0 		mla	ip, r2, r0, r1
 256:fb/fb_bw8.c   **** 
 257:fb/fb_bw8.c   **** 				and_mask = 0xff;
 951              		.loc 2 257 0
 952 0184 0020E0E3 		mvn	r2, #0
 258:fb/fb_bw8.c   **** 				or_mask = 0x00;
 259:fb/fb_bw8.c   **** 
 260:fb/fb_bw8.c   **** 				/* top to bottom inside of a 8bit column */
 261:fb/fb_bw8.c   **** 				for(w=0;w<8;w++,bitmap_y++){
 262:fb/fb_bw8.c   **** 					/* inside drawing area? */
 263:fb/fb_bw8.c   **** 					if(y+w < y1 || y+w > y2)
 264:fb/fb_bw8.c   **** 						continue;
 265:fb/fb_bw8.c   **** 
 266:fb/fb_bw8.c   **** 					/* outside pixel data of this
 267:fb/fb_bw8.c   **** 					   character? */
 268:fb/fb_bw8.c   **** 					if(bitmap_x < 0 ||
 269:fb/fb_bw8.c   **** 					   bitmap_x >= fchr->bbox_w ||
 270:fb/fb_bw8.c   **** 					   bitmap_y < 0 ||
 271:fb/fb_bw8.c   **** 					   bitmap_y >= fchr->bbox_h
 272:fb/fb_bw8.c   **** 					)
 273:fb/fb_bw8.c   **** 						goto outside_char_bitmap;
 274:fb/fb_bw8.c   **** 
 275:fb/fb_bw8.c   **** 					/* check bit in pixel data for
 276:fb/fb_bw8.c   **** 					   this character */
 277:fb/fb_bw8.c   **** 					bitmap_offs = bitmap_x/8+
 278:fb/fb_bw8.c   **** 						bitmap_y*byte_per_line;
 279:fb/fb_bw8.c   **** 					bitmap_bit = 7-(bitmap_x%8);
 953              		.loc 2 279 0
 954 0188 071003E2 		and	r1, r3, #7
 257:fb/fb_bw8.c   **** 				and_mask = 0xff;
 955              		.loc 2 257 0
 956 018c 2F20CDE5 		strb	r2, [sp, #47]
 957              	.LVL118:
 958              		.loc 2 279 0
 959 0190 071061E2 		rsb	r1, r1, #7
 258:fb/fb_bw8.c   **** 				or_mask = 0x00;
 960              		.loc 2 258 0
 961 0194 022082E2 		add	r2, r2, #2
 962 0198 1211A0E1 		mov	r1, r2, asl r1
 963 019c 1C108DE5 		str	r1, [sp, #28]
 280:fb/fb_bw8.c   **** 
 281:fb/fb_bw8.c   **** 					/* bit is set  */
 282:fb/fb_bw8.c   **** 					if(fchr->data[bitmap_offs] &
 964              		.loc 2 282 0
 965 01a0 10109DE5 		ldr	r1, [sp, #16]
 254:fb/fb_bw8.c   **** 				fb8_offs = framebuffer->cursor_x + 
 966              		.loc 2 254 0
 967 01a4 14C08DE5 		str	ip, [sp, #20]
 968              	.LVL119:
 277:fb/fb_bw8.c   **** 					bitmap_offs = bitmap_x/8+
 969              		.loc 2 277 0
 970 01a8 C3C1A0E1 		mov	ip, r3, asr #3
 971              	.LVL120:
 972              		.loc 2 282 0
 973 01ac 91C82CE0 		mla	ip, r1, r8, ip
 258:fb/fb_bw8.c   **** 				or_mask = 0x00;
 974              		.loc 2 258 0
 975 01b0 0000A0E3 		mov	r0, #0
 177:fb/fb_bw8.c   **** fb_bw8_putstr(char *str,int maxwidth){
 976              		.loc 2 177 0
 977 01b4 0CC084E0 		add	ip, r4, ip
 978 01b8 05C08CE2 		add	ip, ip, #5
 258:fb/fb_bw8.c   **** 				or_mask = 0x00;
 979              		.loc 2 258 0
 980 01bc 2E00CDE5 		strb	r0, [sp, #46]
 981              	.LVL121:
 982 01c0 0690A0E1 		mov	r9, r6
 983              	.LBB77:
 984              	.LBB79:
 985              	.LBB81:
 986              	.LBB83:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 987              		.loc 2 112 0
 988 01c4 24608DE5 		str	r6, [sp, #36]
 989 01c8 28508DE5 		str	r5, [sp, #40]
 990              	.LBE83:
 991              	.LBE81:
 992              	.LBE79:
 993              	.LBE77:
 261:fb/fb_bw8.c   **** 				for(w=0;w<8;w++,bitmap_y++){
 994              		.loc 2 261 0
 995 01cc 0070A0E3 		mov	r7, #0
 996              	.LBB87:
 997              	.LBB78:
 998              	.LBB80:
 999              	.LBB82:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 1000              		.loc 2 112 0
 1001 01d0 0360A0E1 		mov	r6, r3
 1002              	.LVL122:
 1003 01d4 0C50A0E1 		mov	r5, ip
 1004              	.LVL123:
 1005              	.L68:
 1006              	.LBE82:
 1007              	.LBE80:
 1008              	.LBE78:
 1009              	.LBE87:
 263:fb/fb_bw8.c   **** 					if(y+w < y1 || y+w > y2)
 1010              		.loc 2 263 0
 1011 01d8 04209DE5 		ldr	r2, [sp, #4]
 1012 01dc 020059E1 		cmp	r9, r2
 1013 01e0 240000BA 		blt	.L64
 263:fb/fb_bw8.c   **** 					if(y+w < y1 || y+w > y2)
 1014              		.loc 2 263 0 is_stmt 0 discriminator 1
 1015 01e4 0B0059E1 		cmp	r9, fp
 1016 01e8 220000CA 		bgt	.L64
 268:fb/fb_bw8.c   **** 					if(bitmap_x < 0 ||
 1017              		.loc 2 268 0 is_stmt 1
 1018 01ec 000056E3 		cmp	r6, #0
 1019 01f0 110000BA 		blt	.L65
 269:fb/fb_bw8.c   **** 					   bitmap_x >= fchr->bbox_w ||
 1020              		.loc 2 269 0
 1021 01f4 D120D4E1 		ldrsb	r2, [r4, #1]
 1022 01f8 020056E1 		cmp	r6, r2
 1023 01fc 0020A0B3 		movlt	r2, #0
 1024 0200 0120A0A3 		movge	r2, #1
 1025 0204 A82F92E1 		orrs	r2, r2, r8, lsr #31
 1026 0208 0B00001A 		bne	.L65
 271:fb/fb_bw8.c   **** 					   bitmap_y >= fchr->bbox_h
 1027              		.loc 2 271 0
 1028 020c D220D4E1 		ldrsb	r2, [r4, #2]
 270:fb/fb_bw8.c   **** 					   bitmap_y < 0 ||
 1029              		.loc 2 270 0
 1030 0210 020058E1 		cmp	r8, r2
 1031 0214 080000AA 		bge	.L65
 1032              	.LVL124:
 1033              		.loc 2 282 0
 1034 0218 0020D5E5 		ldrb	r2, [r5, #0]	@ zero_extendqisi2
 1035 021c 1C309DE5 		ldr	r3, [sp, #28]
 1036 0220 020013E1 		tst	r3, r2
 1037 0224 0400000A 		beq	.L65
 283:fb/fb_bw8.c   **** 					   (1<<bitmap_bit)){
 284:fb/fb_bw8.c   **** 						set_fg_pixel(&and_mask,
 1038              		.loc 2 284 0
 1039 0228 2F008DE2 		add	r0, sp, #47
 1040 022c 2E108DE2 		add	r1, sp, #46
 1041 0230 0720A0E1 		mov	r2, r7
 1042 0234 FEFFFFEB 		bl	set_fg_pixel
 1043 0238 0E0000EA 		b	.L64
 1044              	.LVL125:
 1045              	.L65:
 1046              	.LBB88:
 1047              	.LBB86:
 120:fb/fb_bw8.c   **** 	set_pixel(and_mask,or_mask,bitnum,framebuffer->bg_color);
 1048              		.loc 2 120 0
 1049 023c 00209AE5 		ldr	r2, [sl, #0]
 1050 0240 2C2092E5 		ldr	r2, [r2, #44]
 1051              	.LVL126:
 1052              	.LBB85:
 1053              	.LBB84:
 107:fb/fb_bw8.c   **** 	if(color == FB_COLOR_TRANSP)
 1054              		.loc 2 107 0
 1055 0244 FEC4E0E3 		mvn	ip, #-33554432
 1056 0248 0C0052E1 		cmp	r2, ip
 1057 024c 0900000A 		beq	.L64
 109:fb/fb_bw8.c   **** 	if(color == FB_COLOR_WHITE)
 1058              		.loc 2 109 0
 1059 0250 FF04E0E3 		mvn	r0, #-16777216
 1060 0254 000052E1 		cmp	r2, r0
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 1061              		.loc 2 110 0
 1062 0258 2F20DD05 		ldreqb	r2, [sp, #47]	@ zero_extendqisi2
 1063              	.LVL127:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 1064              		.loc 2 112 0
 1065 025c 2E20DD15 		ldrneb	r2, [sp, #46]	@ zero_extendqisi2
 1066              	.LVL128:
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 1067              		.loc 2 110 0
 1068 0260 0110A003 		moveq	r1, #1
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 1069              		.loc 2 112 0
 1070 0264 0130A013 		movne	r3, #1
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 1071              		.loc 2 110 0
 1072 0268 1127C201 		biceq	r2, r2, r1, asl r7
 1073              	.LVL129:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 1074              		.loc 2 112 0
 1075 026c 13278211 		orrne	r2, r2, r3, asl r7
 1076              	.LVL130:
 110:fb/fb_bw8.c   **** 		*and_mask &= ~(1<<bitnum);
 1077              		.loc 2 110 0
 1078 0270 2F20CD05 		streqb	r2, [sp, #47]
 1079              	.LVL131:
 112:fb/fb_bw8.c   **** 		*or_mask  |=   1<<bitnum;
 1080              		.loc 2 112 0
 1081 0274 2E20CD15 		strneb	r2, [sp, #46]
 1082              	.LVL132:
 1083              	.L64:
 1084              	.LBE84:
 1085              	.LBE85:
 1086              	.LBE86:
 1087              	.LBE88:
 261:fb/fb_bw8.c   **** 				for(w=0;w<8;w++,bitmap_y++){
 1088              		.loc 2 261 0
 1089 0278 017087E2 		add	r7, r7, #1
 1090              	.LVL133:
 1091 027c 10C09DE5 		ldr	ip, [sp, #16]
 1092 0280 080057E3 		cmp	r7, #8
 1093 0284 019089E2 		add	r9, r9, #1
 1094 0288 0C5085E0 		add	r5, r5, ip
 1095 028c 01808812 		addne	r8, r8, #1
 1096              	.LVL134:
 1097 0290 D0FFFF1A 		bne	.L68
 1098              	.LVL135:
 1099              	.L67:
 285:fb/fb_bw8.c   **** 							     &or_mask,w);
 286:fb/fb_bw8.c   **** 					} else { // unset, or outside bitmap
 287:fb/fb_bw8.c   **** outside_char_bitmap:
 288:fb/fb_bw8.c   **** 						set_bg_pixel(&and_mask,
 289:fb/fb_bw8.c   **** 							     &or_mask,w);
 290:fb/fb_bw8.c   **** 					}
 291:fb/fb_bw8.c   **** 				} // for(w...)
 292:fb/fb_bw8.c   **** 				/* adjust byte in framebuffer */
 293:fb/fb_bw8.c   **** 				p = fb_bw8->mem + fb8_offs;
 1100              		.loc 2 293 0
 1101 0294 E4009FE5 		ldr	r0, .L74+12
 1102 0298 003090E5 		ldr	r3, [r0, #0]
 294:fb/fb_bw8.c   **** 				*p = ( *p & and_mask ) | or_mask;
 1103              		.loc 2 294 0
 1104 029c 14209DE5 		ldr	r2, [sp, #20]
 293:fb/fb_bw8.c   **** 				p = fb_bw8->mem + fb8_offs;
 1105              		.loc 2 293 0
 1106 02a0 003093E5 		ldr	r3, [r3, #0]
 1107              		.loc 2 294 0
 1108 02a4 0210D3E7 		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 1109 02a8 2F20DDE5 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1110              	.LVL136:
 1111 02ac 021001E0 		and	r1, r1, r2
 1112              	.LVL137:
 1113 02b0 2E20DDE5 		ldrb	r2, [sp, #46]	@ zero_extendqisi2
 1114              	.LVL138:
 1115 02b4 14C09DE5 		ldr	ip, [sp, #20]
 1116 02b8 24609DE5 		ldr	r6, [sp, #36]
 1117              	.LVL139:
 1118 02bc 022081E1 		orr	r2, r1, r2
 1119              	.LVL140:
 1120 02c0 28509DE5 		ldr	r5, [sp, #40]
 1121 02c4 0C20C3E7 		strb	r2, [r3, ip]
 244:fb/fb_bw8.c   **** 			for(y=y1&0xfff8;y<=y2;y+=8){ // display lines
 1122              		.loc 2 244 0
 1123 02c8 086086E2 		add	r6, r6, #8
 1124              	.LVL141:
 1125              	.L63:
 244:fb/fb_bw8.c   **** 			for(y=y1&0xfff8;y<=y2;y+=8){ // display lines
 1126              		.loc 2 244 0 is_stmt 0 discriminator 1
 1127 02cc 0B0056E1 		cmp	r6, fp
 1128 02d0 9CFFFFDA 		ble	.L69
 240:fb/fb_bw8.c   **** 		    char_x++
 1129              		.loc 2 240 0 is_stmt 1
 1130 02d4 015085E2 		add	r5, r5, #1
 1131              	.LVL142:
 1132              	.L62:
 239:fb/fb_bw8.c   **** 		    char_x<fchr->width && char_x + framebuffer->cursor_x <= x2;
 1133              		.loc 2 239 0 discriminator 1
 1134 02d8 D030D4E1 		ldrsb	r3, [r4, #0]
 238:fb/fb_bw8.c   **** 		for(char_x=0;
 1135              		.loc 2 238 0 discriminator 1
 1136 02dc 030055E1 		cmp	r5, r3
 1137 02e0 050000AA 		bge	.L70
 239:fb/fb_bw8.c   **** 		    char_x<fchr->width && char_x + framebuffer->cursor_x <= x2;
 1138              		.loc 2 239 0
 1139 02e4 00309AE5 		ldr	r3, [sl, #0]
 1140 02e8 B432D3E1 		ldrh	r3, [r3, #36]
 1141 02ec 00009DE5 		ldr	r0, [sp, #0]
 1142 02f0 033085E0 		add	r3, r5, r3
 1143 02f4 000053E1 		cmp	r3, r0
 1144 02f8 90FFFFDA 		ble	.L71
 1145              	.L70:
 295:fb/fb_bw8.c   **** 			} // for(y...)
 296:fb/fb_bw8.c   **** 		} // for(char_x...)
 297:fb/fb_bw8.c   **** 		framebuffer->cursor_x += char_x;
 1146              		.loc 2 297 0
 1147 02fc 00309AE5 		ldr	r3, [sl, #0]
 1148 0300 B422D3E1 		ldrh	r2, [r3, #36]
 1149 0304 025085E0 		add	r5, r5, r2
 1150              	.LVL143:
 1151 0308 20909DE5 		ldr	r9, [sp, #32]
 1152 030c B452C3E1 		strh	r5, [r3, #36]	@ movhi
 1153              	.LVL144:
 1154              	.L60:
 230:fb/fb_bw8.c   **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 1155              		.loc 2 230 0 discriminator 1
 1156 0310 18209DE5 		ldr	r2, [sp, #24]
 1157 0314 0110D2E4 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 1158 0318 000051E3 		cmp	r1, #0
 1159 031c 18208DE5 		str	r2, [sp, #24]
 1160 0320 0400000A 		beq	.L72
 230:fb/fb_bw8.c   **** 	for(;*str && framebuffer->cursor_x <= x2;str++){
 1161              		.loc 2 230 0 is_stmt 0 discriminator 2
 1162 0324 00309AE5 		ldr	r3, [sl, #0]
 1163 0328 00C09DE5 		ldr	ip, [sp, #0]
 1164 032c B432D3E1 		ldrh	r3, [r3, #36]
 1165 0330 0C0053E1 		cmp	r3, ip
 1166 0334 70FFFFDA 		ble	.L73
 1167              	.L72:
 298:fb/fb_bw8.c   **** 	} // str
 299:fb/fb_bw8.c   **** 
 300:fb/fb_bw8.c   **** 	x2 = framebuffer->cursor_x;
 1168              		.loc 2 300 0 is_stmt 1
 1169 0338 34309FE5 		ldr	r3, .L74
 1170 033c 003093E5 		ldr	r3, [r3, #0]
 301:fb/fb_bw8.c   **** 	fb_bw8_update_damage(x1,y1,x2,y2);
 1171              		.loc 2 301 0
 1172 0340 04009DE5 		ldr	r0, [sp, #4]
 300:fb/fb_bw8.c   **** 	x2 = framebuffer->cursor_x;
 1173              		.loc 2 300 0
 1174 0344 B442D3E1 		ldrh	r4, [r3, #36]
 1175              	.LVL145:
 1176              		.loc 2 301 0
 1177 0348 0018A0E1 		mov	r1, r0, asl #16
 1178 034c 0B38A0E1 		mov	r3, fp, asl #16
 1179 0350 08009DE5 		ldr	r0, [sp, #8]
 1180 0354 2118A0E1 		mov	r1, r1, lsr #16
 1181 0358 0420A0E1 		mov	r2, r4
 1182 035c 2338A0E1 		mov	r3, r3, lsr #16
 1183 0360 FEFFFFEB 		bl	fb_bw8_update_damage
 302:fb/fb_bw8.c   **** 	return x2-x1;
 303:fb/fb_bw8.c   **** }
 1184              		.loc 2 303 0
 1185 0364 08109DE5 		ldr	r1, [sp, #8]
 1186 0368 040061E0 		rsb	r0, r1, r4
 1187 036c 30D08DE2 		add	sp, sp, #48
 1188 0370 F08FBDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1189              	.L75:
 1190              		.align	2
 1191              	.L74:
 1192 0374 00000000 		.word	framebuffer
 1193 0378 00000000 		.word	fb_fonts
 1194 037c F8FF0000 		.word	65528
 1195 0380 00000000 		.word	fb_bw8
 1196              		.cfi_endproc
 1197              	.LFE21:
 1199              		.section	.text.fb_bw8_putchar,"ax",%progbits
 1200              		.align	2
 1201              		.global	fb_bw8_putchar
 1203              	fb_bw8_putchar:
 1204              	.LFB22:
 304:fb/fb_bw8.c   **** 
 305:fb/fb_bw8.c   **** int
 306:fb/fb_bw8.c   **** fb_bw8_putchar(char c,int maxwidth){
 1205              		.loc 2 306 0
 1206              		.cfi_startproc
 1207              		@ args = 0, pretend = 0, frame = 4
 1208              		@ frame_needed = 0, uses_anonymous_args = 0
 1209              	.LVL146:
 1210 0000 01402DE9 		stmfd	sp!, {r0, lr}
 1211              	.LCFI5:
 1212              		.cfi_def_cfa_offset 8
 1213              		.loc 2 306 0
 1214 0004 FF0000E2 		and	r0, r0, #255
 1215              		.cfi_offset 14, -4
 1216              		.cfi_offset 0, -8
 1217              	.LVL147:
 307:fb/fb_bw8.c   **** 	char tmp[2];
 308:fb/fb_bw8.c   **** 	tmp[0]=c;
 1218              		.loc 2 308 0
 1219 0008 0000CDE5 		strb	r0, [sp, #0]
 309:fb/fb_bw8.c   **** 	tmp[1]=c;
 1220              		.loc 2 309 0
 1221 000c 0100CDE5 		strb	r0, [sp, #1]
 310:fb/fb_bw8.c   **** 	return fb_bw8_putstr(tmp,maxwidth);
 1222              		.loc 2 310 0
 1223 0010 0D00A0E1 		mov	r0, sp
 1224 0014 FEFFFFEB 		bl	fb_bw8_putstr
 1225              	.LVL148:
 311:fb/fb_bw8.c   **** }
 1226              		.loc 2 311 0
 1227 0018 0880BDE8 		ldmfd	sp!, {r3, pc}
 1228              		.cfi_endproc
 1229              	.LFE22:
 1231              		.text
 1232              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_bw8.c
     /tmp/ccSnN2p8.s:12     .text.fb_limit_fb_range:0000000000000000 $a
     /tmp/ccSnN2p8.s:14     .text.fb_limit_fb_range:0000000000000000 fb_limit_fb_range
     /tmp/ccSnN2p8.s:43     .text.fb_limit_fb_range:0000000000000034 $d
     /tmp/ccSnN2p8.s:48     .text.fb_bw8_update_damage:0000000000000000 $a
     /tmp/ccSnN2p8.s:50     .text.fb_bw8_update_damage:0000000000000000 fb_bw8_update_damage
     /tmp/ccSnN2p8.s:211    .text.fb_bw8_update_damage:00000000000000ec $d
     /tmp/ccSnN2p8.s:216    .text.set_fg_pixel:0000000000000000 $a
     /tmp/ccSnN2p8.s:218    .text.set_fg_pixel:0000000000000000 set_fg_pixel
     /tmp/ccSnN2p8.s:263    .text.set_fg_pixel:0000000000000044 $d
     /tmp/ccSnN2p8.s:270    .text.fb_bw8_clear:0000000000000000 $a
     /tmp/ccSnN2p8.s:273    .text.fb_bw8_clear:0000000000000000 fb_bw8_clear
     /tmp/ccSnN2p8.s:337    .text.fb_bw8_clear:0000000000000078 $d
     /tmp/ccSnN2p8.s:343    .text.fb_bw8_lineto:0000000000000000 $a
     /tmp/ccSnN2p8.s:346    .text.fb_bw8_lineto:0000000000000000 fb_bw8_lineto
     /tmp/ccSnN2p8.s:419    .text.fb_bw8_lineto:000000000000005c $d
     /tmp/ccSnN2p8.s:424    .text.fb_bw8_boxto:0000000000000000 $a
     /tmp/ccSnN2p8.s:427    .text.fb_bw8_boxto:0000000000000000 fb_bw8_boxto
     /tmp/ccSnN2p8.s:743    .text.fb_bw8_boxto:00000000000001fc $d
     /tmp/ccSnN2p8.s:749    .text.fb_bw8_putstr:0000000000000000 $a
     /tmp/ccSnN2p8.s:752    .text.fb_bw8_putstr:0000000000000000 fb_bw8_putstr
     /tmp/ccSnN2p8.s:1192   .text.fb_bw8_putstr:0000000000000374 $d
     /tmp/ccSnN2p8.s:1200   .text.fb_bw8_putchar:0000000000000000 $a
     /tmp/ccSnN2p8.s:1203   .text.fb_bw8_putchar:0000000000000000 fb_bw8_putchar
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
framebuffer
fb_bw8
fb_font_get_char
fb_fonts
