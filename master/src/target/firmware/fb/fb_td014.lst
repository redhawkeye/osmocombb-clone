   1              		.file	"fb_td014.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.fb_td014_send_cmdlist,"ax",%progbits
  12              		.align	2
  14              	fb_td014_send_cmdlist:
  15              	.LFB13:
  16              		.file 1 "fb/fb_td014.c"
   1:fb/fb_td014.c **** /* Framebuffer implementation - Toppoly TD014 LCD driver for Motorola C139/40 */
   2:fb/fb_td014.c **** /* Based on td014.c by Steve Markgraf and Harald Welte */
   3:fb/fb_td014.c **** 
   4:fb/fb_td014.c **** /* (C) 2010 by Christian Vogel <vogelchr@vogel.cx>
   5:fb/fb_td014.c ****  * (C) 2012 by Steve Markgraf <steve@steve-m.de>
   6:fb/fb_td014.c ****  *
   7:fb/fb_td014.c ****  * All Rights Reserved
   8:fb/fb_td014.c ****  *
   9:fb/fb_td014.c ****  * This program is free software; you can redistribute it and/or modify
  10:fb/fb_td014.c ****  * it under the terms of the GNU General Public License as published by
  11:fb/fb_td014.c ****  * the Free Software Foundation; either version 2 of the License, or
  12:fb/fb_td014.c ****  * (at your option) any later version.
  13:fb/fb_td014.c ****  *
  14:fb/fb_td014.c ****  * This program is distributed in the hope that it will be useful,
  15:fb/fb_td014.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:fb/fb_td014.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:fb/fb_td014.c ****  * GNU General Public License for more details.
  18:fb/fb_td014.c ****  *
  19:fb/fb_td014.c ****  * You should have received a copy of the GNU General Public License along
  20:fb/fb_td014.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  21:fb/fb_td014.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  22:fb/fb_td014.c ****  *
  23:fb/fb_td014.c ****  */
  24:fb/fb_td014.c **** 
  25:fb/fb_td014.c **** #include <fb/framebuffer.h>
  26:fb/fb_td014.c **** #include <fb/fb_rgb332.h>
  27:fb/fb_td014.c **** 
  28:fb/fb_td014.c **** #include <stdint.h>
  29:fb/fb_td014.c **** #include <stdio.h>
  30:fb/fb_td014.c **** #include <delay.h>
  31:fb/fb_td014.c **** #include <uwire.h>
  32:fb/fb_td014.c **** #include <calypso/clock.h>
  33:fb/fb_td014.c **** 
  34:fb/fb_td014.c **** #define TD014_WIDTH		96
  35:fb/fb_td014.c **** #define TD014_HEIGHT		64
  36:fb/fb_td014.c **** #define TD014_UWIRE_BITLEN	9
  37:fb/fb_td014.c **** #define TD014_DEV_ID		0
  38:fb/fb_td014.c **** 
  39:fb/fb_td014.c **** static uint8_t fb_td014_mem[TD014_WIDTH * TD014_HEIGHT];
  40:fb/fb_td014.c **** 
  41:fb/fb_td014.c **** enum td014_cmdflag { CMD, DATA, END };
  42:fb/fb_td014.c **** 
  43:fb/fb_td014.c **** struct td014_cmdlist {
  44:fb/fb_td014.c **** 	enum td014_cmdflag is_cmd:8;	/* 1: is a command, 0: is data, 2: end marker! */
  45:fb/fb_td014.c **** 	uint8_t data;  			/* 8 bit to send to LC display */
  46:fb/fb_td014.c **** } __attribute__((packed));
  47:fb/fb_td014.c **** 
  48:fb/fb_td014.c **** static const struct td014_cmdlist
  49:fb/fb_td014.c **** td014_initdata[] = {
  50:fb/fb_td014.c **** 	{ CMD,  0x3f },
  51:fb/fb_td014.c **** 	{ DATA, 0x01 },
  52:fb/fb_td014.c **** 	{ CMD,  0x20 },
  53:fb/fb_td014.c **** 	{ DATA, 0x03 },
  54:fb/fb_td014.c **** 	{ CMD,  0x31 },
  55:fb/fb_td014.c **** 	{ DATA, 0x03 },
  56:fb/fb_td014.c **** 	{ END,  0x00 }, /* MARKER: end of list */
  57:fb/fb_td014.c **** };
  58:fb/fb_td014.c **** 
  59:fb/fb_td014.c **** static void
  60:fb/fb_td014.c **** fb_td014_send_cmdlist(const struct td014_cmdlist *p) {
  17              		.loc 1 60 0
  18              		.cfi_startproc
  19              		@ args = 0, pretend = 0, frame = 4
  20              		@ frame_needed = 0, uses_anonymous_args = 0
  21              	.LVL0:
  22 0000 31402DE9 		stmfd	sp!, {r0, r4, r5, lr}
  23              	.LCFI0:
  24              		.cfi_def_cfa_offset 16
  25              		.loc 1 60 0
  26 0004 0040A0E1 		mov	r4, r0
  27              		.cfi_offset 14, -4
  28              		.cfi_offset 5, -8
  29              		.cfi_offset 4, -12
  30              		.cfi_offset 0, -16
  31              	.LBB5:
  61:fb/fb_td014.c **** 	int i=0;
  62:fb/fb_td014.c **** 	while(p->is_cmd != END){
  63:fb/fb_td014.c **** 		uint16_t sendcmd = p->data;
  64:fb/fb_td014.c **** 		if(p->is_cmd == DATA)
  65:fb/fb_td014.c **** 			sendcmd |= 0x0100; /* 9th bit is cmd/data flag */
  66:fb/fb_td014.c **** 		uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN, &sendcmd, NULL);
  32              		.loc 1 66 0
  33 0008 02508DE2 		add	r5, sp, #2
  34              	.LBE5:
  62:fb/fb_td014.c **** 	while(p->is_cmd != END){
  35              		.loc 1 62 0
  36 000c 0A0000EA 		b	.L2
  37              	.LVL1:
  38              	.L4:
  39              	.LBB6:
  63:fb/fb_td014.c **** 		uint16_t sendcmd = p->data;
  40              		.loc 1 63 0
  41 0010 0120D4E5 		ldrb	r2, [r4, #1]	@ zero_extendqisi2
  42              	.LVL2:
  64:fb/fb_td014.c **** 		if(p->is_cmd == DATA)
  43              		.loc 1 64 0
  44 0014 010053E3 		cmp	r3, #1
  45              	.LVL3:
  63:fb/fb_td014.c **** 		uint16_t sendcmd = p->data;
  46              		.loc 1 63 0
  47 0018 B220CDE1 		strh	r2, [sp, #2]	@ movhi
  48              		.loc 1 66 0
  49 001c 0000A0E3 		mov	r0, #0
  65:fb/fb_td014.c **** 			sendcmd |= 0x0100; /* 9th bit is cmd/data flag */
  50              		.loc 1 65 0
  51 0020 012C8203 		orreq	r2, r2, #256
  52              	.LVL4:
  53 0024 B220CD01 		streqh	r2, [sp, #2]	@ movhi
  54              	.LVL5:
  55              		.loc 1 66 0
  56 0028 0910A0E3 		mov	r1, #9
  57 002c 0520A0E1 		mov	r2, r5
  58 0030 0030A0E1 		mov	r3, r0
  59 0034 FEFFFFEB 		bl	uwire_xfer
  67:fb/fb_td014.c **** 		p++;
  60              		.loc 1 67 0
  61 0038 024084E2 		add	r4, r4, #2
  62              	.LVL6:
  63              	.L2:
  64              	.LBE6:
  62:fb/fb_td014.c **** 	while(p->is_cmd != END){
  65              		.loc 1 62 0 discriminator 1
  66 003c 0030D4E5 		ldrb	r3, [r4, #0]	@ zero_extendqisi2
  67 0040 020053E3 		cmp	r3, #2
  68 0044 F1FFFF1A 		bne	.L4
  68:fb/fb_td014.c **** 		i++;
  69:fb/fb_td014.c **** 	}
  70:fb/fb_td014.c **** }
  69              		.loc 1 70 0
  70 0048 3880BDE8 		ldmfd	sp!, {r3, r4, r5, pc}
  71              		.cfi_endproc
  72              	.LFE13:
  74              		.section	.text.fb_td014_flush,"ax",%progbits
  75              		.align	2
  77              	fb_td014_flush:
  78              	.LFB15:
  71:fb/fb_td014.c **** 
  72:fb/fb_td014.c **** static void
  73:fb/fb_td014.c **** fb_td014_init(void) {
  74:fb/fb_td014.c **** 	printf("%s: initializing LCD.\n",__FUNCTION__);
  75:fb/fb_td014.c **** 	calypso_reset_set(RESET_EXT, 0);
  76:fb/fb_td014.c **** 	delay_ms(5);
  77:fb/fb_td014.c **** 	uwire_init();
  78:fb/fb_td014.c **** 	delay_ms(5);
  79:fb/fb_td014.c **** 
  80:fb/fb_td014.c **** 	fb_td014_send_cmdlist(td014_initdata);
  81:fb/fb_td014.c **** }
  82:fb/fb_td014.c **** 
  83:fb/fb_td014.c **** static void
  84:fb/fb_td014.c **** fb_td014_flush(void) {
  79              		.loc 1 84 0
  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 28
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0000 F0452DE9 		stmfd	sp!, {r4, r5, r6, r7, r8, sl, lr}
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 28
  85:fb/fb_td014.c **** 	int x,y;
  86:fb/fb_td014.c **** 	uint8_t *p;
  87:fb/fb_td014.c **** 	struct td014_cmdlist prepare_disp_write_cmds[] = {
  88:fb/fb_td014.c **** 		{ CMD,  0x10 },
  89:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_x1 },
  90:fb/fb_td014.c **** 		{ CMD,  0x11 },
  91:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_y1 },
  92:fb/fb_td014.c **** 		{ CMD,  0x12 },
  93:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_x2-1 },
  86              		.loc 1 93 0
  87 0004 C4519FE5 		ldr	r5, .L13
  88              		.cfi_offset 14, -4
  89              		.cfi_offset 10, -8
  90              		.cfi_offset 8, -12
  91              		.cfi_offset 7, -16
  92              		.cfi_offset 6, -20
  93              		.cfi_offset 5, -24
  94              		.cfi_offset 4, -28
  95 0008 003095E5 		ldr	r3, [r5, #0]
  87:fb/fb_td014.c **** 	struct td014_cmdlist prepare_disp_write_cmds[] = {
  96              		.loc 1 87 0
  97 000c 0840D3E5 		ldrb	r4, [r3, #8]	@ zero_extendqisi2
  98 0010 0AE0D3E5 		ldrb	lr, [r3, #10]	@ zero_extendqisi2
  84:fb/fb_td014.c **** fb_td014_flush(void) {
  99              		.loc 1 84 0
 100 0014 1CD04DE2 		sub	sp, sp, #28
 101              	.LCFI2:
 102              		.cfi_def_cfa_offset 56
  87:fb/fb_td014.c **** 	struct td014_cmdlist prepare_disp_write_cmds[] = {
 103              		.loc 1 87 0
 104 0018 04C0D3E5 		ldrb	ip, [r3, #4]	@ zero_extendqisi2
 105 001c 1010A0E3 		mov	r1, #16
 106 0020 0600D3E5 		ldrb	r0, [r3, #6]	@ zero_extendqisi2
 107 0024 0110CDE5 		strb	r1, [sp, #1]
 108 0028 014044E2 		sub	r4, r4, #1
 109 002c 0110A0E3 		mov	r1, #1
 110 0030 01E04EE2 		sub	lr, lr, #1
 111 0034 1160A0E3 		mov	r6, #17
 112 0038 0020A0E3 		mov	r2, #0
 113 003c 0210CDE5 		strb	r1, [sp, #2]
 114 0040 03C0CDE5 		strb	ip, [sp, #3]
 115 0044 0560CDE5 		strb	r6, [sp, #5]
 116 0048 0610CDE5 		strb	r1, [sp, #6]
 117 004c 0A10CDE5 		strb	r1, [sp, #10]
 118 0050 0B40CDE5 		strb	r4, [sp, #11]
 119 0054 0E10CDE5 		strb	r1, [sp, #14]
 120 0058 0FE0CDE5 		strb	lr, [sp, #15]
 121 005c 1210CDE5 		strb	r1, [sp, #18]
 122 0060 13C0CDE5 		strb	ip, [sp, #19]
 123 0064 1610CDE5 		strb	r1, [sp, #22]
 124 0068 016086E0 		add	r6, r6, r1
 125 006c 1340A0E3 		mov	r4, #19
 126 0070 011081E0 		add	r1, r1, r1
 127 0074 14E0A0E3 		mov	lr, #20
 128 0078 15C0A0E3 		mov	ip, #21
 129 007c 0020CDE5 		strb	r2, [sp, #0]
 130 0080 0420CDE5 		strb	r2, [sp, #4]
 131 0084 0700CDE5 		strb	r0, [sp, #7]
 132 0088 0820CDE5 		strb	r2, [sp, #8]
 133 008c 0960CDE5 		strb	r6, [sp, #9]
 134 0090 0C20CDE5 		strb	r2, [sp, #12]
 135 0094 0D40CDE5 		strb	r4, [sp, #13]
 136 0098 1020CDE5 		strb	r2, [sp, #16]
 137 009c 11E0CDE5 		strb	lr, [sp, #17]
 138 00a0 1420CDE5 		strb	r2, [sp, #20]
 139 00a4 15C0CDE5 		strb	ip, [sp, #21]
 140 00a8 1700CDE5 		strb	r0, [sp, #23]
 141 00ac 1810CDE5 		strb	r1, [sp, #24]
 142 00b0 1920CDE5 		strb	r2, [sp, #25]
  94:fb/fb_td014.c **** 		{ CMD,  0x13 },
  95:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_y2-1 },
  96:fb/fb_td014.c **** 		{ CMD,  0x14 },
  97:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_x1 },
  98:fb/fb_td014.c **** 		{ CMD,  0x15 },
  99:fb/fb_td014.c **** 		{ DATA, fb_rgb332->damage_y1 },
 100:fb/fb_td014.c **** 		{ END,  0x00 }
 101:fb/fb_td014.c **** 	};
 102:fb/fb_td014.c **** 
 103:fb/fb_td014.c **** 	/* If everything's clean, just return */
 104:fb/fb_td014.c **** 	if(fb_rgb332->damage_x1 == fb_rgb332->damage_x2 ||
 143              		.loc 1 104 0
 144 00b4 B410D3E1 		ldrh	r1, [r3, #4]
 145 00b8 B820D3E1 		ldrh	r2, [r3, #8]
 146 00bc 020051E1 		cmp	r1, r2
 147 00c0 0300000A 		beq	.L6
 148              		.loc 1 104 0 is_stmt 0 discriminator 1
 149 00c4 B620D3E1 		ldrh	r2, [r3, #6]
 150 00c8 BA30D3E1 		ldrh	r3, [r3, #10]
 151 00cc 030052E1 		cmp	r2, r3
 152 00d0 0300001A 		bne	.L7
 153              	.L6:
 105:fb/fb_td014.c **** 		fb_rgb332->damage_y1 == fb_rgb332->damage_y2) {
 106:fb/fb_td014.c **** 			printf("%s: no damage\n",__FUNCTION__);
 154              		.loc 1 106 0 is_stmt 1
 155 00d4 F8109FE5 		ldr	r1, .L13+4
 156 00d8 F8009FE5 		ldr	r0, .L13+8
 157 00dc FEFFFFEB 		bl	printf
 107:fb/fb_td014.c **** 			return;
 158              		.loc 1 107 0
 159 00e0 380000EA 		b	.L5
 160              	.L7:
 108:fb/fb_td014.c **** 	}
 109:fb/fb_td014.c **** 
 110:fb/fb_td014.c **** 	fb_td014_send_cmdlist(prepare_disp_write_cmds);
 161              		.loc 1 110 0
 162 00e4 0D00A0E1 		mov	r0, sp
 163 00e8 FEFFFFEB 		bl	fb_td014_send_cmdlist
 111:fb/fb_td014.c **** 
 112:fb/fb_td014.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++) {
 164              		.loc 1 112 0
 165 00ec 003095E5 		ldr	r3, [r5, #0]
 166              	.LBB7:
 113:fb/fb_td014.c **** 		p = & fb_rgb332->mem[y * framebuffer->width]; // start of line
 114:fb/fb_td014.c **** 		p += fb_rgb332->damage_x1; // start of damage area
 115:fb/fb_td014.c **** 
 116:fb/fb_td014.c **** 		for(x=fb_rgb332->damage_x1; x<fb_rgb332->damage_x2; x++) {
 117:fb/fb_td014.c **** 			uint16_t pixel = rgb332_to_565(*p++);
 118:fb/fb_td014.c **** 			uint16_t data = 0x0100 | (pixel >> 8);
 119:fb/fb_td014.c **** 
 120:fb/fb_td014.c **** 			uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN,
 121:fb/fb_td014.c **** 					&data, NULL);
 167              		.loc 1 121 0
 168 00f0 1AA08DE2 		add	sl, sp, #26
 169              	.LBE7:
 112:fb/fb_td014.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++) {
 170              		.loc 1 112 0
 171 00f4 B640D3E1 		ldrh	r4, [r3, #6]
 172              	.LVL7:
 173 00f8 290000EA 		b	.L9
 174              	.LVL8:
 175              	.L12:
 113:fb/fb_td014.c **** 		p = & fb_rgb332->mem[y * framebuffer->width]; // start of line
 176              		.loc 1 113 0
 177 00fc 042095E5 		ldr	r2, [r5, #4]
 178 0100 B082D2E1 		ldrh	r8, [r2, #32]
 179 0104 002093E5 		ldr	r2, [r3, #0]
 180 0108 942828E0 		mla	r8, r4, r8, r2
 181              	.LVL9:
 114:fb/fb_td014.c **** 		p += fb_rgb332->damage_x1; // start of damage area
 182              		.loc 1 114 0
 183 010c B460D3E1 		ldrh	r6, [r3, #4]
 184 0110 068088E0 		add	r8, r8, r6
 185              	.LVL10:
 116:fb/fb_td014.c **** 		for(x=fb_rgb332->damage_x1; x<fb_rgb332->damage_x2; x++) {
 186              		.loc 1 116 0
 187 0114 1D0000EA 		b	.L10
 188              	.L11:
 189              	.LBB10:
 117:fb/fb_td014.c **** 			uint16_t pixel = rgb332_to_565(*p++);
 190              		.loc 1 117 0 discriminator 2
 191 0118 0130D8E4 		ldrb	r3, [r8], #1	@ zero_extendqisi2
 192              	.LVL11:
 193              	.LBB8:
 194              	.LBB9:
 195              		.file 2 "include/fb/fb_rgb332.h"
   1:include/fb/fb_rgb332.h **** #ifndef FB_RGB332_H
   2:include/fb/fb_rgb332.h **** #define FB_RGB332_H
   3:include/fb/fb_rgb332.h **** 
   4:include/fb/fb_rgb332.h **** /* RGB framebuffer with 1 byte per pixel, bits mapped as RRRGGGBB */
   5:include/fb/fb_rgb332.h **** 
   6:include/fb/fb_rgb332.h **** struct fb_rgb332 {
   7:include/fb/fb_rgb332.h **** 	uint8_t *mem;			/* set to backingstore memory */
   8:include/fb/fb_rgb332.h **** 	uint16_t damage_x1,damage_y1;	/* current damage window, ul (incl) */
   9:include/fb/fb_rgb332.h **** 	uint16_t damage_x2,damage_y2;	/* current damage window, lr (excl) */
  10:include/fb/fb_rgb332.h **** };
  11:include/fb/fb_rgb332.h **** 
  12:include/fb/fb_rgb332.h **** extern void fb_rgb332_clear();
  13:include/fb/fb_rgb332.h **** 
  14:include/fb/fb_rgb332.h **** /* draw a box from cursor to x,y */
  15:include/fb/fb_rgb332.h **** extern void fb_rgb332_boxto(uint16_t x,uint16_t y);
  16:include/fb/fb_rgb332.h **** /* draw a line from cursor to x,y */
  17:include/fb/fb_rgb332.h **** extern void fb_rgb332_lineto(uint16_t x,uint16_t y);
  18:include/fb/fb_rgb332.h **** 
  19:include/fb/fb_rgb332.h **** /* put string str onto framebuffer with line (bottom
  20:include/fb/fb_rgb332.h ****    left pixel of, e.g. "m") starting at cursor.
  21:include/fb/fb_rgb332.h ****    Maximum width consumed is maxwidth, actual width
  22:include/fb/fb_rgb332.h ****    needed is returned */
  23:include/fb/fb_rgb332.h **** extern int fb_rgb332_putstr(char *str,int maxwidth);
  24:include/fb/fb_rgb332.h **** 
  25:include/fb/fb_rgb332.h **** extern struct fb_rgb332 *fb_rgb332;
  26:include/fb/fb_rgb332.h **** 
  27:include/fb/fb_rgb332.h **** /* this convenience function can be used if you choose to
  28:include/fb/fb_rgb332.h ****  * back a RGB565 display with a RGB332 framebuffer to conserve
  29:include/fb/fb_rgb332.h ****  * ARM memory. It converts a rgb332 value to rgb565 as indicated
  30:include/fb/fb_rgb332.h ****  * in the comments. */
  31:include/fb/fb_rgb332.h **** 
  32:include/fb/fb_rgb332.h **** static inline uint16_t
  33:include/fb/fb_rgb332.h **** rgb332_to_565(uint8_t rgb332){
  34:include/fb/fb_rgb332.h **** 
  35:include/fb/fb_rgb332.h **** 	uint8_t red   =  (rgb332 & 0xe0) >> 5 ; // rrr. .... -> .... .rrr
 196              		.loc 2 35 0 discriminator 2
 197 011c A322A0E1 		mov	r2, r3, lsr #5
 198              	.LVL12:
  36:include/fb/fb_rgb332.h **** 	uint8_t green = ((rgb332 & 0x1c) >> 2); // ...g gg.. -> .... .ggg
 199              		.loc 2 36 0 discriminator 2
 200 0120 1C7003E2 		and	r7, r3, #28
  37:include/fb/fb_rgb332.h **** 	uint8_t blue  =   rgb332 & 0x03;        // .... ..bb -> .... ..bb
  38:include/fb/fb_rgb332.h **** 
  39:include/fb/fb_rgb332.h **** 	red   = (red   << 2) | (red >> 1);                /* .....210 -> ...21021 */
 201              		.loc 2 39 0 discriminator 2
 202 0124 A210A0E1 		mov	r1, r2, lsr #1
  37:include/fb/fb_rgb332.h **** 	uint8_t blue  =   rgb332 & 0x03;        // .... ..bb -> .... ..bb
 203              		.loc 2 37 0 discriminator 2
 204 0128 033003E2 		and	r3, r3, #3
 205              	.LVL13:
 206              		.loc 2 39 0 discriminator 2
 207 012c 022181E1 		orr	r2, r1, r2, asl #2
 208              	.LVL14:
  40:include/fb/fb_rgb332.h **** 	green = (green << 3) | (green);                   /* .....210 -> ..210210 */
  41:include/fb/fb_rgb332.h **** 	blue  = (blue  << 3) | (blue << 1) | (blue >> 1); /* ......10 -> ...10101 */
 209              		.loc 2 41 0 discriminator 2
 210 0130 8310A0E1 		mov	r1, r3, asl #1
 211 0134 831181E1 		orr	r1, r1, r3, asl #3
 212 0138 A33081E1 		orr	r3, r1, r3, lsr #1
  36:include/fb/fb_rgb332.h **** 	uint8_t green = ((rgb332 & 0x1c) >> 2); // ...g gg.. -> .... .ggg
 213              		.loc 2 36 0 discriminator 2
 214 013c 2771A0E1 		mov	r7, r7, lsr #2
 215              	.LVL15:
  42:include/fb/fb_rgb332.h **** 
  43:include/fb/fb_rgb332.h **** 	/* rrrrrggg gggbbbbb */
  44:include/fb/fb_rgb332.h **** 	return (red << 11) | (green << 5) | blue;
 216              		.loc 2 44 0 discriminator 2
 217 0140 823583E1 		orr	r3, r3, r2, asl #11
  40:include/fb/fb_rgb332.h **** 	green = (green << 3) | (green);                   /* .....210 -> ..210210 */
 218              		.loc 2 40 0 discriminator 2
 219 0144 877187E1 		orr	r7, r7, r7, asl #3
 220              	.LVL16:
 221              		.loc 2 44 0 discriminator 2
 222 0148 877283E1 		orr	r7, r3, r7, asl #5
 223              	.LVL17:
 224              	.LBE9:
 225              	.LBE8:
 118:fb/fb_td014.c **** 			uint16_t data = 0x0100 | (pixel >> 8);
 226              		.loc 1 118 0 discriminator 2
 227 014c 2734A0E1 		mov	r3, r7, lsr #8
 228 0150 013C83E3 		orr	r3, r3, #256
 120:fb/fb_td014.c **** 			uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN,
 229              		.loc 1 120 0 discriminator 2
 230 0154 0000A0E3 		mov	r0, #0
 118:fb/fb_td014.c **** 			uint16_t data = 0x0100 | (pixel >> 8);
 231              		.loc 1 118 0 discriminator 2
 232 0158 BA31CDE1 		strh	r3, [sp, #26]	@ movhi
 120:fb/fb_td014.c **** 			uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN,
 233              		.loc 1 120 0 discriminator 2
 234 015c 0910A0E3 		mov	r1, #9
 235 0160 0A20A0E1 		mov	r2, sl
 236              	.LVL18:
 237 0164 0030A0E1 		mov	r3, r0
 238 0168 FEFFFFEB 		bl	uwire_xfer
 122:fb/fb_td014.c **** 
 123:fb/fb_td014.c **** 			data = 0x0100 | (pixel & 0xff);
 239              		.loc 1 123 0 discriminator 2
 240 016c FF7007E2 		and	r7, r7, #255
 124:fb/fb_td014.c **** 			uwire_xfer(TD014_DEV_ID, TD014_UWIRE_BITLEN,
 241              		.loc 1 124 0 discriminator 2
 242 0170 0000A0E3 		mov	r0, #0
 123:fb/fb_td014.c **** 			data = 0x0100 | (pixel & 0xff);
 243              		.loc 1 123 0 discriminator 2
 244 0174 017C87E3 		orr	r7, r7, #256
 245              		.loc 1 124 0 discriminator 2
 246 0178 0910A0E3 		mov	r1, #9
 247 017c 0A20A0E1 		mov	r2, sl
 248 0180 0030A0E1 		mov	r3, r0
 123:fb/fb_td014.c **** 			data = 0x0100 | (pixel & 0xff);
 249              		.loc 1 123 0 discriminator 2
 250 0184 BA71CDE1 		strh	r7, [sp, #26]	@ movhi
 251              		.loc 1 124 0 discriminator 2
 252 0188 FEFFFFEB 		bl	uwire_xfer
 253              	.LBE10:
 116:fb/fb_td014.c **** 		for(x=fb_rgb332->damage_x1; x<fb_rgb332->damage_x2; x++) {
 254              		.loc 1 116 0 discriminator 2
 255 018c 016086E2 		add	r6, r6, #1
 256              	.LVL19:
 257              	.L10:
 116:fb/fb_td014.c **** 		for(x=fb_rgb332->damage_x1; x<fb_rgb332->damage_x2; x++) {
 258              		.loc 1 116 0 is_stmt 0 discriminator 1
 259 0190 003095E5 		ldr	r3, [r5, #0]
 260 0194 B830D3E1 		ldrh	r3, [r3, #8]
 261 0198 030056E1 		cmp	r6, r3
 262 019c DDFFFFBA 		blt	.L11
 112:fb/fb_td014.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++) {
 263              		.loc 1 112 0 is_stmt 1
 264 01a0 014084E2 		add	r4, r4, #1
 265              	.LVL20:
 266              	.L9:
 112:fb/fb_td014.c **** 	for(y=fb_rgb332->damage_y1;y<fb_rgb332->damage_y2;y++) {
 267              		.loc 1 112 0 is_stmt 0 discriminator 1
 268 01a4 003095E5 		ldr	r3, [r5, #0]
 269 01a8 BA20D3E1 		ldrh	r2, [r3, #10]
 270 01ac 020054E1 		cmp	r4, r2
 271 01b0 D1FFFFBA 		blt	.L12
 125:fb/fb_td014.c **** 				&data, NULL);
 126:fb/fb_td014.c **** 		}
 127:fb/fb_td014.c **** 	}
 128:fb/fb_td014.c **** 
 129:fb/fb_td014.c **** 	fb_rgb332->damage_x1 = fb_rgb332->damage_x2 = 0;
 272              		.loc 1 129 0 is_stmt 1
 273 01b4 0020A0E3 		mov	r2, #0	@ movhi
 274 01b8 B820C3E1 		strh	r2, [r3, #8]	@ movhi
 275 01bc B420C3E1 		strh	r2, [r3, #4]	@ movhi
 130:fb/fb_td014.c **** 	fb_rgb332->damage_y1 = fb_rgb332->damage_y2 = 0;
 276              		.loc 1 130 0
 277 01c0 BA20C3E1 		strh	r2, [r3, #10]	@ movhi
 278 01c4 B620C3E1 		strh	r2, [r3, #6]	@ movhi
 279              	.LVL21:
 280              	.L5:
 131:fb/fb_td014.c **** }
 281              		.loc 1 131 0
 282 01c8 1CD08DE2 		add	sp, sp, #28
 283 01cc F085BDE8 		ldmfd	sp!, {r4, r5, r6, r7, r8, sl, pc}
 284              	.L14:
 285              		.align	2
 286              	.L13:
 287 01d0 00000000 		.word	.LANCHOR0
 288 01d4 00000000 		.word	.LANCHOR1
 289 01d8 00000000 		.word	.LC0
 290              		.cfi_endproc
 291              	.LFE15:
 293              		.section	.text.fb_td014_init,"ax",%progbits
 294              		.align	2
 296              	fb_td014_init:
 297              	.LFB14:
  73:fb/fb_td014.c **** fb_td014_init(void) {
 298              		.loc 1 73 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 10402DE9 		stmfd	sp!, {r4, lr}
 303              	.LCFI3:
 304              		.cfi_def_cfa_offset 8
  74:fb/fb_td014.c **** 	printf("%s: initializing LCD.\n",__FUNCTION__);
 305              		.loc 1 74 0
 306 0004 34409FE5 		ldr	r4, .L16
 307              		.cfi_offset 14, -4
 308              		.cfi_offset 4, -8
 309 0008 34009FE5 		ldr	r0, .L16+4
 310 000c 101084E2 		add	r1, r4, #16
 311 0010 FEFFFFEB 		bl	printf
  75:fb/fb_td014.c **** 	calypso_reset_set(RESET_EXT, 0);
 312              		.loc 1 75 0
 313 0014 0010A0E3 		mov	r1, #0
 314 0018 0400A0E3 		mov	r0, #4
 315 001c FEFFFFEB 		bl	calypso_reset_set
  76:fb/fb_td014.c **** 	delay_ms(5);
 316              		.loc 1 76 0
 317 0020 0500A0E3 		mov	r0, #5
 318 0024 FEFFFFEB 		bl	delay_ms
  77:fb/fb_td014.c **** 	uwire_init();
 319              		.loc 1 77 0
 320 0028 FEFFFFEB 		bl	uwire_init
  78:fb/fb_td014.c **** 	delay_ms(5);
 321              		.loc 1 78 0
 322 002c 0500A0E3 		mov	r0, #5
 323 0030 FEFFFFEB 		bl	delay_ms
  80:fb/fb_td014.c **** 	fb_td014_send_cmdlist(td014_initdata);
 324              		.loc 1 80 0
 325 0034 200084E2 		add	r0, r4, #32
  81:fb/fb_td014.c **** }
 326              		.loc 1 81 0
 327 0038 1040BDE8 		ldmfd	sp!, {r4, lr}
  80:fb/fb_td014.c **** 	fb_td014_send_cmdlist(td014_initdata);
 328              		.loc 1 80 0
 329 003c FEFFFFEA 		b	fb_td014_send_cmdlist
 330              	.L17:
 331              		.align	2
 332              	.L16:
 333 0040 00000000 		.word	.LANCHOR1
 334 0044 0F000000 		.word	.LC1
 335              		.cfi_endproc
 336              	.LFE14:
 338              		.global	framebuffer
 339              		.global	fb_rgb332
 340              		.section	.rodata
 341              		.align	2
 342              		.set	.LANCHOR1,. + 0
 345              	__FUNCTION__.1733:
 346 0000 66625F74 		.ascii	"fb_td014_flush\000"
 346      64303134 
 346      5F666C75 
 346      736800
 347 000f 00       		.space	1
 350              	__FUNCTION__.1725:
 351 0010 66625F74 		.ascii	"fb_td014_init\000"
 351      64303134 
 351      5F696E69 
 351      7400
 352 001e 0000     		.space	2
 355              	td014_initdata:
 356 0020 00       		.byte	0
 357 0021 3F       		.byte	63
 358 0022 01       		.byte	1
 359 0023 01       		.byte	1
 360 0024 00       		.byte	0
 361 0025 20       		.byte	32
 362 0026 01       		.byte	1
 363 0027 03       		.byte	3
 364 0028 00       		.byte	0
 365 0029 31       		.byte	49
 366 002a 01       		.byte	1
 367 002b 03       		.byte	3
 368 002c 02       		.byte	2
 369 002d 00       		.byte	0
 370 002e 0000     		.section	.rodata.str1.1,"aMS",%progbits,1
 371              	.LC0:
 372 0000 25733A20 		.ascii	"%s: no damage\012\000"
 372      6E6F2064 
 372      616D6167 
 372      650A00
 373              	.LC1:
 374 000f 25733A20 		.ascii	"%s: initializing LCD.\012\000"
 374      696E6974 
 374      69616C69 
 374      7A696E67 
 374      204C4344 
 375              		.data
 376              		.align	2
 377              		.set	.LANCHOR0,. + 0
 380              	fb_rgb332:
 381 0000 3C000000 		.word	fb_td014_rgb332
 384              	framebuffer:
 385 0004 08000000 		.word	fb_td014_framebuffer
 388              	fb_td014_framebuffer:
 389 0008 74643031 		.ascii	"td014\000"
 389      3400
 390 000e 0000     		.space	2
 391 0010 00000000 		.word	fb_td014_init
 392 0014 00000000 		.word	fb_rgb332_clear
 393 0018 00000000 		.word	fb_rgb332_boxto
 394 001c 00000000 		.word	fb_rgb332_lineto
 395 0020 00000000 		.word	fb_rgb332_putstr
 396 0024 00000000 		.word	fb_td014_flush
 397 0028 6000     		.short	96
 398 002a 4000     		.short	64
 399 002c 00000000 		.space	16
 399      00000000 
 399      00000000 
 399      00000000 
 402              	fb_td014_rgb332:
 403 003c 00000000 		.word	fb_td014_mem
 404 0040 00000000 		.space	8
 404      00000000 
 405              		.bss
 406              		.align	2
 409              	fb_td014_mem:
 410 0000 00000000 		.space	6144
 410      00000000 
 410      00000000 
 410      00000000 
 410      00000000 
 411              		.text
 412              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 fb_td014.c
     /tmp/ccooChTc.s:12     .text.fb_td014_send_cmdlist:0000000000000000 $a
     /tmp/ccooChTc.s:14     .text.fb_td014_send_cmdlist:0000000000000000 fb_td014_send_cmdlist
     /tmp/ccooChTc.s:75     .text.fb_td014_flush:0000000000000000 $a
     /tmp/ccooChTc.s:77     .text.fb_td014_flush:0000000000000000 fb_td014_flush
     /tmp/ccooChTc.s:287    .text.fb_td014_flush:00000000000001d0 $d
     /tmp/ccooChTc.s:294    .text.fb_td014_init:0000000000000000 $a
     /tmp/ccooChTc.s:296    .text.fb_td014_init:0000000000000000 fb_td014_init
     /tmp/ccooChTc.s:333    .text.fb_td014_init:0000000000000040 $d
     /tmp/ccooChTc.s:384    .data:0000000000000004 framebuffer
     /tmp/ccooChTc.s:380    .data:0000000000000000 fb_rgb332
     /tmp/ccooChTc.s:341    .rodata:0000000000000000 $d
     /tmp/ccooChTc.s:345    .rodata:0000000000000000 __FUNCTION__.1733
     /tmp/ccooChTc.s:350    .rodata:0000000000000010 __FUNCTION__.1725
     /tmp/ccooChTc.s:355    .rodata:0000000000000020 td014_initdata
     /tmp/ccooChTc.s:376    .data:0000000000000000 $d
     /tmp/ccooChTc.s:402    .data:000000000000003c fb_td014_rgb332
     /tmp/ccooChTc.s:388    .data:0000000000000008 fb_td014_framebuffer
     /tmp/ccooChTc.s:409    .bss:0000000000000000 fb_td014_mem
     /tmp/ccooChTc.s:406    .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
uwire_xfer
printf
calypso_reset_set
delay_ms
uwire_init
fb_rgb332_clear
fb_rgb332_boxto
fb_rgb332_lineto
fb_rgb332_putstr
