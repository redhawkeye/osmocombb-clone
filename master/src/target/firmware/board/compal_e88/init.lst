   1              		.file	"init.c"
   9              	.Ltext0:
  10              		.cfi_sections	.debug_frame
  11              		.section	.text.board_init,"ax",%progbits
  12              		.align	2
  13              		.global	board_init
  15              	board_init:
  16              	.LFB53:
  17              		.file 1 "board/compal_e88/init.c"
   1:board/compal_e88/init.c **** /* Initialization for the Compal E88 (Motorola C115...C123) */
   2:board/compal_e88/init.c **** 
   3:board/compal_e88/init.c **** /* (C) 2010 by Harald Welte <laforge@gnumonks.org>
   4:board/compal_e88/init.c ****  *
   5:board/compal_e88/init.c ****  * All Rights Reserved
   6:board/compal_e88/init.c ****  *
   7:board/compal_e88/init.c ****  * This program is free software; you can redistribute it and/or modify
   8:board/compal_e88/init.c ****  * it under the terms of the GNU General Public License as published by
   9:board/compal_e88/init.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:board/compal_e88/init.c ****  * (at your option) any later version.
  11:board/compal_e88/init.c ****  *
  12:board/compal_e88/init.c ****  * This program is distributed in the hope that it will be useful,
  13:board/compal_e88/init.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:board/compal_e88/init.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:board/compal_e88/init.c ****  * GNU General Public License for more details.
  16:board/compal_e88/init.c ****  *
  17:board/compal_e88/init.c ****  * You should have received a copy of the GNU General Public License along
  18:board/compal_e88/init.c ****  * with this program; if not, write to the Free Software Foundation, Inc.,
  19:board/compal_e88/init.c ****  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
  20:board/compal_e88/init.c ****  *
  21:board/compal_e88/init.c ****  */
  22:board/compal_e88/init.c **** 
  23:board/compal_e88/init.c **** #include <stdint.h>
  24:board/compal_e88/init.c **** #include <stdio.h>
  25:board/compal_e88/init.c **** 
  26:board/compal_e88/init.c **** #include <debug.h>
  27:board/compal_e88/init.c **** #include <ctors.h>
  28:board/compal_e88/init.c **** #include <memory.h>
  29:board/compal_e88/init.c **** #include <board.h>
  30:board/compal_e88/init.c **** #include <keypad.h>
  31:board/compal_e88/init.c **** #include <console.h>
  32:board/compal_e88/init.c **** #include <flash/cfi_flash.h>
  33:board/compal_e88/init.c **** 
  34:board/compal_e88/init.c **** #include <calypso/irq.h>
  35:board/compal_e88/init.c **** #include <calypso/clock.h>
  36:board/compal_e88/init.c **** #include <calypso/dma.h>
  37:board/compal_e88/init.c **** #include <calypso/rtc.h>
  38:board/compal_e88/init.c **** #include <calypso/timer.h>
  39:board/compal_e88/init.c **** #include <uart.h>
  40:board/compal_e88/init.c **** #include <calypso/backlight.h>
  41:board/compal_e88/init.c **** 
  42:board/compal_e88/init.c **** #include <comm/sercomm.h>
  43:board/compal_e88/init.c **** #include <comm/timer.h>
  44:board/compal_e88/init.c **** 
  45:board/compal_e88/init.c **** #include <abb/twl3025.h>
  46:board/compal_e88/init.c **** #include <rf/trf6151.h>
  47:board/compal_e88/init.c **** #include <fb/framebuffer.h>
  48:board/compal_e88/init.c **** #include <battery/compal_e88.h>
  49:board/compal_e88/init.c **** #include "../compal/keymap.h"
  50:board/compal_e88/init.c **** 
  51:board/compal_e88/init.c **** #define ARMIO_LATCH_OUT 0xfffe4802
  52:board/compal_e88/init.c **** #define IO_CNTL_REG	0xfffe4804
  53:board/compal_e88/init.c **** #define ASIC_CONF_REG	0xfffef008
  54:board/compal_e88/init.c **** 
  55:board/compal_e88/init.c **** static void board_io_init(void)
  56:board/compal_e88/init.c **** {
  57:board/compal_e88/init.c **** 	uint16_t reg;
  58:board/compal_e88/init.c **** 
  59:board/compal_e88/init.c **** 	reg = readw(ASIC_CONF_REG);
  60:board/compal_e88/init.c **** 	/* LCD Set I/O(3) / SA0 to I/O(3) mode */
  61:board/compal_e88/init.c **** 	reg &= ~(1 << 10);
  62:board/compal_e88/init.c **** 	/* Set function pins to I2C Mode */
  63:board/compal_e88/init.c **** 	reg |= ((1 << 12) | (1 << 7));		/* SCL / SDA */
  64:board/compal_e88/init.c **** 	/* TWL3025: Set SPI+RIF RX clock to rising edge */
  65:board/compal_e88/init.c **** 	reg |= (1 << 13) | (1 << 14);
  66:board/compal_e88/init.c **** 	writew(reg, ASIC_CONF_REG);
  67:board/compal_e88/init.c **** 
  68:board/compal_e88/init.c **** 	/* LCD Set I/O(3) to output mode */
  69:board/compal_e88/init.c **** 	reg = readw(IO_CNTL_REG);
  70:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
  71:board/compal_e88/init.c **** 	writew(reg, IO_CNTL_REG);
  72:board/compal_e88/init.c **** 
  73:board/compal_e88/init.c **** 	/* LCD Set I/O(3) output low */
  74:board/compal_e88/init.c **** 	reg = readw(ARMIO_LATCH_OUT);
  75:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
  76:board/compal_e88/init.c **** 	writew(reg, ARMIO_LATCH_OUT);
  77:board/compal_e88/init.c **** }
  78:board/compal_e88/init.c **** 
  79:board/compal_e88/init.c **** void board_init(int with_irq)
  80:board/compal_e88/init.c **** {
  18              		.loc 1 80 0
  19              		.cfi_startproc
  20              		@ args = 0, pretend = 0, frame = 0
  21              		@ frame_needed = 0, uses_anonymous_args = 0
  22              	.LVL0:
  23 0000 17402DE9 		stmfd	sp!, {r0, r1, r2, r4, lr}
  24              	.LCFI0:
  25              		.cfi_def_cfa_offset 20
  81:board/compal_e88/init.c **** 	/* Configure the memory interface */
  82:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS0, 3, CALYPSO_MEM_16bit, 1);
  26              		.loc 1 82 0
  27 0004 0120A0E3 		mov	r2, #1
  28              		.cfi_offset 14, -4
  29              		.cfi_offset 4, -8
  30              		.cfi_offset 2, -12
  31              		.cfi_offset 1, -16
  32              		.cfi_offset 0, -20
  80:board/compal_e88/init.c **** {
  33              		.loc 1 80 0
  34 0008 0040A0E1 		mov	r4, r0
  35              		.loc 1 82 0
  36 000c 0230A0E1 		mov	r3, r2
  37 0010 0000A0E3 		mov	r0, #0
  38              	.LVL1:
  39 0014 0310A0E3 		mov	r1, #3
  40 0018 FEFFFFEB 		bl	calypso_mem_cfg
  83:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS1, 3, CALYPSO_MEM_16bit, 1);
  41              		.loc 1 83 0
  42 001c 0120A0E3 		mov	r2, #1
  43 0020 0230A0E1 		mov	r3, r2
  44 0024 0200A0E3 		mov	r0, #2
  45 0028 0310A0E3 		mov	r1, #3
  46 002c FEFFFFEB 		bl	calypso_mem_cfg
  84:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS2, 5, CALYPSO_MEM_16bit, 1);
  47              		.loc 1 84 0
  48 0030 0120A0E3 		mov	r2, #1
  49 0034 0230A0E1 		mov	r3, r2
  50 0038 0400A0E3 		mov	r0, #4
  51 003c 0510A0E3 		mov	r1, #5
  52 0040 FEFFFFEB 		bl	calypso_mem_cfg
  85:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS3, 5, CALYPSO_MEM_16bit, 1);
  53              		.loc 1 85 0
  54 0044 0120A0E3 		mov	r2, #1
  55 0048 0230A0E1 		mov	r3, r2
  56 004c 0600A0E3 		mov	r0, #6
  57 0050 0510A0E3 		mov	r1, #5
  58 0054 FEFFFFEB 		bl	calypso_mem_cfg
  86:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_CS4, 0, CALYPSO_MEM_8bit, 1);
  59              		.loc 1 86 0
  60 0058 0010A0E3 		mov	r1, #0
  61 005c 0120A0E1 		mov	r2, r1
  62 0060 0A00A0E3 		mov	r0, #10
  63 0064 0130A0E3 		mov	r3, #1
  64 0068 FEFFFFEB 		bl	calypso_mem_cfg
  87:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS6, 0, CALYPSO_MEM_32bit, 1);
  65              		.loc 1 87 0
  66 006c 0C00A0E3 		mov	r0, #12
  67 0070 0010A0E3 		mov	r1, #0
  68 0074 0220A0E3 		mov	r2, #2
  69 0078 0130A0E3 		mov	r3, #1
  70 007c FEFFFFEB 		bl	calypso_mem_cfg
  88:board/compal_e88/init.c **** 	calypso_mem_cfg(CALYPSO_nCS7, 0, CALYPSO_MEM_32bit, 0);
  71              		.loc 1 88 0
  72 0080 0010A0E3 		mov	r1, #0
  73 0084 0130A0E1 		mov	r3, r1
  74 0088 0800A0E3 		mov	r0, #8
  75 008c 0220A0E3 		mov	r2, #2
  76 0090 FEFFFFEB 		bl	calypso_mem_cfg
  89:board/compal_e88/init.c **** 
  90:board/compal_e88/init.c **** 	/* Set VTCXO_DIV2 = 1, configure PLL for 104 MHz and give ARM half of that */
  91:board/compal_e88/init.c **** 	calypso_clock_set(2, CALYPSO_PLL13_104_MHZ, ARM_MCLK_DIV_2);
  77              		.loc 1 91 0
  78 0094 0200A0E3 		mov	r0, #2
  79 0098 0020A0E1 		mov	r2, r0
  80 009c 021BA0E3 		mov	r1, #2048
  81 00a0 FEFFFFEB 		bl	calypso_clock_set
  92:board/compal_e88/init.c **** 
  93:board/compal_e88/init.c **** 	/* Configure the RHEA bridge with some sane default values */
  94:board/compal_e88/init.c **** 	calypso_rhea_cfg(0, 0, 0xff, 0, 1, 0, 0);
  82              		.loc 1 94 0
  83 00a4 0000A0E3 		mov	r0, #0
  84 00a8 0130A0E3 		mov	r3, #1
  85 00ac 0010A0E1 		mov	r1, r0
  86 00b0 00308DE5 		str	r3, [sp, #0]
  87 00b4 FF20A0E3 		mov	r2, #255
  88 00b8 0030A0E1 		mov	r3, r0
  89 00bc 04008DE5 		str	r0, [sp, #4]
  90 00c0 08008DE5 		str	r0, [sp, #8]
  91 00c4 FEFFFFEB 		bl	calypso_rhea_cfg
  92              	.LBB6:
  93              	.LBB7:
  59:board/compal_e88/init.c **** 	reg = readw(ASIC_CONF_REG);
  94              		.loc 1 59 0
  95 00c8 DC209FE5 		ldr	r2, .L3
  61:board/compal_e88/init.c **** 	reg &= ~(1 << 10);
  96              		.loc 1 61 0
  97 00cc DC309FE5 		ldr	r3, .L3+4
  59:board/compal_e88/init.c **** 	reg = readw(ASIC_CONF_REG);
  98              		.loc 1 59 0
  99 00d0 B71F52E1 		ldrh	r1, [r2, #-247]
 100              	.LVL2:
  61:board/compal_e88/init.c **** 	reg &= ~(1 << 10);
 101              		.loc 1 61 0
 102 00d4 033001E0 		and	r3, r1, r3
 103              	.LVL3:
  65:board/compal_e88/init.c **** 	reg |= (1 << 13) | (1 << 14);
 104              		.loc 1 65 0
 105 00d8 073A83E3 		orr	r3, r3, #28672
 106              	.LVL4:
 107 00dc 803083E3 		orr	r3, r3, #128
 108              	.LVL5:
  66:board/compal_e88/init.c **** 	writew(reg, ASIC_CONF_REG);
 109              		.loc 1 66 0
 110 00e0 B73F42E1 		strh	r3, [r2, #-247]	@ movhi
  69:board/compal_e88/init.c **** 	reg = readw(IO_CNTL_REG);
 111              		.loc 1 69 0
 112 00e4 C8309FE5 		ldr	r3, .L3+8
 113              	.LVL6:
  70:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
 114              		.loc 1 70 0
 115 00e8 C8209FE5 		ldr	r2, .L3+12
  69:board/compal_e88/init.c **** 	reg = readw(IO_CNTL_REG);
 116              		.loc 1 69 0
 117 00ec BB1F53E1 		ldrh	r1, [r3, #-251]
 118              	.LVL7:
  70:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
 119              		.loc 1 70 0
 120 00f0 022001E0 		and	r2, r1, r2
 121              	.LVL8:
  71:board/compal_e88/init.c **** 	writew(reg, IO_CNTL_REG);
 122              		.loc 1 71 0
 123 00f4 BB2F43E1 		strh	r2, [r3, #-251]	@ movhi
  75:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
 124              		.loc 1 75 0
 125 00f8 B8209FE5 		ldr	r2, .L3+12
 126              	.LVL9:
  74:board/compal_e88/init.c **** 	reg = readw(ARMIO_LATCH_OUT);
 127              		.loc 1 74 0
 128 00fc BD1F53E1 		ldrh	r1, [r3, #-253]
 129              	.LVL10:
  75:board/compal_e88/init.c **** 	reg &= ~(1 << 3);
 130              		.loc 1 75 0
 131 0100 022001E0 		and	r2, r1, r2
 132              	.LVL11:
  76:board/compal_e88/init.c **** 	writew(reg, ARMIO_LATCH_OUT);
 133              		.loc 1 76 0
 134 0104 BD2F43E1 		strh	r2, [r3, #-253]	@ movhi
 135              	.LBE7:
 136              	.LBE6:
  95:board/compal_e88/init.c **** 
  96:board/compal_e88/init.c **** 	/* Initialize board-specific GPIO */
  97:board/compal_e88/init.c **** 	board_io_init();
  98:board/compal_e88/init.c **** 
  99:board/compal_e88/init.c **** 	/* Enable bootrom mapping to route exception vectors to RAM */
 100:board/compal_e88/init.c **** 	calypso_bootrom(with_irq);
 137              		.loc 1 100 0
 138 0108 0400A0E1 		mov	r0, r4
 139 010c FEFFFFEB 		bl	calypso_bootrom
 140              	.LVL12:
 101:board/compal_e88/init.c **** 	calypso_exceptions_install();
 141              		.loc 1 101 0
 142 0110 FEFFFFEB 		bl	calypso_exceptions_install
 102:board/compal_e88/init.c **** 
 103:board/compal_e88/init.c **** 	/* Initialize interrupt controller */
 104:board/compal_e88/init.c **** 	if (with_irq)
 143              		.loc 1 104 0
 144 0114 000054E3 		cmp	r4, #0
 105:board/compal_e88/init.c **** 		irq_init();
 145              		.loc 1 105 0
 146 0118 FEFFFF1B 		blne	irq_init
 147              	.L2:
 106:board/compal_e88/init.c **** 
 107:board/compal_e88/init.c **** 	sercomm_bind_uart(UART_MODEM);
 148              		.loc 1 107 0
 149 011c 0100A0E3 		mov	r0, #1
 150 0120 FEFFFFEB 		bl	sercomm_bind_uart
 108:board/compal_e88/init.c **** 	cons_bind_uart(UART_IRDA);
 109:board/compal_e88/init.c **** 
 110:board/compal_e88/init.c **** 	/* initialize MODEM UART to be used for sercomm */
 111:board/compal_e88/init.c **** 	uart_init(UART_MODEM, with_irq);
 151              		.loc 1 111 0
 152 0124 FF4004E2 		and	r4, r4, #255
 153              	.LVL13:
 108:board/compal_e88/init.c **** 	cons_bind_uart(UART_IRDA);
 154              		.loc 1 108 0
 155 0128 0000A0E3 		mov	r0, #0
 156 012c FEFFFFEB 		bl	cons_bind_uart
 157              		.loc 1 111 0
 158 0130 0410A0E1 		mov	r1, r4
 159 0134 0100A0E3 		mov	r0, #1
 160 0138 FEFFFFEB 		bl	uart_init
 112:board/compal_e88/init.c **** 	uart_baudrate(UART_MODEM, UART_115200);
 161              		.loc 1 112 0
 162 013c 0210A0E3 		mov	r1, #2
 163 0140 0100A0E3 		mov	r0, #1
 164 0144 FEFFFFEB 		bl	uart_baudrate
 113:board/compal_e88/init.c **** 
 114:board/compal_e88/init.c **** 	/* Initialize IRDA UART to be used for old-school console code.
 115:board/compal_e88/init.c **** 	 * note: IRDA uart only accessible on C115 and C117 PCB */
 116:board/compal_e88/init.c **** 	uart_init(UART_IRDA, with_irq);
 165              		.loc 1 116 0
 166 0148 0410A0E1 		mov	r1, r4
 167 014c 0000A0E3 		mov	r0, #0
 168 0150 FEFFFFEB 		bl	uart_init
 117:board/compal_e88/init.c **** 	uart_baudrate(UART_IRDA, UART_115200);
 169              		.loc 1 117 0
 170 0154 0210A0E3 		mov	r1, #2
 171 0158 0000A0E3 		mov	r0, #0
 172 015c FEFFFFEB 		bl	uart_baudrate
 118:board/compal_e88/init.c **** 
 119:board/compal_e88/init.c **** 	/* Initialize hardware timers */
 120:board/compal_e88/init.c **** 	hwtimer_init();
 173              		.loc 1 120 0
 174 0160 FEFFFFEB 		bl	hwtimer_init
 121:board/compal_e88/init.c **** 
 122:board/compal_e88/init.c **** 	/* Initialize DMA controller */
 123:board/compal_e88/init.c **** 	dma_init();
 175              		.loc 1 123 0
 176 0164 FEFFFFEB 		bl	dma_init
 124:board/compal_e88/init.c **** 
 125:board/compal_e88/init.c **** 	/* Initialize real time clock */
 126:board/compal_e88/init.c **** 	rtc_init();
 177              		.loc 1 126 0
 178 0168 FEFFFFEB 		bl	rtc_init
 127:board/compal_e88/init.c **** 
 128:board/compal_e88/init.c **** 	/* Initialize system timers (uses hwtimer 2) */
 129:board/compal_e88/init.c **** 	timer_init();
 179              		.loc 1 129 0
 180 016c FEFFFFEB 		bl	timer_init
 181              	.LBB8:
 182              	.LBB9:
 183              		.file 2 "include/fb/framebuffer.h"
   1:include/fb/framebuffer.h **** #ifndef _FB_FRAMEBUFFER_H
   2:include/fb/framebuffer.h **** #define _FB_FRAMEBUFFER_H
   3:include/fb/framebuffer.h **** 
   4:include/fb/framebuffer.h **** #include <fb/font.h>
   5:include/fb/framebuffer.h **** #include <stdint.h>
   6:include/fb/framebuffer.h **** 
   7:include/fb/framebuffer.h **** /* color is encoded as <special><red><green><blue> */
   8:include/fb/framebuffer.h **** /* if a color is "special", then the RGB components most likely
   9:include/fb/framebuffer.h ****    don't make sense. Use "special" colours when you have to
  10:include/fb/framebuffer.h ****    mask out bits with transparency or you have to encode
  11:include/fb/framebuffer.h ****    colours in a fixed color palette... */
  12:include/fb/framebuffer.h **** 
  13:include/fb/framebuffer.h **** #define FB_COLOR_WHITE		0x00ffffffU
  14:include/fb/framebuffer.h **** #define FB_COLOR_BLACK		0x00000000U
  15:include/fb/framebuffer.h **** #define FB_COLOR_TRANSP		0x01ffffffU
  16:include/fb/framebuffer.h **** 
  17:include/fb/framebuffer.h **** #define FB_COLOR_RGB(r,g,b) ((((r) & 0xff)<<16)|(((g)&0xff)<<8)|((b)&0xff))
  18:include/fb/framebuffer.h **** #define FB_COLOR_RED		FB_COLOR_RGB(0xff,0x00,0x00)
  19:include/fb/framebuffer.h **** #define FB_COLOR_GREEN		FB_COLOR_RGB(0x00,0xff,0x00)
  20:include/fb/framebuffer.h **** #define FB_COLOR_BLUE		FB_COLOR_RGB(0x00,0x00,0xff)
  21:include/fb/framebuffer.h **** 
  22:include/fb/framebuffer.h **** /* encode */
  23:include/fb/framebuffer.h **** 
  24:include/fb/framebuffer.h **** /* decode */
  25:include/fb/framebuffer.h **** #define FB_COLOR_IS_SPECIAL(v)     (!!((v) & 0xff000000U))
  26:include/fb/framebuffer.h **** #define FB_COLOR_TO_R(v)		(((v)>>16) & 0xff)
  27:include/fb/framebuffer.h **** #define FB_COLOR_TO_G(v)		(((v)>> 8) & 0xff)
  28:include/fb/framebuffer.h **** #define FB_COLOR_TO_B(v)		( (v)      & 0xff)
  29:include/fb/framebuffer.h **** 
  30:include/fb/framebuffer.h **** struct framebuffer {
  31:include/fb/framebuffer.h **** 	char name[8];				// keep it short!
  32:include/fb/framebuffer.h **** 	void (*init)();				// (re)initialize
  33:include/fb/framebuffer.h **** 	void (*clear)();			// clear display
  34:include/fb/framebuffer.h **** 	void (*boxto)(uint16_t x,uint16_t y);	// draw box to xy
  35:include/fb/framebuffer.h **** 	void (*lineto)(uint16_t x,uint16_t y);	// draw line to xy
  36:include/fb/framebuffer.h **** 	int (*putstr)(char *c,int maxwidth);	// put text in current font to fb
  37:include/fb/framebuffer.h **** 	void (*flush)();			// flush changes
  38:include/fb/framebuffer.h **** 
  39:include/fb/framebuffer.h **** 	uint16_t width,height;			// width/height of fb
  40:include/fb/framebuffer.h **** 	uint16_t cursor_x,cursor_y;		// current cursor
  41:include/fb/framebuffer.h **** 	uint32_t fg_color,bg_color;		// current fg/bg color
  42:include/fb/framebuffer.h **** 	enum fb_font_id font;			// current font
  43:include/fb/framebuffer.h **** };
  44:include/fb/framebuffer.h **** 
  45:include/fb/framebuffer.h **** /* there is a single framebuffer, the specific driver defines
  46:include/fb/framebuffer.h ****    the "framebuffer" symbol */
  47:include/fb/framebuffer.h **** extern struct framebuffer *framebuffer;
  48:include/fb/framebuffer.h **** 
  49:include/fb/framebuffer.h **** static inline void
  50:include/fb/framebuffer.h **** fb_init(){
  51:include/fb/framebuffer.h **** 	framebuffer->init();
 184              		.loc 2 51 0
 185 0170 44309FE5 		ldr	r3, .L3+16
 186 0174 003093E5 		ldr	r3, [r3, #0]
 187 0178 0FE0A0E1 		mov	lr, pc
 188 017c 08F093E5 		ldr	pc, [r3, #8]
 189              	.LBE9:
 190              	.LBE8:
 130:board/compal_e88/init.c **** 
 131:board/compal_e88/init.c **** 	/* Initialize LCD driver (uses I2C) and backlight */
 132:board/compal_e88/init.c **** 	fb_init();
 133:board/compal_e88/init.c **** 
 134:board/compal_e88/init.c **** 	bl_mode_pwl(1);
 191              		.loc 1 134 0
 192 0180 0100A0E3 		mov	r0, #1
 193 0184 FEFFFFEB 		bl	bl_mode_pwl
 135:board/compal_e88/init.c **** 	bl_level(50);
 194              		.loc 1 135 0
 195 0188 3200A0E3 		mov	r0, #50
 196 018c FEFFFFEB 		bl	bl_level
 136:board/compal_e88/init.c **** 
 137:board/compal_e88/init.c **** 	/* Initialize keypad driver */
 138:board/compal_e88/init.c **** 	keypad_init(keymap, with_irq);
 197              		.loc 1 138 0
 198 0190 28009FE5 		ldr	r0, .L3+20
 199 0194 0410A0E1 		mov	r1, r4
 200 0198 FEFFFFEB 		bl	keypad_init
 139:board/compal_e88/init.c **** 
 140:board/compal_e88/init.c **** 	/* Initialize ABB driver (uses SPI) */
 141:board/compal_e88/init.c **** 	twl3025_init();
 201              		.loc 1 141 0
 202 019c FEFFFFEB 		bl	twl3025_init
 142:board/compal_e88/init.c **** 
 143:board/compal_e88/init.c **** 	/* Initialize the charging controller */
 144:board/compal_e88/init.c **** 	battery_compal_e88_init();
 145:board/compal_e88/init.c **** }
 203              		.loc 1 145 0
 204 01a0 0CD08DE2 		add	sp, sp, #12
 205 01a4 1040BDE8 		ldmfd	sp!, {r4, lr}
 144:board/compal_e88/init.c **** 	battery_compal_e88_init();
 206              		.loc 1 144 0
 207 01a8 FEFFFFEA 		b	battery_compal_e88_init
 208              	.L4:
 209              		.align	2
 210              	.L3:
 211 01ac FFF0FEFF 		.word	-69377
 212 01b0 FFFB0000 		.word	64511
 213 01b4 FF48FEFF 		.word	-112385
 214 01b8 F7FF0000 		.word	65527
 215 01bc 00000000 		.word	framebuffer
 216 01c0 00000000 		.word	.LANCHOR0
 217              		.cfi_endproc
 218              	.LFE53:
 220              		.section	.rodata
 221              		.align	2
 222              		.set	.LANCHOR0,. + 0
 225              	keymap:
 226 0000 0D       		.byte	13
 227 0001 0F       		.byte	15
 228 0002 0A       		.byte	10
 229 0003 05       		.byte	5
 230 0004 10       		.byte	16
 231 0005 0B       		.byte	11
 232 0006 06       		.byte	6
 233 0007 11       		.byte	17
 234 0008 0C       		.byte	12
 235 0009 07       		.byte	7
 236 000a 12       		.byte	18
 237 000b 08       		.byte	8
 238 000c 0E       		.byte	14
 239 000d 13       		.byte	19
 240 000e 09       		.byte	9
 241 000f 01       		.byte	1
 242 0010 02       		.byte	2
 243 0011 03       		.byte	3
 244 0012 04       		.byte	4
 245 0013 00       		.byte	0
 246 0014 18       		.byte	24
 247 0015 1E       		.byte	30
 248 0016 1F       		.byte	31
 249 0017 00       		.text
 250              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:0000000000000000 init.c
     /tmp/ccf0mXtK.s:12     .text.board_init:0000000000000000 $a
     /tmp/ccf0mXtK.s:15     .text.board_init:0000000000000000 board_init
     /tmp/ccf0mXtK.s:211    .text.board_init:00000000000001ac $d
     /tmp/ccf0mXtK.s:221    .rodata:0000000000000000 $d
     /tmp/ccf0mXtK.s:225    .rodata:0000000000000000 keymap
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
calypso_mem_cfg
calypso_clock_set
calypso_rhea_cfg
calypso_bootrom
calypso_exceptions_install
irq_init
sercomm_bind_uart
cons_bind_uart
uart_init
uart_baudrate
hwtimer_init
dma_init
rtc_init
timer_init
bl_mode_pwl
bl_level
keypad_init
twl3025_init
battery_compal_e88_init
framebuffer
